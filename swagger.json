{
    "x-generator": "NSwag v13.9.4.0 (NJsonSchema v10.3.2.0 (Newtonsoft.Json v13.0.0.0))",
    "swagger": "2.0",
    "info": {
      "title": "MobiControl REST API Reference",
      "description": "<p>Integration of common device lifecycle management functions within your organization’s mobility workflow is made possible with the MobiControl REST API that is exposed over HTTPS as a set of <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a>ful web services.<br><br>The MobiControl REST API is designed to have predictable resource-oriented URLs and standard HTTP response codes. The API is protected by <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749\">OAuth2</a> and is <a target=\"_blank\" href=\"http://swagger.io/\">swagger</a>-specification compliant for integration with off-the-shelf HTTP clients.<br><br>This documentation provides you with detailed information on the MobiControl REST API available with your MobiControl environment, and gives you the ability to interact with the API calls on this page to test their functionality.<br><br><b id=\"Warning1\" >WARNING: API calls sent from this page are executed against your MobiControl environment. Exercise extreme caution when executing each API call against a production environment and/or device.</b><br><br>For consultation and/or support of your MobiControl integration please <a target=\"_blank\" href=\"http://www.soti.net/about-us/contact\">contact</a> SOTI’s Professional Services and Support teams.</p> Please note that all API calls utilize double encoding, unless otherwise stated in the corresponding API call documentation.</p>\r\n<span class=\"info_title\"><br><H2><b>Authentication</b></H2></span>\r\n<span class=\"info_description markdown\">\r\n   <p>MobiControl API calls are protected by <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749\">OAuth2 (RFC 6749)</a>, and support both <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749#section-4.3\">Resource Owner</a>, and <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749#section-4.1\">Authorization Code</a> grant types. In both scenarios the \"Resource Owner\" is a named MobiControl administrator account and the \"authorization server\" is MobiControl which will authenticate users locally, or if configured through a 3rd party identity provider.<br><br>To call the MobiControl API successfully, you must authenticate to the authorization server and receive an access token to use in subsequent API calls.<br><br> At a minimum you must: <ul><li>&nbsp;&nbsp;&nbsp;Possess a MobiControl administrator’s username and password that is either provided directly to MobiControl, or to a configured identity provider</li><li>&nbsp;&nbsp;&nbsp;Have added your application as an API client, and possess its Client ID and Client secret.</li></ul></p>\r\n</span>\r\n<br>\r\n<H2><b>API Client</b></H2>\r\n<span class=\"info_description markdown\">\r\n   <p>An API client is a combination of a Client ID and a Client Secret that uniquely identifies your integrated application to MobiControl and authorizes it to make API calls. It is required in addition to the MobiControl administrator credentials when obtaining an access token to authenticate subsequent API calls.<br><br>SOTI recommends that you register each integrated application you develop independently so the application can be independently revoked if it is compromised.</p>\r\n</span>\r\n<br><br><H3><b>Adding an API Client</b></H3>\r\n<span class=\"info_description markdown\">\r\n   <p>To add an API client, you must have administrative access to the Windows server where MobiControl is hosted. If you are a MobiControl cloud customer, please <a target=\"_blank\" href=\"http://www.soti.net/about-us/contact\">contact</a> SOTI support to add an API client.<br><br>You can add an API client by launching the MobiControl Administration Utility (MCAdmin) through the command line with additional parameters.<ol><li>&nbsp;&nbsp;&nbsp;Launch a Windows command prompt with administrative privileges.</li><li>&nbsp;&nbsp;&nbsp;Navigate to the MobiControl installation directory.</li><li>&nbsp;&nbsp;&nbsp;Execute the following command where:</li><ul style=\"list-style-type:disc;\"><li>&nbsp;&nbsp;&nbsp;<i>API client name</i> is a reference to your integrated application</li><li>&nbsp;&nbsp;&nbsp;<i>API secret</i> (optional) is the passphrase that will be used to protect the API. This should be stored securely and is irrecoverable if lost. An API secret will be generated for you if one was not provided.</li><li>&nbsp;&nbsp;&nbsp;<i>Redirect URL</i> is the destination endpoint. The authorization server will return the user agent here</li></ul></ol><br></p>\r\n</span>\r\n<pre>MCAdmin.exe APIClientAdd -n:{API client name} [-p:{API secret}] [-r:{Redirect URI}]</pre>\r\n<span class=\"info_description markdown\">\r\n   <p><br>If MCAdmin was started with the <i>APIClientAdd</i> command and the correct parameters, a summary of the executed operation will be presented that reports the Client ID and Client ecret that were generated. For example:<br><br></p>\r\n</span>\r\n<pre>API Client was added\r\nClient ID: a9326fd5872f4a66b6bab3e2c8065e63\r\nClient secret: 19DzUX7K7ObjwPRFbxZanwVQFsUcqMak</pre>\r\n<br><br><H3><b>Removing an API Client</b></H3>\r\n<span class=\"info_description markdown\">\r\n   <p>If you want to revoke the ability for an API client to make API calls, you can use the <i>APIClientRemove</i> command.<br><ol><li>&nbsp;&nbsp;&nbsp;Launch a Windows command prompt with administrative privileges.</li><li>&nbsp;&nbsp;&nbsp;Navigate to the MobiContorl installation directory.</li><li>&nbsp;&nbsp;&nbsp;Execute the following command where <i>client ID</i> is the ID for your integrated application.</li></ol></p>\r\n</span>\r\n<pre>MCAdmin.exe APIClientRemove -i:{client id}</pre>\r\n<span class=\"info_description markdown\">\r\n   <p><br>If you started MCAdmin with the <i>APIClientRemove</i> command and the correct parameters, a summary of the executed operation will be presented that reports whether the client was removed successfully.</p>\r\n</span>\r\n<br>\r\n<H2><b>Access Token (Also Known As “bearer”)</b></H2>\r\n<span class=\"info_description markdown\">\r\n   <p>Before executing a resource-based API call, you must first obtain an access token by making a specific request to the authorization server.<br><br>For Resource Owner grant type, the authorization server for requesting access tokens is hosted at <i>/token</i> and can be called directly with the administrative credentials.<br><br>For example: https://server.domain.tld/MobiControl/api/token.<br><br>For Authorization Code grant type you must first make a GET request to <i>/authorize</i> that contains your Client ID. Your may preserve the state of your application in the state property of the request<br><br>For example:<br><br>GET <br>https://server.domain.tld/mobicontrol/oauth/authorize?response_type=code&client_id=abc&state=xyz<br><br>If an external identity provider is configured you will be redirected to their login page. Upon successful authentication you will be provided with an authorization code to exchange for an access token. If an external identity provider is not configured, you will be redirected to MobiControl's login page.<br><br>Access tokens are time sensitive with the validity contained in the response. In case of expiration, the value used by the client must be refreshed with another token request.</p>\r\n</span>\r\n<br><H3><b>Request an Access Token</b></H3>\r\n<span class=\"info_description markdown\">\r\n   <p>Make a POST request that includes an <i>Authorization</i>: header containing the API Client ID and Secret, and the body containing either MobiControl administrator credentials or an authorization code.<br><br>The Authorization header field must be constructed as follows:<ol><li>&nbsp;&nbsp;&nbsp;Combine the <i>client ID</i> and <i>client secret</i> into a string separated by a colon. For example: <i>ClientID:ClientSecret</i>. Note that these fields cannot otherwise contain a colon.</li><li>&nbsp;&nbsp;&nbsp;Encode the resulting string using the RFC2045-MIME variant of <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Base64\">Base64</a>, except not limited to 76 characters per line.</li><li>&nbsp;&nbsp;&nbsp;Prefix <i>Basic</i> before the encoded string.</li><p>The body of the request must contain the following parameters and will depend on your grant type.</p></ol> For <b>Resource Owner</b> grant type:<ul><li>&nbsp;&nbsp;&nbsp;<i>grant_type</i>: set to <i>password</i></li><li>&nbsp;&nbsp;&nbsp;<i>username</i>: of the MobiControl administrator (<i>administrator</i> in the example below)</li><li>&nbsp;&nbsp;&nbsp;<i>password</i>: of the MobiControl administrator (<i>1</i> in the example below)</li></ul></p>\r\n</span>\r\n<pre>POST https://server.domain.tld/MobiControl/api/token HTTP/1.1\r\nHost: server.domain.tld\r\nAuthorization: Basic QXBwbGljYXRpb24xOkFwcGxpY2F0aW9uMVBhc3N3b3Jk\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 53\r\ngrant_type=password&username=Administrator&password=1</pre>\r\n<span class=\"info_description markdown\">\r\n    <p>For <b>Authorization Code</b> grant type:<ul><li>&nbsp;&nbsp;&nbsp;<i>grant_type</i>: set to <i>authorization_code&=[authorization code]</i></li></ul></p>\r\n</span>\r\n<pre>POST https://server.domain.tld/MobiControl/api/token HTTP/1.1\r\nHost: server.domain.tld\r\nAuthorization: Basic QXBwbGljYXRpb24xOkFwcGxpY2F0aW9uMVBhc3N3b3Jk\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 53\r\ngrant_type=authorization_code&code=[authorization code]</pre>\r\n<span class=\"info_description markdown\">\r\n   <p><br>In response, the output will contain the following properties:<ul><li>&nbsp;&nbsp;&nbsp;<i>access_token</i>: The access token to be used in every subsequent API request.</li><li>&nbsp;&nbsp;&nbsp;<i>token_type</i>: The type of token. Will always be set to <i>bearer</i>.</li><li>&nbsp;&nbsp;&nbsp;<i>expires_in</i>: The value in seconds of the token validity. If the token is expired, the client needs to issue an additional token request to retrieve a new token value.</li><p>Example of the response:</p></ul></p>\r\n</span>\r\n<pre>{\"access_token\":\"AAEAAK0OiDDPciqCR5sZ6Nu6c8wIvURVwCTxslETUGp\r\nxDfmf6uzkXAg9MKzfJqm4k9ADBYIaOsT20wllKWQgQvH5sYkaIWxtOZ9OntAkxwPn\r\nwBRO7rNqCGj9yfg-COpYCdr2GEMl5SzaAPx2_WBQ3SwhKuGWuuDxVMzRWdAW1r36J\r\nY6N9Fp-rYK3CtoNs4ibqswOs7qSPzuwo_K9l9_c5oCz7d6qJxJdhKoh3MC8vqFXxJ\r\nSXIEAwXnL7KWtrhanIcj_m0abZWfvR7e5npIHDcHH-bfVmc6wp-SsKJ-FyG7_zg2F\r\nd8HjvoqivTqRO5i1RSpaPpOa318g2FMIw-Lh6I5K0FAOUAQAAAAEAABW2-Dr_0-vr\r\nbZGMubz8ZGqpo6Z67n3JqBIFPgMOPotNHVJSUc_2HbozYt7smfuCIeIvE0gd84ti3\r\nLBJXSkiOBPJmxp-WhdC1IbB7y2W5G8D4l5MD3VbDTz6ov_VnZGpRc-h7Q9Knn1Vyk\r\nQTHo4NknDUdVkqDe3VHQsjtn12QINEzb04Ch-RpudIHnKG-P-jhIIszo2M0_Po8_U\r\naHVwrpPtwhUCzqOU_Gus1nS694dP-8rXqjtbLxh_5GB1iQQBitMd-VgD8XzQrLqqH\r\na6HcK1C41ZyA1Ot2_47vOKNrf_Mg6Ig8quYMpUypOdwFl9_Nb815TN-eSuDwQsSKn\r\nSnHDvTH8bSz9O0vHoiPexh2Weuf2N0KGZUlpC0OLy3oRb0d_aBOUdpnoIJ59Gc95H\r\n7yTAnNPRuBnX0wDnvTFNkuN7ezKzfP2rNmfKPeoj0Xyf2FhGiSHgBJUuNpWwGJkz5\r\n0tVX5nPl42Ow2ua9pLZqPg-GJQnmXwukVgV6w4dDoRsFVYbrRSdp-quU4pyNfj987\r\nGWM\",\"token_type\":\"bearer\",\"expires_in\":3600}</pre>\r\n<br><H3><b>Using an Access Token</b></H3>\r\n<span class=\"info_description markdown\">\r\n   <p>After retrieving an access token it can be used to authenticate every other API call by including it in the Authorization: header of that call with the type Bearer.<br><br>Example of a subsequent API request:<br><br></p>\r\n</span>\r\n<pre>GET https://server.domain.tld/MobiControl/api/devicegroups HTTP/1.1\r\nHost: server.domain.tld\r\nAuthorization: Bearer AAEAAK0OiDDPciqCR5sZ6Nu6c8wIvURVwCTxslETUGp\r\nxDfmf6uzkXAg9MKzfJqm4k9ADBYIaOsT20wllKWQgQvH5sYkaIWxtOZ9OntAkxwPn\r\nwBRO7rNqCGj9yfg-COpYCdr2GEMl5SzaAPx2_WBQ3SwhKuGWuuDxVMzRWdAW1r36J\r\nY6N9Fp-rYK3CtoNs4ibqswOs7qSPzuwo_K9l9_c5oCz7d6qJxJdhKoh3MC8vqFXxJ\r\nSXIEAwXnL7KWtrhanIcj_m0abZWfvR7e5npIHDcHH-bfVmc6wp-SsKJ-FyG7_zg2F\r\nd8HjvoqivTqRO5i1RSpaPpOa318g2FMIw-Lh6I5K0FAOUAQAAAAEAABW2-Dr_0-vr\r\nbZGMubz8ZGqpo6Z67n3JqBIFPgMOPotNHVJSUc_2HbozYt7smfuCIeIvE0gd84ti3\r\nLBJXSkiOBPJmxp-WhdC1IbB7y2W5G8D4l5MD3VbDTz6ov_VnZGpRc-h7Q9Knn1Vyk\r\nQTHo4NknDUdVkqDe3VHQsjtn12QINEzb04Ch-RpudIHnKG-P-jhIIszo2M0_Po8_U\r\naHVwrpPtwhUCzqOU_Gus1nS694dP-8rXqjtbLxh_5GB1iQQBitMd-VgD8XzQrLqqH\r\na6HcK1C41ZyA1Ot2_47vOKNrf_Mg6Ig8quYMpUypOdwFl9_Nb815TN-eSuDwQsSKn\r\nSnHDvTH8bSz9O0vHoiPexh2Weuf2N0KGZUlpC0OLy3oRb0d_aBOUdpnoIJ59Gc95H\r\n7yTAnNPRuBnX0wDnvTFNkuN7ezKzfP2rNmfKPeoj0Xyf2FhGiSHgBJUuNpWwGJkz5\r\n0tVX5nPl42Ow2ua9pLZqPg-GJQnmXwukVgV6w4dDoRsFVYbrRSdp-quU4pyNfj987\r\nGWM\r\n</pre>\r\n<H2><b>API Errors</b></H2>\r\n<span class=\"info_description markdown\">\r\n   <p>MobiControl uses conventional HTTP response codes to indicate the success or failure of an API request. In general, codes in the <i>2xx </i> range indicate success, codes in the <i>4xx</i> range indicate an error resulted from the information provided, and codes in the <i>5xx</i> range may indicate an error with MobiControl that cannot be resolved by changing the request.<br><br>For troubleshooting purposes, the following provides guidance on the conditions under which MobiControl will return a respective HTTP error code.</p>\r\n</span>\r\n<H3><b>HTTP 400</b></H3>\r\n<span class=\"info_description markdown\">\r\n   <p>This code is generally used to reflect a contract validation error. The data provided in the request was not compliant with the expected input of the method. Normally this is an integration error and can only be resolved programmatically on the client side. Check to ensure the parameters, values, and syntax conform to the expected model.<br><br>In addition to the HTTP 400 response, the body will contain a single error object that reports all the violations in the following format:\r\n   <ul><li>&nbsp;&nbsp;&nbsp;<b>ErrorCode</b> (mandatory): set to 0.</li><li>&nbsp;&nbsp;&nbsp;<b>ErrorMessage</b> (mandatory): the error message.</li><li>&nbsp;&nbsp;&nbsp;<b>Data[]</b> (optional): extra parameters needed to troubleshoot the problem.</li><li>&nbsp;&nbsp;&nbsp;<b>HelpLink</b> (optional): a link to possible troubleshooting steps.</li></ul></p>\r\n</span>\r\n<H3><b>HTTP 401 / HTTP 403</b></H3>\r\n<span class=\"info_description markdown\">\r\n   <p>These codes are security errors. These errors are generated when the login failed, or is required, or if the user is not authorized to perform the action requested.<br><br>In addition to the HTTP 401 or HTTP 403 response, the body will contain a single error object to report an error message:<ul><li>&nbsp;&nbsp;&nbsp;<b>ErrorMessage</b> (mandatory): the error message.</li></ul>Please note that the error message may be intentionally vague for security purposes. For additional information consult the environment’s Management Service log.</p>\r\n</span>\r\n<H3><b>HTTP 422</b></H3>\r\n<span class=\"info_description markdown\">\r\n   <p>This type of error is used to represent a business logic error, where the request is correct but it is not possible for the server to complete the request because it violates a logical condition. For example, trying to delete an object with dependencies that would prevent such an object from being deleted.<br><br>In addition to the HTTP 422 response, the body will contain a single error object in the following format:  <ul><li>&nbsp;&nbsp;&nbsp;<b>ErrorCode</b> (mandatory): set to 0.</li><li>&nbsp;&nbsp;&nbsp;<b>ErrorMessage</b> (mandatory): the error message.</li><li>&nbsp;&nbsp;&nbsp;<b>Data[]</b> (optional): extra parameters needed to troubleshoot the problem.</li><li>&nbsp;&nbsp;&nbsp;<b>HelpLink</b> (optional): a link to possible troubleshooting steps.</li></ul></p>\r\n</span>\r\n<H3><b>HTTP 500</b></H3>\r\n<span class=\"info_description markdown\">\r\n   <p>This type of error will be returned when the MobiControl server is unable to process a request.<br><br>In addition to the HTTP 500 response, the body will contain a single error object that reports an error message:<ul><li>&nbsp;&nbsp;&nbsp;<b>ErrorMessage</b> (mandatory): set to “Internal Server Error”.</li></ul>For additional information consult the environment’s Management Service log. Report these errors by <a target=\"_blank\" href=\"http://www.soti.net/about-us/contact\">contacting</a> the SOTI Support team, and include environmental details, the raw HTTP request, and Management Service logs.</p>\r\n</span>\r\n<H2><b>Pagination, Ordering, and Filtering</b></H2>\r\n<span class=\"info_description markdown\">\r\n   <p>Unless otherwise noted, MobiControl API resources have support for bulk fetches, to “list” all devices found in the environment for example.<br><br>These “list” API methods use cursor-based pagination, a common structure to define ordering, and property-based filtering which is defined as follows:<ul><li>&nbsp;&nbsp;&nbsp;<i>skip</i> (optional): where in the list you would like to begin. The value will tell the server to remove the first X records retrieved from the result.</li><li>&nbsp;&nbsp;&nbsp;<i>take</i> (optional): the size of the list you would like returned.</li><li>&nbsp;&nbsp;&nbsp;<i>order</i> (optional): the ordering criteria in the format <i>{direction (+/-)}{property name}</i>, where “+” is ascending and “-” is descending.</li><li>&nbsp;&nbsp;&nbsp;<i>filter</i> (optional): filter expression, the syntax is different for GET /api/devices/search endpoint (advanced search expressions) and GET /api/devices (name-value pairs)</li></ul>Example of /api/device/search query parameters: <br><br></p>\r\n</span>\r\n<pre>filter=Manufacturer%3D%27Apple%27&order=+osversion,-model&skip=20&take=10</pre>\r\n<span class=\"info_description markdown\">\r\n   <p><br>In the example above we're looking for devices manufactured by \"Apple\". The devices are first ordered ascending by OS version, then ordered descending by model. Then, the first 20 records are skipped and the next 10 records are returned.</p>\r\n</span>\r\n<H2><b>Resources and API Calls</b></H2>\r\n<span class=\"info_description markdown\">\r\n <p>The documentation that follows defines all endpoints, parameters and error messages available in the MobiControl REST API.<br><br>If you have a valid client ID, client secret, and MobiControl administrator credentials, you can test each API call by clicking the <b>Authorize</b> button on the lower right of this page.<br><br><b id=\"Warning2\" >WARNING: API calls sent from this page are executed against your MobiControl environment. Exercise extreme caution when executing each API call against a production environment and/or device.</b><br></p>\r\n</span>",
      "version": "2.0"
    },
    "host": "s095155.mobicontrolcloud.com",
    "basePath": "/mobicontrol/api",
    "schemes": [
      "https"
    ],
    "consumes": [
      "application/json",
      "text/json",
      "application/xml",
      "text/xml"
    ],
    "produces": [
      "application/json",
      "text/json",
      "application/xml",
      "text/xml"
    ],
    "paths": {
      "/configurations/android/DeploymentType": {
        "get": {
          "tags": [
            "Android Configuration"
          ],
          "summary": "Returns the deployment type for the Android devices",
          "description": "Returns the deployment type setting for the Android devices you want to manage\r\n                <br />Requires the caller be granted the \"Web Console Access\" permission\r\n                <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AndroidConfiguration_GetAllowedAndroidType",
          "responses": {
            "200": {
              "description": "Returns the Allowed Android Type",
              "schema": {
                "$ref": "#/definitions/AndroidDeploymentType"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Android Configuration"
          ],
          "summary": "Updates the deployment type for the Android devices",
          "description": "Updates the deployment type that fits best the Android devices you want to manage\r\n                <br />Requires the caller be granted the \"Manage Servers and Global Settings\" or \"Manage Enrollment Policies\" permission\r\n                <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AndroidConfiguration_SetAllowedAndroidType",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Define the values in key value format for the deployment type to be used for the android device management. Check Model for details.",
              "schema": {
                "$ref": "#/definitions/AndroidDeploymentType"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully update the deployment type for Android devices",
              "schema": {
                "$ref": "#/definitions/AndroidDeploymentType"
              }
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/configurations/android/samsungElmConfiguration": {
        "get": {
          "tags": [
            "Android Configuration"
          ],
          "summary": "Retrieve the samsung ELM configuration",
          "description": "This gets the samsung ELM configuration.\r\n                <br />Requires the caller be granted the \"Web Console Access\" permission\r\n                <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AndroidConfiguration_GetSamsungElmConfiguration",
          "responses": {
            "200": {
              "description": "Returns the samsung elm configuration",
              "schema": {
                "$ref": "#/definitions/SamsungElmConfiguration"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Android Configuration"
          ],
          "summary": "Update the samsung ELM configuration",
          "description": "This updates the samsung ELM configuration.\r\n                <br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission\r\n                <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AndroidConfiguration_UpdateSamsungElmConfiguration",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "The samsung elm configuration",
              "schema": {
                "$ref": "#/definitions/SamsungElmConfiguration"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully update the samsung elm configuration"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/configurations/android/samsungKpeConfiguration": {
        "get": {
          "tags": [
            "Android Configuration"
          ],
          "summary": "Retrieve the Samsung KPE configuration",
          "description": "This gets the Samsung KPE configuration.\r\n                <br />Requires the caller be granted the \"Web Console Access\" permission\r\n                <br />ConfigurationType value standard will be On-Cloud. ConfigurationType value Custom will be On-Premise.\r\n                <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "AndroidConfiguration_GetSamsungKpeConfiguration",
          "responses": {
            "200": {
              "description": "Returns the Samsung KPE configuration",
              "schema": {
                "$ref": "#/definitions/SamsungKpeConfiguration"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Android Configuration"
          ],
          "summary": "Update the Samsung KPE configuration",
          "description": "This updates the Samsung KPE configuration.\r\n                <br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission\r\n                <br />ConfigurationType value standard will be On-Cloud. ConfigurationType value Custom will be On-Premise.\r\n                <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "AndroidConfiguration_UpdateSamsungKpeConfiguration",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "The Samsung KPE configuration",
              "schema": {
                "$ref": "#/definitions/SamsungKpeConfiguration"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully update the Samsung KPE configuration"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/configurations/android/reEnrollment/deviceMatchCriteria": {
        "get": {
          "tags": [
            "Android Configuration"
          ],
          "summary": "Returns the mechanism to identify an Android device",
          "description": "Returns the mechanism to be used by MobiControl to identify an Android device during re-enrollment\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AndroidConfiguration_GetDeviceMatchCriteria",
          "responses": {
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Android Configuration"
          ],
          "summary": "Updates the mechanism to identify an Android device",
          "description": "Updates the mechanism to be used by MobiControl to identify an Android device during re-enrollment.\r\n            This API will Accept \"DeviceId\"=\"0\" or \"HardwareId\"=\"1\" any of the key or value and perform the respective operation\r\n            <br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AndroidConfiguration_UpdateDeviceMatchCriteria",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "contract to define the mechanism for device identification",
              "schema": {
                "$ref": "#/definitions/MatchDeviceCriteria"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully updated device match criteria"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/androidEnterpriseCertificates/{oem}": {
        "get": {
          "tags": [
            "Android Enterprise Certificates"
          ],
          "summary": "Gets Android Enterprise Migration certificate information for an OEM",
          "description": "Returns Android Enterprise Migration certificate information for an OEM. A single OEM can have multiple manufacturers e.g. Honeywell OEM can have 'Honeywell, Inc' or intermec or Honeywell. Zebra can have 'Zebra Technologies'. Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.4.2)</b>",
          "operationId": "AndroidEnterpriseCertificates_GetCertificate",
          "parameters": [
            {
              "type": "string",
              "name": "oem",
              "in": "path",
              "required": true,
              "description": "The Android OEM",
              "x-schema": {
                "$ref": "#/definitions/AndroidOEM"
              },
              "x-nullable": false,
              "enum": [
                "ACER",
                "AMAZON",
                "BQ",
                "CASIO",
                "CROSSMATCH",
                "DATALOGIC",
                "DRS",
                "ELO",
                "GARMIN",
                "GENERIC",
                "GETAC",
                "GOOGLE",
                "HONEYWELL",
                "HUAWEI",
                "HUAWEIEMUI",
                "INTERMEC",
                "JANAM",
                "KYOCERA",
                "KYOCERAPS",
                "LENOVO",
                "LG",
                "M3",
                "Matsunichi",
                "MOTOROLA",
                "PANASONIC",
                "PIDION",
                "POINTMOBILE",
                "SAMSUNG",
                "SONIM",
                "SONY",
                "SOTI",
                "UNITECH",
                "UROVO",
                "WORKMATE",
                "ZEBRA"
              ],
              "x-enumType": "AndroidOEM"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a single certificate information of the OEM",
              "schema": {
                "$ref": "#/definitions/AndroidEnterpriseCertificateInfo"
              }
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Android Enterprise Certificates"
          ],
          "summary": "Uploads Android Enterprise Migration Certificate for an OEM",
          "description": "Uploads Android Enterprise Migration Certificate for an OEM. A single OEM can have multiple manufacturers e.g. Honeywell OEM can have 'Honeywell, Inc' or intermec or Honeywell. Zebra can have 'Zebra Technologies'. Requires the caller be granted the \"Global Setting\" permission.<br /><b>(Available Since MobiControl v14.4.2)</b>",
          "operationId": "AndroidEnterpriseCertificates_UploadCertificate",
          "parameters": [
            {
              "type": "string",
              "name": "oem",
              "in": "path",
              "required": true,
              "description": "The Android OEM",
              "x-schema": {
                "$ref": "#/definitions/AndroidOEM"
              },
              "x-nullable": false,
              "enum": [
                "ACER",
                "AMAZON",
                "BQ",
                "CASIO",
                "CROSSMATCH",
                "DATALOGIC",
                "DRS",
                "ELO",
                "GARMIN",
                "GENERIC",
                "GETAC",
                "GOOGLE",
                "HONEYWELL",
                "HUAWEI",
                "HUAWEIEMUI",
                "INTERMEC",
                "JANAM",
                "KYOCERA",
                "KYOCERAPS",
                "LENOVO",
                "LG",
                "M3",
                "Matsunichi",
                "MOTOROLA",
                "PANASONIC",
                "PIDION",
                "POINTMOBILE",
                "SAMSUNG",
                "SONIM",
                "SONY",
                "SOTI",
                "UNITECH",
                "UROVO",
                "WORKMATE",
                "ZEBRA"
              ],
              "x-enumType": "AndroidOEM"
            }
          ],
          "responses": {
            "204": {
              "description": "File was uploaded successfully",
              "schema": {
                "$ref": "#/definitions/AndroidEnterpriseCertificateInfo"
              }
            },
            "400": {
              "description": "Bad request, i.e. invalid file or file content"
            },
            "403": {
              "description": "Unauthorized access"
            },
            "415": {
              "description": "Unsupported content media type"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/branding/images/{type}": {
        "get": {
          "tags": [
            "Branding"
          ],
          "summary": "Returns the Branding image",
          "description": "Returns the Branding image<br />Note: Returns HttpResponseMessage with https code and image-content as content<br />Requires the caller be granted the \"Web Console Access\" permission <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Branding_GetImage",
          "parameters": [
            {
              "type": "string",
              "name": "type",
              "in": "path",
              "required": true,
              "description": "Type of BrandingImage",
              "x-schema": {
                "$ref": "#/definitions/BrandingImages"
              },
              "x-nullable": false,
              "enum": [
                "SelfServicePortalLogo",
                "EnrollmentPortalLogo",
                "LoginPortalLogo",
                "AdminConsolePortalLogo"
              ],
              "x-enumType": "BrandingImages"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed"
            },
            "404": {
              "description": "Resource not found (No image content)"
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Branding"
          ],
          "summary": "Deletes the Branding image",
          "description": "Deletes the specified Branding image<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission.<br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Branding_DeleteImage",
          "parameters": [
            {
              "type": "string",
              "name": "type",
              "in": "path",
              "required": true,
              "description": "Type of BrandingImage.",
              "x-schema": {
                "$ref": "#/definitions/BrandingImages"
              },
              "x-nullable": false,
              "enum": [
                "SelfServicePortalLogo",
                "EnrollmentPortalLogo",
                "LoginPortalLogo",
                "AdminConsolePortalLogo"
              ],
              "x-enumType": "BrandingImages"
            }
          ],
          "responses": {
            "204": {
              "description": "Operation Successful"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>7100 - Custom logo deletion not allowed</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Branding"
          ],
          "summary": "Updates the Branding image",
          "description": "<br />Uploads an image that can be used in different Portals for branding. This also supports replacing the existing image.<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission.<br /><b>(Available Since MobiControl v15.4.0)</b><br /><br />Uploads an image that can be used in different Portals for branding. It will Upload an image or Update in case an image alrady exists.                <br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />Boundary length must be set to less than or equal to 11 to prevent internal server errors.<br />Multipart request body must contain the following parts:<br /><ol><li>image metadata - Contains json-formatted image information with Content-Type: <pre>image/jpeg.metadata+json</pre></li><li>image file - Contains Base64 or encoded binary image file with Content-Type: <pre>image/jpeg</pre><br />Allowed Content type for images (image/png, image/gif, image/jpg, image/jpeg)  Optional headers <br />Content-Type-Encoding: base64 or binary<br />Content-Disposition: attachment; filename=\"{image-filename}\"<br /><br /></li></ol>Currently, the maximum size of image file to be uploaded when using this endpoint is <u>1 MB</u>.<br /><br />The example below shows image upload request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: image/jpeg.metadata+json<br />                 --foo_bar_baz Content-Type: image/jpeg Content-Transfer-Encoding: Binary Content-Disposition: attachment; filename=\"image_file_name.jpeg\"<br />Binary-encoded image data --foo_bar_baz--</pre><br />",
          "operationId": "Branding_SaveImage",
          "parameters": [
            {
              "type": "string",
              "name": "type",
              "in": "path",
              "required": true,
              "description": "Type of BrandingImage",
              "x-schema": {
                "$ref": "#/definitions/BrandingImages"
              },
              "x-nullable": false,
              "enum": [
                "SelfServicePortalLogo",
                "EnrollmentPortalLogo",
                "LoginPortalLogo",
                "AdminConsolePortalLogo"
              ],
              "x-enumType": "BrandingImages"
            }
          ],
          "responses": {
            "201": {
              "description": "Image uploaded successfully",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed ie. Invalid image or file contents or metadata"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            },
            "415": {
              "description": "Unsupported content media type"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/compliancepolicies": {
        "post": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Create a new compliance policy",
          "description": "Creates a compliance policy as specified. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br />When the DeviceFamily is iOS, both iOS and macOS devices are included.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_CreateCompliancePolicy",
          "parameters": [
            {
              "name": "policy",
              "in": "body",
              "required": true,
              "description": "Details of compliance policy to be created",
              "schema": {
                "$ref": "#/definitions/CompliancePolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "New compliance policy created",
              "schema": {
                "$ref": "#/definitions/CompliancePolicySummary"
              }
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Retrieve all compliance policies from the server",
          "description": "Retrieves all compliance policies from the server. Requires the caller be granted \"View Compliance Policies\" permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_GetCompliancePolicies",
          "parameters": [
            {
              "type": "array",
              "name": "families",
              "in": "query",
              "description": "If specified, return only policies for the selected families.<br />When iOS is selected, both iOS and macOS devices will be targeted.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/ComplianceDeviceFamily"
              },
              "x-enumType": "ComplianceDeviceFamily"
            },
            {
              "type": "string",
              "name": "nameContains",
              "in": "query",
              "description": "If specified, return only policies where the name contains the specified string",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "statuses",
              "in": "query",
              "description": "If specified, return only policies having the selected status(es)",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/CompliancePolicyStatus"
              },
              "x-enumType": "CompliancePolicyStatus"
            },
            {
              "type": "boolean",
              "name": "isAssigned",
              "in": "query",
              "description": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of compliance policies",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CompliancePolicySummary"
                }
              }
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/compliancepolicies/{referenceId}": {
        "delete": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Delete a compliance policy by reference Id.",
          "description": "Delete a compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_DeleteCompliancePolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the policy",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Policy has been deleted"
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Get a single compliance policy by referenceId",
          "description": "Retrieves details about a compliance policy. Requires the caller be granted \"View Compliance Policies\" permission.<br />When the DeviceFamily is iOS, both iOS and macOS devices are included.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_GetCompliancePolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the policy",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Policy returned",
              "schema": {
                "$ref": "#/definitions/CompliancePolicySummary"
              }
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Update an existing compliance policy",
          "description": "Updates a compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br />When the DeviceFamily is iOS, both iOS and macOS devices are included.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_UpdateCompliancePolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the policy",
              "x-nullable": false
            },
            {
              "name": "policy",
              "in": "body",
              "required": true,
              "description": "Details of the updated compliance policy",
              "schema": {
                "$ref": "#/definitions/CompliancePolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Policy has been updated",
              "schema": {
                "$ref": "#/definitions/CompliancePolicySummary"
              }
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/compliancepolicies/{referenceId}/assignment": {
        "get": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Get the assignment information about a compliance policy",
          "description": "Get assignment information of a policy. Requires the caller be granted \"View Compliance Policies\" permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_GetAssignmentInfo",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the policy",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Assignment information has been retrieved",
              "schema": {
                "$ref": "#/definitions/CompliancePolicyAssignmentSummary"
              }
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Update the assignment of a compliance policy",
          "description": "Updates policy assignment. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_UpdateAssignmentInfo",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the policy",
              "x-nullable": false
            },
            {
              "name": "assignment",
              "in": "body",
              "required": true,
              "description": "Assignment information",
              "schema": {
                "$ref": "#/definitions/CompliancePolicyAssignment"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Assignment information has been updated",
              "schema": {
                "$ref": "#/definitions/CompliancePolicyAssignmentSummary"
              }
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Delete the assignment of a compliance policy",
          "description": "Deletes policy assignment. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_DeleteAssignment",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the policy",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Assignment information has been deleted"
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/compliancepolicies/{referenceId}/run": {
        "post": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Run specified compliance policy",
          "description": "Runs a compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_RunCompliancePolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the policy",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/compliancepolicies/{referenceId}/actions": {
        "get": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Get a list of actions associated with this compliance policy",
          "description": "Get the list of compliance actions for the policy. Requires the caller be granted \"View Compliance Policies\"permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_GetCompliancePolicyActions",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the policy",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Assignment information has been updated",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ComplianceAction"
                }
              }
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Update a list of actions associated with this compliance policy",
          "description": "Update the actions to be taken for the compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b><br /><br />Available Action Types:<ul><li>Set Azure Conditional Access <b>(Available Since MobiControl v15.5.0)</b></li><li>Block Email Access</li><li>Email Notification</li></ul><br /><br />Set Azure Conditional Access action example:<pre><br />[<br />  {<br />    \"Type\": \"AzureConditionalAccess\",<br />    \"ExecutionDelay\": 0,<br />    \"ExecutionDelayUnit\": \"Hours\",<br />    \"ActionInformation\": \"string\",<br />    \"ActionInfoDescriptor\": \"Na\"<br />  }<br />]</pre><br /><br />Block Email Access action example:<pre><br />[<br />  {<br />    \"Type\": \"Exchange\",<br />    \"ExecutionDelay\": 0,<br />    \"ExecutionDelayUnit\": \"Hours\",<br />    \"ActionInformation\": \"string\",<br />    \"ExchangeServerId\" : \"string\"<br />  }<br />]</pre><br /><br />Email Notification action example:<pre><br />[<br />  {<br />    \"Type\": \"EmailNotification\",<br />    \"RepeatCountInDays\": 1,<br />    \"EmailProfileName\": \"string\",<br />    \"Recipients\": [<br />      {<br />        \"Addressee\": \"To\",<br />        \"Email\": \"user@domain.net\"<br />      }<br />    ],<br />    \"EmailTemplateReferenceId\": \"164254a3-b47e-4f68-a82c-af75f551ec27\",<br />    \"ExecutionDelay\": 0,<br />    \"ExecutionDelayUnit\": \"Hours\",<br />    \"ActionInformation\": \"user@domain.net\"<br />  }<br />]</pre><br /><br />Available recipient addressee types (Addressee):<ul><li>To</li><li>CarbonCopy</li><li>BlindCarbonCopy</li></ul><br /><br />Available Email template reference Ids (EmailTemplateReferenceId):<ul><li>164254A3-B47E-4F68-A82C-AF75F551EC27 : user email template</li><li>6DAD0C7C-DF8B-4378-9F5C-F08E1640404F : administrator email template</li></ul>",
          "operationId": "CompliancePolicies_UpdateCompliancePolicyActions",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the policy",
              "x-nullable": false
            },
            {
              "name": "actions",
              "in": "body",
              "required": true,
              "description": "List of actions to be taken according to the compliance",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ComplianceAction"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Assignment information has been updated"
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/compliancepolicies/{referenceId}/enable": {
        "post": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Enable the specified compliance policy",
          "description": "Enables the compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_EnablePolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the policy",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/compliancepolicies/{referenceId}/disable": {
        "post": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Disable the specified compliance policy",
          "description": "Disables the compliance policy. Requires the caller be granted \"View Compliance Policies\" and \"Manage Compliance Policies\" permissions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_DisablePolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the policy",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/compliancepolicies/{referenceId}/logs": {
        "get": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Get compliance policy Logs",
          "description": "Returns a list of logs associated with a compliance policy. Requires the caller be granted the \"View Compliance Policies\" global permission. Ordering is restricted to Timestamp.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_GetCompliancePolicyLogs",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the compliance policy",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "Return the logs whose severity matches that from the array",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "Return the logs whose date is startDate or later",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "Only return the logs whose date is endDate or before",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "Order",
              "in": "query",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/DataRetrievalOrder"
              }
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of a logs based on a compliance policy reference id",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CompliancePolicyLogEntry"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or compliance policy reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/compliancepolicies/{referenceId}/logs/summary": {
        "get": {
          "tags": [
            "Compliance Policies"
          ],
          "summary": "Get compliance policy logs summary",
          "description": "Returns logs summary associated with a compliance policy. Requires the caller be granted the \"View Compliance Policies\" global permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "CompliancePolicies_GetCompliancePolicyLogSummaryBySeverity",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the compliance policy",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "Return the logs whose date is startDate or later",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "Return the logs whose date is endDate or before",
              "format": "date-time",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of a logs based on a compliance policy reference id",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LogEntryCount"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or compliance policy reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups": {
        "get": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Retrieve a List of Device Groups.",
          "description": "Recursively lists all device groups in the system, or the immediate children of a named \"parent\" device group. Results are limited to where the caller has been granted the \"View Groups\" permission on a device group. Reference ID was introduced in 14.0.0 as a recommended alternative to using path for identification of a device group.\r\n            <br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "DeviceGroups_GetDeviceGroups",
          "parameters": [
            {
              "type": "string",
              "name": "parentPath",
              "in": "query",
              "description": "The reference ID or the path of the parent device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceGroup"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Create a Device Group",
          "description": "Creates a new device group under a specified path and outputs the created device group information. Reference ID (introduced in 14.0.0) will be generated automatically and should not be included in the request. Virtual groups are supported as of 14.0.0 with an optional a filter using the same syntax as GET /devices/search. Requires the caller be granted \"Manage Groups\" permission for the specified device group.\r\n            <br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "DeviceGroups_AddGroup",
          "parameters": [
            {
              "name": "deviceGroup",
              "in": "body",
              "required": true,
              "description": "The new device group to create",
              "schema": {
                "$ref": "#/definitions/DeviceGroup"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceGroup"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}": {
        "get": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Retrieve a Single Device Group",
          "description": "Returns information about a single device group identified by its reference ID or path. Reference ID was introduced in 14.0.0 as a recommended alternative to using path for identification of a device group. Requires the caller be granted the \"View Groups\" permission for the specified device group.\r\n            <br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "DeviceGroups_GetDeviceGroup",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceGroup"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Delete a Device Group",
          "description": "Deletes a device group identified by its reference ID or path. Reference ID was introduced in 14.0.0 as a recommended alternative to using path for identification of a device group. Requires the caller be granted \"Manage Groups\" permission for the specified device group.\r\n            <br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "DeviceGroups_DeleteGroup",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/name": {
        "put": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Rename a Device Group",
          "description": "Renames a device group identified by its reference ID or path. Reference ID was introduced in 14.0.0 as a recommended alternative to using path for identification of a device group. Requires the caller be granted the \"View Groups\" and \"Manage Groups\" permissions for the specified path.\r\n            <br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "DeviceGroups_RenameGroup",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "name": "newName",
              "in": "body",
              "required": true,
              "description": "The new name for the group. String body parameters must be enclosed in single quotes.",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceGroup"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/filter": {
        "put": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Update a Virtual Group Filter",
          "description": "Updates a virtual device group filter identified by its reference ID (recommended) or path. Filter syntax is the same as /devices/search. Requires the caller be granted the \"Manage Groups\" permission for the specified group.\r\n            <br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "DeviceGroups_UpdateVirtualGroupFilter",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "name": "newFilter",
              "in": "body",
              "required": true,
              "description": "The new filter for the virtual group",
              "schema": {
                "$ref": "#/definitions/VirtualDeviceGroupFilter"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceGroup"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/path": {
        "put": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Move a Device Group",
          "description": "Updates the current parent of a device group identified by its reference ID or path. Reference ID was introduced in 14.0.0 as a recommended alternative to using path for identification of a device group. Requires the caller be granted \"Manage Groups\" permission for the source and destination paths.\r\n            <br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "DeviceGroups_MoveGroup",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "name": "newParentPath",
              "in": "body",
              "required": true,
              "description": "The new parent group path. String body parameters must be enclosed in single quotes.",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceGroup"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/icon": {
        "put": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Update a Device Group Icon",
          "description": "Updates the icon color of a device group identified by its path and outputs the updated device deviceGroup information.\r\n            <br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "DeviceGroups_UpdateDeviceGroupIcon",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The device group identifier for parent device group taken from Reference ID. Deprecated: Can also be a path of parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "name": "newIcon",
              "in": "body",
              "required": true,
              "description": "The new icon color. Must be enclosed in single quotes.",
              "schema": {
                "$ref": "#/definitions/DeviceGroupIcon",
                "x-enumType": "DeviceGroupIcon"
              },
              "x-nullable": false,
              "x-enumType": "DeviceGroupIcon"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceGroup"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/customAttributes/{customAttributeId}": {
        "put": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Update a Single Custom Attribute for a Device Group",
          "description": "Updates one custom attribute value for a single device group identified by its reference ID (recommended) or path. Requires the caller be granted the \"Edit Custom Attribute Values\" permission for the specified device group.\r\n            <br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "DeviceGroups_UpdateDeviceGroupCustomAttribute",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "customAttributeId",
              "in": "path",
              "required": true,
              "description": "The name of the custom attribute.",
              "x-nullable": false
            },
            {
              "name": "customAttributeValue",
              "in": "body",
              "required": true,
              "description": "The new custom attribute value. Use null or empty string to clear the custom attribute. String body parameters must be enclosed in single quotes.",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Clear a Single Custom Attribute for a Device Group",
          "description": "Clears a  custom attribute value for a single device group identified by its reference ID (recommended) or path. Requires the caller be granted the \"Edit Custom Attribute Values\" permission for the specified device group.\r\n            <br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "DeviceGroups_DeleteDeviceGroupCustomAttribute",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "customAttributeId",
              "in": "path",
              "required": true,
              "description": "The name of the custom attribute.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/customAttributes": {
        "get": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Retrieve Values of Custom Attributes for a Device Group",
          "description": "Returns a list of values for each globally configured custom attribute for a single device group identified by its reference ID (recommended) or path. Requires the caller be granted the \"View Groups\" permission for the specified device group.\r\n            <br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "DeviceGroups_GetDeviceGroupCustomAttributes",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "List of Custom Attribute Info objects",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CustomAttributeInfo"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Update Multiple Custom Attributes for a Device Group",
          "description": "Updates one or more custom attribute values for a single device group identified by its reference ID (recommended) or path. Requires the caller be granted the \"Edit Custom Attribute Values\" permission for the specified device group.\r\n            <br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "DeviceGroups_UpdateDeviceGroupsCustomAttributes",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "name": "values",
              "in": "body",
              "required": true,
              "description": "The custom attribute name and value to set a value for.",
              "schema": {
                "$ref": "#/definitions/CustomAttributeParameters"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/members": {
        "post": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Add or Move a Devices to a Device Group",
          "description": "Moves one or more devices identified by their device IDs to a device group identified by its reference ID (recommended) or path. In the case the destination is a virtual group, devices will be added to the group rather than moved. Any advanced settings configured for the devices specifically can either be maintained or inherited from the new device group (cleared). Requires the caller be granted the \"View Groups\" and \"Manage Devices\" permission for both the source and destination device groups.\r\n            <br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "DeviceGroups_AddDeviceGroupMembers",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "name": "deviceIds",
              "in": "body",
              "required": true,
              "description": "Array of device identifiers",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "clearConfigurations",
              "in": "query",
              "description": "Clear any advanced setting/configuration values on the device(s) when moving and inherit these values from the new parent group",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/members/remove": {
        "post": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Remove Devices From a Virtual Group",
          "description": "Removes one or more devices identified by their device IDs from a virtual group identified by its reference ID (recommended) or path. Not applicable to virtual groups with filter criteria. Requires the caller be granted the \"View Groups\" and \"Manage Devices\" permission for both the source and destination device groups.\r\n            <br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "DeviceGroups_RemoveDeviceGroupMembers",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "name": "deviceIds",
              "in": "body",
              "required": true,
              "description": "Array of device identifiers",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/members/lastKnownLocation": {
        "get": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Retrieve Last Known Locations of Devices From a Device Group",
          "description": "Returns a list of last known location values for each device in device group. Requires the caller be granted the \"View Groups\" permission for the specified device group.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "DeviceGroups_RetrieveLocationsOfGroupMembers",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "viewRectLimits",
              "in": "query",
              "description": "Comma separated string representing Top, Left, Bottom and Right Coordinates of the current view rectangle.\r\n            There must be exactly 4 values, in a correct range:\r\n            Top/Bottom, representing Latitude, should be in [-90, 90] when Bottom is less then Top.\r\n            Left/Right, representing Longitude, should be in [-180, 180].\r\n            For example:\r\n                \"86,-140,-32,112\"",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "List of DeviceLocation objects",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceLocation"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/members/locationStatuses": {
        "get": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Get Status of Location Action for Devices From a Device Group",
          "description": "Returns a BulkDeviceLocationActionStatus class with the number of devices which succeeded, failed or pending location in device group. Requires the caller be granted the \"View Groups\" permission for the specified device group.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "DeviceGroups_GetStatusOfLocationActionForGroupMembers",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "includeSubgroups",
              "in": "query",
              "description": "Indicates that action should be executed on devices in all descendant groups (subgroups would be available since MVP2)",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "BulkDeviceLocationActionStatus objects",
              "schema": {
                "$ref": "#/definitions/BulkDeviceActionStatus"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/members/actions": {
        "post": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Send Actions to Devices Within a Group",
          "description": "Sends actions to all devices within a single device group identified by its reference ID (recommended) or path. Requires the caller be granted the permission for the respective action on the specified device group. Refer to  GET /deviceschema for the parameters of each supported action.\r\n            <br /><B>(Available Since MobiControl v14.0.0)</B><br /><br />Supported actions:\r\n            <ul><li>Checkin - Requests the device to communicate with the server and update its information</li><li>Disable - Disconnects a device from the MobiControl deployment server. Disconnected devices will not receive configuration changes or updates from MobiControl until they are re-enabled</li><li>DisableAgentUpgrade - Prevent devices from upgrading their agent at the next scheduled or manually requested checkin</li><li>EnableAgentUpgrade - Allow devices to upgrade their agent at the next scheduled or manually requested checkin</li><li>Locate - Request the device to send its current location</li><li>Lock - Request the device return to the lock screen and in some cases display a message</li><li>SendMessage - Sends a message to the MobiControl agent that is displayed to the active user</li><li>SendScript - Sends a script to the device to be executed immediately upon receiving it</li><li>SendScriptViaPns - Sends a script via Platform Notification Service. (Android Plus only)</li><li>SendScriptViaSms - Sends a script via SMS, long scripts will be separated and sent in multiple messages</li><li>SoftReset - Performs device soft reset</li><li>SyncFilesNow - Sync files now</li><li>ResetPasscode - Reset the passcode on the target Android or Android+ device.</li><li>UpgradeAgentNow - Upgrade agent immediately if the agent has already enabled for upgrade</li></ul>",
          "operationId": "DeviceGroups_SendActionToGroupMembers",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "name": "actionInfo",
              "in": "body",
              "required": true,
              "description": "The action and its respective parameters.",
              "schema": {
                "$ref": "#/definitions/ActionBase"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/members/actions/v2": {
        "post": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Send Actions to Devices Within a Group",
          "description": "Sends actions to all devices within a single device group identified by its reference ID (recommended) or path (devices can also be filtered by search criteria). Requires the caller be granted the permission for the respective action on the specified device group. Refer to  GET /deviceschema for the parameters of each supported action.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B><br /><br />Supported actions:\r\n            <ul><li>Checkin - Requests the device to communicate with the server and update its information</li><li>Disable - Disconnects a device from the MobiControl deployment server. Disconnected devices will not receive configuration changes or updates from MobiControl until they are re-enabled</li><li>DisableAgentUpgrade - Prevent devices from upgrading their agent at the next scheduled or manually requested checkin</li><li>EnableAgentUpgrade - Allow devices to upgrade their agent at the next scheduled or manually requested checkin</li><li>Locate - Request the device to send its current location</li><li>Lock - Request the device return to the lock screen and in some cases display a message</li><li>SendMessage - Sends a message to the MobiControl agent that is displayed to the active user</li><li>SendScript - Sends a script to the device to be executed immediately upon receiving it</li><li>SendScriptViaPns - Sends a script via Platform Notification Service. (Android Plus only)</li><li>SendScriptViaSms - Sends a script via SMS, long scripts will be separated and sent in multiple messages</li><li>SoftReset - Performs device soft reset</li><li>SyncFilesNow - Sync files now</li><li>ResetPasscode - Reset the passcode on the target Android or Android+ device.</li><li>UpgradeAgentNow - Upgrade agent immediately if the agent has already enabled for upgrade</li></ul>",
          "operationId": "DeviceGroups_SendActionToGroupMembersV2",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "name": "groupAction",
              "in": "body",
              "required": true,
              "description": "The action and filter for device search.",
              "schema": {
                "$ref": "#/definitions/BulkDeviceGroupAction"
              },
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "includeSubgroups",
              "in": "query",
              "description": "If action should be executed on devices in all descendant groups",
              "default": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/advancedSettings": {
        "get": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Retrieve Advanced Settings for a Device Group",
          "description": "Returns a list of the advanced settings and respective configuration status for a single device group identified by its reference ID (recommended)  or path.\r\n            Requires the caller be granted the \"View Groups\" permission for the specified device group.\r\n            <br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "DeviceGroups_GetGroupAdvancedSettings",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group.\r\n            <br />When using a reference ID, it must be prepended to the ID value, \"referenceId:\" (e.g. referenceId%3A7e39724b-6120-4c1f-96a8-c04d4570a974).\r\n            <br />Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceGroupAdvancedSettingsStatus"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Clear All Advanced Configuration Settings from the Target Group",
          "description": "This reverts the device group configurations to their default values,\r\n            which is either inherited from a parent group, a system-wide setting, or not configured.\r\n            <br /><b>(Available Since MobiControl v14.1.0)</b>",
          "operationId": "DeviceGroups_ClearGroupAdvancedConfigurations",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group.\r\n            <br />When using a reference ID, it must be prepended to the ID value, \"referenceId:\" (e.g. referenceId%3A7e39724b-6120-4c1f-96a8-c04d4570a974).\r\n            <br />Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/notes": {
        "get": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Retrieve Notes for a Device Group",
          "description": "Returns a list of notes for a single device group identified by its reference ID (recommended) or path.\r\n            <br /><b>(Available Since MobiControl v14.0.1)</b>",
          "operationId": "DeviceGroups_GetNotes",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The device group identifier for parent device group taken from Reference ID. Deprecated: Can also be a path of parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Note"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Create a Note",
          "description": "Creates a new device group note under a specified group reference ID (recommended) or path and outputs the created note’s information.\r\n            Requires the caller be granted the “Manage Notes” permission for the group.\r\n            <br /><b>(Available Since MobiControl v14.0.3)</b>",
          "operationId": "DeviceGroups_AddNote",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The group path or reference ID.",
              "x-nullable": false
            },
            {
              "name": "note",
              "in": "body",
              "required": true,
              "description": "The note object",
              "schema": {
                "$ref": "#/definitions/Note"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/Note"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/members/notes": {
        "get": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Retrieves Notes from Member Devices of a Group",
          "description": "Returns a list of notes for all devices that are members of the requested group, as well as members of the subgroups of the requested group.\r\n            <br /><b>(Available Since MobiControl v14.0.3)</b>",
          "operationId": "DeviceGroups_GetMemberNotes",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MemberNote"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/notes/{referenceId}": {
        "put": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Update a Note",
          "description": "Updates the note for a device group identified by its reference ID (recommended) or path and outputs the updated note’s information.\r\n            Requires the caller be granted the “Manage Notes” permission for the group.\r\n            <br /><b>(Available Since MobiControl v14.0.3)</b>",
          "operationId": "DeviceGroups_UpdateNote",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The group path or referenceId",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The note reference identifier",
              "x-nullable": false
            },
            {
              "name": "note",
              "in": "body",
              "required": true,
              "description": "The note object",
              "schema": {
                "$ref": "#/definitions/Note"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/Note"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Delete a Note",
          "description": "Deletes a note for a device group identified by its reference ID (recommended) or path.\r\n            Requires the caller be granted the “Manage Notes” permission for the group.\r\n            <br /><b>(Available Since MobiControl v14.0.3)</b>",
          "operationId": "DeviceGroups_DeleteNote",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The group path",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The note identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{referenceId}/actions/setgroupwallpaper": {
        "post": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Set Wallpaper for Group",
          "description": "Uploads and sets the wallpaper of all devices in a given device group, only executing actions against supported and compatible devices. Requires the caller be granted the \"Set Wallpaper\" permission on the specified device group.\r\n             <br /><b>(Available Since MobiControl v14.2.2)</b><br /><br />\r\n             Content-Type of the Request body must be <code>multipart/related; boundary={boundary identifier}</code><br />\r\n             Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n             <br />\r\n             Multipart request body must contain the following parts:<br /><ol><li>action metadata - Contains json-formatted information with Content-Type: <pre>application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json</pre> Contains reference id of device group  <pre>{\"ReferenceId\":[\"string\"]}</pre></li><li>image file for Lock screen wallpaper - Contains Base64 encoded binary image file with Content-Type: <code>image/jpeg</code> or <code>image/png</code><br />\r\n             Content-Type-Encoding: base64<br />\r\n             Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"string\"<br /></li><li>image file for Home screen wallpaper - Contains Base64 encoded binary image file with Content-Type: image/jpeg or image/png <br />\r\n             Content-Type-Encoding: base64<br />\r\n             Content-Disposition: form-data; name=\"HomeScreenFile\"; filename=\"string\"<br /></li></ol>\r\n             Currently, the maximum size of image file when using this endpoint is <u>5 MB</u>.\r\n             <br /><br />\r\n             The example below shows SetWallpaper group level action request.\r\n             <br /><pre>\r\n             Content-Type: multipart/related; boundary=foo_bar_baz\r\n             Content-Length: number_of_bytes_in_entire_request_body\r\n             <br />\r\n             --foo_bar_baz\r\n             Content-Type: application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json\r\n             <br />\r\n             {\r\n             \"ReferenceId\" : \"referenceid:123456\"\r\n             }\r\n             <br />\r\n             --foo_bar_baz\r\n             Content-Type: image/jpeg\r\n             Content-Type-Encoding: base64\r\n             Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"some_image.jpg\"\r\n             <br />\r\n             Base64-encoded image data\r\n             --foo_bar_baz--\r\n             </pre><b>Cannot execute this API as file upload not supported from this documentation page.</b>",
          "operationId": "DeviceGroups_SetWallpaper",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "the group path",
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "includeSubgroups",
              "in": "query",
              "description": "",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/advancedConfiguration/{configurationName}/{deviceFamily}": {
        "delete": {
          "tags": [
            "Device Groups"
          ],
          "summary": "Delete AdvancedConfiguration",
          "operationId": "DeviceGroups_DeleteAdvancedConfiguration",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group.\r\n            <br />When using a reference ID, it must be prepended to the ID value, \"referenceId:\" (e.g. referenceId%3A7e39724b-6120-4c1f-96a8-c04d4570a974).\r\n            <br />Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "configurationName",
              "in": "path",
              "required": true,
              "description": "Only delete Device Groups Advanced Configuration that is targeting to the given configuration name (e.g. AndroidPlusAgentSettings)",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceFamily",
              "in": "path",
              "required": true,
              "description": "Only delete Device Groups Advanced Configuration that is targeting to the given device family (e.g. AndroidPlus)",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/deviceschema": {
        "get": {
          "tags": [
            "Device Kind Schema"
          ],
          "summary": "Retrieve Device Action Schema for All Device Kinds",
          "description": "Returns a definition of actions including their supported parameters that are applicable to each respective device kind. Requires the caller be granted the \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "DeviceKindSchema_GetAllDeviceKindActionSchemata",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A collection of \"DeviceKindSchema\"",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceKindActionSchema"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/deviceschema/{deviceKind}": {
        "get": {
          "tags": [
            "Device Kind Schema"
          ],
          "summary": "Retrieve Device Action Schema for a Single Device Kind",
          "description": "Returns a definition of actions including their supported parameters that are applicable to a single device kind. Requires the caller be granted the \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "DeviceKindSchema_GetDeviceKindActionSchema",
          "parameters": [
            {
              "type": "string",
              "name": "deviceKind",
              "in": "path",
              "required": true,
              "description": "The device kind",
              "x-schema": {
                "$ref": "#/definitions/DeviceKind"
              },
              "x-nullable": false,
              "enum": [
                "AndroidForWork",
                "AndroidElm",
                "AndroidKnox",
                "AndroidPlus",
                "AndroidGeneric",
                "Ios",
                "Mac",
                "WindowsCE",
                "WindowsDesktop",
                "WindowsDesktopLegacy",
                "WindowsPhone",
                "WindowsRuntime",
                "ZebraPrinter",
                "Linux",
                "WindowsHoloLens",
                "WindowsXtHub",
                "Chrome",
                "LinuxXtHub",
                "Unknown"
              ],
              "x-enumType": "DeviceKind"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "The schema for the specified kind",
              "schema": {
                "$ref": "#/definitions/DeviceKindActionSchema"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/deviceschema/{deviceKind}/configurations": {
        "get": {
          "tags": [
            "Device Kind Schema"
          ],
          "summary": "Retrieve Device Advanced Configuration Schema for a Single Device Kind",
          "description": "Returns the advanced configurations that are applicable to a specific device kind. Requires the caller be granted the \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "DeviceKindSchema_GetConfigurationsForKind",
          "parameters": [
            {
              "type": "string",
              "name": "deviceKind",
              "in": "path",
              "required": true,
              "description": "The kind to retrieve configuration metadata for",
              "x-schema": {
                "$ref": "#/definitions/DeviceKind"
              },
              "x-nullable": false,
              "enum": [
                "AndroidForWork",
                "AndroidElm",
                "AndroidKnox",
                "AndroidPlus",
                "AndroidGeneric",
                "Ios",
                "Mac",
                "WindowsCE",
                "WindowsDesktop",
                "WindowsDesktopLegacy",
                "WindowsPhone",
                "WindowsRuntime",
                "ZebraPrinter",
                "Linux",
                "WindowsHoloLens",
                "WindowsXtHub",
                "Chrome",
                "LinuxXtHub",
                "Unknown"
              ],
              "x-enumType": "DeviceKind"
            },
            {
              "type": "boolean",
              "name": "advancedOnly",
              "in": "query",
              "description": "Whether to return advanced configurations only",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "All configurations for the specified kind, filtered as specified",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceConfigurationSchema"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Single Device",
          "description": "Returns a single device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\". Requires the caller be granted \"View Group\" permission on the parent device group where the device resides. The device object is polymorphic in that extended properties specific to the device \"Kind\" will be returned in addition to those listed here. For the complete list properties for each kind, please refer to the <a target=\"_blank\" href=\"http://www.soti.net/mc/help/v13/en/Content/API/\">online help</a>.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "Devices_GetDevice",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceBase"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Devices"
          ],
          "summary": "Delete Device",
          "description": "Delete a device identified by its device ID, or the device's MAC/IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. A request for the device to unenroll is also made. Requires the caller be granted the \"Manage Devices\" permission.<br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "Devices_DeleteDevice",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve List of Devices",
          "description": "Returns a list of devices. If devices ids are specified (in a comma separated list), then no other parameters must be supplied. If no device ids are specified, then a list of all devices will be returned, or the devices found in the specified device group. \"Skip\" allows for you to define from what point you would like devices to be returned (i.e. if you are only interested devices 40 onward, you would list skip as 39). \"Take\" is equal to the number of results you would like to be returned. Results are limited to devices residing in device groups where the caller has been granted the \"View Groups\" permission. The device object is polymorphic in that extended properties, specific to the device \"Kind\", will be returned in addition to those listed here. For the complete list of properties for each kind, please refer to the online help.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "Devices_GetDevices",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "query",
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path of the parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company)",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "filter",
              "in": "query",
              "description": "Filter string. Format: Property1:Value1,Property2:Value2",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "userFilter",
              "in": "query",
              "description": "User filter string. Format: UserName:user or UserId:Id",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "ids",
              "in": "query",
              "description": "Comma separated list of devices ids",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceBase"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/summary": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Summary of Devices",
          "description": "Returns a summary count of devices with a unique property value within devices that match the given filter criteria. For example, a count of unique model numbers. Use aggregates to obtain a unique count of model numbers of each unique device family. Add a filter to obtain counts of only a subset of devices. Results will be limited to where the caller has been granted the \"View Groups\" permission. Refer to the online help for details on the filter syntax.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_GetSummary",
          "parameters": [
            {
              "name": "aggregationRequests",
              "in": "body",
              "required": true,
              "description": "The aggregation requests",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AggregationRequest"
                }
              },
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "groupPath",
              "in": "query",
              "description": "The reference ID or the path of the parent device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. The path of the parent group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company)",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "filter",
              "in": "query",
              "description": "The device filter",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "includeSubgroups",
              "in": "query",
              "description": "When group path is specified, determines whether descendant groups should also be included",
              "default": false,
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "The aggregated device summary",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AggregationResult"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/search": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve List of Devices Matching Filter Criteria",
          "description": "Returns a list of devices matching the specified filter criteria, or all devices. Results will be limited to where the caller has been granted the \"View Groups\" permission. The device object is polymorphic in that properties specific to the device \"Kind\" will be returned in addition to the base properties applicable to all devices. Refer to the online help for details on the filter syntax.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_SearchDevices",
          "parameters": [
            {
              "type": "string",
              "name": "groupPath",
              "in": "query",
              "description": "The group path. The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "filter",
              "in": "query",
              "description": "Filter string. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).<br />The following operators for searching on date and time are deprecated in 14.3.0 and they will be retired in 15.0.0.<ol><li> = equal </li><li> &lt;&gt; not equal </li><li> &gt; greater than </li><li> &lt; less than </li></ol>",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "includeSubgroups",
              "in": "query",
              "description": "When group path is specified, determines whether descendant groups should also be included",
              "default": false,
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "verifyAndSync",
              "in": "query",
              "description": "When set to true, search results will be compared with up-to-date information and synchronized with Search service if differences are noticed",
              "default": false,
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceBase"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/collectedData": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Collected Data for a Device",
          "description": "Returns collected data of a particular type for a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\". Collected data is a polymorphic object in that different properties are returned depending on the requested type. Where a collected data type is not applicable to a device it will be treated as if there is no data collected.<br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "Devices_GetCollectedData",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "builtInDataType",
              "in": "query",
              "description": "",
              "x-schema": {
                "$ref": "#/definitions/DeviceCollectedDataType"
              },
              "x-nullable": true,
              "enum": [
                "BatterySerialNumber",
                "BatteryTemperature",
                "BatteryPartNumber",
                "BatteryManufacturerDate",
                "BatteryHealthPercentage",
                "BatteryChargeCycle",
                "TotalMemory",
                "TotalStorage",
                "MACAddress",
                "DeviceName",
                "DeviceID",
                "PrinterZbiBasicForcedRuntimeError",
                "PrinterRibbonOut",
                "PrinterRibbonLow",
                "PrinterRibboninWarning",
                "PrinterRfidError",
                "PrinterRewindFull",
                "PrinterReplaceHead",
                "PrinterPaused",
                "PrinterPqJobCompleted",
                "PrinterPowerSupplyOverTemp",
                "PrinterPowerOn",
                "PrinterPaperOut",
                "PrinterMediaLow",
                "PrinterLabelReady",
                "PrinterHeadTooHot",
                "PrinterHeadOpen",
                "PrinterHeadElementBad",
                "PrinterHeadCold",
                "PrinterCutterJammed",
                "PrinterAvailableSdCardStorage",
                "PrinterCleanPrinthead",
                "PrinterBatteryLow",
                "FailedPasswordAttempts",
                "ForegroundApp",
                "MissedCalls",
                "SuccessCalls",
                "DroppedCalls",
                "AvailableExternalStorage",
                "AvailableInternalStorage",
                "OperatingSystemVersion",
                "CallLog",
                "TrafficCellularTethered",
                "TrafficCellularRoaming",
                "TrafficCellular",
                "TrafficWifi",
                "TrafficUsb",
                "BSSID",
                "CellularSignalStrength",
                "CellularCarrier",
                "IPAddress",
                "RSSI",
                "SSID",
                "Location",
                "AvailableStorage",
                "AvailableMemory",
                "BatteryStatus"
              ],
              "x-enumType": "DeviceCollectedDataType"
            },
            {
              "type": "string",
              "name": "customDataType",
              "in": "query",
              "description": "",
              "x-nullable": true
            },
            {
              "type": "object",
              "name": "dataRetrievalOptions",
              "in": "query",
              "description": "Data retrieval options",
              "x-schema": {
                "$ref": "#/definitions/DataRetrievalOptions"
              },
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "includeTotalCount",
              "in": "query",
              "description": "Flag to include total no of entries in the response header.",
              "default": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CollectedDataItem"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/collectedData": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Collected Data in Bulk",
          "description": "Returns collected data of a particular type for all devices. Collected data is a polymorphic object in that different properties are returned depending on the requested type. Where a collected data type is not applicable to a device it will be treated as if there is no data collected.\r\n            <br /><B>(Available Since MobiControl v13.3.0)</B>",
          "operationId": "Devices_GetCollectedDatas",
          "parameters": [
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "builtInDataType",
              "in": "query",
              "description": "Built-in device collected data type. Mutually exclusive\r\n            with customDataType.",
              "x-schema": {
                "$ref": "#/definitions/DeviceCollectedDataType"
              },
              "x-nullable": true,
              "enum": [
                "BatterySerialNumber",
                "BatteryTemperature",
                "BatteryPartNumber",
                "BatteryManufacturerDate",
                "BatteryHealthPercentage",
                "BatteryChargeCycle",
                "TotalMemory",
                "TotalStorage",
                "MACAddress",
                "DeviceName",
                "DeviceID",
                "PrinterZbiBasicForcedRuntimeError",
                "PrinterRibbonOut",
                "PrinterRibbonLow",
                "PrinterRibboninWarning",
                "PrinterRfidError",
                "PrinterRewindFull",
                "PrinterReplaceHead",
                "PrinterPaused",
                "PrinterPqJobCompleted",
                "PrinterPowerSupplyOverTemp",
                "PrinterPowerOn",
                "PrinterPaperOut",
                "PrinterMediaLow",
                "PrinterLabelReady",
                "PrinterHeadTooHot",
                "PrinterHeadOpen",
                "PrinterHeadElementBad",
                "PrinterHeadCold",
                "PrinterCutterJammed",
                "PrinterAvailableSdCardStorage",
                "PrinterCleanPrinthead",
                "PrinterBatteryLow",
                "FailedPasswordAttempts",
                "ForegroundApp",
                "MissedCalls",
                "SuccessCalls",
                "DroppedCalls",
                "AvailableExternalStorage",
                "AvailableInternalStorage",
                "OperatingSystemVersion",
                "CallLog",
                "TrafficCellularTethered",
                "TrafficCellularRoaming",
                "TrafficCellular",
                "TrafficWifi",
                "TrafficUsb",
                "BSSID",
                "CellularSignalStrength",
                "CellularCarrier",
                "IPAddress",
                "RSSI",
                "SSID",
                "Location",
                "AvailableStorage",
                "AvailableMemory",
                "BatteryStatus"
              ],
              "x-enumType": "DeviceCollectedDataType"
            },
            {
              "type": "string",
              "name": "customDataType",
              "in": "query",
              "description": "Custom data type. Mutually exclusive with builtInDataType.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "path",
              "in": "query",
              "description": "The reference ID or the path of the parent device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path of the parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company). If null, applies to ALL devices",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "The number of entries to skip. 0 by default",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "The number of entries to take. 50 by default",
              "format": "int32",
              "default": 50,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CollectedDataItem"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/installedApplications": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Installed Applications for a Device",
          "description": "Returns a list of applications that are installed on a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\". Pagination, ordering and filtering parameters are available.<br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "Devices_GetInstalledApplications",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "filter",
              "in": "query",
              "description": "filter for the return list",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/InstalledApplication"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/provisioningProfiles": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Provisioning Profiles for a Device",
          "description": "Returns a list of profiles that are provisioned on a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\". Pagination, ordering and filtering parameters are available.<br /><B>(Available Since MobiControl v14.1.0)</B>",
          "operationId": "Devices_GetProvisioningProfiles",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "filter",
              "in": "query",
              "description": "filter for the return list",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ProvisioningProfile"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/installedApplications/{applicationId}/actions": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Perform a Device Specific Application Action",
          "description": "Executes an action against an application installed on a device. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller to be granted the \"Manage Devices\" Device Group permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_ExecuteInstalledApplicationAction",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "applicationId",
              "in": "path",
              "required": true,
              "description": "The application identifier",
              "x-nullable": false
            },
            {
              "name": "installedApplicationAction",
              "in": "body",
              "required": true,
              "description": "The installed application action",
              "schema": {
                "$ref": "#/definitions/InstalledApplicationAction"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/compatibility": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Determine Action Compatibility for Devices",
          "description": "Returns a list of compatible and incompatible devices for a given action. Compatibility criteria is based on available rights and device support (ie: OS Version, Kind of device, etc.) Devices can be identified by their device IDs, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Use this method to exclude incompatible.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_CheckDeviceActionCompatibility",
          "parameters": [
            {
              "name": "actionInfo",
              "in": "body",
              "required": true,
              "description": "The details of the action and devices to check",
              "schema": {
                "$ref": "#/definitions/DeviceKindActionInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A report containing list of compatible and accessible device ids, list of the incompatible devices count by device kind, list of the compatible but non-accassible fro current user devices count by device kind",
              "schema": {
                "$ref": "#/definitions/DeviceActionCompatibilityReport"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/compatibility/actionContext": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Determine Action Compatibility for Devices",
          "description": "Returns a list of compatible and incompatible devices for a given action. Compatibility criteria is based on available rights and device support (ie: OS Version, Kind of device, etc.) Devices can be identified by their device IDs, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Use this method to exclude incompatible.<br /><b>(Available Since MobiControl v14.1.2)</b>",
          "operationId": "Devices_CheckDeviceActionCompatibilityWithContext",
          "parameters": [
            {
              "name": "actionInfo",
              "in": "body",
              "required": true,
              "description": "The details of the action and devices to check",
              "schema": {
                "$ref": "#/definitions/DeviceKindActionContextInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A report containing list of compatible and accessible device ids, list of the incompatible devices count by device kind, list of the compatible but non-accassible fro current user devices count by device kind",
              "schema": {
                "$ref": "#/definitions/DeviceActionCompatibilityReport"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/actions": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Send Actions to a Device",
          "description": "Sends an action to a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the permission for the respective action on the device's parent device group. Refer to GET /deviceschema and POST /devices/compatibility for the parameters of each action, its applicability to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices.<br /><B>(Available Since MobiControl v13.0.0)</B><br /><br />Supported Actions:<ul><li>AdsInstallPlugIns - Installs or updates plugin for an Android device</li><li>AllowExchangeAccess - Allow device to access Exchange server through the Enterprise Resource Gateway</li><li>AllowSotiSurf - Allow device to access content delivered through the SOTI Surf application</li><li>AppleSoftwareUpdateRefreshStatus - Request the Apple device to refresh OS update status</li><li>AppleSoftwareUpdateScan - Request the Apple device to send a list of available OS updates</li><li>AppleSoftwareUpdateSchedule - Request the Apple device to update the OS</li><li>BlockExchangeAccess - Allow device to access exchange server through the Enterprise Resource Gateway</li><li>BlockSotiHub - Block Access to SOTI Hub</li><li>BlockSotiSurf - Block Access to SOTI Surf</li><li>BypassActivationLock - Bypasses activation lock on the device</li><li>CheckIn - Requests the device to communicate with the server and update its information</li><li>ClearRestrictions - Clears the restrictions password and restrictions set by the user on the device</li><li>ClearSotiSurfCache - Clear SOTI Surf cache</li><li>Disable - Disconnects a device from the MobiControl deployment server. Disconnected devices will not receive configuration changes or updates from MobiControl until they are re-enabled</li><li>DisableAgentUpgrade - Prevent devices from upgrading their agent at the next scheduled or manually requested checkin </li><li>DisableLostMode - Disable Lost Mode on device</li><li>DisablePasscodeLock - Disable passcode on the device</li><li>EnableAgentUpgrade - Allow devices to upgrade their agent at the next scheduled or manually requested checkin</li><li>EnableLostMode - Enable Lost Mode on the device</li><li>FactoryReset - Performs device factory reset</li><li>Locate - Request the device to send its current location</li><li>Lock - Request the device return to the lock screen and in some cases display a message</li><li>MigrateToELMAgent - Migrate MobiControl agent on Samsung devices to the ELM agent</li><li>ResetPasscode - Reset the passcode on the target Android or Android+ device.</li><li>RemoteRing - Ask the phone to ring to locate it</li><li>ScanForViruses - Scan for virus on the device</li><li>SyncFilesNow - Sync files now</li><li>SendMessage - Sends a message to the MobiControl agent that is displayed to the active user</li><li>SoftReset - Performs device soft reset</li><li>SendScript - Sends a script to the device to be executed immediately upon receiving it</li><li>SendScriptViaSms - Sends a script via SMS, long scripts will be separated and sent in multiple messages</li><li>SendScriptViaPns - Sends a script via Platform Notification Service. (Android Plus only)</li><li>SendTestPage - Print test page on the device</li><li>TurnOffSuspend - Requests the device to turnoff or enter suspended state</li><li>Unenroll - Request the device remove its management configuration, all organization information, and return to an unmanaged state</li><li>UpdateVirusDefinition - Request the device to update its virus definitions</li><li>UpgradeAgentNow - Upgrade agent immediately if the agent has already enabled for upgrade</li><li>Wipe - Request a complete erase of the device and restore it to factory defaults</li><li>UpdateLicense - Update the License</li><li>PlaySound - Play sound on the device</li><li>SharedDeviceLogout - Logs the current user out of a shared device</li><li>SharedDeviceTroubleshoot - Attempts to resolve any issue experienced by a shared device during the login or logout process</li><li>AppFeedbackUpdate - Request the Android device to upload a report containing any changes in its app status to Google Play Server</li><li>DisableAdminMode - To enter user mode (Android only). Corresponding device action in the MobiControl Web Console: \"Enter User Mode\"</li><li>EnableAdminMode - To enter admin mode (Android only). Corresponding device action in the MobiControl Web Console: \"Enter Admin Mode\"</li><li>DisableKioskMode - To disable kiosk screen (Android, Windows CE, Windows Desktop Classic only). Corresponding device action in the MobiControl Web Console: \"Disable Kiosk Screen\"</li><li>EnableKioskMode - To enable kiosk screen (Android, Windows CE, Windows Desktop Classic only). Corresponding device action in the MobiControl Web Console: \"Enable Kiosk Screen\"</li><li>SharedIpadUserLogout - To force the current user to log out from a shared iPad.(iOS shared iPad only). Corresponding device action in the MobiControl Web Console: \"Log Out Shared iPad\"</li></ul>",
          "operationId": "Devices_ExecuteAction",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "name": "actionInfo",
              "in": "body",
              "required": true,
              "description": "The action to be performed on the device. Some actions allow extra parameters.",
              "schema": {
                "$ref": "#/definitions/ActionBase"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/actions": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Send Actions to Devices",
          "description": "Sends an action to multiple devices identified by their device IDs, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the permission for the respective action on the device's parent device group. Refer to GET /deviceschema and POST /devices/compatibility for the parameters of each action, its applicability to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Refer to POST /devices/{deviceId}/actions for supported actions. Note not all actions may be executed against multiple devices.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_ExecuteBulkAction",
          "parameters": [
            {
              "name": "bulkActionInfo",
              "in": "body",
              "required": true,
              "description": "Array of devices ids plus the action to be performed on the device. Some actions allow extra parameters.",
              "schema": {
                "$ref": "#/definitions/BulkDeviceAction"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/parentPath": {
        "put": {
          "tags": [
            "Devices"
          ],
          "summary": "Move Device",
          "description": "Relocates a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\" to the specified device group. Requires the caller be granted the \"View Group\" permission on the source and destination device group.<br /><b>(Available Since MobiControl v13.0.0 &amp; Deprecated in v14.0.0 in favor of POST /devicegroups/{path}/members)</b>",
          "operationId": "Devices_MoveDevice",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "name": "newPath",
              "in": "body",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. The path where the device should be moved. String body parameters must be enclosed in single quotes.",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceBase"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/passcode": {
        "put": {
          "tags": [
            "Devices"
          ],
          "summary": "Set/Clear Device Passcode",
          "description": "Sets or clears the passcode of a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\". Setting a passcode is supported on Android, Android+, Windows Mobile/CE/Desktop, and will otherwise be ignored. Clearing a passcode is supported on iOS. On Windows Phone a new passcode is generated and displayed in the device log in the MobiControl administration console. Requires the caller be granted the \"Manage Devices\" permission.<br />If the request is executed correctly, the return code will be 204.<br /><B>(Available Since MobiControl v13.0.0)</B>",
          "operationId": "Devices_SetPasscode",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "name": "passcode",
              "in": "body",
              "required": true,
              "description": "The new passcode. String body parameters must be enclosed in single quotes.",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/customAttributes/upload": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Update the Values of Multiple Custom Attributes against Multiple Devices",
          "description": "Uploads and sets the Custom Attribute values for multiple devices as identified by their device ID. If the file format and request are acceptable, this API will always return OK, with a list of devices that failed assignment in the body of the response.<br /><b>Note:</b> Duplicate entries (same ID, same attribute name) will result in the last specified value being taken instead of the earlier ones<br /><b>(Available Since MobiControl v14.2.0)</b><br /><br />Content-Type of the Request body must be <code>multipart/form-data; boundary={boundary identifier}; </code><br />Boundary length must be set to less than or equal to 11 to prevent internal server errors.<br />Multipart request body must contain the following parts:<br />Content-Transfer-Encoding of the Request body must be either <code>binary</code> or <code>base64</code><br /><ol><li>file with assignment entries - Contains text encoded file with Content-Type: <code>application/vnd.ms-excel</code><br />Content-Disposition: form-data; name=\"string\"; filename=\"string\"<br /></li></ol><br /><br />The example below shows set device users request.<br /><pre>Content-Type: multipart/related; boundary=--foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Disposition: form-data; name=\"attributes\"; filename=\"custom_attributes.csv\" Content-Transfer-Encoding: Binary Content-Type: application/vnd.ms-excel<br />text of file --foo_bar_baz</pre>",
          "operationId": "Devices_AssignCustomAttributesFromFile",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/CsvProcessingOperationStatus"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/customAttributes/{customAttributeId}": {
        "put": {
          "tags": [
            "Devices"
          ],
          "summary": "Update the Value of a Device Custom Attribute",
          "description": "Sets or clears the custom attribute of a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\".<br />Caller must have the “Edit Custom Attribute Values” permission for the device group where the device resides. If the request is executed correctly, the return code will be 204.<br /><B>(Available Since MobiControl v13.1.0)</B>",
          "operationId": "Devices_SetCustomAttribute",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "customAttributeId",
              "in": "path",
              "required": true,
              "description": "The custom attribute identifier",
              "x-nullable": false
            },
            {
              "name": "customAttributeValue",
              "in": "body",
              "required": true,
              "description": "The new custom attribute value. Use null to clear the custom attribute. String body parameters must be enclosed in single quotes",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Devices"
          ],
          "summary": "Clear a Single Custom Attribute for a Device",
          "description": "Clears a  custom attribute value for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Edit Custom Attribute Values\" permission for the specified device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_DeleteCustomAttribute",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The target device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "customAttributeId",
              "in": "path",
              "required": true,
              "description": "The name of the target custom attribute",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/customAttributes": {
        "put": {
          "tags": [
            "Devices"
          ],
          "summary": "Update Multiple Custom Attributes for a Device",
          "description": "Updates one or more custom attribute values for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Edit Custom Attribute Values\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_UpdateCustomAttributes",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The target device identifier",
              "x-nullable": false
            },
            {
              "name": "values",
              "in": "body",
              "required": true,
              "description": "The new attribute values to set",
              "schema": {
                "$ref": "#/definitions/CustomAttributeParameters"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Values of Custom Attributes for a Device",
          "description": "Returns a list of values for each globally configured custom attribute for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_GetDeviceCustomAttributes",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "The list of custom atributes that apply to the specified device",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CustomAttributeInfo"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/profiles": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Profiles Associated with a Device",
          "description": "Returns the profiles, including the contained payloads and respective statuses, that are associated to a device identified by its device ID, or the device's MAC/IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Devices\" permission on the parent device group where the device resides.<br /><B>(Available Since MobiControl v13.2.0)</B>",
          "operationId": "Devices_ViewDeviceProfiles",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A list of all device profiles that are currently associated with the given device.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceProfile"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/PackageInstallationInfo": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Get the Order of Installation for Packages on a Device",
          "description": "Returns the package installation order for a specific device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\".<br /><b>(Available Since MobiControl v14.2.0)</b>",
          "operationId": "Devices_GetPackageInstallationOrder",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DevicePackageAndContainingProfile"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/rules": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Rules Associated with a Device",
          "description": "Returns all the MobiControl rules related to a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_ViewDeviceRules",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceRule"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/appPolicies": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve App Policies Associated with a Device",
          "description": "Returns all the MobiControl app policies related to a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "Devices_GetAppPolicies",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceAppPolicy"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/profiles/{profileId}/actions": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Perform Device Specific Profile Actions",
          "description": "Installs or revokes a profile for the specified device, instead of all devices assigned the profile. Revoked profiles can be reinstalled using the \"install\" command, but only by an administrator. The \"Administratively Removed\" status is synonymous of a profile revoked at the device level. Requires the caller be granted \"Manage Devices\" permission on the parent device group where the device resides.<br /><B>(Available Since MobiControl v13.2.0)</B>",
          "operationId": "Devices_ExecuteDeviceProfileAction",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "profileId",
              "in": "path",
              "required": true,
              "description": "The profile reference ID",
              "x-nullable": false
            },
            {
              "name": "action",
              "in": "body",
              "required": true,
              "description": "The action to perform, accepted values are: 'install' and 'revoke'",
              "schema": {
                "$ref": "#/definitions/DeviceProfileAction",
                "x-enumType": "DeviceProfileAction"
              },
              "x-nullable": false,
              "x-enumType": "DeviceProfileAction"
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/profiles/{profileId}/{userName}/actions": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Perform Device Specific Profile Actions",
          "description": "Installs or revokes a profile for the specified device, instead of all devices assigned the profile. Revoked profiles can be reinstalled using the \"install\" command, but only by an administrator. The \"Administratively Removed\" status is synonymous of a profile revoked at the device level. Requires the caller be granted \"Manage Devices\" permission on the parent device group where the device resides.<br /><B>(Available Since MobiControl v13.2.0)</B>",
          "operationId": "Devices_ExecuteUserProfileAction",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "profileId",
              "in": "path",
              "required": true,
              "description": "The profile reference ID",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Apple user name",
              "x-nullable": false
            },
            {
              "name": "action",
              "in": "body",
              "required": true,
              "description": "The action to perform, accepted values are: 'install' and 'revoke'",
              "schema": {
                "$ref": "#/definitions/DeviceProfileAction",
                "x-enumType": "DeviceProfileAction"
              },
              "x-nullable": false,
              "x-enumType": "DeviceProfileAction"
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/profiles/{profileId}/packages/{packageId}/{version}/actions": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Perform a Device Specific Package Action",
          "description": "Executes an action against a package assigned and/or installed on a device. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Manage Devices\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_ExecuteDevicePackageAction",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "profileId",
              "in": "path",
              "required": true,
              "description": "The profile reference identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "packageId",
              "in": "path",
              "required": true,
              "description": "The package reference identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "version",
              "in": "path",
              "required": true,
              "description": "The version of the package",
              "x-nullable": false
            },
            {
              "name": "action",
              "in": "body",
              "required": true,
              "description": "The action to perform. Accepted value is: 'reinstall'",
              "schema": {
                "$ref": "#/definitions/DevicePackageAction"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/support": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve the Support Contact Information for a Device",
          "description": "Returns the support contact information for a device identified by its device ID, or the devices's MAC address when deviceId is prefixed with \"mac:\". Requires the caller be granted \"Manage Devices\" permission on the parent device group where the device resides.<br /><b>(Available Since MobiControl v13.3.0)</b>",
          "operationId": "Devices_GetDeviceSupportContactInfo",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "The support contact information for the given device",
              "schema": {
                "$ref": "#/definitions/SupportContactInformation"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/certificates": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Certificates Associated to a Device",
          "description": "Returns certificates issued and/or installed to a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_GetDeviceCertificates",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Device certificates",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceCertificate"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/certificates/{referenceId}/actions": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Perform a Device Specific Certificate Action",
          "description": "Executes an action against a certificate issued to a device. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Manage Devices\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_ExecuteDeviceCertificateAction",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Certificate identifier of the certificate",
              "x-nullable": false
            },
            {
              "name": "action",
              "in": "body",
              "required": true,
              "description": "Certificate action for the device",
              "schema": {
                "$ref": "#/definitions/DeviceCertificateAction"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/quarantine": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieves Files Quarantined on a Device",
          "description": "Returns files quarantined on a device by the anti-virus/malware engine. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_GetDeviceQuarantineItems",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Device quarantine items, files and applications",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/QuarantineItem"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/user": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Set User for a Device",
          "description": "Sets the current user of a device to a known Directory or IDP User. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. The user specified must be a known-valid LDAP or IDP user, no validation will be performed on association. Use GET /directories/{directoryConnectionName}/entries to obtain the user information. LDAP user information will be synchronized per the \"LDAP Refresh Interval\". Requires the caller be granted the \"Manage Devices\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_SetDeviceUser",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The target device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "connectionName",
              "in": "query",
              "required": true,
              "description": "The Directory or IdentityProvider connection that this user originates from. Input SsoEntity GUID for Identity Provider connection",
              "x-nullable": true
            },
            {
              "name": "user",
              "in": "body",
              "required": true,
              "description": "The Directory or IdentityProvider user to set as the device user",
              "schema": {
                "$ref": "#/definitions/DeviceUser"
              },
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "type",
              "in": "query",
              "description": "Connection type. Leave black to select Directory",
              "x-schema": {
                "$ref": "#/definitions/DeviceUserConnectionType"
              },
              "default": "Directory",
              "x-nullable": false,
              "enum": [
                "Directory",
                "IdentityProvider"
              ],
              "x-enumType": "DeviceUserConnectionType"
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Devices"
          ],
          "summary": "Delete User for a Device",
          "description": "Delete users from device.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_DeleteDeviceUser",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The target device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/deviceUsers": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Set Users for Multiple Devices",
          "description": "Uploads and sets the device user for multiple devices as identified by their device ID. If the file format and request are acceptable, this API will always return OK, with a list of devices that failed assignment in the body of the response<br /><b>(Available Since MobiControl v14.2.0)</b><br /><br />Content-Type of the Request body must be <code>multipart/form-data; boundary={boundary identifier}; </code><br />Boundary length must be set to less than or equal to 11 to prevent internal server errors.<br />Multipart request body must contain the following parts:<br /><ol><li>file with assignment entries - Contains text encoded file with Content-Type: <code>application/vnd.ms-excel</code><br />Content-Disposition: <code>form-data; name=\"string\"; filename=\"string\"</code><br />Content-Transfer-Encoding: <code>binary</code> or <code>base64</code></li></ol><br /><br />The example below shows set device users request.<br /><pre>Content-Type: multipart/related; boundary=--foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Disposition: form-data; name=\"userdetails\"; filename=\"tester.csv\" Content-Transfer-Encoding: binary Content-Type: application/vnd.ms-excel<br />text of file --foo_bar_baz</pre>",
          "operationId": "Devices_SetDeviceUsersFromFile",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/CsvProcessingOperationStatus"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/healthAttestation": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Attestation Information for a Device",
          "description": "Returns Windows Health Attestation information for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_GetHealthAttestationComplianceReport",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "406": {
              "description": ""
            },
            "200": {
              "x-nullable": false,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceHealthAttestationComplianceReport"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/tpmVersions": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Get Windows Modern TPM Specification Versions for the Given Device",
          "description": "Returns the TPM versions from a Windows Modern device identified by its device ID.<br /><b>(Available Since MobiControl v14.2.0)</b>",
          "operationId": "Devices_GetTpmVersions",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "406": {
              "description": ""
            },
            "200": {
              "x-nullable": false,
              "description": "TPM version object",
              "schema": {
                "$ref": "#/definitions/TpmVersion"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/appleDepInfo": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Returns information about the device's Automated Device Enrollment configuration.",
          "description": "Returns Automated Device Enrollment information for a single device identified by its device ID, or the device's MAC or IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_GetDepTokenInfoByDevice",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "406": {
              "description": ""
            },
            "200": {
              "x-nullable": false,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceADEInfo"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/appleVppInfo": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Returns information about the device's usage of App Store License accounts.",
          "description": "Returns information about the usage of App Store License accounts for a single device identified by its device ID, or the device's MAC or IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_GetDeviceAppleVppInformation",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceAppleVppInfo"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/contentFiles": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Content Library for a Device",
          "description": "Returns files assigned to a device through Content Library. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_GetDeviceContentFiles",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ContentFile"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/actions/generateUnlockCode": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Generate Bypass Activation Lock Code",
          "description": "Returns a code that can be used to bypass Activation Lock for a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Refer to GET /deviceschema and POST /devices/compatibility for the applicability of the action to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Requires the caller be granted the \"Bypass Activation Lock\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_GenerateUnlockCode",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "name": "requestCode",
              "in": "body",
              "required": true,
              "description": "The request code for unlock",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/GenerateUnlockCode"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/actions/setwallpaper": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Set Device Wallpaper for a Device",
          "description": "Uploads and sets the wallpaper of a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Refer to GET /deviceschema and POST /devices/compatibility for the applicability of the action to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Requires the caller be granted the \"Set Wallpaper\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b><br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={boundary identifier}</code><br />Boundary length must be set to less than or equal to 11 to prevent internal server errors.<br />Multipart request body must contain the following parts:<br /><ol><li>action metadata - Contains json-formatted information with Content-Type: <pre>application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json</pre> Contains single device ID collection that should match device ID provided in URL <pre>{\"DeviceIds\":[\"string\"]}</pre></li><li>image file for Lock screen wallpaper - Contains Binary or Base64 encoded binary image file with Content-Type: <code>image/jpeg</code> or <code>image/png</code><br />Content-Transfer-Encoding: base64 or binary<br />Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"string\"<br /></li><li>image file for Home screen wallpaper - Contains Binary or Base64 encoded binary image file with Content-Type: image/jpeg or image/png <br />Content-Transfer-Encoding: base64 or binary<br />Content-Disposition: form-data; name=\"HomeScreenFile\"; filename=\"string\"<br /></li></ol>Currently, the maximum size of image file when using this endpoint is <u>5 MB</u>.<br /><br />The example below shows SetWallpaper action request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json<br />{ \"DeviceIds\" : \"123456\" }<br />--foo_bar_baz Content-Type: image/jpeg Content-Transfer-Encoding: Base64 Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"some_image.jpg\"<br />Base64-encoded image data --foo_bar_baz--</pre><b>Cannot execute this API as file upload not supported from this documentation page.</b>",
          "operationId": "Devices_SetDeviceWallpaper",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Success"
            },
            "400": {
              "description": "Bad request, ie. Invalid file contents or metadata"
            },
            "401": {
              "description": "Unauthorized"
            },
            "415": {
              "description": "Unsupported content media type"
            },
            "422": {
              "description": "Compatibility failure, Invalid file type, Image size is over 5MB"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/actions/setwallpaper": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Set Device Wallpaper for Devices",
          "description": "Uploads and sets the wallpaper of multiple devices identified by their device IDs, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Refer to GET /deviceschema and POST /devices/compatibility for the applicability of the action to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Requires the caller be granted the \"Set Wallpaper\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b><br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={boundary identifier}</code><br />Boundary length must be set to less than or equal to 11 to prevent internal server errors.<br />Multipart request body must contain the following parts:<br /><ol><li>action metadata - Contains json-formatted information with Content-Type: <pre>application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json</pre> Contains collection of device IDs  <pre>{\"DeviceIds\":[\"string\"]}</pre></li><li>image file for Lock screen wallpaper - Contains Binary or Base64 encoded binary image file with Content-Type: <code>image/jpeg</code> or <code>image/png</code><br />Content-Transfer-Encoding: base64 or binary<br />Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"string\"<br /></li><li>image file for Home screen wallpaper - Contains Binary or Base64 encoded binary image file with Content-Type: image/jpeg or image/png <br />Content-Transfer-Encoding: base64 or binary<br />Content-Disposition: form-data; name=\"HomeScreenFile\"; filename=\"string\"<br /></li></ol>Currently, the maximum size of image file when using this endpoint is <u>5 MB</u>.<br /><br />The example below shows SetWallpaper action request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: application/vnd.soti.mobicontrol.setwallpaperaction.metadata+json<br />{ \"DeviceIds\" : \"123456\" }<br />--foo_bar_baz Content-Type: image/jpeg Content-Transfer-Encoding: Base64 Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"some_image.jpg\"<br />Base64-encoded image data --foo_bar_baz--</pre><b>Cannot execute this API as file upload not supported from this documentation page.</b>",
          "operationId": "Devices_SetBulkDeviceWallpaper",
          "responses": {
            "204": {
              "description": "Success"
            },
            "400": {
              "description": "Bad request, ie. Invalid file contents or metadata"
            },
            "401": {
              "description": "Unauthorized"
            },
            "415": {
              "description": "Unsupported content media type"
            },
            "422": {
              "description": "Compatibility failure, Invalid file type, Image size is over 5MB"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/actions/uploadencryptedfile": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Upload Encrypted File to Decrypt",
          "description": "Uploads a file that has been encrypted by a device. If the system has the encryption keys, the file will be decrypted and available for download at GET /devices/{deviceId}/actions/downloaddecryptedfile. Refer to GET /deviceschema and POST /devices/compatibility for the applicability of the action to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Requires the caller be granted the \"Decrypt File\" permission on the device's parent device group.<br />Contains Binary or Base64 encoded binary file with Content-Type: application/octet-stream and Content-Transfer-Encoding: base64 or binary<br /><br /><b>(Available Since MobiControl v14.0.0)</b><br /><br />Content-Type of the Request body must be multipart/related; boundary={any boundary identifier} Multipart request body must contain the following parts: Content-Type: application/octet-stream Content-Transfer-Encoding: Base64 Content-Disposition: form-data; name=\"LockScreenFile\"; filename=\"some_image.jpg\" Base64-encoded image data --foo_bar_baz--",
          "operationId": "Devices_UploadEncyptedFile",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/EncryptedFile"
              }
            },
            "400": {
              "description": "Bad request, ie. Invalid file contents or metadata"
            },
            "401": {
              "description": "Unauthorized"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/actions/downloaddecryptedfile": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Download Decrypted File",
          "description": "Downloads the decrypted version of the encrypted file uploaded using POST /devices/{deviceId}/actions/uploadencryptedfile.   Refer to GET /deviceschema and POST /devices/compatibility for the applicability of the action to a given device and to verify the device's compatibility prior to execution. Only execute actions against supported and compatible devices. Requires the caller be granted the \"Decrypt File\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Devices_DownloadDecryptedFile",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "query",
              "required": true,
              "description": "Identifier of the encrypted file",
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Success",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Bad request, ie. Invalid file contents or metadata"
            },
            "401": {
              "description": "Unauthorized"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/applesoftwareupdates": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Software Updates Information For a Single Device",
          "description": "Retrieves information about the software updates that are available for a specific device. Requires the caller be granted the \"View Devices\" group permission.<br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "Devices_GetAvailableSoftwareUpdates",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Available Software Updates for the device with specified Id",
              "schema": {
                "$ref": "#/definitions/SoftwareUpdates"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/lastKnownLocation": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Last Known Location of Device",
          "description": "Returns the last known location value for a device that has previously been located.<br /><b>(Available Since MobiControl v15.0.0)</b>",
          "operationId": "Devices_RetrieveLocation",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "DeviceId",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "DeviceLocation object",
              "schema": {
                "$ref": "#/definitions/DeviceLocation"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/linuxAvailableOSUpdates": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve available Operating System Update Information For a Single Linux Device",
          "description": "Retrieves information about the Operating System updates that are available for a specific device. Requires the caller be granted the \"View Devices\" group permission.<br /><B>(Available Since MobiControl v14.3.0)</B>",
          "operationId": "Devices_GetLinuxAvailableOSUpdateInfo",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Available Operating System Updates for the device with specified Id",
              "schema": {
                "$ref": "#/definitions/LinuxOSSoftwareUpdate"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/notes": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Notes for a Device",
          "description": "Returns a list of notes that are associated with a device identified by its device ID, or the device's MAC/IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively.<br /><b>(Available Since MobiControl v14.0.3)</b>",
          "operationId": "Devices_GetNotes",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Note"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Create a Note",
          "description": "Creates a new note for a single device identified by its device ID, or the device’s MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively and outputs the updated note information. Requires the caller be granted the “Manage Notes” permission for the group.<br /><b>(Available Since MobiControl v14.0.3)</b>",
          "operationId": "Devices_AddNote",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "name": "note",
              "in": "body",
              "required": true,
              "description": "The note object",
              "schema": {
                "$ref": "#/definitions/Note"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/Note"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/notes/{referenceId}": {
        "put": {
          "tags": [
            "Devices"
          ],
          "summary": "Update a Note",
          "description": "Updates a note for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively and outputs the updated note information. Requires the caller be granted the “Manage Notes” permission for the group.<br /><b>(Available Since MobiControl v14.0.3)</b>",
          "operationId": "Devices_UpdateNote",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The note reference identifier.",
              "x-nullable": false
            },
            {
              "name": "note",
              "in": "body",
              "required": true,
              "description": "The note object",
              "schema": {
                "$ref": "#/definitions/Note"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/Note"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Devices"
          ],
          "summary": "Delete a Note",
          "description": "Deletes a note for a single device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Manage Notes\" permission for the group.<br /><b>(Available Since MobiControl v14.0.3)</b>",
          "operationId": "Devices_DeleteNote",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The note identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/advancedConfiguration/{configurationName}": {
        "delete": {
          "tags": [
            "Devices"
          ],
          "summary": "Delete Advanced Configuration based on the given DeviceId",
          "operationId": "Devices_DeleteAdvancedConfiguration",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The target device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "configurationName",
              "in": "path",
              "required": true,
              "description": "Only delete Device Advanced Configuration that is targeting to the given configuration name (e.g. AndroidPlusAgentSettings)",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/compliancePolicies": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve the status of all compliance policies assigned to a device",
          "description": "Retrieves the status of all compliance policies assigned to the specified device.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "Devices_GetCompliancePolicies",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully get the compliance policies status of a device",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceCompliancePolicy"
                }
              }
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/complianceExecutedActions": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve executable compliance actions triggered on a device",
          "description": "Retrieves executable compliance actions.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "Devices_GetComplianceExecutedActions",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A list of triggered executable actions",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExecutedActionInfo"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/compliancePolicies/{referenceId}/run": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Run a compliance policy on a specific device",
          "description": "Runs the specified compliance policy on the specified device.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "Devices_RunCompliancePolicy",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "Device Id.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of a compliance policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully start compliance policy evaluation for a device"
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/decryptActivationLockBypassCode": {
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Decrypts the Activation Lock Bypass Code",
          "description": "The Activation Lock Bypass Code is fetched from device and encrypted before saving it in MobiControl Database. This API performs the decryption of encrypted Activation Lock Bypass Code and returns it in plan text for submission on the Mac machine.<br />Requires the caller be granted the 'View Activation Lock Bypass Code' permission.<br /><br /><b>(Available Since MobiControl v2024.0.0)</b><br />",
          "operationId": "Devices_DecryptActivationLockBypassCode",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "DeviceId.",
              "x-nullable": false
            }
          ],
          "responses": {
            "403": {
              "description": "Forbidden."
            },
            "200": {
              "description": "Success.",
              "schema": {
                "type": "string"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>1805 - Device '{deviceId}' does not have a activation lock bypass code saved in SOTI MobiControl.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/installedApplications/page": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve Installed Applications for a Device",
          "description": "Returns a list of applications that are installed on a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\". Pagination, ordering and filtering parameters are available.<br /><B>(Available Since MobiControl v15.1.0)</B>",
          "operationId": "Devices_GetInstalledApplicationsPage",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "filter",
              "in": "query",
              "description": "filter for the return list",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "Order",
              "in": "query",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/DataRetrievalOrder"
              }
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/InstalledApplication"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/XtHubConfiguration": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Get XTreme Hub Advanced configuration for a given device",
          "description": "Returns the XTreme Hub advanced configuration either derived from parent group or applied to the device itself",
          "operationId": "Devices_GetXtHubConfiguration",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "Device Id",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "XtHubConfiguration object",
              "schema": {
                "$ref": "#/definitions/XtHubConfiguration"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/actionScripts": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve All Available Action Scripts Currently Saved on the System",
          "description": "<br />\r\n<b>(Available Since MobiControl v14.0.0)<br /><br />This API will be deprecated as of MobiControl v2024.1. Replace with GET /deviceScripts/type prior to v2024.1 to avoid service impact.</b>\r\n<br />",
          "operationId": "Devices_GetActionScripts",
          "parameters": [
            {
              "type": "string",
              "name": "scriptType",
              "in": "query",
              "x-schema": {
                "$ref": "#/definitions/ScriptType"
              },
              "x-nullable": true,
              "enum": [
                "Legacy",
                "JavaScript",
                "Powershell32",
                "Powershell"
              ],
              "x-enumType": "ScriptType"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A collection of action scripts",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceActionScript"
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Devices"
          ],
          "summary": "Add a New Device Action Script to the System",
          "description": "If an existing action script has the same name as the new script, an Id value of -1 will be returned.<br /><b>(Available Since MobiControl v14.0.0)<br /><br />This API will be deprecated as of MobiControl v2024.1. Replace with POST /deviceScripts prior to v2024.1 to avoid service impact.</b><br />",
          "operationId": "Devices_AddNewActionScript",
          "parameters": [
            {
              "name": "newScript",
              "in": "body",
              "required": true,
              "description": "The new action script. Max size 10MB.",
              "schema": {
                "$ref": "#/definitions/DeviceActionScript"
              },
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "replaceExisting",
              "in": "query",
              "description": "Replace the existing action script with the same name as this new one",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": false,
              "description": "The Id of the newly added action script, or -1 if an action script with the same name already exists.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/scripts": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve All Available Scripts of Provided Script Types Currently Saved on the System Defaults to ActionScript",
          "description": "<br />\r\n<b>(Available Since MobiControl v15.0.0)<br /><br />This API will be deprecated as of MobiControl v2024.1. Replace with GET /deviceScripts/type prior to v2024.1 to avoid service impact.</b>\r\n<br />",
          "operationId": "Devices_GetScripts",
          "parameters": [
            {
              "type": "array",
              "name": "scriptTypes",
              "in": "query",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A collection of action scripts",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceActionScript"
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/actionScripts/{id}": {
        "get": {
          "tags": [
            "Devices"
          ],
          "summary": "Retrieve the Specified Device Action Script",
          "description": "<br />\r\n<b>(Available Since MobiControl v14.0.0)<br /><br />This API will be deprecated as of MobiControl v2024.1. Replace with GET /deviceScripts/{referenceId} prior to v2024.1 to avoid service impact.</b>\r\n<br />",
          "operationId": "Devices_GetActionScript",
          "parameters": [
            {
              "type": "integer",
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The action script identifier",
              "format": "int32",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "The requested action script if it exists",
              "schema": {
                "$ref": "#/definitions/DeviceActionScript"
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Devices"
          ],
          "summary": "Update the Given Action Script Content",
          "description": "<br />\r\n<b>(Available Since MobiControl v14.0.0)<br /><br />This API will be deprecated as of MobiControl v2024.1. Replace with PUT /deviceScripts/{referenceId} prior to v2024.1 to avoid service impact.</b>\r\n<br />",
          "operationId": "Devices_UpdateActionScript",
          "parameters": [
            {
              "type": "integer",
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The action script identifier",
              "format": "int32",
              "x-nullable": false
            },
            {
              "name": "content",
              "in": "body",
              "required": true,
              "description": "The updated content. Max size 10MB.",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Devices"
          ],
          "summary": "Delete the Given Action Script from the System",
          "description": "<br />\r\n<b>(Available Since MobiControl v14.0.0)<br /><br />This API will be deprecated as of MobiControl v2024.1. Replace with DELETE /deviceScripts/{referenceId} prior to v2024.1 to avoid service impact.</b>\r\n<br />",
          "operationId": "Devices_DeleteActionScript",
          "parameters": [
            {
              "type": "integer",
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The action script identifier",
              "format": "int32",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directories/connections": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Retrieve the Names of All Currently Configured Directory Service Connections.",
          "description": "This returns the names of all currently configured directory server connections.\r\n                <br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Directories_GetLdapConnectionNames",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A list of the connection names.",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directories/{directoryConnectionName}/entries": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Retrieve Directory Service Users and/or Groups.",
          "description": "Returns Directory Service users and/or groups for a given connection based on the specified query parameters. The searchString requires one or more characters\r\n            and is used as the keyword in the search pattern of the user and/or group as defined in the MobiControl Directory Service connection settings. The response will include\r\n            properties specific to the object types returned (user or group).\r\n            <br /><b>(Available Since MobiControl v13.3.0)</b>",
          "operationId": "Directories_GetLdapEntities",
          "parameters": [
            {
              "type": "string",
              "name": "directoryConnectionName",
              "in": "path",
              "required": true,
              "description": "The directory connection that the search is to be performed on. Must be double URL-encoded (e.g. SOTI%2520Directory%2520Service). When called from this page, it should be encoded only once (SOTI%20Directory%20Service).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "required": true,
              "description": "Value to use as the search keyword in the defined Directory Service connection search pattern.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "type",
              "in": "query",
              "description": "Search directory for users and/or groups. Leave blank to search both Users and Groups.",
              "x-schema": {
                "$ref": "#/definitions/DirectorySearchType"
              },
              "default": "Both",
              "x-nullable": false,
              "enum": [
                "Both",
                "User",
                "Group"
              ],
              "x-enumType": "DirectorySearchType"
            },
            {
              "type": "array",
              "name": "memberOf",
              "in": "query",
              "description": "Limit results to members of this list of group SID values.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Failed to retrieve data from directory due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directories/entries": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Retrieve All Directory Services Users and/or Groups.",
          "description": "Returns Directory Service users and/or groups for all connections based on the specified query parameters. The searchString required one or more characters\r\n            and is used as the keyword in the search pattern of the users and/or groups as defined in the MobiControl Directory Service connection settings. The response will include\r\n            properties specific to the object types returned(users or groups).\r\n            <br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "Directories_GetAllLdapEntities",
          "parameters": [
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "required": true,
              "description": "Value to use as the search keyword in the defined Directory Service connection search pattern.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "type",
              "in": "query",
              "description": "Search directory for users and/or groups. Leave blank to search both Users and Groups.",
              "x-schema": {
                "$ref": "#/definitions/DirectorySearchType"
              },
              "default": "Both",
              "x-nullable": false,
              "enum": [
                "Both",
                "User",
                "Group"
              ],
              "x-enumType": "DirectorySearchType"
            },
            {
              "type": "array",
              "name": "memberOf",
              "in": "query",
              "description": "Limit results to members of this list of group SID values.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Failed to retrieve data from directory due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/ldap/syncFrequency": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns the frequency for synchronization of Users Info with Directory Servers.",
          "description": "<br />Returns the frequency at which the enrolled users information within MobiControl will be synchronized with the configured Directory Servers\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_GetLdapGroupSync",
          "responses": {
            "200": {
              "description": "Returns LDAP Directory Service Sync frequency settings.",
              "schema": {
                "$ref": "#/definitions/LdapSyncInterval"
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Directories"
          ],
          "summary": "Updates the frequency for synchronization of Users Info with Directory Servers.",
          "description": "<br />Updates the frequency at which the enrolled users information within MobiControl will be synchronized with the configured Directory Servers. Request format { \"\"Period\"\": \"\"DD.HH:MM:SS\"\" }\r\n            <br />where DD = Day(s); HH=Hour(s) (Range:0-23); MM=Minute(s); SS=Second(s)\r\n            <br />Examples:\r\n            <br />Format to set as 2 days will be { \"\"Period\"\": \"\"2.0:00:00\"\" }\r\n            <br />Format to set as 2 hours will be { \"\"Period\"\": \"\"2:00:00\"\" }\r\n            <br />The value { \"\"Period\"\": \"\"24:00:00\"\" } will mean 24 days.\r\n            <br />Requires the caller to be granted \"Manage Servers and Global Settings\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_SetLdapGroupSync",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Define the values in the prescribed format for the sync frequency.",
              "schema": {
                "$ref": "#/definitions/LdapSyncInterval"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully set LDAP Directory Service Sync frequency settings."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns a list of all configured LDAP and Azure directories.",
          "description": "This returns a list of all configured LDAP and AZURE Directories\r\n            <br />Requires the caller be granted the \"View Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Directories_GetAll",
          "responses": {
            "200": {
              "description": "Successfully returned LDAP and AZURE Directories.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DirectoryEntryResponse"
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/ldapAndAzureByAppTypes": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns a list of configured LDAP and Azure directories.",
          "description": "Returns a list of configured LDAP directories and Azure directories using only custom Azure applications.\r\n            Additionally, Azure application type parameter can be used to return the Azure directories with default Azure applications.\r\n            <br />Requires the caller be granted the \"View Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "Directories_GetLdapAndAzureByAppTypes",
          "parameters": [
            {
              "type": "array",
              "name": "azureAppTypes",
              "in": "query",
              "description": "List of Azure application types.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/AzureApplicationType"
              },
              "x-enumType": "AzureApplicationType"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returned LDAP and Azure directories.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DirectoryResponse"
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/ldap/{referenceId}": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns the specified LDAP Directory details.",
          "description": "Returns the specified LDAP Directory details against its reference ID\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Directories_GetById",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Identifier for the LDAP Directory connection to be retrieved.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returned LDAP Directory.",
              "schema": {
                "$ref": "#/definitions/LdapConnection"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Directories"
          ],
          "summary": "Updates the specified LDAP Directory details.",
          "description": "This updates the existing LDAP Directory connection using its requested Id. This returns the updated connection details\r\n            <br />Requires the caller be granted the \"Manage Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Directories_Update",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Identifier for the LDAP Directory connection to be updated.",
              "x-nullable": false
            },
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "LDAP Directory connection details.",
              "schema": {
                "$ref": "#/definitions/LdapConnection"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updated LDAP Directory.",
              "schema": {
                "$ref": "#/definitions/LdapConnection"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Directories"
          ],
          "summary": "Deletes the specified LDAP Directory.",
          "description": "Deletes the specified LDAP Directory connection under MobiControl\r\n            <br />Requires the caller be granted the \"Manage Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>.",
          "operationId": "Directories_DeleteLdap",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Identifier for the LDAP Directory connection to be deleted.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted LDAP Directory."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/ldap/defaultSchemas": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns the default schema of LDAP attributes.",
          "description": "This returns the default schema of LDAP attributes\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Directories_GetDefaultSchemas",
          "responses": {
            "200": {
              "description": "Successfully returned LDAP schema.",
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LdapAttribute"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/ldap/providerTypes": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns the context provider type.",
          "description": "This returns the context provider type i.e the types of Directories available\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Directories_GetProviderTypes",
          "responses": {
            "200": {
              "description": "Successfully returned context provider type.",
              "schema": {
                "type": "object",
                "x-dictionaryKey": {
                  "$ref": "#/definitions/ContextProviderType"
                },
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/ldap": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns a list of all LDAP Directories.",
          "description": "This returns a list of all LDAP Directories\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Directories_GetAllLdap",
          "responses": {
            "200": {
              "description": "Successfully Returns a list of LDAP Directories.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DirectoryEntryResponse"
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Directories"
          ],
          "summary": "Creates a new LDAP Directory.",
          "description": "This creates a new LDAP Directory connection under MobiControl\r\n            <br />Requires the caller be granted the \"Manage Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Directories_Add",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Contract for creating the LDAP Directory connection.",
              "schema": {
                "$ref": "#/definitions/LdapConnection"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "201": {
              "description": "Successfully created LDAP Directory.",
              "schema": {
                "$ref": "#/definitions/LdapConnection"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/ldap/actions/testConnection": {
        "post": {
          "tags": [
            "Directories"
          ],
          "summary": "Creates a LDAP Directory Test connection request.",
          "description": "This is for testing the LDAP Directory connection. This returns the test connection result\r\n            <br />Requires the caller be granted the \"Manage Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Directories_TestConnection",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Contract for creating the LDAP Directory test connection.",
              "schema": {
                "$ref": "#/definitions/LdapConnection"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully tested connection.",
              "schema": {
                "$ref": "#/definitions/TestConnectionResponse"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/azure": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns a list of all Azure Directories.",
          "description": "This returns a list of all Azure Directories.\r\n            <br />Requires the caller be granted the \"View Directory Services\" permission\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b><br />From v15.5.0 onward, communication to Azure Directory is done through Microsoft Graph API instead of Azure Graph API. The 'AzureGraphApiAddress' field should contain a valid Microsoft Graph API base address.",
          "operationId": "Directories_GetAllAzure",
          "responses": {
            "200": {
              "description": "Successfully Returns a list of Azure Directories.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AzureGroup"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Directories"
          ],
          "summary": "Creates a new Azure Directory.",
          "description": "This returns created Azure directory contract.\r\n            <br />Requires the caller to be granted \"Manage Directory Services\" permission\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b><br />From v15.5.0 onward, communication to Azure Directory is done through Microsoft Graph API instead of Azure Graph API. The 'AzureGraphApiAddress' field should contain a valid Microsoft Graph API base address.",
          "operationId": "Directories_AddAzureDirectory",
          "parameters": [
            {
              "name": "azureGroup",
              "in": "body",
              "required": true,
              "description": "The Azure group object.",
              "schema": {
                "$ref": "#/definitions/AzureGroup"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully created a new Azure Directory.",
              "schema": {
                "$ref": "#/definitions/AzureGroup"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6300 - Duplicate connection name not allowed.</li><li>6313 - Azure Graph API incorrect.</li><li>6316 - Microsoft Single Sign-On application is already referenced.</li><li>6317 - Azure tenant is already referenced in another Azure connection with the same app type.</li><li>6319 - Application belongs to another tenant.</li><li>6322 - Azure AD Join Cloud Enrollment application is already referenced.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/azureByAppTypes": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns a list of configured Azure directories.",
          "description": "Returns a list of configured Azure directories using only custom Azure applications. Additionally, Azure application type parameter can be used to return the Azure directories with default Azure applications.\r\n            <br />Requires the caller be granted the \"View Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "Directories_GetAzureByAppTypes",
          "parameters": [
            {
              "type": "array",
              "name": "azureAppTypes",
              "in": "query",
              "description": "List of Azure app types.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/AzureApplicationType"
              },
              "x-enumType": "AzureApplicationType"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returned Azure directories.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AzureGroup"
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/azure/{referenceId}": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns the specified Azure Directory based on referenceId.",
          "description": "This returns specified Azure Directory based on referenceId.\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b><br />From v15.5.0 onward, communication to Azure Directory is done through Microsoft Graph API instead of Azure Graph API. The 'AzureGraphApiAddress' field should contain a valid Microsoft Graph API base address.",
          "operationId": "Directories_GetAzureByReferenceId",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The Azure reference identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Returns the specified Azure Directory.",
              "schema": {
                "$ref": "#/definitions/AzureGroup"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Directories"
          ],
          "summary": "Updates the specified Azure directory profile for requested referenceId.",
          "description": "This is for updating the existing Azure directory.\r\n            <br />Requires the caller to be granted \"Manage Directory Services\" permission\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b><br />From v15.5.0 onward, communication to Azure Directory is done through Microsoft Graph API instead of Azure Graph API. The 'AzureGraphApiAddress' field should contain a valid Microsoft Graph API base address.",
          "operationId": "Directories_UpdateAzureByReferenceId",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The Azure reference identifier.",
              "x-nullable": false
            },
            {
              "name": "azureGroup",
              "in": "body",
              "required": true,
              "description": "The Azure group object.",
              "schema": {
                "$ref": "#/definitions/AzureGroup"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updated the specified Azure directory profile.",
              "schema": {
                "$ref": "#/definitions/AzureGroup"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6300 - Duplicate connection name not allowed.</li><li>6313 - Azure Graph API incorrect.</li><li>6316 - Microsoft Single Sign-On application is already referenced.</li><li>6317 - Azure tenant is already referenced in another Azure connection with the same app type.</li><li>6319 - Application belongs to another tenant.</li><li>6322 - Azure AD Join Cloud Enrollment application is already referenced.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Directories"
          ],
          "summary": "Deletes the specified Azure directory.",
          "description": "This is for deleting the Azure connection record based on referenceId.\r\n            <br />Requires the caller to be granted \"Manage Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_DeleteAzure",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The Azure reference identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully record deleted."
            },
            "204": {
              "description": "No Content Found."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6302 - No record found for the given Id</li><li>6303 - Cannot delete Azure connection, because it's been referenced.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/azure/tenants": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns a list of all Azure Tenants.",
          "description": "This returns a list of all Azure Tenants.\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_GetAllAzureTenants",
          "responses": {
            "200": {
              "description": "Successfully Returns a list of Azure Tenants.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AzureTenant"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Directories"
          ],
          "summary": "Creates a new Azure Tenant.",
          "description": "This returns created Azure Tenant contract.\r\n            <br />Requires the caller to be granted \"Manage Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_AddAzureTenant",
          "parameters": [
            {
              "name": "azureTenant",
              "in": "body",
              "required": true,
              "description": "The Azure tenant object.",
              "schema": {
                "$ref": "#/definitions/AzureTenant"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "201": {
              "description": "Successfully created a new Azure Tenant.",
              "schema": {
                "$ref": "#/definitions/AzureTenant"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6304 - Duplicate Azure Tenant Id not allowed.</li><li>6305 - Duplicate Name for Azure Tenant not allowed.</li><li>6306 - Duplicate Azure Tenant Name not allowed.</li><li>6311 - Duplicate Azure Tenant Metadata Endpoint Address not allowed.</li><li>6312 - Azure Tenant Metadata Endpoint Address incorrect.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/azure/tenants/{tenantId}": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns the specified Azure Tenant based on requested tenantId.",
          "description": "This returns Azure Tenant based on requested tenantId.\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_GetAzureTenantById",
          "parameters": [
            {
              "type": "string",
              "name": "tenantId",
              "in": "path",
              "required": true,
              "description": "The Azure tenant identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Returns the specified Azure Tenant.",
              "schema": {
                "$ref": "#/definitions/AzureTenant"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Directories"
          ],
          "summary": "Updates the specified Azure Tenant for requested tenantId.",
          "description": "This is for updating the existing Azure Tenant.\r\n            <br />Requires the caller to be granted \"Manage Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_UpdateAzureTenant",
          "parameters": [
            {
              "type": "string",
              "name": "tenantId",
              "in": "path",
              "required": true,
              "description": "The Azure tenant identifier.",
              "x-nullable": false
            },
            {
              "name": "azureTenant",
              "in": "body",
              "required": true,
              "description": "The Azure tenant object.",
              "schema": {
                "$ref": "#/definitions/AzureTenant"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updated the specified Azure Tenant.",
              "schema": {
                "$ref": "#/definitions/AzureTenant"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6302 - Azure Tenant ID do not exist.</li><li>6305 - Duplicate Name for Azure Tenant not allowed.</li><li>6306 - Duplicate Azure Tenant Name not allowed.</li><li>6311 - Duplicate Azure Tenant Metadata Endpoint Address not allowed.</li><li>6312 - Azure Tenant Metadata Endpoint Address incorrect.</li>.\r\n            </ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Directories"
          ],
          "summary": "Deletes the specified Azure Tenant.",
          "description": "This is for deleting the Azure tenant based on tenantId.\r\n            <br />Requires the caller to be granted \"Manage Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_DeleteAzureTenant",
          "parameters": [
            {
              "type": "string",
              "name": "tenantId",
              "in": "path",
              "required": true,
              "description": "The Azure tenant identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully record deleted."
            },
            "204": {
              "description": "No Content Found."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6302 - Azure Tenant ID do not exist.</li><li>6301 - Azure Tenant is referenced.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/azure/tenants/{tenantId}/applications": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns a list of all Azure Applications based on TenantId.",
          "description": "This returns all Azure Applications based on TenantId.\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_GetAllAzureApplicationsByTenantId",
          "parameters": [
            {
              "type": "string",
              "name": "tenantId",
              "in": "path",
              "required": true,
              "description": "The Azure tenant identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Returns a list of Azure Applications.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AzureApplication"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Directories"
          ],
          "summary": "Creates a new Azure Application.",
          "description": "This returns created Azure Application contract.\r\n            <br />Requires the caller to be granted \"Manage Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_AddAzureApplication",
          "parameters": [
            {
              "type": "string",
              "name": "tenantId",
              "in": "path",
              "required": true,
              "description": "The tenant identifier.",
              "x-nullable": false
            },
            {
              "name": "azureApplication",
              "in": "body",
              "required": true,
              "description": "The Azure application object.",
              "schema": {
                "$ref": "#/definitions/AzureApplication"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "201": {
              "description": "Successfully created a new Azure Application.",
              "schema": {
                "$ref": "#/definitions/AzureApplication"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6302 - Azure Tenant ID do not exist.</li><li>6309 - Duplicate Azure Application Name not allowed.</li><li>6310 - Duplicate Azure Application Client ID not allowed.</li><li>6318 - Changes on Microsoft Single Sign-On application are not allowed.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Directories"
          ],
          "summary": "Updates the specified Azure Application for requested applicationId.",
          "description": "This is for updating an existing Azure Application.\r\n            <br />Requires the caller to be granted \"Manage Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_UpdateAzureApplication",
          "parameters": [
            {
              "type": "string",
              "name": "tenantId",
              "in": "path",
              "required": true,
              "description": "The tenant identifier.",
              "x-nullable": false
            },
            {
              "name": "azureApplication",
              "in": "body",
              "required": true,
              "description": "The Azure application object.",
              "schema": {
                "$ref": "#/definitions/AzureApplication"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updated the specified Azure Application.",
              "schema": {
                "$ref": "#/definitions/AzureApplication"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6302 - Azure Tenant ID do not exist.</li><li>6309 - Duplicate Azure Application Name not allowed.</li><li>6310 - Duplicate Azure Application Client ID not allowed.</li><li>6318 - Changes on Microsoft Single Sign-On application are not allowed.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/directoryTypes/azure/tenants/applications/{applicationId}": {
        "get": {
          "tags": [
            "Directories"
          ],
          "summary": "Returns the specified Azure Application based on requested applicationId.",
          "description": "This returns Azure Application based on requested applicationId\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_GetAzureApplicationById",
          "parameters": [
            {
              "type": "string",
              "name": "applicationId",
              "in": "path",
              "required": true,
              "description": "The application reference identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Returns the specified Azure Application.",
              "schema": {
                "$ref": "#/definitions/AzureApplication"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Directories"
          ],
          "summary": "Deletes the specified Azure Application.",
          "description": "This is for deleting the Azure application based on applicationId.\r\n            <br />Requires the caller to be granted \"Manage Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "Directories_DeleteAzureApplication",
          "parameters": [
            {
              "type": "string",
              "name": "applicationId",
              "in": "path",
              "required": true,
              "description": "The Azure application identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully record deleted."
            },
            "204": {
              "description": "No Content Found."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6308 - Azure Application is referenced.</li><li>6318 - Changes on Microsoft Single Sign-On application are not allowed.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/emailProfiles": {
        "get": {
          "tags": [
            "Email"
          ],
          "summary": "Get All Email Profiles",
          "description": "This returns all email profiles.<br /><b>(Available Since MobiControl v14.2.0)</b>",
          "operationId": "Email_GetEmailProfiles",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EmailProfile"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/emailProfiles/{name}": {
        "get": {
          "tags": [
            "Email"
          ],
          "summary": "Retrieve a Single Email Profile",
          "description": "This returns a single email profile based on the specific query parameters.<br /><b>(Available Since MobiControl v14.2.0)</b>",
          "operationId": "Email_GetEmailProfile",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "The name of the profile",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/EmailProfile"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollment/userUnenrollAction": {
        "get": {
          "tags": [
            "Enrollment Configuration"
          ],
          "summary": "Returns the settings for the user-initiated unenroll action",
          "description": "<br />This returns the settings of the actions to be performed when the device is unenrolled by end-user<br />Requires the caller be granted the \"Web Console Access\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "EnrollmentConfiguration_GetUnenrollActionSettings",
          "responses": {
            "200": {
              "description": "Successfully set log levels",
              "schema": {
                "$ref": "#/definitions/UserUnenrollmentSettings"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Enrollment Configuration"
          ],
          "summary": "Updates the settings for the user-initiated unenroll action",
          "description": "<br />This updates the settings of the actions to be performed when the device is unenrolled by end-user<br />Requires the caller to be granted \"Manage Servers and Global Settings\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "EnrollmentConfiguration_SetUnenrollActionSettings",
          "parameters": [
            {
              "name": "unenrollActionSettings",
              "in": "body",
              "required": true,
              "description": "Define the values in key value format for the action to be taken when a device is unenrolled by the end-user. Check Model for details.",
              "schema": {
                "$ref": "#/definitions/UserUnenrollmentSettings"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully set user unenrollment settings"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/externalServices/status": {
        "get": {
          "tags": [
            "External Services"
          ],
          "summary": "Gets the Status of SOTI Services.",
          "description": "Get the status of SOTI Services that are used by MobiControl. Requires the caller be granted \"View System Health\" permission.<br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "ExternalServices_GetExternalServicesStatus",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExternalServicesStatus"
                }
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/geofences": {
        "post": {
          "tags": [
            "Geofences"
          ],
          "summary": "Adds a New Geofence",
          "description": "Adds a new geofence with the given name and vertices.<br />Name must be unique.<br />For a geofence of N vertices, N+1 vertices must be specified in the input with the last vertex exactly equal to the first vertex.<br />Requires the caller be granted the \"Create Geofence\" permission.",
          "operationId": "Geofences_AddGeofence",
          "parameters": [
            {
              "name": "geofenceAddRequest",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GeofenceAdd"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the newly created geofence.",
              "schema": {
                "$ref": "#/definitions/Geofence"
              }
            },
            "400": {
              "description": "Contract validation failed"
            },
            "403": {
              "description": "Unauthorized access"
            },
            "422": {
              "description": "Geofence request validation failed"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/geofences/{name}": {
        "delete": {
          "tags": [
            "Geofences"
          ],
          "summary": "Removes a Geofence",
          "description": "Removes a geofence by name. The geofence to be removed must not be currently used by any rule. Requires the caller be granted \"Remove Geofence\" permission.",
          "operationId": "Geofences_DeleteGeofence",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully removed the geofence with the specified name"
            },
            "403": {
              "description": "Unauthorized access"
            },
            "422": {
              "description": "Geofence is been referenced by at least one rule."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Geofences"
          ],
          "summary": "Retrieves a Single Geofence",
          "description": "Retrieves a single geofence by name. Requires the caller be granted \"View Geofence\" permission.",
          "operationId": "Geofences_GetGeofence",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the geofence with specified name",
              "schema": {
                "$ref": "#/definitions/Geofence"
              }
            },
            "403": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Geofences"
          ],
          "summary": "Renames a Geofence",
          "description": "Renames an existing geofence. The geofence to be renamed must exists. The new name must be unique. Requires the caller be granted \"Rename Geofence\" permission.",
          "operationId": "Geofences_RenameGeofence",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "x-nullable": false
            },
            {
              "name": "geofenceName",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GeofenceRename"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully renamed the geofence"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "403": {
              "description": "Unauthorized access"
            },
            "422": {
              "description": "Geofence with specified name already exists"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/geofences/summary": {
        "get": {
          "tags": [
            "Geofences"
          ],
          "summary": "Retrieves a Summary of All Geofences",
          "description": "Retrieves a summary of all geofences. Requires the caller be granted \"View Geofence\" permission.",
          "operationId": "Geofences_GetSummaries",
          "responses": {
            "200": {
              "description": "Returns a list of geofence summaries",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeofenceSummary"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders/connections": {
        "get": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Retrieve the names of all currently configured Identity Provider(IDP) connections.",
          "description": "Retrieves all Identity Provider connections configured within a MobiControl environment.\r\n            <br />Requires the caller be granted the \"View Directory Services\" permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "IdentityProviders_GetIdentityProviderNames",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A list of the connection names.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/IdentityProvider"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders/{identityProviderReferenceId}/Users": {
        "get": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Retrieve Identity Provider Users.",
          "description": "Returns Identity Provider users for a given Identity Provider connection based on the specified query parameters. The searchString requires one or more characters\r\n            and is used as the keyword in the search pattern of the user as defined in the MobiControl Identity Provider connection settings.\r\n            <br />Requires the caller be granted the \"Lookup Directory Users and Group Membership\" permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "IdentityProviders_GetIdentityProviderUsers",
          "parameters": [
            {
              "type": "string",
              "name": "identityProviderReferenceId",
              "in": "path",
              "required": true,
              "description": "Identity Provider Reference Id.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "required": true,
              "description": "Value to use as the search keyword in the defined Identity Provider connection search pattern.",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/IdentityProviderUser"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders/{identityProviderReferenceId}/LdapEntities": {
        "get": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Retrieve Identity Provider Users.",
          "description": "Returns Identity Provider Ldap users for a given Identity Provider connection based on the specified query parameters. The searchString requires one or more characters\r\n            and is used as the keyword in the search pattern of the user as defined in the MobiControl Identity Provider connection settings.\r\n            <br />Requires the caller be granted the \"Lookup Directory Users and Group Membership\" permission.",
          "operationId": "IdentityProviders_GetIdentityProviderLdapEntities",
          "parameters": [
            {
              "type": "string",
              "name": "identityProviderReferenceId",
              "in": "path",
              "required": true,
              "description": "Identity Provider Reference Id.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "required": true,
              "description": "Value to use as the search keyword in the defined Identity Provider connection search pattern.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "type",
              "in": "query",
              "description": "The type of object that can be searched in a directory.",
              "x-schema": {
                "$ref": "#/definitions/DirectorySearchType2"
              },
              "default": "Both",
              "x-nullable": false,
              "enum": [
                "Both",
                "User",
                "Group"
              ],
              "x-enumType": "DirectorySearchType"
            }
          ],
          "responses": {
            "500": {
              "description": "Failed to retrieve data from directory due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders": {
        "get": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Retrieve all Identity Providers configurations.",
          "description": "Retrieve the configuration information for all identity providers.\r\n            <br />Requires the caller be granted the \"View Directory Services\" permission.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "IdentityProviders_GetAll",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/IdentityProvider"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Create an Identity Provider.",
          "description": "Creates a new Identity Provider\r\n            <br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "IdentityProviders_AddExternalIdentityProvider",
          "parameters": [
            {
              "name": "identityProvider",
              "in": "body",
              "required": true,
              "description": "contract to create a new identity Provider.",
              "schema": {
                "$ref": "#/definitions/ExternalIdentityProvider"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Contract validation exception."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Missing mandatory parameter Name.</li><li>1 - Missing mandatory parameter Identity Provider Entity ID.</li><li>1 - Missing mandatory parameter Identity Provider URL.</li><li>1 - Missing mandatory parameter Certificates.</li><li>1 - Missing mandatory parameter Directory.</li><li>1 - Missing mandatory parameter List Attribute.</li><li>1 - Missing mandatory parameter Base64 Content.</li><li>2 - Parameter Identity Provider URL has invalid value string.</li><li>2 - Parameter Logout URL has invalid value string.</li><li>2 - Parameter Identity Provider Metadata URL has invalid value string.</li><li>2 - Parameter LdapConnectionReferenceId has invalid value string.</li><li>2500 - Invalid Certificate format for '{0}' provider. The certificate should be in X509 format.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Update an existing Identity Provider.",
          "description": "Updates an existing Identity Provider\r\n            <br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "IdentityProviders_UpdateExternalIdentityProvider",
          "parameters": [
            {
              "name": "identityProvider",
              "in": "body",
              "required": true,
              "description": "contract to update the existing identity Provider.",
              "schema": {
                "$ref": "#/definitions/ExternalIdentityProvider"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Contract validation exception."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Missing mandatory parameter Name.</li><li>1 - Missing mandatory parameter Identity Provider Entity ID.</li><li>1 - Missing mandatory parameter Identity Provider URL.</li><li>1 - Missing mandatory parameter Certificates.</li><li>1 - Missing mandatory parameter Directory.</li><li>1 - Missing mandatory parameter List Attribute.</li><li>2 - Parameter Identity Provider URL has invalid value string.</li><li>2 - Parameter Logout URL has invalid value string.</li><li>2 - Parameter Identity Provider Metadata URL has invalid value string.</li><li>2 - Parameter LdapConnectionReferenceId has invalid value string.</li><li>2500 - Invalid Certificate format for '{0}' provider. The certificate should be in X509 format.</li><li>2501 - Entity with Id '{0}' does not exist</li><li>2503 - This Identity Provider is referenced by other object(s) and cannot be modified or deleted.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders/{name}": {
        "get": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Retrieve Identity Providers (IdP)configuration for a specified IdP name.",
          "description": "Retrieve the configuration information for specified identity provider.\r\n            <br />Requires the caller be granted the \"View Directory Services\" permission.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "IdentityProviders_Get",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/IdentityProvider"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders/sotiIdp": {
        "post": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Configure SOTI Identity Provider.",
          "description": "This allows the configuration of SOTI Identity as an Identity Provider (IdP) to MobiControl, by entering the Client ID &amp; Client Secret information received from SOTI Identity.\r\n            Once this configuration has been completed, all IdP user management will occur in SOTI Identity and not in MobiControl.\r\n            MobiControl will only manage Local Users which were not migrated to SOTI Identity.  This configuration will not impact permissions.  Client ID &amp; Client Secret can be retrieved from\r\n            SOTI Identity when SOTI Professional Services activates SOTI Identity on SalesForce.\r\n            <br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "IdentityProviders_CreateSotiIdentityProvider",
          "parameters": [
            {
              "name": "identityProvider",
              "in": "body",
              "required": true,
              "description": "Mobicontrol Client ID and Secret from SOTI Identity.",
              "schema": {
                "$ref": "#/definitions/SotiIdentityProvider"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/SotiIdentityProvider"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Updating the SOTI Identity Provider connection.",
          "description": "Update the client secret of the Identity Provider for Soti Identity.\r\n            <br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br /><b>(Available Since MobiControl v15.0.0)</b>",
          "operationId": "IdentityProviders_UpdateSotiIdentityProvider",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/UpdateSotiIdentityProvider"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders/sotiIdp/actions/sync": {
        "post": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Syncs available providers/consumers list from the SOTI Identity.",
          "description": "This API triggers a reminder to sync the available list of  providers/consumers from SOTI Identity.\r\n            <br />Requires the caller be granted the \"Manage Console Authentication\" permission.\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "IdentityProviders_SyncSotiIdentityProvider",
          "parameters": [
            {
              "type": "boolean",
              "name": "syncProviders",
              "in": "query",
              "required": true,
              "description": "if set to true, syncs providers.",
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "syncConsumers",
              "in": "query",
              "required": true,
              "description": "if set to true, syncs consumers.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "The operation has completed successfully."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3103 - SOTI Identity is not configured.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders/{referenceId}": {
        "delete": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Deleting the identity provider connection.",
          "description": "Delete Identity Provider for a given connection based on the specified ReferenceID. The ReferenceID can be obtained by running the GET/IdentityProviders api.\r\n            Using this API will remove all references to the Identity Provider, including all users and user groups / roles which were used.\r\n            <br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br /><b>(Available Since MobiControl v15.0.0)</b>",
          "operationId": "IdentityProviders_Delete",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of Identity Provider.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders/validatesotiidp": {
        "post": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Validate the Client Credentials.",
          "description": "Validate the Soti Identity Client Credentials.\r\n            <br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission.\r\n            <b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "IdentityProviders_ValidateClientCredentials",
          "parameters": [
            {
              "name": "identityProvider",
              "in": "body",
              "required": true,
              "description": "SotiIdentityProvider.",
              "schema": {
                "$ref": "#/definitions/SotiIdentityProvider"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns Boolean value.",
              "schema": {
                "type": "boolean"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders/defaultidpuserattributesschema": {
        "get": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Gets the default IdP User Attributes Schema.",
          "description": "Requires the caller be granted the \"View Directory Services\" permission.",
          "operationId": "IdentityProviders_GetDefaultIdPUserAttributesSchema",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AttributeMapping"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders/certificate": {
        "get": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Returns the MobiControl IdP certificate.",
          "description": "Returns the MobiControl IdP certificate required for binding MobiControl with an IDP\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "IdentityProviders_GetMobiControlIdPCertificate",
          "responses": {
            "401": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/identityProviders/metadata": {
        "get": {
          "tags": [
            "Identity Providers"
          ],
          "summary": "Returns the MobiControl IdP metadata.",
          "description": "Returns the MobiControl IdP metadata  required for binding MobiControl with an IDP\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "IdentityProviders_GetMobiControlMetadata",
          "responses": {
            "401": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/jobs": {
        "get": {
          "tags": [
            "Jobs"
          ],
          "summary": "Gets list of jobs.",
          "operationId": "Jobs_GetJobs",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/BackgroundJob"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/locate/timeOut": {
        "put": {
          "tags": [
            "Locate Timeout"
          ],
          "summary": "Updates the Locate Timeout value",
          "description": "This updates the timeout duration in seconds to be used by MobiControl when it is trying to locate a device<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission<br /><B>(Available Since MobiControl v15.4.0)</B>",
          "operationId": "LocateTimeout_AddLocateTimeout",
          "parameters": [
            {
              "name": "locateTimeout",
              "in": "body",
              "required": true,
              "description": "Maximum duration in seconds to locate a device",
              "schema": {
                "$ref": "#/definitions/LocateTimeout"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully add Locate Timeout"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Locate Timeout"
          ],
          "summary": "Returns the Locate Timeout value",
          "description": "This returns the timeout duration in seconds to be used by MobiControl when it is trying to locate a device<br />Requires the caller be granted the \"Web Console Access\" permission<br /><B>(Available Since MobiControl v15.4.0)</B>",
          "operationId": "LocateTimeout_RetrieveLocateTimeout",
          "responses": {
            "200": {
              "description": "Returns Locate Timeout",
              "schema": {
                "$ref": "#/definitions/LocateTimeout"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/logs/events": {
        "get": {
          "tags": [
            "Logs"
          ],
          "summary": "Retrieve Event Log Descriptions",
          "description": "Retrieves global event log descriptions. Requires the caller be granted \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Logs_GetAllEventDescriptors",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Returns list of events with descriptions for event names and event alert messages.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LogEventDescriptor"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/logs/summary/device/{deviceId}": {
        "get": {
          "tags": [
            "Logs"
          ],
          "summary": "Retrieve Summary of Logs for a Device",
          "description": "Returns a count of logs specific to a device and specified time period. Device can be identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Logs_GetLogsSummaryByDevice",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Returns logs summary for a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\"",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LogEntryCount"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/logs/device/{deviceId}": {
        "get": {
          "tags": [
            "Logs"
          ],
          "summary": "Retrieve Logs for a Device",
          "description": "Retrieve device event logs specific to a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Limit the results to matching criteria such as event severity and date range. Requires the caller be granted the \"View Groups\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Logs_GetLogsByDevice",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "List of log severities to include into result set",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity2"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "array",
              "name": "logSources",
              "in": "query",
              "description": "List of log sources to include into result set",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventOriginator2"
              },
              "x-enumType": "EventOriginator"
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Returns logs for a device identified by its device ID, or the device's MAC address when deviceId is prefixed with \"mac:\"",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LogEntry"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/logs/server/{serverIdentity}": {
        "get": {
          "tags": [
            "Logs"
          ],
          "summary": "Gets the logs by server.",
          "description": "Retrieve server logs for a specific server identified by its server Identity. Limit the results to matching criteria such as server type, log Severities, log Sources, and date range.<br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Logs_GetLogsByServer",
          "parameters": [
            {
              "type": "string",
              "name": "serverIdentity",
              "in": "path",
              "required": true,
              "description": "The server identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "serverType",
              "in": "query",
              "required": true,
              "description": "Type of the server.",
              "x-schema": {
                "$ref": "#/definitions/ServerType"
              },
              "x-nullable": false,
              "enum": [
                "Deployment",
                "ManagementService",
                "MailServer",
                "Unknown"
              ],
              "x-enumType": "ServerType"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The start date.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The end date.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "The log severities.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity2"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "array",
              "name": "logSources",
              "in": "query",
              "description": "The log sources.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventOriginator2"
              },
              "x-enumType": "EventOriginator"
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LogEntry"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/logs/servertype/{serverType}": {
        "get": {
          "tags": [
            "Logs"
          ],
          "summary": "Gets the type of the logs by server.",
          "description": "Retrieve server logs for servers identified by the server Type. Limit the results to matching criteria such as server type, log Severities, log Sources, and date range.<br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Logs_GetLogsByServerType",
          "parameters": [
            {
              "type": "string",
              "name": "serverType",
              "in": "path",
              "required": true,
              "description": "Type of the server.",
              "x-schema": {
                "$ref": "#/definitions/ServerType"
              },
              "x-nullable": false,
              "enum": [
                "Deployment",
                "ManagementService",
                "MailServer",
                "Unknown"
              ],
              "x-enumType": "ServerType"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The start date.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The end date.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "The log severities.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity2"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "array",
              "name": "logSources",
              "in": "query",
              "description": "The log sources.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventOriginator2"
              },
              "x-enumType": "EventOriginator"
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LogEntry"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/logs/device/{deviceId}/availableAgentLogTypes": {
        "get": {
          "tags": [
            "Logs"
          ],
          "summary": "Retrieve Device-side Log Types for a Device",
          "description": "Retrieve available types of device-side (agent) logs that can be retrieved for a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Download Agent Logs\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Logs_GetAvailableAgentLogTypes",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A list of AgentLogType available for device with given ID.",
              "schema": {
                "$ref": "#/definitions/AvailableAgentLogTypes"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/logs/summary/group/{path}": {
        "get": {
          "tags": [
            "Logs"
          ],
          "summary": "Retrieve Summary of Logs for a Device Group",
          "description": "Returns a count of logs specific to devices within a device group and specified time period. Device group can be identified by its reference ID (recommended) or path. Requires the caller be granted the \"View Groups\" permission for the specified device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Logs_GetLogsSummaryByGroup",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The device group identifier for parent device group taken from Reference ID. Deprecated: Can also be a path of parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Returns logs summary for a device group identified by its path",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LogEntryCount"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/logs/group/{path}": {
        "get": {
          "tags": [
            "Logs"
          ],
          "summary": "Retrieve Logs for a Device Group",
          "description": "Retrieve event logs for devices within a specific device group identified by its reference ID (recommended) or path. Limit the results to matching criteria such as event severity and date range. Requires the caller be granted the \"View Groups\" permission for the specified device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Logs_GetLogsByGroup",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The device group identifier for parent device group taken from Reference ID. Deprecated: Can also be a path of parent device group. Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "List of log severities to include into result set",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity2"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "array",
              "name": "logSources",
              "in": "query",
              "description": "List of log sources to include into result set",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventOriginator2"
              },
              "x-enumType": "EventOriginator"
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Returns logs for a device group by its path",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LogEntry"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages": {
        "get": {
          "tags": [
            "Packages"
          ],
          "summary": "Retrieve a List of Packages",
          "description": "Returns a list of all packages in the system including versions of a package. Requires the caller be granted the \"View Packages\" permission.<br /><B>(Available Since MobiControl v14.3.0)</B>",
          "operationId": "Packages_GetPackages",
          "parameters": [
            {
              "type": "string",
              "name": "deviceFamilies",
              "in": "query",
              "description": "Only return packages that are targeting one of the families in this list. Provided as a comma-separated list of Device Family. To get list of All packages user needs to leave device families as blank or pass all device families as comma separated.",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "packageName",
              "in": "query",
              "description": "Package Name search string",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "Order",
              "in": "query",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/DataRetrievalOrder"
              }
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A list of packages",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Package"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Packages"
          ],
          "summary": "Upload Package",
          "description": "<br />\r\n<b>Packages</b>\r\n<br />\r\n<br />\r\n<b>(Available Since MobiControl v14.0.0)</b>\r\n<br />Uploads a new package (*.pcg file), or a new version of an existing package. A new version of an existing package will be created when the name of the upload package matches an existing package, and when the version of the new package is greater than the existing package version. Requires the caller be granted the \"Manage Packages\" permission.<br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={boundary identifier}</code><br />Boundary length must be set to less than or equal to 11 to prevent internal server errors.<br />Multipart request body must contain the following parts:<br /><ol><li>package metadata - Contains json-formatted package information with Content-Type: <pre>application/vnd.soti.mobicontrol.package.metadata+json</pre></li><li>package file - Contains binary package file with Content-Type: <pre>application/vnd.soti.mobicontrol.package</pre><br />Optional headers <br />Content-Transfer-Encoding: binary<br />Content-Disposition: attachment; filename=\"{package-filename}\"<br /><br />Request Metadata <br />{\"DeviceFamily\" : \"AndroidPlus\"}<br /></li></ol>Currently, the maximum size of package file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />The example below shows package upload request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: application/vnd.soti.mobicontrol.package.metadata+json<br />{ \"DeviceFamily\" : \"AndroidPlus\" }<br />--foo_bar_baz Content-Type: application/vnd.soti.mobicontrol.package Content-Transfer-Encoding: Binary Content-Disposition: attachment; filename=\"package_file_name.pcg\"<br />Binary package data --foo_bar_baz--</pre><br /><p><b>Applications</b><br /><br /><b>(Available Since MobiControl v15.0.0)</b><br />In addition to upload package, this interface also uploads an Android application (.apk file) by converting it into a package (.pcg file). If the name and version for the package are not provided, then the name and version will be generated from the manifest file of the Android application (.apk file). A new version of an existing package will be created when the name of the upload Android application file matches an existing package, and when the version of the new Android application file is greater than the existing package version. Requires the caller be granted the \"Manage Packages\" permission.</p><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={boundary identifier}</code><br />Boundary length must be set to less than or equal to 11 to prevent internal server errors.<br />Multipart request body must contain the following parts:</p><ol><li>application metadata - Contains json-formatted application information with Content-Type: <pre>application/vnd.android.application.metadata+json</pre></li><li>application file - Contains application file with Content-Type: <pre>application/vnd.android.application</pre><br />Optional headers <br />Content-Transfer-Encoding: binary<br />Content-Disposition: attachment; filename=\"{application-filename}\"<br /><br />Request Metadata <br />{\"DeviceFamily\" : \"AndroidPlus\", \"PackageName\": \"package\", \"PackageVersion\": \"1.0\"}<br />The \"PackageName\" and \"PackageVersion\" are optional parameters.<br /></li></ol>Currently, the maximum size of package file or the Android application file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />The example below shows application upload request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: application/vnd.android.application.metadata+json<br />{ \"DeviceFamily\" : \"AndroidPlus\", \"PackageName\": \"package\", \"PackageVersion\": \"1.0\"}<br />--foo_bar_baz Content-Type: application/vnd.android.application<br />Content-Disposition: attachment; filename=\"application_name.apk\"<br />application data --foo_bar_baz--</pre>",
          "operationId": "Packages_CreateNewPackage",
          "responses": {
            "200": {
              "description": "Package created successfully",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Bad request, ie. Invalid application or package file contents or metadata"
            },
            "401": {
              "description": "Unauthorized"
            },
            "415": {
              "description": "Unsupported content media type"
            },
            "422": {
              "description": "Package verification failure, ie. Invalid Application or Package Platform or Version"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages/{referenceId}/versions": {
        "get": {
          "tags": [
            "Packages"
          ],
          "summary": "Retrieves Versions of a Package",
          "description": "Returns a list of versions for a package identified by its reference ID. Requires the caller be granted the \"View Packages\" permission.<br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "Packages_GetPackageVersions",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The Reference ID",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "The package versions",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PackageVersion"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages/{referenceId}": {
        "get": {
          "tags": [
            "Packages"
          ],
          "summary": "Retrieve a Package",
          "description": "Returns a package in the system including last version of a package. Requires the caller be granted the \"View Packages\" permission.<br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "Packages_GetPackage",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The Reference ID",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "package",
              "schema": {
                "$ref": "#/definitions/Package"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Packages"
          ],
          "summary": "Delete Package with its all versions",
          "description": "Delete Package with its all versions.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Packages_DeletePackage",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "reference id of package",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages/v2": {
        "post": {
          "tags": [
            "Packages"
          ],
          "summary": "Upload package metadata, package files and script files for multiple platforms to generate a Package",
          "description": "<br />\r\n<b>Packages</b>\r\n<br />\r\n<br />\r\n<b>(Available Since MobiControl v15.3.0)</b>\r\n<br />Uploads package creation metadata, package script files (i.e. pre-install/post-install/pre-uninstall/post-uninstall), package files, package prompt. A new version of Package will be created/generated and stored in Mobicontrol. Requires the caller to be granted the \"Manage Packages\" permission.<br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={boundary identifier}</code><br />Boundary length must be set to less than or equal to 11 to prevent internal server errors.<br />Multipart request body must contain the following parts:<br /><ol><li>package metadata - Contains json-formatted package information with Content-Type: <pre>application/vnd.soti.mobicontrol.packagearchive.metadata+json<br />OR<br />application/vnd.soti.mobicontrol.packagearchive.metadata</pre></li><li>script file - Contains binary script file with Content-Type: <pre>application/octet-stream</pre></li><li>package file - Contains binary package file with Content-Type: <pre>application/octet-stream</pre><br />Optional headers <br />Content-Transfer-Encoding: binary<br />Content-Disposition: attachment; filename=\"{package-filename}\"<br /><br /><b>Request Metadata</b><br /><b>PackageName</b> field is a required field with maximum length of 100 characters.<br /><b>PackageVersion</b> is a required field and denotes version and is a required field.<br /><b>PackagePlatform</b> is a required field and can have possible values - Android/AndroidPlus/Linux/WindowsDesktop/WindowsCE/WindowsModern/Printer<br /><b>AdditionalSize</b> is a optional field and can have integer value<br /><b>ScriptFiles</b> is a optional field and is a array of script file objects.<br /><b>PackageFiles</b> is a required field and is array of package file objects.<br /><b>PackagePrompt</b> is a optional field that represents object with properties for Package Message Prompt.<br /><br /><b>ScriptFile Object</b> is json object with following format<br /><pre>{ \"FileName\":\"PostInstallScript.cmd\", \"ScriptTrigger\":\"PostInstall\", \"FileSourceType\":\"Binary\" } </pre><dl><dt><b>FileName</b></dt><dd>FileName field is required while adding a script file and is used to for setting the file name in package.</dd><dt><b>ScriptTrigger</b></dt><dd>ScriptTrigger field is required while adding a script file and can have possible value of PreInstall / PostInstall / PreUnInstall / PostUnInstall.</dd><dt><b>FileSourceType</b></dt><dd>FileSourceType field is required while adding a script file and can have possible value of Binary / Url.</dd></dl><br /><br /><b>PackageFile Object</b> is json object with following format<br /><pre>{ \"FileName\":\"Books.apk\", \"FileSourceType\":\"Binary\" }  </pre><dl><dt><b>FileName</b></dt><dd>FileName field is required while adding a package file and is used to for setting the file name in package.</dd><dt><b>FileSourceType</b></dt><dd>FileSourceType field is required while adding a script file and can have possible value of Binary / Url.</dd></dl><br /><br /><b>PackagePrompt Object</b> is json object with following format<br /><pre>{ \"ShowPromptBeforeInstall\": false, \"PromptMessage\":\"Install package PackageName now?\", \"PromptMessageTimeout\":10 }</pre><dl><dt><b>ShowPromptBeforeInstall</b></dt><dd>ShowPromptBeforeInstall is optional field which can have possible values true / false.</dd><dt><b>PromptMessage</b></dt><dd>PromptMessage is optional field and can have alphanumeric character upto 130 characters.</dd><dt><b>PromptMessageTimeout</b></dt><dd>PromptMessageTimeout is optional field and can have value between 10 seconds to 300 seconds. Defaults to 10 seconds.</dd></dl><br /><br /></li></ol>Currently, the maximum size of package file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />The example below shows package upload request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br /><br />--foo_bar_baz<br />Content-Type: application/vnd.soti.mobicontrol.packagearchive.metadata+json<br /><br />{<br />\"PackageName\":\"Test Package 1\", \"PackageVersion\":\"6.4.0\", \"PackagePlatform\":\"Android\", \"AdditionalSize\":\"1024\", <br />\"ScriptFiles\": [{ \"FileName\":\"PreInstallScripts.cmd\", \"ScriptTrigger\": \"PreInstall\", \"FileSourceType\": \"Binary\" }, <br />\t\t   { \"FileName\":\"PostInstallScript.cmd\", \"ScriptTrigger\":\"PostInstall\", \"FileSourceType\":\"Binary\" }, <br />\t\t   { \"FileName\":\"PreUninstallScript.cmd\", \"ScriptTrigger\":\"PreUninstall\", \"FileSourceType\":\"Binary\" }, <br />\t\t   { \"FileName\":\"PostUninstallScript.cmd\", \"ScriptTrigger\":\"PostUninstall\", \"FileSourceType\":\"Binary\" } <br />\t     ], <br />\"PackageFiles\": [{ \"FileName\":\"Books.apk\", \"FileSourceType\":\"Binary\" } ], <br />\"PackagePrompt\": { \"ShowPromptBeforeInstall\": false, \"PromptMessage\":\"Install package PackageName now?\", \"PromptMessageTimeout\":10 }<br />}<br /><br />--foo_bar_baz<br />Content-Type: application/octet-stream<br />Content-Transfer-Encoding: Binary<br />Content-Disposition: attachment; filename=\"PreInstall.cmd\"<br /><br />Binary package script file for pre install<br /><br />--foo_bar_baz<br />Content-Type: application/octet-stream<br />Content-Transfer-Encoding: Binary<br />Content-Disposition: attachment; filename=\"PostInstall.cmd\"<br /><br />Binary package script file for post install<br /><br />--foo_bar_baz<br />Content-Type: application/octet-stream<br />Content-Transfer-Encoding: Binary<br />Content-Disposition: attachment; filename=\"PreUnInstall.cmd\"<br /><br />Binary package script file for pre uninstall<br /><br />--foo_bar_baz<br />Content-Type: application/octet-stream<br />Content-Transfer-Encoding: Binary<br />Content-Disposition: attachment; filename=\"PostUnInstall.cmd\"<br /><br />Binary package script file for post uninstall<br /><br />--foo_bar_baz<br />Content-Type: application/octet-stream<br />Content-Transfer-Encoding: Binary<br />Content-Disposition: attachment; filename=\"chrome.apk\"<br /><br />Binary package file e.g. apk, exe, reg, cab<br /><br />--foo_bar_baz--</pre><br />",
          "operationId": "Packages_CreateNewPackageV2",
          "responses": {
            "200": {
              "description": "Package created successfully",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Bad request, ie. Invalid application or package file contents or metadata"
            },
            "401": {
              "description": "Unauthorized"
            },
            "415": {
              "description": "Unsupported content media type"
            },
            "422": {
              "description": "Package verification failure, ie. Invalid Application or Package Platform or Version"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages/job/{referenceId}": {
        "get": {
          "tags": [
            "Packages"
          ],
          "summary": "Retrieve a Package Job which contains status of the Package Creation/Generation",
          "description": "Returns a package generation job in the system. Requires the caller be granted the \"View Packages\" permission. Currently there is a limitation on fetching the completed jobs. The endpoint returns inprogress jobs and pending jobs. For completed jobs, please check packages under MobiControl UI - Packages Tab.<br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "Packages_GetPackageJob",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The Job Reference ID",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Package Generation Job",
              "schema": {
                "$ref": "#/definitions/PackageGenerationJob"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages/DownloadGeneralFile/{fileName}": {
        "get": {
          "tags": [
            "Packages"
          ],
          "summary": "Downloads any type of general types",
          "description": "Download any general file type identified by the file name eg: McStudio.exe<br /><B>(Available Since MobiControl v14.3.0)</B>",
          "operationId": "Packages_DownloadFile",
          "parameters": [
            {
              "type": "string",
              "name": "fileName",
              "in": "path",
              "required": true,
              "description": "File Name",
              "x-nullable": false
            }
          ],
          "responses": {
            "403": {
              "description": "Unauthorized access or the file does not exist"
            },
            "200": {
              "description": "Returns the expected file",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages/{referenceId}/versions/{versionString}": {
        "delete": {
          "tags": [
            "Packages"
          ],
          "summary": "Delete Package version",
          "description": "Delete Package version.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Packages_DeletePackageVersion",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "reference id of package",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "versionString",
              "in": "path",
              "required": true,
              "description": "version string of package",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "buildVersion",
              "in": "query",
              "required": true,
              "description": "build version of package",
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages/{referenceId}/profileStatuses": {
        "get": {
          "tags": [
            "Packages"
          ],
          "summary": "Retrieve a List of Profiles by Package",
          "description": "Returns a list of profile status for a package. Requires the caller be granted the \"View Package\" and \"View Profile\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Packages_GetProfilesByPackage",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "versionString",
              "in": "query",
              "description": "",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PackageProfileStatus"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages/{referenceId}/logs": {
        "get": {
          "tags": [
            "Packages"
          ],
          "summary": "Get Package Logs",
          "description": "Returns a list of logs associated with a package. Requires the caller be granted the \"View Packages\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Packages_GetPackageLogs",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The package identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "version",
              "in": "query",
              "description": "Version of Package",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "List of log severities to include into result set",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "array",
              "name": "Order",
              "in": "query",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/DataRetrievalOrder"
              }
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of a logs based on a package reference id and version",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PackageLogEntry"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or package reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages/{referenceId}/logs/summary": {
        "get": {
          "tags": [
            "Packages"
          ],
          "summary": "Get Package Logs",
          "description": "Returns logs summary associated with a package. Requires the caller be granted the \"View Packages\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Packages_GetPackageLogSummaryBySeverity",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The package identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "version",
              "in": "query",
              "description": "Version of Package",
              "default": "",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of a logs based on a package reference id and version",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LogEntryCount"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or package reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages/{referenceId}/executionStatuses/{versionString}": {
        "get": {
          "tags": [
            "Packages"
          ],
          "summary": "Retrieve a List of Execution Status by Package",
          "description": "Returns a list of profile status for a package. Requires the caller be granted the \"View Package\" global permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Packages_GetPackageExecution",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The package identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "versionString",
              "in": "path",
              "required": true,
              "description": "Version of Package",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/PackageExecutionStatus"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/packages/{referenceId}/version/{version}/download": {
        "get": {
          "tags": [
            "Packages"
          ],
          "summary": "Download Package of selected Version",
          "description": "Download Package of selected Version<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Packages_DownloadPackage",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The Package identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "version",
              "in": "path",
              "required": true,
              "description": "Version of Package",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/product/registrationCode": {
        "put": {
          "tags": [
            "Product"
          ],
          "summary": "Set Product Registration Code",
          "description": "Sets a product registration code and activates product with SOTI Services. No authorization is required for this endpoint while the product is unlicensed/unregistered or a previous registration code has expired. Once successfully activated, and unauthorized attempt to call this endpoint will fail.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Product_SetRegistrationCode",
          "parameters": [
            {
              "name": "registrationCode",
              "in": "body",
              "required": true,
              "description": "The registration data",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Product was successfully activated"
            },
            "400": {
              "description": "Bad request, i.e. missing or invalid registration code"
            },
            "403": {
              "description": "Forbidden, authorization is required to use this method if product was registered before"
            },
            "422": {
              "description": "Product activation failed, see error message for details"
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/product/licenceFile": {
        "put": {
          "tags": [
            "Product"
          ],
          "summary": "Uploads and Sets Offline Product License File",
          "description": "Uploads and sets a product license file when access to SOTI Services for product registration is not possible. No authorization is required for this endpoint while the product is unlicensed/unregistered or a previous registration code has expired. Once successfully activated, and unauthorized attempt to call this endpoint will fail.<br /><b>(Available Since MobiControl v14.0.0)</b><br /><br />Content-Type of the Request body must be <code>multipart/related; boundary={boundary identifier}</code><br />Boundary length must be set to less than or equal to 11 to prevent internal server errors.<br />Multipart request body must contain the following parts:<br /><ol>Optional headers <br />Content-Type-Encoding: base64<br />Content-Disposition: attachment; filename=\"{license-filename}\"<br /></ol><br /><br />The example below shows offline activation request.<br /><pre>Content-Type: multipart/related; boundary=foo_bar_baz Content-Length: number_of_bytes_in_entire_request_body<br />--foo_bar_baz Content-Type: text/xml Content-Type-Encoding: base64 Content-Disposition: attachment; filename=\"license.xml\"<br />Base64-encoded license data --foo_bar_baz--</pre><br />Note: No authorization is required to set license file after installation of a new product or expiry of a previous registration code. Once product is successfully activated, an unauthorized attempt to set license file will fail.<br />",
          "operationId": "Product_SetLicenceFile",
          "responses": {
            "204": {
              "description": "Product was successfully activated"
            },
            "400": {
              "description": "Bad request, i.e. missing or invalid license file"
            },
            "403": {
              "description": "Forbidden, authorization is required to use this method if product was registered before"
            },
            "415": {
              "description": "Unsupported content media type"
            },
            "422": {
              "description": "Product activation failed, see error message for details"
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/product/eula": {
        "get": {
          "tags": [
            "Product"
          ],
          "summary": "Retrieve Text of MobiControl EULA",
          "description": "Retrieve the text of the MobiControl End User License Agreement for the current version.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Product_GetEulaText",
          "responses": {
            "200": {
              "description": "The text of the End User License Agreement was returned successfully",
              "schema": {
                "type": "string"
              }
            },
            "403": {
              "description": "Forbidden, authorization is required to use this method"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/reports/devices": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Downloads CSV of Device Search Result",
          "description": "Downloads results of a given search filter as CSV. Requires the caller be granted the \"View Groups\" permission for the specified device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Reports_GetDeviceReports",
          "parameters": [
            {
              "type": "string",
              "name": "fields",
              "in": "query",
              "required": true,
              "description": "Comma separated field names to be included in the report",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "format",
              "in": "query",
              "description": "File format [Currently only csv is supported.]",
              "default": "csv",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "groupPath",
              "in": "query",
              "description": "The group path.The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value Must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "filter",
              "in": "query",
              "description": "Filter string",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "timeZoneOffset",
              "in": "query",
              "description": "Time zone offset from UTC",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "timeZoneId",
              "in": "query",
              "description": "Time zone ID generated from current web browser",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "includeSubgroups",
              "in": "query",
              "description": "When group path is specified, determines whether descendant groups should also be included.",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Field names are missing"
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Invalid search filter or parameters"
            },
            "500": {
              "description": "Internal search engine error"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/reports/devices/actions/emailReport": {
        "post": {
          "tags": [
            "Reports"
          ],
          "summary": "Create the new resource to send the desired report",
          "description": "<b>(Available Since MobiControl v14.2.0)</b>",
          "operationId": "Reports_EmailDeviceReport",
          "parameters": [
            {
              "name": "parameters",
              "in": "body",
              "required": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/EmailDeviceReportParameters"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Operation successful"
            },
            "400": {
              "description": "Field names are missing"
            },
            "401": {
              "description": "Unauthorized"
            },
            "422": {
              "description": "Invalid search filter or parameters or the specified email profile did not exist"
            },
            "500": {
              "description": "Internal search engine error"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/reports/device/{deviceId}/agentLog": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Download Device-side Log for a Device",
          "description": "Downloads device-side (agent) log for a device identified by its device ID, or the device's MAC / IMEI address when prefixed with \"mac:\" or \"imei_meid_esn:\" respectively. Requires the caller be granted the \"Download Agent Logs\" permission on the device's parent device group.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Reports_GetDeviceAgentLog",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "agentLogType",
              "in": "query",
              "required": true,
              "description": "log type",
              "x-schema": {
                "$ref": "#/definitions/AgentLogType2"
              },
              "x-nullable": false,
              "enum": [
                "Debug",
                "Install",
                "FileEncryption",
                "Security",
                "PreRebootSecurity",
                "Adb"
              ],
              "x-enumType": "AgentLogType"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/reports/packages/actions/emailReport": {
        "post": {
          "tags": [
            "Reports"
          ],
          "summary": "Email packages report based upon filter criteria and configured packages columns to targeted recipient",
          "description": "<b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Reports_EmailPackageReport",
          "parameters": [
            {
              "name": "parameters",
              "in": "body",
              "required": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/EmailPackageReportParameters"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/reports/packages": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Downloads CSV of Package Search Result",
          "description": "Downloads packages results of a given search filter as CSV. Requires the caller be granted the \"View Packages\" permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Reports_GetPackagesReport",
          "parameters": [
            {
              "type": "string",
              "name": "reportHeaderFields",
              "in": "query",
              "required": true,
              "description": "Comma separated field names to be included in the report",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "deviceFamilies",
              "in": "query",
              "description": "Only return packages that are targeting one of the families in this list. Provided as a comma-separated list of Device Family. To get list of All packages user needs to leave device families as blank or pass all device families as comma separated.",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "packageName",
              "in": "query",
              "description": "Package Name search string",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "format",
              "in": "query",
              "description": "File format [Currently only csv is supported.]",
              "default": "csv",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "timeZoneOffset",
              "in": "query",
              "description": "Time zone offset from UTC (in Minutes)",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/reports/profiles": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Download CSV of Profiles Search Result",
          "description": "Download profiles results of a given search filter as CSV. Requires the caller be granted the \"View Profiles\" permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Reports_GetProfilesReport",
          "parameters": [
            {
              "type": "string",
              "name": "reportHeaderFields",
              "in": "query",
              "required": true,
              "description": "Comma separated field names to be included in the report",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "format",
              "in": "query",
              "description": "File format [Currently only csv is supported.]",
              "default": "csv",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "timeZoneOffset",
              "in": "query",
              "description": "Time zone offset from UTC (in Minutes)",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "nameContains",
              "in": "query",
              "description": "Only return profiles whose name contains this value"
            },
            {
              "type": "string",
              "name": "withStatuses",
              "in": "query",
              "description": "Only return profiles that have statuses that match one of the values in this list. Provided as a comma-separated list of ProfileVersionStatus values."
            },
            {
              "type": "string",
              "name": "forFamilies",
              "in": "query",
              "description": "Only return profiles that are targeting one of the families in this list. Provided as a comma-separated list of DeviceFamily values"
            },
            {
              "type": "boolean",
              "name": "hasDraft",
              "in": "query",
              "description": "Only return profiles that have a current draft. When false, only return profiles that do not have a draft. If null, then do not take draft status into account",
              "format": "string"
            },
            {
              "type": "boolean",
              "name": "hasSchedule",
              "in": "query",
              "description": "Only return profiles that currently have a schedule. When false, only return profiles that do not have a schedule. If null, then do not take schedule status into account",
              "format": "string"
            },
            {
              "type": "boolean",
              "name": "autoInstallOnly",
              "in": "query",
              "description": "Only return profiles that are automatically installed. When false, this only returns profiles that are self-installed. If null, then do not take install method into account.",
              "format": "string"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/reports/profiles/actions/emailReport": {
        "post": {
          "tags": [
            "Reports"
          ],
          "summary": "Email profile report based upon filter criteria and configured profiles columns to targeted recipient",
          "description": "<b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Reports_EmailProfileReport",
          "parameters": [
            {
              "name": "parameters",
              "in": "body",
              "required": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/EmailProfileReportParameters"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/reports/compliancepolicies": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Download CSV of filtered compliance policies",
          "description": "Download profiles results of a given search filter as CSV. Requires the caller be granted the \"View Profiles\" permission.<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "Reports_GetCompliancePoliciesReport",
          "parameters": [
            {
              "type": "string",
              "name": "reportHeaderFields",
              "in": "query",
              "required": true,
              "description": "Comma separated field names to be included in the report",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "format",
              "in": "query",
              "description": "File format [Currently only csv is supported.]",
              "default": "csv",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "timeZoneOffset",
              "in": "query",
              "description": "Time zone offset from UTC (in Minutes)",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "families",
              "in": "query",
              "description": "If specified, return only policies for the selected families",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/ComplianceDeviceFamily"
              },
              "x-enumType": "ComplianceDeviceFamily"
            },
            {
              "type": "string",
              "name": "nameContains",
              "in": "query",
              "description": "If specified, return only policies where the name contains the specified string",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "statuses",
              "in": "query",
              "description": "If specified, return only policies having the selected status(es)",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/CompliancePolicyStatus"
              },
              "x-enumType": "CompliancePolicyStatus"
            },
            {
              "type": "boolean",
              "name": "isAssigned",
              "in": "query",
              "description": "",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/reports/compliancepolicies/actions/emailReport": {
        "post": {
          "tags": [
            "Reports"
          ],
          "summary": "Email compliance policy report based upon filter criteria and configured profiles columns to targeted recipient",
          "description": "<b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "Reports_EmailCompliancePoliciesReport",
          "parameters": [
            {
              "name": "parameters",
              "in": "body",
              "required": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/EmailCompliancePoliciesReportParameters"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/search/index": {
        "get": {
          "tags": [
            "Search"
          ],
          "summary": "Get Search Synchronization Results",
          "description": "Returns current and historical MobiControl Search index synchronization results that describes the integrity of the index at the time of completion, or the progress of an indexing process if currently running. Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Search_GetStatus",
          "parameters": [
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Gets synchronization results",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SearchEngineStatus"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Search"
          ],
          "summary": "Starts Incremental Search Synchronization",
          "description": "Initiates synchronization which will compare and update the MobiControl Search index using the MobiControl database as the source of true. During regular operation MobiControl will ensure the index is updated in real-time, and therefore this synchronization process is needed only as a failsafe. Only one synchronization process can be running at a time across all Management Services, and results can be requested periodically via the GET /search/index method. Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Search_StartIncrementalSync",
          "responses": {
            "202": {
              "description": "Indexing started successfully",
              "schema": {
                "$ref": "#/definitions/SearchEngineStatus"
              }
            },
            "406": {
              "description": "Indexing is currently running"
            },
            "409": {
              "description": "Indexing cannot be started because another server is currently starting it"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/search/executeRawRequest": {
        "post": {
          "tags": [
            "Search"
          ],
          "summary": "Executes raw MobiControl search request",
          "description": "Executes raw MobiControl Search request. For power users who are familiar with ElasticSearch REST API only.<br />Requires EnableRawElasticSearchRequests to be set to \"1\" in the Settings table<br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "Search_ExecuteRawRequest",
          "parameters": [
            {
              "name": "elasticSearchRequest",
              "in": "body",
              "required": true,
              "description": "Raw MobiControl Search request",
              "schema": {
                "$ref": "#/definitions/ElasticSearchRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "MobiControl Search raw response",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/search/health": {
        "get": {
          "tags": [
            "Search"
          ],
          "summary": "Get Search Engine Health Status",
          "description": "Returns current Search Engine health status. Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Search_GetHealthStatus",
          "responses": {
            "200": {
              "description": "Gets Search Engine Health Status",
              "schema": {
                "$ref": "#/definitions/SearchEngineHealthStatus"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/search/configuration": {
        "get": {
          "tags": [
            "Search"
          ],
          "summary": "Get Search Engine Configuration",
          "description": "Returns current Search Engine configuration information. Requires the caller be granted the \"Administration\" permission.<br /><b>(Available Since MobiControl v14.2.1)</b>",
          "operationId": "Search_GetSearchEngineConfiguration",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A collection of SearchEngineConfiguration",
              "schema": {
                "$ref": "#/definitions/SearchEngineConfiguration"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Search"
          ],
          "summary": "Set Search Engine Configuration",
          "description": "Updates the Search Engine configuration information using engineConfiguration as a mandatory parameter. Requires the caller be granted the \"Administration\" permission.<br /><b>(Available Since MobiControl v14.2.1)</b>",
          "operationId": "Search_SetSearchEngineConfiguration",
          "parameters": [
            {
              "name": "engineConfiguration",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SearchEngineConfiguration"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/search/index/all": {
        "post": {
          "tags": [
            "Search"
          ],
          "summary": "Starts Full Search Synchronization",
          "description": "Recreates ElasticSearch indexes and type mapping and synchronizes the data. Use with caution.",
          "operationId": "Search_StartFullSync",
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/search/status": {
        "get": {
          "tags": [
            "Search"
          ],
          "summary": "Gets the Health Status of MobiControl Search Engine.",
          "description": "Get the Health Status of MobiControl Search Engine. Requires the caller be granted \"View System Health\" permission.<br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "Search_GetElasticSearchStatus",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/ElasticSearchStats"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            },
            "503": {
              "description": "Service unavailable"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/permissions": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieve All System Permissions",
          "description": "Returns the MobiControl permissions tree which includes all possible rights for administrators of the system. Role defines functional areas of the product and should be used to contextualize where the permission is applied. For example, \"CheckIn\" is an action (and permission) of both the administrative console (\"SystemAdministrator\" role), and the Self Service Portal (\"DeviceOwner\" role). Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_GetPermissionTrees",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "The permission trees",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PermissionTree"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/currentUser/rights/{permission}/IsAllowed": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Report on access permission for current user",
          "description": "Retrieve information on whether the current user can access / execute a specific action in MobiControl. Actions typically are view profiles, manage rules etc.  This requires the caller to be granted the “Access Web Console” permission.<br /><b>(Available Since MobiControl v14.2.1)</b>",
          "operationId": "Security_HasPermissionToFeature",
          "parameters": [
            {
              "type": "string",
              "name": "permission",
              "in": "path",
              "required": true,
              "description": "Name of the Permission",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "boolean telling if user has permission or not",
              "schema": {
                "$ref": "#/definitions/CheckUserAccessResponse"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/currentUser/rights/{permission}/{assetType}/{referenceId}/IsAllowed": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Report on access permission for current user per asset",
          "description": "Retrieve information on whether the current user can access / execute a specific action on a specific asset (Device / Device Group) in MobiControl. Actions typically are view profiles, manage rules etc.  The “referenceId” refers to the primary identifier of the asset. This requires the caller to be granted the “Access Web Console” permission.<br /><b>(Available Since MobiControl v14.2.1)</b>",
          "operationId": "Security_HasPermissionToAsset",
          "parameters": [
            {
              "type": "string",
              "name": "permission",
              "in": "path",
              "required": true,
              "description": "Name of the Permission",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "assetType",
              "in": "path",
              "required": true,
              "description": "Type of the Asset",
              "x-schema": {
                "$ref": "#/definitions/AssetType"
              },
              "x-nullable": false,
              "enum": [
                "Device",
                "DeviceGroup",
                "CatalogueItem"
              ],
              "x-enumType": "AssetType"
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Identifier of the Asset",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "boolean telling if user has permission or not",
              "schema": {
                "$ref": "#/definitions/CheckUserAccessResponse"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/rights": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieve Permissions of Current User",
          "description": "Returns the rights granted to the current user. Currently only Device Group, and Self Service Portal permissions are returned. Role defines functional areas of the product and should be used to contextualize where the permission is applied. For example, \"CheckIn\" is an action (and permission) of both the administrative console (\"SystemAdministrator\" role), and the Self Service Portal (\"DeviceOwner\" role). Requires the caller be granted the \"Manage Console Security\" permission if the request is for a user other than the caller.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_GetCurrentSecurityRights",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "The user right details",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UserRightDetails"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/users/{userName}/{role}/rights": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieves Permissions for a User",
          "description": "Returns the rights granted to the specified user. Currently only Device Group, and Self Service Portal permissions are returned. Role defines functional areas of the product and should be used to contextualize where the permission is applied. For example, \"CheckIn\" is an action (and permission) of both the administrative console (\"SystemAdministrator\" role), and the Self Service Portal (\"DeviceOwner\" role). Requires the caller be granted the \"Manage Console Security\" permission if the request is for a user other than the caller.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_GetFeatureSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "role",
              "in": "path",
              "required": true,
              "description": "The security role",
              "x-schema": {
                "$ref": "#/definitions/RoleType"
              },
              "x-nullable": false,
              "enum": [
                "Any",
                "SystemAdministrator",
                "DeviceOwner"
              ],
              "x-enumType": "RoleType"
            },
            {
              "type": "string",
              "name": "asset",
              "in": "query",
              "description": "Type of the Asset",
              "x-schema": {
                "$ref": "#/definitions/AssetType"
              },
              "x-nullable": true,
              "enum": [
                "Device",
                "DeviceGroup",
                "CatalogueItem"
              ],
              "x-enumType": "AssetType"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "The user right details",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UserRightDetails"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Sets Permissions for a User",
          "description": "Replaces the permissions for a given user with those defined. Currently only Device Group, and Self Service Portal permissions are supported. Role defines functional areas of the product and should be used to contextualize where the permission is applied. For example, \"CheckIn\" is an action (and permission) of both the administrative console (\"SystemAdministrator\" role), and the Self Service Portal (\"DeviceOwner\" role). Requires the caller be granted the \"Manage Console Security\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_SetFeatureSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "role",
              "in": "path",
              "required": true,
              "description": "The role",
              "x-schema": {
                "$ref": "#/definitions/RoleType"
              },
              "x-nullable": false,
              "enum": [
                "Any",
                "SystemAdministrator",
                "DeviceOwner"
              ],
              "x-enumType": "RoleType"
            },
            {
              "name": "rights",
              "in": "body",
              "required": true,
              "description": "Security rights",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/InputRightsGroupItem"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Security"
          ],
          "summary": "Removes Role Permissions from a User",
          "description": "Removes all rights granted in a given role for the specified user. Currently only Device Group, and Self Service Portal permissions are supported. Role defines functional areas of the product and should be used to contextualize where the permission is applied. For example, \"CheckIn\" is an action (and permission) of both the administrative console (\"SystemAdministrator\" role), and the Self Service Portal (\"DeviceOwner\" role). Requires the caller be granted the \"Manage Console Security\" permission if the request is for a user other than the caller.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_DeleteFeatureSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "role",
              "in": "path",
              "required": true,
              "description": "The role",
              "x-schema": {
                "$ref": "#/definitions/RoleType"
              },
              "x-nullable": false,
              "enum": [
                "Any",
                "SystemAdministrator",
                "DeviceOwner"
              ],
              "x-enumType": "RoleType"
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/users/{userName}/group/{path}/rights": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieves Device Group Permissions for a User",
          "description": "Returns all rights granted on given device group for the specified user. Requires the caller be granted the \"Manage Console Security\" permission. Requires the caller be granted the \"Manage Console Security\" permission if the request is for a user other than the caller.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_GetDeviceGroupSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Device group security rights",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UserRightDetails"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Sets Device Group Permissions for a User",
          "description": "Replaces the device group permissions for a given user with those defined. Requires the caller be granted the \"Manage Console Security\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_SetDeviceGroupSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            },
            {
              "name": "rights",
              "in": "body",
              "required": true,
              "description": "Security rights",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/InputRightsGroupItem"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Security"
          ],
          "summary": "Deletes Device Group Permissions from a User",
          "description": "Removes all rights granted on given device group for the specified user. Requires the caller be granted the \"Manage Console Security\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_DeleteDeviceGroupSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/users": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieve List of Users",
          "description": "Returns all MobiControl console users or those that match the provided search criteria. Hidden users are users implicitly authorized to login to MobiControl through an LDAP group and have logged in at least once.<br /><b>(Since MobiControl 13.3.0)</b>",
          "operationId": "Security_GetUsers",
          "parameters": [
            {
              "type": "boolean",
              "name": "includeHiddenUsers",
              "in": "query",
              "description": "Filter returned users by their visibility",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "description": "Filter returned user names by this value",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "memberOf",
              "in": "query",
              "description": "Only return users that are members of one or more of the specified groups",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "name": "kind",
              "in": "query",
              "description": "Only returns users of this kind",
              "x-schema": {
                "$ref": "#/definitions/UserKind"
              },
              "x-nullable": true,
              "enum": [
                "MobiControlUser",
                "LdapUser",
                "SsoUser"
              ],
              "x-enumType": "UserKind"
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A list of all users, or those that match the given criteria",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/users/{userName}": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieve a Single User",
          "description": "Returns a named MobiControl console user including users that are implicitly authorized to login to MobiControl through an LDAP group and have logged in at least once (\"hidden\").<br /><b>(Since MobiControl 13.3.0)</b>",
          "operationId": "Security_GetUser",
          "parameters": [
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "The user",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/users/{userName}/groups": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieve User's Group",
          "description": "Returns a list of groups that a given user is a member of including users that are implicitly authorized to login to MobiControl through an LDAP group and have logged in at least once (\"hidden\").<br /><b>(Since MobiControl 13.3.0)</b>",
          "operationId": "Security_GetUserGroups",
          "parameters": [
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "showGroupInheritance",
              "in": "query",
              "description": "Whether to show inherited groups",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A list of all groups the user is a member of.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UserGroup"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/users/{userName}/logs": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieve Logs for a User/User Group",
          "description": "Retrieve event logs for users identified by its username. Limit the results to matching criteria such as event severity and date range. Requires the caller be granted the \"ManageUserSecurity\" or \"LookupUsersAndGroups\" permissions.<br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Security_GetLogsByUser",
          "parameters": [
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The start date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The end date. Example: 2015-12-19T16:39:57-02:00",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "List of log severities to include into result set",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Returns logs for a user by its user",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UserLogEntry"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/currentuser/changepassword": {
        "post": {
          "tags": [
            "Security"
          ],
          "summary": "Change Current User's Password",
          "description": "Changes the password for the authenticating user. Requires that Console Security allow for change of user's passwords, and that the account is local, not LDAP.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_ChangePassword",
          "parameters": [
            {
              "name": "passwordChange",
              "in": "body",
              "required": true,
              "description": "Current user's old and new password",
              "schema": {
                "$ref": "#/definitions/PasswordChange"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/passwordpolicy": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieve Administrative Password Policy",
          "description": "Returns the administrative password policy configured in Console Security and applies to local administrators. Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_GetPasswordPolicy",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Password policy",
              "schema": {
                "$ref": "#/definitions/PasswordPolicy"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Update Password Policy",
          "description": "Updates the administrative password policy configured in Console Security and applies to local administrators.<br /><b>(Available Since MobiControl v15.2.0)</b>",
          "operationId": "Security_PutPasswordPolicy",
          "parameters": [
            {
              "name": "passwordPolicy",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/PasswordPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/accessControlPolicy": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Returns the access control configuration",
          "description": "Returns the access control &amp; password policy configuration<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Web Console Access\" permission",
          "operationId": "Security_GetAccessControlPolicy",
          "responses": {
            "401": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Updates the access policy configuration",
          "description": "Updates the access control &amp; password policy configuration<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Console Authentication\" permission",
          "operationId": "Security_PutAccessControlPolicy",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "contract to define the configuration",
              "schema": {
                "$ref": "#/definitions/SetAccessControlPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully updated the access control config"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/administrator/password": {
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Set Default Administrator's Password",
          "description": "Sets the initial password for the default \"administrator\" user. No authorization is required for this endpoint while the system has console security disabled. Once the administrator account has been configured console security is enabled calls to this endpoint will fail.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_SetAdministratorPassword",
          "parameters": [
            {
              "name": "password",
              "in": "body",
              "required": true,
              "description": "The password",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Administrator password was successfully set"
            },
            "400": {
              "description": "Bad request, i.e. missing or invalid password"
            },
            "403": {
              "description": "Forbidden, administrator user already exists"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/currentUser/eulaStatus": {
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Sets Acceptance of MobiControl EULA",
          "description": "Sets acceptance of the MobiControl EULA for the authenticating user. At least one MobiControl administrator must have accepted the MobiControl EULA before other calls may be made to the system.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_SetEulaStatus",
          "parameters": [
            {
              "name": "eulaStatus",
              "in": "body",
              "required": true,
              "description": "EULA status",
              "schema": {
                "$ref": "#/definitions/EulaStatus",
                "x-enumType": "EulaStatus"
              },
              "x-nullable": false,
              "x-enumType": "EulaStatus"
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/users/{username}/catalogueitem/{referenceId}/rights": {
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Set the view/edit rights of the user for a specified catalogue item",
          "description": "Sets the individual permissions of a user on a catalogue item.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Security_SetCatalogueItemRights",
          "parameters": [
            {
              "type": "string",
              "name": "username",
              "in": "path",
              "required": true,
              "description": "The name of the user",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference id of the catalogue item",
              "x-nullable": false
            },
            {
              "name": "userRight",
              "in": "body",
              "required": true,
              "description": "The user's rights for the specified catalogue item",
              "schema": {
                "$ref": "#/definitions/CatalogueItemUserRight"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/catalogueItem/{referenceId}/rights": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Get Catalogue Item Rights",
          "description": "Returns a list of rights associated with a Catalogue Item. Requires the caller be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Security_GetCatalogueRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference id of the catalogue item",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of rights based on a profile reference id",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Right"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/users/{userName}/catalogueItem/{referenceId}/rights": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Get Catalogue Item Rights for a User",
          "description": "Returns the user right associated with a Catalogue Item. Requires the caller be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Security_GetCatalogueRightsForPrincipal",
          "parameters": [
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference id of the catalogue item",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the right based on a profile reference id and the username",
              "schema": {
                "$ref": "#/definitions/Right"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/groups": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieve List of Groups",
          "description": "Returns all MobiControl console groups or those that match the provided search criteria.<br /><b>(Since MobiControl 14.3.0)</b>",
          "operationId": "Security_GetGroups",
          "parameters": [
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "description": "Filter returned group names by this value",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "memberOf",
              "in": "query",
              "description": "Only return groups that are members of one or more of the specified groups",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "name": "kind",
              "in": "query",
              "description": "Only return groups of this kind",
              "x-schema": {
                "$ref": "#/definitions/UserGroupKind"
              },
              "x-nullable": true,
              "enum": [
                "MobiControlGroup",
                "LdapGroup",
                "SsoGroup"
              ],
              "x-enumType": "UserGroupKind"
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "A list of all groups, or those that match the given criteria",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UserGroup"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/assets/{assetType}/{referenceId}/rights": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Gets rights of an asset with specified asset type and reference id",
          "description": "<br />\r\n<b>(Available Since MobiControl v14.3.0)</b>\r\n<br />Please note: currently only CatalogueItem asset type is supported by this endpoint",
          "operationId": "Security_GetAssetRights",
          "parameters": [
            {
              "type": "string",
              "name": "assetType",
              "in": "path",
              "required": true,
              "description": "Type of the asset.",
              "x-schema": {
                "$ref": "#/definitions/AssetType"
              },
              "x-nullable": false,
              "enum": [
                "Device",
                "DeviceGroup",
                "CatalogueItem"
              ],
              "x-enumType": "AssetType"
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The asset reference identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of asset rights for a specified asset type and reference id",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AssetRights"
                }
              }
            },
            "400": {
              "description": "Contract validation failed"
            },
            "403": {
              "description": "Unauthorized access"
            },
            "422": {
              "description": "Device Group asset type is not supported"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Sets rights of an asset with specified asset type and reference id",
          "description": "<br />\r\n<b>(Available Since MobiControl v14.3.0)</b>\r\n<br />Please note: currently only CatalogueItem asset type is supported by this endpoint",
          "operationId": "Security_SetAssetRights",
          "parameters": [
            {
              "type": "string",
              "name": "assetType",
              "in": "path",
              "required": true,
              "description": "Type of the asset.",
              "x-schema": {
                "$ref": "#/definitions/AssetType"
              },
              "x-nullable": false,
              "enum": [
                "Device",
                "DeviceGroup",
                "CatalogueItem"
              ],
              "x-enumType": "AssetType"
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The asset reference identifier.",
              "x-nullable": false
            },
            {
              "name": "assetRights",
              "in": "body",
              "required": true,
              "description": "The asset rights.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AssetRights"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Request to update asset rights was processed successfully"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "403": {
              "description": "Unauthorized access"
            },
            "422": {
              "description": "Device Group asset type is not supported"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/assets/{assetType}/{referenceId}/users/{userName}/rights": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Get rights of an user with specified asset type and reference id",
          "description": "<br />\r\n<b>(Available Since MobiControl v14.3.0)</b>\r\n<br />Please note: currently only CatalogueItem asset type is supported by this endpoint",
          "operationId": "Security_GetAssetRightForPrincipal",
          "parameters": [
            {
              "type": "string",
              "name": "assetType",
              "in": "path",
              "required": true,
              "description": "Type of the asset.",
              "x-schema": {
                "$ref": "#/definitions/AssetType"
              },
              "x-nullable": false,
              "enum": [
                "Device",
                "DeviceGroup",
                "CatalogueItem"
              ],
              "x-enumType": "AssetType"
            },
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The asset reference identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "userName",
              "in": "path",
              "required": true,
              "description": "Name of the user. Must be double URL-encoded when using special characters (e.g. a/username - a%252fusername). When called from this page, it should be encoded only once (a%2fusername).",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of user asset rights for a specified asset type and reference id",
              "schema": {
                "$ref": "#/definitions/UserAssetRights"
              }
            },
            "400": {
              "description": "Contract validation failed"
            },
            "403": {
              "description": "Unauthorized access"
            },
            "422": {
              "description": "Device Group asset type is not supported"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/user/{name}/catalogueItemReferenceId": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieve the user referenceID from the Catalogue",
          "description": "Get the Catalogue Item ReferenceId for a specific user. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "Security_GetCatalogueItemReferenceIdOfUser",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "user name",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Returns user's catalog referenceId",
              "schema": {
                "$ref": "#/definitions/CatalogueItemReferenceId"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Security"
          ],
          "summary": "Assign rights to a user based on a catalogue reference",
          "description": "Assign rights associated with a Catalogue Item to a user. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "Security_AssignCatalogueItemReferenceIdOfUser",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "user name",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Security"
          ],
          "summary": "Remove the user rights based on the catalogue reference",
          "description": "Remove rights associated with a Catalogue Item to a specific user. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "Security_DeleteCatalogueItemReferenceIdOfUser",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "user name",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/userGroup/{name}/catalogueItemReferenceId": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Retrieve the user group referenceID from the Catalogue",
          "description": "Get the Catalogue Item ReferenceId for a specific user group. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "Security_GetCatalogueItemReferenceIdOfUserGroup",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "user group name",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Returns user group's catalog referenceId",
              "schema": {
                "$ref": "#/definitions/CatalogueItemReferenceId"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Security"
          ],
          "summary": "Assign rights to a user group based on a catalogue reference",
          "description": "Assign rights associated with a Catalogue Item to a user group. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "Security_AssignCatalogueItemReferenceIdOfUserGroup",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "user group name",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Security"
          ],
          "summary": "Remove the user group rights based on the catalogue reference",
          "description": "Remove rights associated with a Catalogue Item to a specific user group. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.<br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "Security_DeleteCatalogueItemReferenceIdOfUserGroup",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "user group name",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/{portalName}/externalAuthentication": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Returns the authentication setting for specified portal",
          "description": "Returns the authentication setting for specified portal hosted along with MobiControl<br />Requires the caller be granted the \"Web Console Access\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Security_GetExternalAuthenticationSecurity",
          "parameters": [
            {
              "type": "string",
              "name": "portalName",
              "in": "path",
              "required": true,
              "description": "Security portal name e.g. SSP, IOSProfileCatalog, WebConsole",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns external authentication security settings",
              "schema": {
                "$ref": "#/definitions/EndpointSecuritySettings"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Updates the authentication setting for specified portal",
          "description": "Updates the authentication setting for specified portal hosted along with MobiControl<br />Requires the caller be granted the \"Manage Console Authentication\" permission<br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Security_SetExternalAuthenticationSecurity",
          "parameters": [
            {
              "type": "string",
              "name": "portalName",
              "in": "path",
              "required": true,
              "description": "Security portal name e.g. SSP, IOSProfileCatalog and WebConsole",
              "x-nullable": false
            },
            {
              "name": "settings",
              "in": "body",
              "required": true,
              "description": "Security settings object contains the authentication type and authentication service name.",
              "schema": {
                "$ref": "#/definitions/EndpointSecuritySettings"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully updated the authentication settings"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/authentication": {
        "put": {
          "tags": [
            "Security"
          ],
          "summary": "Updates the authentication setting for MC webconsole",
          "description": "Updates the authentication setting to be used for MC Webconsole<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Console Authentication\" permission",
          "operationId": "Security_SetAuthenticationSettings",
          "parameters": [
            {
              "name": "authenticationSettings",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AuthenticationSettings"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully updated the authentication config"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3103 - SOTI Identity is not configured.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "Returns the authentication setting for MC Webconsole",
          "description": "Returns the authentication setting to be used for MC Webconsole<br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Web Console Access\" permission",
          "operationId": "Security_GetAuthenticationSettings",
          "responses": {
            "401": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/currentUser/deviceGroupRights": {
        "post": {
          "tags": [
            "Security"
          ],
          "summary": "Report on access permission(s) for current user for a given list of Device Groups and list of Permission Names",
          "description": "Retrieve information on the permission status for a list of Device Groups for the current user in MobiControl. The \"referenceId\" refers to the primary identifier of the Device Group. This requires the caller to be granted the “Access Web Console” permission.<br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "Security_GetDeviceGroupPermissions",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "A list of Device Group reference IDs and permission names",
              "schema": {
                "$ref": "#/definitions/DeviceGroupPermissionCriteria"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns device group permissions",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceGroupPermissionInfo"
                }
              }
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/currentUser/filterPermissions": {
        "post": {
          "tags": [
            "Security"
          ],
          "summary": "Report on access permission for current user",
          "description": "Retrieve information on whether the current user can access / execute a specific action in MobiControl. Actions typically are view profiles, manage rules etc.  This requires the caller to be granted the “Access Web Console” permission.<br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "Security_FilterUserSpecificPermissions",
          "parameters": [
            {
              "name": "permissions",
              "in": "body",
              "required": true,
              "description": "The permissions Array that will be filtered if User does not has permission.",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Array of User's permissions",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/passwordpolicy1": {
        "get": {
          "tags": [
            "Security"
          ],
          "summary": "New Retrieve Administrative Password Policy",
          "description": "Returns the administrative password policy configured in Console Security and applies to local administrators. Requires the caller be granted the \"Access Web Console\" permission.<br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Security_GetPasswordPolicyNewPasswordPolicy",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Password policy",
              "schema": {
                "$ref": "#/definitions/PasswordPolicy"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/sotiOne/assist": {
        "get": {
          "tags": [
            "Soti Assist Configuration"
          ],
          "summary": "Returns the SOTI Assist URL configuration",
          "description": "Returns the configuration of SOTI Assist server<br />Requires the caller be granted the \"Web Console Access\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "SotiAssistConfiguration_RetrieveSotiAssistConfiguration",
          "responses": {
            "200": {
              "description": "URL configuration returned successfully",
              "schema": {
                "$ref": "#/definitions/SotiAssistConfiguration"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Soti Assist Configuration"
          ],
          "summary": "Updates the SOTI Assist URL configuration",
          "description": "Updates the configuration of SOTI Assist server<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "SotiAssistConfiguration_AddSotiAssistConfiguration",
          "parameters": [
            {
              "name": "sotiAssistConfiguration",
              "in": "body",
              "required": true,
              "description": "Define the values in key value format for the SOTI Assist URI. Only http/https URIs are allowed.Check Model for details",
              "schema": {
                "$ref": "#/definitions/SotiAssistConfiguration"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully add SOTI Assist Configuration"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/sotiOne/connect": {
        "get": {
          "tags": [
            "Soti Connect Configuration"
          ],
          "summary": "Returns the SOTI Connect URL configuration",
          "description": "Returns the configuration of SOTI Connect server<br />Requires the caller be granted the \"Web Console Access\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "SotiConnectConfiguration_RetrieveSotiConnectConfiguration",
          "responses": {
            "200": {
              "description": "URL configuration returned successfully",
              "schema": {
                "$ref": "#/definitions/SotiConnectConfiguration"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Soti Connect Configuration"
          ],
          "summary": "Updates the SOTI Connect URL configuration",
          "description": "Updates the configuration of SOTI Connect server<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "SotiConnectConfiguration_AddSotiConnectConfiguration",
          "parameters": [
            {
              "name": "sotiConnectConfiguration",
              "in": "body",
              "required": true,
              "description": "Define the values in key value format for the SOTI Connect URI. Only http/https URIs are allowed.Check Model for details",
              "schema": {
                "$ref": "#/definitions/SotiConnectConfiguration"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully add SOTI Connect Configuration"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/sotiOne/snap": {
        "get": {
          "tags": [
            "Soti Snap Configuration"
          ],
          "summary": "Returns the SOTI Snap URL configuration",
          "description": "Returns the configuration of SOTI Snap server<br />Requires the caller be granted the \"Web Console Access\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "SotiSnapConfiguration_RetrieveSotiSnapConfiguration",
          "responses": {
            "200": {
              "description": "URL configuration returned successfully",
              "schema": {
                "$ref": "#/definitions/SotiSnapConfiguration"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Soti Snap Configuration"
          ],
          "summary": "Updates the SOTI Snap URL configuration",
          "description": "Updates the configuration of SOTI Snap server<br />Requires the caller be granted the \"Manage Servers and Global Settings\" permission<br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "SotiSnapConfiguration_AddSotiSnapConfiguration",
          "parameters": [
            {
              "name": "sotiSnapConfiguration",
              "in": "body",
              "required": true,
              "description": "Define the values in key value format for the SOTI Snap URI. Only http/https URIs are allowed.Check Model for details",
              "schema": {
                "$ref": "#/definitions/SotiSnapConfiguration"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully add SOTI Snap Configuration"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/systemconfiguration/syslog": {
        "get": {
          "tags": [
            "System Configuration"
          ],
          "summary": "Retrieve Syslog Configuration",
          "description": "Returns the current Syslog configuration.<br /><B>(Available Since MobiControl v14.2.0)</B>",
          "operationId": "SystemConfiguration_GetSyslogConfiguration",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/SyslogConfiguration"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "System Configuration"
          ],
          "summary": "Update Syslog Configuration",
          "description": "Update Syslog configuration to the global setting.<br />Requires the caller be granted the \"Manage Servers and Global Settings.<br /><B>(Available Since MobiControl v14.2.0)</B>",
          "operationId": "SystemConfiguration_UpdateSyslogConfiguration",
          "parameters": [
            {
              "name": "configuration",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyslogConfiguration"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/SyslogConfiguration"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "System Configuration"
          ],
          "summary": "Delete Syslog Configuration",
          "description": "Delete Syslog configuration from the global setting.<br />Requires the caller be granted the \"Manage Servers and Global Settings.<br /><B>(Available Since MobiControl v14.2.0)</B>",
          "operationId": "SystemConfiguration_DeleteAllSyslogConfiguration",
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/systemconfiguration/syslog/tests": {
        "post": {
          "tags": [
            "System Configuration"
          ],
          "summary": "Test Syslog Connectivity",
          "description": "Test Syslog connectivity<br />Requires the caller be granted the \"Manage Servers and Global Setting\" permission.\"<br /><B>(Available Since MobiControl v14.2.0)</B>",
          "operationId": "SystemConfiguration_TestSyslogConnection",
          "parameters": [
            {
              "name": "syslogConfigurationTest",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SyslogConfigurationTest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/SyslogConfigurationTest"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/systemconfiguration/globalproxy": {
        "get": {
          "tags": [
            "System Configuration"
          ],
          "summary": "Retrieve Global Proxy Configuration",
          "description": "Returns the current global proxy configuration.<br />Requires the caller be granted \"Web Console Access\" permission.<br /><B>(Available Since MobiControl v14.3.1)</B>",
          "operationId": "SystemConfiguration_GetProxySetting",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/ProxySetting"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "System Configuration"
          ],
          "summary": "Replace Global Proxy Configuration",
          "description": "Adds or updates global proxy configuration. If configuration already exists then this action will update it, otherwise configuration will be added.<br />Requires the caller be granted the \"Manage Servers and Global Settings.<br /><B>(Available Since MobiControl v14.3.1)</B>",
          "operationId": "SystemConfiguration_UpdateProxySetting",
          "parameters": [
            {
              "name": "proxySetting",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ProxySetting"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/ProxySetting"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "System Configuration"
          ],
          "summary": "Delete Global Proxy Configuration",
          "description": "Deletes global proxy configuration.<br />Requires the caller be granted the \"Manage Servers and Global Settings.<br /><B>(Available Since MobiControl v14.3.1)</B>",
          "operationId": "SystemConfiguration_DeleteProxySetting",
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/systemconfiguration/globalproxy/isenabled": {
        "put": {
          "tags": [
            "System Configuration"
          ],
          "summary": "Enable/Disable Global Proxy",
          "description": "Enables/Disables global proxy.<br />Requires the caller be granted the \"Manage Servers and Global Settings.<br /><B>(Available Since MobiControl v14.3.1)</B>",
          "operationId": "SystemConfiguration_EnableProxySetting",
          "parameters": [
            {
              "type": "boolean",
              "name": "enable",
              "in": "query",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/ProxySetting"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/systemconfiguration/globalproxy/validate": {
        "post": {
          "tags": [
            "System Configuration"
          ],
          "summary": "Validate Global Proxy Configuration",
          "description": "Validate global proxy configuration.<br /><B>(Available Since MobiControl v14.3.1)</B><br />Requires the caller be granted the \"Manage Servers and Global Settings.",
          "operationId": "SystemConfiguration_ValidateProxySetting",
          "parameters": [
            {
              "name": "proxySetting",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ProxySetting"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": false,
              "description": "",
              "schema": {
                "type": "boolean"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/systemconfiguration/cloudlinkagent": {
        "get": {
          "tags": [
            "System Configuration"
          ],
          "summary": "Retrieve CloudLink settings",
          "description": "Retrieve CloudLink settings, such as compatible CloudLink version and URI for CloudLink installer<br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "SystemConfiguration_GetCloudLinkAgentSetting",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "CloudLink settings",
              "schema": {
                "$ref": "#/definitions/CloudLinkAgentSetting"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/system/maintenance/configuration": {
        "get": {
          "tags": [
            "System Maintenance"
          ],
          "summary": "Returns the configuration for log truncation &amp; maintenance",
          "description": "Returns the configuration for log  truncation &amp; maintenance schedule and other related settings<br />Requires the caller be granted the \"Web Console Access\" permission<br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "SystemMaintenance_GetSystemMaintenanceConfiguration",
          "responses": {
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "System Maintenance"
          ],
          "summary": "Updates the configuration for log maintenance",
          "description": "Updates the configuration for log  truncation &amp; maintenance schedule and other related settings<br />Requires the caller be granted the \"Configure Database Maintenance\" permission<br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "SystemMaintenance_SetSystemMaintenanceConfiguration",
          "parameters": [
            {
              "name": "configuration",
              "in": "body",
              "required": true,
              "description": "contract for log  truncation &amp; maintenance schedule",
              "schema": {
                "$ref": "#/definitions/SystemMaintenanceConfiguration"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully saved"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/system/maintenance/actions/truncateLogs": {
        "post": {
          "tags": [
            "System Maintenance"
          ],
          "summary": "Creates a new log truncation request",
          "description": "Creates a new log truncation request for logs, alerts, app logs<br />Requires the caller be granted the \"Configure Database Maintenance\" permission<br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "SystemMaintenance_TruncateLogs",
          "parameters": [
            {
              "name": "truncateLogsConfiguration",
              "in": "body",
              "required": true,
              "description": "contract to request truncation of logs",
              "schema": {
                "$ref": "#/definitions/TruncateLogsConfiguration"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully requested the log truncation"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6200 - Invalid Folder Path</li><li>6201 - No write permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/android": {
        "post": {
          "tags": [
            "Android Enrollment Policies"
          ],
          "summary": "Creates new Android Enrollment Policy",
          "description": "Creates new Android Enrollment Policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v16.0.0)</b><br />",
          "operationId": "AndroidEnrollmentPolicies_AddAndroidEnrollmentPolicy",
          "parameters": [
            {
              "name": "androidEnrollmentPolicy",
              "in": "body",
              "required": true,
              "description": "Android Enrollment Policy",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/android/{referenceId}": {
        "put": {
          "tags": [
            "Android Enrollment Policies"
          ],
          "summary": "Updates an existing Android Enrollment Policy",
          "description": "Updates an existing Android Enrollment Policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v16.0.0)</b><br />",
          "operationId": "AndroidEnrollmentPolicies_UpdateAndroidEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Android Enrollment Policy Reference Id",
              "x-nullable": false
            },
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Android Enrollment Policy",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Android Enrollment Policies"
          ],
          "summary": "Deletes an existing Android Enrollment Policy",
          "description": "Deletes Android Enrollment Policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v16.0.0)</b><br />",
          "operationId": "AndroidEnrollmentPolicies_DeleteAndroidEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Android Enrollment Policy Reference Id",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Android Enrollment Policies"
          ],
          "summary": "Returns the android enrollment policy details.",
          "description": "This API returns the details of specified android enrollment policy.\r\n            <br /><br />\r\n            Requires the caller be granted the 'View Enrollment Policy' permission.\r\n            <br /><b>(Available Since MobiControl v16.0.0)</b><br />",
          "operationId": "AndroidEnrollmentPolicies_GetAndroidEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an android enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/android/{referenceId}/actions/email": {
        "post": {
          "tags": [
            "Android Enrollment Policies"
          ],
          "summary": "Email Enrollment Policy details",
          "description": "This API emails Enrollment Policy Details to the targetted recipient\r\n            <br /><br />\r\n            Requires the caller be granted the 'Manage Enrollment Policies' permission.\r\n            <br /><b>(Available since MobiControl v15.5.0)</b><br />",
          "operationId": "AndroidEnrollmentPolicies_EmailEnrollmentPolicyInfo",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique Identifier for an Enrollment Policy",
              "x-nullable": false
            },
            {
              "name": "parameter",
              "in": "body",
              "required": true,
              "description": "Parameters required for dispatching email",
              "schema": {
                "$ref": "#/definitions/EnrollmentPolicyEmailInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Success."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6021 - Failed to send email.</li><li>7501 - Unable to send email as enrollment policy is not published.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/android/{referenceId}/actions/downloadConfig": {
        "get": {
          "tags": [
            "Android Enrollment Policies"
          ],
          "summary": "Returns the policy enrollment INI config file.",
          "description": "This API returns the INI config file of specified android enrollment policy.\r\n            <br /><br />\r\n            Requires the caller be granted the 'View Enrollment Policy' permission.\r\n            <br /><b>(Available Since MobiControl v16.0.0)</b><br />",
          "operationId": "AndroidEnrollmentPolicies_GetAndroidEnrollmentIniFile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an android enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/android/actions/downloadAgent/{manufacturerReferenceId}": {
        "get": {
          "tags": [
            "Android Enrollment Policies"
          ],
          "summary": "Returns Android agent Apk file.",
          "description": "This API returns the Android agent Apk file by reference Id.\r\n            <br /><br />\r\n            Requires the caller be granted the 'View Enrollment Policy' permission.\r\n            <br /><b>(Available Since MobiControl v16.0.0)</b><br />",
          "operationId": "AndroidEnrollmentPolicies_GetAndroidAgentApkFile",
          "parameters": [
            {
              "type": "string",
              "name": "manufacturerReferenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for Android agent apk.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/android/{referenceId}/actions/sync": {
        "put": {
          "tags": [
            "Android Enrollment Policies"
          ],
          "summary": "Publishes or updates Android enrollment policy",
          "description": "This API will publishes or update Android enrollment policy profile in Soti Services\r\n            <br /><br />\r\n            Requires the caller be granted the 'Manage Enrollment Policy' permission.\r\n            <br /><b>(Available Since MobiControl v16.0.0)</b><br />",
          "operationId": "AndroidEnrollmentPolicies_UpdatePublishProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an android enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/apns/configurations": {
        "get": {
          "tags": [
            "Apns Configuration"
          ],
          "summary": "Returns a list of all available APNS configurations",
          "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "ApnsConfiguration_GetConfigurations",
          "responses": {
            "200": {
              "description": "All APNS configurations",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ConfigurationInfo"
                }
              }
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Apns Configuration"
          ],
          "summary": "Creates a new Apple Push Notification Service configuration",
          "description": "<br />Requires the caller to be granted the \"Manage APNS Certificates\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br /></p><p>The request's body:\r\n            <ol><li>Should be multipart request comprising of metadata and certificate content encoded in base64.</li><li>Supported values of Content-Type for certificate part of request's body: application/x-pem-file, application/x-pkcs12.</li><li>The appropriate content-type value should be chosen in accordance with the certificate type being uploaded.</li><li>Metadata part of request's body contains a JSON object with optional AppleId and CertificatePassword fields and should be identified by <code>Content-Type: application/x-pkcs12.metadata+json (or application/x-pem-file.metadata+json)</code></li></ol></p><p>Sample request's body:\r\n            <pre>\r\n            --mobicontrol_boundary\r\n            Content-Type: application/x-pkcs12.metadata+json\r\n            <br />\r\n            {\"CertificatePassword\":\"password\", \"AppleId\":\"some@id.com\"}\r\n            <br />\r\n            --mobicontrol_boundary\r\n               Content-Type: application/x-pkcs12\r\n               Content-Transfer-Encoding: base64\r\n               Content-Disposition: attachment; filename=\"cert.pfx\"\r\n            <br />\r\n            BASE64_ENCODED_CERTIFICATE_CONTENT_HERE\r\n            --mobicontrol_boundary--\r\n            </pre></p>",
          "operationId": "ApnsConfiguration_CreateConfiguration",
          "responses": {
            "400": {
              "description": "Bad request.<br /><ol><li>If the request's header's content type is incorrect or malformed</li><li>If the request's body is missing a certificate</li><li>If the request's body is missing a certificate password (for the case of pfx files)</li><li>If the request's body contains a certificate password that exceeds 512 characters</li><li>If the request's body contains a an Apple ID that exceeds 256 characters</li></ol>"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>5800 - If the request's body contains an invalid certificate file type.</li><li>5801 - If the request's body contains a certificate with an invalid topic string</li><li>5802 - If the request's body contains a certificate that was not generated using a downloaded CSR</li><li>5803 - If the request's body contains an invalid password for the provided certificate</li><li>5805 - If MobiControl cannot establish a connection with APNS to determine whether the certificate is valid</li><li>5806 - If Apple rejects the connection to an invalid certificate</li><li>5807 - If there already exists an APNS configuration</li><li>5808 - If APNS certificate is expired.</li></ol>"
            },
            "200": {
              "description": "Created configuration object.",
              "schema": {
                "$ref": "#/definitions/ConfigurationInfo"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/apns/configurations/{referenceId}": {
        "get": {
          "tags": [
            "Apns Configuration"
          ],
          "summary": "Returns the specified APNS configuration as referenced by {referenceId}",
          "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "ApnsConfiguration_GetConfiguration",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Configuration reference ID in Microsoft GUID format.",
              "x-nullable": false
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Failed operation due to non-existing configuration record"
            },
            "200": {
              "description": "Configuration object.",
              "schema": {
                "$ref": "#/definitions/ConfigurationInfo"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Apns Configuration"
          ],
          "summary": "Updates the specified APNS configuration",
          "description": "<br />Requires the caller to be granted the \"Manage APNS Certificates\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br /></p><p>The request's body:\r\n            <ol><li>Should be multipart request comprising of metadata and certificate content encoded in base64.</li><li>Supported values of Content-Type for certificate part of request's body: application/x-pem-file, application/x-pkcs12.</li><li>The appropriate content-type value should be chosen in accordance with the certificate type being uploaded.</li><li>Metadata part of request's body contains a JSON object with optional AppleId and CertificatePassword fields and should be identified by <code>Content-Type: application/x-pkcs12.metadata+json (or application/x-pem-file.metadata+json)</code></li><li>To update AppleId only (without certificate content) the request's body should have <code>Content-Transfer-Encoding: binary</code></li></ol></p><p>Sample request's body:\r\n            <pre>\r\n            --mobicontrol_boundary\r\n            Content-Type: application/x-pkcs12.metadata+json\r\n            <br />\r\n            {\"AppleId\":\"sample123\"}\r\n            <br />\r\n            --mobicontrol_boundary\r\n               Content-Type: application/x-pkcs12\r\n               Content-Transfer-Encoding: binary\r\n               Content-Disposition: attachment; filename=\"empty.pfx\"\r\n            <br /><br />\r\n            --mobicontrol_boundary--\r\n            </pre></p>",
          "operationId": "ApnsConfiguration_ModifyConfiguration",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Configuration reference ID in Microsoft GUID format.",
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "allowTopicChange",
              "in": "query",
              "required": true,
              "description": "If it is 'true', the new APNS certificate's topic string can be different than that of the existing APNS certificate <br />\r\n            If it is 'false', the new APNS certificate's topic string must match that of the existing APNS certificate <br />",
              "x-nullable": false
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request.<br /><ol><li>If the request is missing the reference ID</li><li>If the request's header's content type is incorrect or malformed</li><li>If the request's body is missing a certificate</li><li>If the request's body is missing a certificate password (for the case of pfx files)</li><li>If the request's body contains a certificate password that exceeds 512 characters</li><li>If the request's body contains a an Apple ID that exceeds 256 characters</li></ol>"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Failed operation due to non-existing configuration record"
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>5800 - If the request's body contains an invalid certificate file type.</li><li>5801 - If the request's body contains a certificate with an invalid topic string</li><li>5802 - If the request's body contains a certificate that was not generated using a downloaded CSR</li><li>5803 - If the request's body contains an invalid password for the provided certificate</li><li>5804 - If topic string of the new APNS certificate does not match that of the existing APNS certificate</li><li>5805 - If MobiControl cannot establish a connection with APNS to determine whether the certificate is valid</li><li>5806 - If Apple rejects the connection to an invalid certificate</li><li>5808 - If APNS certificate is expired.</li></ol>"
            },
            "200": {
              "description": "Updated configuration object.",
              "schema": {
                "$ref": "#/definitions/ConfigurationInfo"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/apns/configurations/{referenceId}/appleId": {
        "put": {
          "tags": [
            "Apns Configuration"
          ],
          "summary": "Updates the specified Apple ID for the specified APNS configuration",
          "description": "<br />Requires the caller to be granted the \"Manage APNS Certificates\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "ApnsConfiguration_ModifyConfigurationAppleId",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Configuration reference ID in Microsoft GUID format.",
              "x-nullable": false
            },
            {
              "name": "updateRequest",
              "in": "body",
              "required": true,
              "description": "Update APNS configuration in MobiControl.",
              "schema": {
                "$ref": "#/definitions/UpdateConfigurationAppleId"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            },
            "400": {
              "description": "Bad request.<br /><ol><li>If the request is missing the reference ID</li><li>If the request's body is missing an Apple ID</li><li>If the request's body contains a an Apple ID that exceeds 256 characters</li></ol>"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Failed operation due to non-existing configuration record"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/apns/certificateSigningRequests": {
        "get": {
          "tags": [
            "Apns Configuration"
          ],
          "summary": "Returns a Certificate Signing Request (CSR).",
          "description": "<br />Requires the caller to be granted the \"Manage APNS Certificates\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "ApnsConfiguration_IssueCertificateSigningRequest",
          "responses": {
            "200": {
              "description": "Base64 encoded CSR content",
              "schema": {
                "type": "file"
              }
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/apns/configurations/{referenceId}/actions/testConnection": {
        "post": {
          "tags": [
            "Apns Configuration"
          ],
          "summary": "Executes a test connection with APNS",
          "description": "<br />Requires the caller to be granted the \"Manage APNS Certificates\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "ApnsConfiguration_TestConnection",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Configuration reference ID in Microsoft GUID format.",
              "x-nullable": false
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "204": {
              "description": "Operation Successful"
            },
            "422": {
              "description": "Violated logical condition.The following ErrorCode values can be returned:<br /><ol><li>5805 - If MobiControl cannot establish a connection with APNS to determine whether the certificate is valid</li><li>5806 - If Apple rejects the connection to an invalid certificate</li><li>5808 - If APNS certificate is expired.</li></ol>"
            },
            "403": {
              "description": "Failed operation due to non-existing configuration record"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/publicKey": {
        "post": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Generates a Public Key certificate for an MDM Server in Apple Business Manager",
          "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B><p><br />Returns the certificate information of the generated Public Key certificate.\r\n            <br />ReferenceId is used to download the certificate using GET /apple/appleBusinessManager/deviceAccounts/publicKey/{certificateReferenceId}.</p>",
          "operationId": "AppleAutomatedDeviceEnrollment_GenerateSigningCertificateWithPublicKey",
          "responses": {
            "200": {
              "description": "Operation Successful",
              "schema": {
                "$ref": "#/definitions/SigningCertificateInfo"
              }
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/publicKey/{certificateReferenceId}": {
        "get": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Downloads the specified Public Key certificate for an MDM Server in Apple Business Manager",
          "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B><p><br />This API is used after calling POST /apple/appleBusinessManager/deviceAccounts/publicKey to generate the Public Key certificate.\r\n            <br />Returns HttpResponseMessage with http code and application/octet-stream as certificate file content.</p>",
          "operationId": "AppleAutomatedDeviceEnrollment_GetSigningCertificateWithPublicKeyById",
          "parameters": [
            {
              "type": "string",
              "name": "certificateReferenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the Public Key certificate as returned by the API.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Bad Request, i.e. invalid Certificate Reference Id"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Failed operation due to non-existing certificate record"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts": {
        "get": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Returns a list of all Apple Automated Device Enrollment accounts",
          "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B><p><br />Returns a list of AccountInfo properties</p>",
          "operationId": "AppleAutomatedDeviceEnrollment_GetAccounts",
          "responses": {
            "200": {
              "description": "Operation Successful",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AccountInfo"
                }
              }
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Creates a new Apple Automated Device Enrollment account",
          "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b><p><br />The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br /></p><p>The request's body:\r\n            <ol><li>Should be multipart request comprising of metadata and token file downloaded from Apple Business Manager.</li><li>Token file part of the request's body is mandatory and should be identified by <code>Content-Type: application/octet-stream</code></li><li>Metadata part of request's body is mandatory and should be identified by <code>Content-Type: application/octet-stream.metadata+json</code></li><li>Metadata is a JSON object with:\r\n                    <ul style=\"list-style-type:circle\"><li>AccountName: Friendly name of the account being created</li><li>CertificateReferenceId: The reference ID of the public key certificate (as returned by POST /apple/appleBusinessManager/deviceAccounts/publickey) used to generate the provided token file.</li></ul></li></ol></p><p>Sample request's body:\r\n            <pre>\r\n            --mobicontrol_boundary\r\n            Content-Type: application/octet-stream.metadata+json\r\n            <br />\r\n            {\"AccountName\":\"string\", \"CertificateReferenceId\":\"The reference of the public key certificate (string)\"}\r\n            <br />\r\n            --mobicontrol_boundary\r\n            Content-Type: application/octet-stream\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"somecert.p7m\"\r\n            <br />\r\n            BASE64_ENCODED_TOKEN_FILE_CONTENT_HERE\r\n            --mobicontrol_boundary--\r\n            </pre></p>",
          "operationId": "AppleAutomatedDeviceEnrollment_CreateAccount",
          "responses": {
            "200": {
              "description": "Operation Successful",
              "schema": {
                "$ref": "#/definitions/AccountInfo"
              }
            },
            "400": {
              "description": "Bad request.<br /><ol><li>If the request is missing TokenData</li><li>If the request is missing CertificateReferenceId</li><li>If the request is missing AccountName</li></ol>"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Failed operation due to non-existing certificate record"
            },
            "422": {
              "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1202 - If there was a failure to decrypt the server token.</li><li>1210 - If the Apple Device Management services could not be reached.</li><li>1211 - If the server token is successfully decrypted but found to be expired.</li><li>1214 - If the account name is used by another Automated Device Enrollment account.</li><li>1216 - If the test connection (retrieving a session token) with Apple Device Management services failed due to invalid authentication token.</li><li>1218 - If failed to retrieve account information (GET /account).</li><li>1219 - If MDM Server associated with the supplied MDM Server Token is the same as that of an existing account.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}": {
        "get": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Returns the specified Apple Automated Device Enrollment account",
          "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B><p><br />Returns the specified Apple Automated Device Enrollment account by reference ID.</p>",
          "operationId": "AppleAutomatedDeviceEnrollment_GetAccount",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful",
              "schema": {
                "$ref": "#/definitions/AccountInfo"
              }
            },
            "400": {
              "description": "Bad Request, i.e. invalid Account Reference Id"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Updates the specified Apple Automated Device Enrollment account",
          "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b><p><br />Updates the specified Apple Automated Device Enrollment account corresponding to the account reference ID.</p><p><br />The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br /></p><p>The request's body:\r\n            <ul><li>Should be multipart request comprising of metadata and token file downloaded from Apple Business Manager.</li><li>Token file part of the request's body is mandatory should be identified by <code>Content-Type: application/octet-stream</code></li><li>Metadata part of request's body is optional and should be identified by <code>Content-Type: application/octet-stream.metadata+json</code></li><li>Metadata is a JSON object with:\r\n                    <ul style=\"list-style-type:circle\"><li>AccountName: Friendly name of the account being updated. If it is not specified, the account name will be unchanged</li><li>CertificateReferenceId: The reference ID of the public key certificate (as returned by POST /apple/appleBusinessManager/deviceAccounts/publickey) used to generate the provided token file.  If it is not specified, the public key certificate used to generate the current token file will be used to decrypt the provided token file</li></ul></li></ul></p><p>Sample request's body:\r\n            <pre>\r\n            --mobicontrol_boundary\r\n            Content-Type: application/octet-stream.metadata+json\r\n            <br />\r\n            {\"AccountName\":\"string\", \"CertificateReferenceId\":\"The reference of the public key certificate (string)\"}\r\n            <br />\r\n            --mobicontrol_boundary\r\n            Content-Type: application/octet-stream\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"somecert.p7m\"\r\n            <br />\r\n            BASE64_ENCODED_TOKEN_FILE_CONTENT_HERE\r\n            --mobicontrol_boundary--\r\n            </pre></p>",
          "operationId": "AppleAutomatedDeviceEnrollment_UpdateAccount",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful",
              "schema": {
                "$ref": "#/definitions/AccountInfo"
              }
            },
            "400": {
              "description": "Bad request.<br /><ol><li>If the request is missing TokenData</li><li>If the request is missing CertificateReferenceId</li><li>If the request is missing AccountName</li></ol>"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Failed operation due to non-existing certificate record"
            },
            "422": {
              "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1202 - If there was a failure to decrypt the server token.</li><li>1210 - If the Apple Device Management services could not be reached.</li><li>1211 - If the server token is successfully decrypted but found to be expired.</li><li>1214 - If the account name is used by another Automated Device Enrollment account.</li><li>1216 - If the test connection (retrieving a session token) with Apple Device Management services failed due to invalid authentication token.</li><li>1218 - If failed to retrieve account information (GET /account).</li><li>1220 - If MDM Server associated with the supplied MDM Server Token is different than that of the current account.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Deletes the specified Apple Automated Device Enrollment account",
          "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b><p><br />Deletes the specified Apple Automated Device Enrollment account corresponding to the account reference ID.</p>",
          "operationId": "AppleAutomatedDeviceEnrollment_DeleteToken",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful"
            },
            "400": {
              "description": "Bad Request, i.e. invalid Account Reference Id"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1217 - If the account is used by an Add Device Rule.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/name": {
        "put": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Updates the specified Apple Automated Device Enrollment account's name",
          "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><p><br /> Call shall contains following parameters:\r\n            <br /> AccountName - This is AccountName shall be updated\r\n            </p>",
          "operationId": "AppleAutomatedDeviceEnrollment_UpdateAccountName",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID",
              "x-nullable": false
            },
            {
              "name": "accountName",
              "in": "body",
              "required": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/AccountName"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful",
              "schema": {
                "$ref": "#/definitions/AccountInfo"
              }
            },
            "400": {
              "description": "Bad Request, i.e. invalid Account Reference Id or Account Name"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1214 - If the account name is used by another Automated Device Enrollment account.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/actions/test": {
        "post": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Test connection with Apple's Automated Device Enrollment server using specified account",
          "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b><p><br />Returns HttpResponseMessage OK (200)</p>",
          "operationId": "AppleAutomatedDeviceEnrollment_TestAccount",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Bad Request, i.e. invalid Account Reference Id"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1210 - If MobiControl cannot establish a connection with Apple Automated Device Enrollment service to retrieve a session token using the MDM Server Token.</li><li>1211 - If the server token is successfully decrypted but found to be expired.</li><li>1216 - If Apple rejects the connection due to an invalid authentication token.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/actions/sync": {
        "post": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Synchronize Apple Automated Device Enrollment account corresponding to the account reference ID",
          "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AppleAutomatedDeviceEnrollment_SyncAccount",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful"
            },
            "400": {
              "description": "Bad Request, i.e. invalid Account Reference Id"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1210 - If MobiControl cannot establish a connection with Apple Automated Device Enrollment service to retrieve a session token using the MDM Server Token.</li><li>1211 - If the server token is successfully decrypted but found to be expired.</li><li>1216 - If Apple rejects the connection due to an invalid authentication token.</li><li>1222 - If MobiControl already synchronizing an account.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/rules": {
        "get": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Retrieve all Add Device Rules associated with an Automated Device Enrollment account",
          "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AppleAutomatedDeviceEnrollment_GetRules",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AddDeviceRule"
                }
              }
            },
            "400": {
              "description": "Bad Request, i.e invalid Account Reference Id"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/devices/actions/assignProfile": {
        "post": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Assign Automated Device Enrollment devices to the specified Enrollment Policy.",
          "description": "<br />\r\n<b>(Available Since MobiControl v15.6.0)</b>\r\n<br /> Requires the caller be granted the \"Manage Automated Device Enrollment - Devices\" permission.\r\n                <br /> Request body: Model with list of devices SerialNumbers.\r\n                <br /> Responses Body: EnrollmentDevices\r\n                <br /> content-type: application/json.",
          "operationId": "AppleAutomatedDeviceEnrollment_AssignAdeDevices",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID.",
              "x-nullable": false
            },
            {
              "name": "adeDevices",
              "in": "body",
              "required": true,
              "description": "Request body with the enrollment Policy Reference ID and list of SerialNumber of devices to be assigned to EnrollmentPolicy.",
              "schema": {
                "$ref": "#/definitions/AssignAdeDevicesModel"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful.",
              "schema": {
                "$ref": "#/definitions/AssignAdeDevicesSummary"
              }
            },
            "400": {
              "description": "Failed operation due to bad request."
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            },
            "403": {
              "description": "Failed operation due to non-existing Automated Device Enrollment account."
            },
            "422": {
              "description": "Failed operation due to business logic error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/actions/setDefaultRule": {
        "post": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Set a Default Add Device Rule for an Automated Device Enrollment account",
          "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AppleAutomatedDeviceEnrollment_SetDefaultRule",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID",
              "x-nullable": false
            },
            {
              "name": "defaultRuleModel",
              "in": "body",
              "required": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DefaultRuleModel"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful"
            },
            "400": {
              "description": "Bad Request, i.e invalid Account Reference Id"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned:<br /><ol><li>1221 - If Add Device Rule cannot be set as the Default Add Device Rule because it is not associated with the specified Automated Device Enrollment account.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/enrollmentPolicies": {
        "get": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Retrieve all Enrollment Policies associated with the specified Automated Device Enrollment account",
          "description": "<br />Requires the caller to be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n                <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "AppleAutomatedDeviceEnrollment_GetPolicies",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AppleBusinessManagerEnrollmentPolicySummary"
                }
              }
            },
            "400": {
              "description": "Bad Request, i.e invalid Account Reference Id"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/devices": {
        "get": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Retrieve all Automated Device Enrollment devices assigned to the specified Enrollment Policy.",
          "description": "<br /> Requires the caller be granted the \"Manage Automated Device Enrollment - Devices\" permission.\r\n                <br /> Request body: nothing.\r\n                <br /> Responses Body: EnrollmentDevices\r\n                <br /> content-type: application/json.\r\n                <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "AppleAutomatedDeviceEnrollment_GetAccountPolicyEnrollmentDevices",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "enrollmentPolicyReferenceId",
              "in": "query",
              "description": "Enrollment Policy Reference ID.",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "filterValue",
              "in": "query",
              "description": "Filter value.\r\n            When FilterType = 1 (ByEnrollmentStatus), valid value [Not enrolled =0 , Enrolled = 1, UnEnrolled =2].\r\n            When FilterType = 2 (ByProfileStatus), valid value [Unknown = 0, Empty = 1, Assigned = 2, Pushed = 3, Removed = 4].",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "filterType",
              "in": "query",
              "description": "FilterType.",
              "x-schema": {
                "$ref": "#/definitions/FilterType"
              },
              "default": "Unspecified",
              "x-nullable": false,
              "enum": [
                "Unspecified",
                "ByEnrollmentStatus",
                "ByProfileStatus"
              ],
              "x-enumType": "FilterType"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query",
              "description": "",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Operation Successful.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EnrollmentDevice"
                }
              }
            },
            "400": {
              "description": "Failed operation due to bad request."
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            },
            "403": {
              "description": "Failed operation due to non-existing Automated Device Enrollment account."
            },
            "422": {
              "description": "Failed operation due to business logic error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/actions/mac/setDefaultPolicy": {
        "post": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Sets/Removes default mac enrollment policy for an Automated Device Enrollment account.",
          "description": "<br />This API Sets/Removes default macOS enrollment policy for an Automated Device Enrollment account.\r\n             User need to send \"EnrollmentPolicyReferenceId\" property as empty in order to remove associated default enrollment policy for an Automated Device Enrollment account.\r\n             <br />Requires the caller be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b>",
          "operationId": "AppleAutomatedDeviceEnrollment_SetMacDefaultEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID.",
              "x-nullable": false
            },
            {
              "name": "defaultEnrollmentPolicy",
              "in": "body",
              "required": true,
              "description": "Default Mac Enrollment Policy.",
              "schema": {
                "$ref": "#/definitions/DefaultPolicyModel"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Logic Exception.\r\n             <br />The following ErrorCode values can be returned:.<br /><ol><li>1225 - Enrollment Policy cannot be set as the Default Policy because it is not associated with the specified Automated Device Enrollment account.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/deviceAccounts/{accountReferenceId}/actions/ios/setDefaultPolicy": {
        "post": {
          "tags": [
            "Apple Automated Device Enrollment"
          ],
          "summary": "Sets/Removes default Ios enrollment policy for an Automated Device Enrollment account.",
          "description": "<br />This API Sets/Removes default Ios enrollment policy for an Automated Device Enrollment account.\r\n            User need to send \"EnrollmentPolicyReferenceId\" property as empty in order to remove associated default enrollment policy for an Automated Device Enrollment account.\r\n            <br />Requires the caller be granted the \"Manage Automated Device Enrollment - Accounts\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b>",
          "operationId": "AppleAutomatedDeviceEnrollment_SetIosDefaultEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "accountReferenceId",
              "in": "path",
              "required": true,
              "description": "Account Reference ID.",
              "x-nullable": false
            },
            {
              "name": "defaultEnrollmentPolicy",
              "in": "body",
              "required": true,
              "description": "Default Ios Enrollment Policy.",
              "schema": {
                "$ref": "#/definitions/DefaultPolicyModel"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Logic Exception.\r\n            <br />The following ErrorCode values can be returned:.<br /><ol><li>1225 - Enrollment Policy cannot be set as the Default Policy because it is not associated with the specified Automated Device Enrollment account.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/windows/apps/enterprise/internal": {
        "post": {
          "tags": [
            "App Management Windows Apps"
          ],
          "summary": "Creates new enterprise Windows application hosted internally by MobiControl",
          "description": "Uploads a Windows application(.xap, .appx and .msi) to be hosted internally by MobiControl.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><br /><p>Content-Type of the Request body must be multipart/related;<code>multipart/related; boundary={boundary identifier}</code><br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br />\r\n            Multipart request body must contain the following parts:\r\n            </p><ol><li>Application Kind info - Contains Content-Type and application kind, which should be one of <code>ModernEnterprise, Enterprise or ClassicDesktop</code><pre>\r\n            Content-Type: application/vnd.ms.application.metadata+json\r\n            <br />\r\n            {\"AppKind\":\"ModernEnterprise\"}\r\n            </pre></li><li>Application file - Contains application file content and headers:\r\n            <pre>\r\n            Content-Type: application/vnd.ms.application\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"{application-filename}\"\r\n            <br />\r\n            Application file content encoded in base64\r\n            </pre></li></ol>\r\n            The maximum size of the Windows application file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />\r\n            An example below shows an application upload request:\r\n            <br /><pre>\r\n            Content-Type: multipart/related; boundary=mobicontrol_boundary\r\n            Content-Length: number_of_bytes_in_entire_request_body\r\n            <br />\r\n            --mobicontrol_boundary\r\n            Content-Type: application/vnd.ms.application.metadata+json\r\n            <br />\r\n            {\"AppKind\":\"ModernEnterprise\"}\r\n            <br />\r\n            --mobicontrol_boundary\r\n            Content-Type: application/vnd.ms.application\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"[self_signed]W10UWP_1.0.2.0_x86.appx\"\r\n            <br />\r\n            application data encoded in base64\r\n            --mobicontrol_boundary--\r\n            </pre>",
          "operationId": "AppManagementWindowsApps_UploadApplication",
          "responses": {
            "200": {
              "description": "Internal application file uploaded successfully",
              "schema": {
                "$ref": "#/definitions/WindowsApplicationSummaryBase"
              }
            },
            "400": {
              "description": "Invalid request, i.e., Invalid application file contents or metadata"
            },
            "403": {
              "description": "Forbidden"
            },
            "415": {
              "description": "Unsupported content media type"
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:<br /><response code=\"500\">Internal Error</response><ol><li>5300 - The application cannot be validated without a valid token.</li><li>5301 - The token is invalid.</li><li>5302 - Error reading the application file.</li><li>5303 - The file is signed with an incorrect token or expired certificate.</li><li>5304 - The certificate is expired.</li><li>5305 - Invalid application signer.</li><li>5306 - The file is not signed.</li><li>5307 - Invalid reference id.</li><li>5308 - The file is not a valid dependency.</li><li>5309 - The file type not supported.</li><li>5310 - Error parsing the classic application installer descriptor.</li><li>5311 - The application with reference Id: {0} is not found!</li><li>5312 - Transaction to save application {0} to database failed.</li><li>5313 - Save application {0} to database timed out.</li><li>5402 - Error parsing the parameter</li><li>5404 - The uploading application kind is not supported</li><li>5405 - Contract validation exception</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/windows/apps/enterprise/external": {
        "post": {
          "tags": [
            "App Management Windows Apps"
          ],
          "summary": "Creates new enterprise Windows application hosted externally",
          "description": "Creates a Windows application(.xap and .appx) to be hosted externally by MobiControl.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><br />\r\n            The maximum size of the Windows application file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />",
          "operationId": "AppManagementWindowsApps_AddExternalEnterpriseApplication",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Application External URL",
              "schema": {
                "$ref": "#/definitions/AddExternalEnterpriseAppRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "External application file uploaded successfully",
              "schema": {
                "$ref": "#/definitions/WindowsModernAppSummary"
              }
            },
            "400": {
              "description": "Invalid request, i.e., Invalid application file contents or metadata"
            },
            "403": {
              "description": "Forbidden"
            },
            "415": {
              "description": "Unsupported content media type"
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:<br /><response code=\"500\">Internal Error</response><ol><li>5300 - The application cannot be validated without a valid token.</li><li>5301 - The token is invalid.</li><li>5302 - Error reading the application file.</li><li>5303 - The file is signed with an incorrect token or expired certificate.</li><li>5304 - The certificate is expired.</li><li>5305 - Invalid application signer.</li><li>5306 - The file is not signed.</li><li>5307 - Invalid reference id.</li><li>5308 - The file is not a valid dependency.</li><li>5309 - The file type not supported.</li><li>5310 - Error parsing the classic application installer descriptor.</li><li>5311 - The application with reference Id: {0} is not found!</li><li>5312 - Save application {0} to database failed.</li><li>5313 - Save application {0} to database timed out.</li><li>5400 - External URI does not appear to be a valid link.</li><li>5401 - The Company Hub App (XAP/APPX file) URI is invalid.</li><li>5402 - Error parsing the parameter</li><li>5404 - The uploading application kind is not supported</li><li>5405 - Contract validation exception</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/windows/apps/{referenceId}": {
        "get": {
          "tags": [
            "App Management Windows Apps"
          ],
          "summary": "Returns details for the selected Windows application",
          "description": "Returns details for the Windows application referred by &lt;ReferenceID&gt;.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"View App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementWindowsApps_GetApplication",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Application reference id",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "appKind",
              "in": "query",
              "required": true,
              "description": "Application kind",
              "x-schema": {
                "$ref": "#/definitions/ApplicationKind"
              },
              "x-nullable": false,
              "enum": [
                "Unknown",
                "ModernEnterprise",
                "ClassicDesktop",
                "Enterprise"
              ],
              "x-enumType": "ApplicationKind"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns Windows application details successfully",
              "schema": {
                "$ref": "#/definitions/WindowsApplicationSummaryBase"
              }
            },
            "400": {
              "description": "Invalid request, i.e., Invalid application file contents or metadata"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Business Error"
            },
            "500": {
              "description": "Internal Error"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/windows/apps/{referenceId}/icon": {
        "get": {
          "tags": [
            "App Management Windows Apps"
          ],
          "summary": "Returns Windows application icon",
          "description": "Returns Windows application icon data.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"View App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementWindowsApps_GetApplicationIcon",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Application reference id",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "appKind",
              "in": "query",
              "required": true,
              "description": "Application kind",
              "x-schema": {
                "$ref": "#/definitions/ApplicationKind"
              },
              "x-nullable": false,
              "enum": [
                "Unknown",
                "ModernEnterprise",
                "ClassicDesktop",
                "Enterprise"
              ],
              "x-enumType": "ApplicationKind"
            }
          ],
          "responses": {
            "200": {
              "description": "Return application icon data stream successfully",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Invalid request, i.e., Invalid application file contents or metadata"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:<br /><ol><li>5404 - The application kind is not supported</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/windows/apps": {
        "get": {
          "tags": [
            "App Management Windows Apps"
          ],
          "summary": "Returns Windows applications' summaries",
          "description": "Returns meta data of Windows applications matching search criteria.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"View App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>The search criteria should be in the URI as array and contains the following parts:\r\n            <pre><br /><b>Name</b>: Application identity name\r\n            <b>PublisherId</b>: Application publisher identity name\r\n            <b>Version</b>: Application version\r\n            <b>Architectures</b>: Application target processor architecture\r\n            <b>MatchHigherVersion</b>: Flag to specify if accept application of higher version\r\n            </pre></p>\r\n            An example below shows the URI arguments of querying 2 applications' summary:\r\n            <br /><pre>\r\n            ?[0].Name=Microsoft.VCLibs.140.00\r\n            &amp;[0].PublisherIdName=Microsoft.VCLibs.140.00\r\n            &amp;[0].Version=14.0.22929.0\r\n            &amp;[0].Architectures=X86\r\n            &amp;[0].MatchHigherVersion=true\r\n            &amp;[1].Name=Microsoft.NET.Native.Framework.1.3\r\n            &amp;[1].PublisherIdName=Microsoft.NET.Native.Framework.1.3\r\n            &amp;[1].Version=1.3.24201.0\r\n            &amp;[1].Architectures=X86\r\n            &amp;[1].MatchHigherVersion=true\r\n            </pre>",
          "operationId": "AppManagementWindowsApps_GetAppSummaries",
          "parameters": [
            {
              "type": "array",
              "name": "appQueryInfos",
              "in": "query",
              "description": "Criteria to search applications",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EnterpriseAppQueryInfo"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Return application meta data successfully",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/WindowsApplicationSummaryBase"
                }
              }
            },
            "400": {
              "description": "Invalid request, i.e., Invalid application file contents or metadata"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Business Error"
            },
            "500": {
              "description": "Internal Error"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/windows/policies": {
        "post": {
          "tags": [
            "App Management Windows Policies"
          ],
          "summary": "Creates Windows app management policy",
          "description": "Creates Windows app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementWindowsPolicies_CreatePolicy",
          "parameters": [
            {
              "name": "appPolicy",
              "in": "body",
              "required": true,
              "description": "Windows app management policy info",
              "schema": {
                "$ref": "#/definitions/WindowsAppCatalogRule"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Create Windows app management policy successfully",
              "schema": {
                "$ref": "#/definitions/WindowsAppCatalogRuleSummary"
              }
            },
            "400": {
              "description": "Invalid request, i.e., Invalid app policy info"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Business Error"
            },
            "500": {
              "description": "Internal Error"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/windows/policies/{referenceId}": {
        "get": {
          "tags": [
            "App Management Windows Policies"
          ],
          "summary": "Returns Windows app management policy details",
          "description": "Returns Windows app management policy details.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"View App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementWindowsPolicies_GetPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Windows app management policy reference id",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Return app management policy successfully",
              "schema": {
                "$ref": "#/definitions/WindowsAppCatalogRuleSummary"
              }
            },
            "400": {
              "description": "Invalid request, i.e., Invalid reference id"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Business Error"
            },
            "500": {
              "description": "Internal Error"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "App Management Windows Policies"
          ],
          "summary": "Deletes Windows app management policy",
          "description": "Deletes Windows app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementWindowsPolicies_DeletePolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Windows app management policy reference id",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Delete Windows app management policy successfully"
            },
            "400": {
              "description": "Invalid request, i.e., Invalid reference id"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Business Error"
            },
            "500": {
              "description": "Internal Error"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "App Management Windows Policies"
          ],
          "summary": "Updates Windows app management policy",
          "description": "Updates Windows app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementWindowsPolicies_UpdatePolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Windows app management policy reference id",
              "x-nullable": false
            },
            {
              "name": "appPolicy",
              "in": "body",
              "required": true,
              "description": "Windows app management policy info",
              "schema": {
                "$ref": "#/definitions/WindowsAppCatalogRule"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Update Windows app management policy successfully",
              "schema": {
                "$ref": "#/definitions/WindowsAppCatalogRuleSummary"
              }
            },
            "400": {
              "description": "Invalid request, i.e., Invalid reference id or app policy"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Business Error"
            },
            "500": {
              "description": "Internal Error"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/windows/policies/{referenceId}/apps": {
        "put": {
          "tags": [
            "App Management Windows Policies"
          ],
          "summary": "Updates Windows app for the selected policy",
          "description": "Updates apps for selected Windows app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"Manage App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementWindowsPolicies_UpdateAppPolicyApplications",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Windows app management policy reference id",
              "x-nullable": false
            },
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Request to configure app policy applications",
              "schema": {
                "$ref": "#/definitions/UpdateWindowsAppCatalogRuleAppsRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Update apps for selected Windows app management policy successfully"
            },
            "400": {
              "description": "Invalid request, i.e., Invalid reference id or request"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:<br /><response code=\"500\">Internal Error</response><ol><li>5407 - The app policy has no application associated.</li><li>5408 - The product setting for Windows Modern application is invalid.</li><li>5409 - The product setting error, the key must not be empty.</li><li>5410 - The product setting error, the key must be no more than 255 characters.</li><li>5411 - The product setting error, the char is not allowed as key.</li><li>5411 - The product setting error, the value is more than 8192 characters.</li><li>5412 - Unable to Force Provisioned Synchronization without Provisioning for all users.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "App Management Windows Policies"
          ],
          "summary": "Returns Windows apps for the selected policy",
          "description": "Returns apps for selected Windows app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the <b>\"View App Policies\"</b> permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementWindowsPolicies_GetApplicationsByAppPolicyReferenceId",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Windows app management policy reference id",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Return apps for selected Windows app management policy successfully",
              "schema": {
                "$ref": "#/definitions/WindowsAppCatalogRuleAppsSummary"
              }
            },
            "400": {
              "description": "Invalid request, i.e., Invalid reference id"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Business Error"
            },
            "500": {
              "description": "Internal Error"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/customattributes": {
        "post": {
          "tags": [
            "Custom Attributes"
          ],
          "summary": "Create Custom Attribute",
          "description": "Create custom attributes by defining the data type (text, numeric, date, boolean or enumerator), set the value and indicate whether the attribute must be populated on the device.\r\n            <br />\r\n            Requires the caller be granted the \"Manage Servers and Global Setting\" permission.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomAttributes_AddCustomAttribute",
          "parameters": [
            {
              "name": "customAttribute",
              "in": "body",
              "required": true,
              "description": "custom attribute",
              "schema": {
                "$ref": "#/definitions/CustomAttribute"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/CustomAttribute"
              }
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "get": {
          "tags": [
            "Custom Attributes"
          ],
          "summary": "Retrieve List of Custom Attribute Properties",
          "description": "Returns a list of Custom Attribute properties and their respective definition. Requires the caller be granted \"Web Console Access\" permission.\r\n            <br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "CustomAttributes_GetCustomAttributes",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CustomAttribute"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/customattributes/{name}": {
        "get": {
          "tags": [
            "Custom Attributes"
          ],
          "summary": "Retrieve an Existing Custom Attribute",
          "description": "Retrieve an existing custom attribute by specifying it's name.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomAttributes_GetCustomAttribute",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "custom attribute name",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Returns existing custom attribute specified by name",
              "schema": {
                "$ref": "#/definitions/CustomAttribute"
              }
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Custom Attributes"
          ],
          "summary": "Update an Existing Custom Attribute",
          "description": "Update an existing custom attribute by specifying it's name.\r\n            <br />\r\n            Requires the caller be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomAttributes_UpdateCustomAttribute",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "",
              "x-nullable": false
            },
            {
              "name": "customAttribute",
              "in": "body",
              "required": true,
              "description": "custom attribute",
              "schema": {
                "$ref": "#/definitions/CustomAttribute"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Custom Attributes"
          ],
          "summary": "Delete Custom Attribute",
          "description": "Delete an existing custom attribute by specifying it's name.\r\n            <br />\r\n            Requires the caller be granted the \"Manage Servers and Global Settings\" permission.<br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomAttributes_DeleteCustomAttribute",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "custom attribute name",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/customattributes/{name}/catalogueItemReferenceId": {
        "post": {
          "tags": [
            "Custom Attributes"
          ],
          "summary": "Assign rights to a Custom Attribute.",
          "description": "Assign rights associated with a Catalogue Item to a Custom Attribute.\r\n            <br />\r\n            Requires the caller be granted the \"Manage Servers and Global Settings\" permission and the right to view the specified Catalogue Item.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomAttributes_AssignCatalogueItemReferenceIdToCustomAttribute",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "custom attribute name",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "get": {
          "tags": [
            "Custom Attributes"
          ],
          "summary": "Get the Custom Attribute referenceID.",
          "description": "Get the Catalogue Item ReferenceId for a specific Custom Attribute.  Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomAttributes_GetCatalogueItemReferenceIdOfCustomAttribute",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "custom attribute name",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Returns custom attribute's catalog referenceId",
              "schema": {
                "$ref": "#/definitions/CatalogueItemReferenceId"
              }
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Custom Attributes"
          ],
          "summary": "Remove rights assigned to a Custom Attribute.",
          "description": "Remove rights associated with a Catalogue Item to a Custom Attribute.\r\n            <br />\r\n            Requires the caller be granted the \"Manage Servers and Global Settings\" permission and the right to view the specified Catalogue Item.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomAttributes_DeleteCatalogueItemReferenceIdOfCustomAttribute",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "custom attribute name",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/customdata": {
        "get": {
          "tags": [
            "Custom Data"
          ],
          "summary": "Retrieve List of Custom Data Properties",
          "description": "Returns a list of Custom Data properties and their respective definition. Requires the caller be granted \"Web Console Access\" permission.\r\n            <br />\r\n            Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.\r\n            <br /><B>(Available Since MobiControl v14.0.0)</B>",
          "operationId": "CustomData_GetCustomData",
          "parameters": [
            {
              "type": "string",
              "name": "deviceFamily",
              "in": "query",
              "description": "Optional. Device Family type.",
              "x-schema": {
                "$ref": "#/definitions/DeviceFamily2"
              },
              "x-nullable": true,
              "enum": [
                "WindowsCE",
                "Apple",
                "WindowsDesktop",
                "AndroidPlus",
                "Scanner",
                "WindowsPhone",
                "Blackberry",
                "Printer",
                "WindowsRuntime",
                "Linux",
                "Chrome"
              ],
              "x-enumType": "DeviceFamily"
            },
            {
              "type": "boolean",
              "name": "includeBuiltIn",
              "in": "query",
              "description": "Optional. Include build-in custom data",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CustomData"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Custom Data"
          ],
          "summary": "Create New Custom Data",
          "description": "Creates new Custom Data by specifying the required properties and their respective definition. Requires the caller be granted \"Web Console Access\" permission.\r\n            A unique name must be given to the Custom Data item being created. There is also limited support for special characters.\r\n            Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomData_AddCustomData",
          "parameters": [
            {
              "name": "customData",
              "in": "body",
              "required": true,
              "description": "Custom Data",
              "schema": {
                "$ref": "#/definitions/CustomData"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/CustomData"
              }
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/customdata/{name}": {
        "get": {
          "tags": [
            "Custom Data"
          ],
          "summary": "Retrieve Custom Data with Specified Name",
          "description": "Retrieves Custom Data by specifying the name. Requires the caller be granted \"Web Console Access\" permission.\r\n            Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomData_GetSpecificCustomData",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "Unique name of custom data",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/CustomData"
              }
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Custom Data"
          ],
          "summary": "Update Custom Data Properties",
          "description": "Updates Custom Data by specifying the required properties and their respective definition, custom data is located by name. Requires the caller be granted \"Web Console Access\" permission.\r\n            Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomData_UpdateCustomData",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "Unique name of custom data",
              "x-nullable": false
            },
            {
              "name": "customData",
              "in": "body",
              "required": true,
              "description": "Custom Data",
              "schema": {
                "$ref": "#/definitions/CustomData"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/CustomData"
              }
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Custom Data"
          ],
          "summary": "Delete Custom Data with Specified Name",
          "description": "Deletes custom data by specifying the name. Requires the caller be granted \"Web Console Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomData_DeleteCustomData",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "Unique name of custom data",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/customdata/{name}/catalogueItemReferenceId": {
        "get": {
          "tags": [
            "Custom Data"
          ],
          "summary": "Get the Custom Data referenceID",
          "description": "Get the Catalogue Item ReferenceId for a specific Custom Data item. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomData_GetCatalogueItemReferenceIdOfCustomData",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "Unique name of custom data",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/CatalogueItemReferenceId"
              }
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Custom Data"
          ],
          "summary": "Assign Rights to a Custom Data Item",
          "description": "Assign rights associated with a Catalogue Item to a Custom Data item. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomData_AssignCatalogueItemReferenceIdToCustomData",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "Unique name of custom data",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Custom Data"
          ],
          "summary": "Remove Rights Assigned to a Custom Data Item",
          "description": "Remove rights associated with a Catalogue Item to a specific Custom Data item. Requires the caller to be granted the \"WebConsole\" global permission and the right to view the specified Catalogue Item.\r\n            <br /><B>(Available Since MobiControl v15.0.0)</B>",
          "operationId": "CustomData_DeleteCatalogueItemReferenceIdOfCustomData",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "in": "path",
              "required": true,
              "description": "Unique name of custom data",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/devices/{deviceId}/advancedConfigurations": {
        "get": {
          "tags": [
            "Device Configuration"
          ],
          "summary": "Returns the advanced configurations for the specified device.",
          "description": "This API returns the advanced configurations of the specified device.\r\n            <br />\r\n            Requires the caller to be granted the \"Configure Advanced Settings\" and \"Web Console Access\" permission.\r\n            <br /><b>(Available since MobiControl v14.0.0)</b><br />",
          "operationId": "DeviceConfiguration_GetDeviceAdvancedConfigurations",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for a device.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceAdvancedConfiguration"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/profiles": {
        "get": {
          "tags": [
            "Profiles"
          ],
          "summary": "Get a List of Profiles",
          "description": "Returns a list of all profiles in the system. Requires the caller be granted the \"View Profiles\" global permission. Results will be limited to profiles where the caller is granted at least the \"Read\" profile-specific permission.\r\n            <br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.\r\n            <br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Profiles_GetProfiles",
          "parameters": [
            {
              "type": "string",
              "name": "NameContains",
              "in": "query",
              "description": "Only return profiles whose name contains this value. Must\nbe URL-encoded when using special characters (e.g.\na/profilename - a%2fprofilename). When called from this\npage, it should not be encoded (a/profilename).",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "WithStatuses",
              "in": "query",
              "description": "Only return profiles that have statuses that match one of the\nvalues in this list. Provided as a comma-separated list of\nProfileVersionStatus values.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "ForFamilies",
              "in": "query",
              "description": "Only return profiles that are targeting one of the families\nin this list. Provided as a comma-separated list of\nDeviceFamily values.",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "HasDraft",
              "in": "query",
              "description": "Only return profiles that have a current draft. When false,\nonly return profiles that do not have a draft. If null, then\ndo not take draft status into account",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "HasSchedule",
              "in": "query",
              "description": "Only return profiles that currently have a schedule. When false,\nonly return profiles that do not have a schedule. If null, then\ndo not take schedule status into account",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "AutoInstallOnly",
              "in": "query",
              "description": "Only return profiles that are automatically installed.\nWhen false, this only returns profiles that are self-installed.\nIf null, then do not take install method into account.",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "Order",
              "in": "query",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/DataRetrievalOrder"
              }
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of profiles",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ProfileSummary"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Profiles"
          ],
          "summary": "Creates a New Profile",
          "description": "Creates a new profile in the system. Requires the caller be granted the \"Manage Profiles\" global permission.\r\n            <br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.\r\n            <br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Profiles_CreateProfile",
          "parameters": [
            {
              "name": "profileRequest",
              "in": "body",
              "required": true,
              "description": "The details of the profile to be created",
              "schema": {
                "$ref": "#/definitions/Profile"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the newly created profile",
              "schema": {
                "$ref": "#/definitions/ProfileSummary"
              }
            },
            "400": {
              "description": "Contract validation failed"
            },
            "403": {
              "description": "Unauthorized access"
            },
            "422": {
              "description": "Profile request validation failed"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/packages": {
        "put": {
          "tags": [
            "Profiles"
          ],
          "summary": "Add Packages to Profile",
          "description": "Add packages to a profile in the system.\r\n            Requires the caller be granted the \"Manage Profiles\" global permission.\r\n            <br />Note: For \"DeviceFamily\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.\r\n            <br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Profiles_AddPackageToProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            },
            {
              "name": "packageInfos",
              "in": "body",
              "required": true,
              "description": "The package info collection to be added to the profile",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PackageInfo"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the profile that the package is added to",
              "schema": {
                "$ref": "#/definitions/ProfileSummary"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            },
            "422": {
              "description": "Request validation failed"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Profiles"
          ],
          "summary": "Get Package Info of a Profile",
          "description": "Returns a list of packages associated with a profile.\r\n            Requires the caller be granted the \"View Profiles\" global permission.\r\n            Supported sort fields: InstallationOrder, ReferenceId, Version, Name, Size.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_GetProfilePackages",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "Order",
              "in": "query",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/DataRetrievalOrder"
              }
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of packages based on a profile reference id",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PackageInfo"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/assignment": {
        "put": {
          "tags": [
            "Profiles"
          ],
          "summary": "Assign the Profile",
          "description": "Assigns a profile to target groups or devices. Requires the caller be granted the \"Manage Profiles\" global permissions and the \"Read and Write\" profile-specific permission.\r\n            <br />Only the following filter properties are supported:\r\n            <ul><li>OSVersion</li><li>Manufacturer</li><li>Model</li><li>Family</li><li>PasscodeEnabled</li><li>IsEncrypted</li><li>IsSupervised</li><li>LastAgentConnectTime</li><li>LastAgentDisconnectTime</li><li>IsAgentOnline</li><li>PrinterAdminServer.Name</li><li>Memory.TotalMemory</li><li>Memory.AvailableMemory</li><li>Memory.TotalStorage</li><li>Memory.AvailableStorage</li><li>Memory.TotalExternalStorage</li><li>Memory.AvailableExternalStorage</li><li>SIMCarrierNetwork</li><li>CellularCarrier</li><li>SelectedApn</li><li>SupportedApis</li><li>OEMVersion (Android / Android+ only)</li><li>HAS APPLICATION</li><li>HAS UserGroup</li></ul><br />The syntax for HAS APPLICATION and HAS UserGroup is different from the device filters.\r\n            <br />HAS APPLICATION Examples:\r\n            <ul><li>HAS APPLICATION WITH (NAME = 'AngryBirds')</li><li>NOT HAS APPLICATION WITH (NAME = 'AngryBirds')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION = '3.2.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION &gt;&lt; '3.2.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION &gt; '1.2.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION &gt;= '1.2.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION &lt; '8.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION &lt;= '8.1')</li><li>HAS APPLICATION WITH (NAME = 'AngryBirds' AND VERSION BETWEEN '8.1' AND '10')</li></ul><br />HAS UserGroup examples when filtering directory service groups (i.e. LDAP or Azure AD):\r\n            <ul><li>HAS UserGroup WITH (Name = 'Sales' AND ConnectionName = 'LdapConn1')</li><li>HAS UserGroup WITH (Sid = '1111-1111-1111-1111')</li></ul><br />HAS UserGroup examples when filtering IdP groups:\r\n            <ul><li>HAS UserGroup WITH (IdPGroupName = 'Sales' AND IdPConnectionName = 'SSO_Connection1')</li></ul><br />Note: For \"Family\" in the response, \"Blackberry\", \"Scanner\", and \"WindowsRuntime\" are deprecated. \"WindowsPhone\" is for all Windows Modern devices.\r\n            <br /><br /><b>(Available Since MobiControl v14.0.0)</b>",
          "operationId": "Profiles_AssignProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            },
            {
              "name": "profileAssignment",
              "in": "body",
              "required": true,
              "description": "The profile assignment details",
              "schema": {
                "$ref": "#/definitions/ProfileAssignment"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the profile that the package is added to",
              "schema": {
                "$ref": "#/definitions/ProfileSummary"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            },
            "422": {
              "description": "Request validation failed"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Profiles"
          ],
          "summary": "Get Assignment Information of a Profile",
          "description": "Returns the assignment information, targets and options of a profile. Requires the caller be granted the \"Manage Profiles\" global permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_GetProfileAssignmentInfo",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "versionNumber",
              "in": "query",
              "description": "The version number of the profile",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the assignment information about a profile",
              "schema": {
                "$ref": "#/definitions/ProfileAssignmentInfo"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference or the profile version does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/assignment/targetDeviceGroups": {
        "post": {
          "tags": [
            "Profiles"
          ],
          "summary": "Add new Target Device Groups to the Profile assignment",
          "description": "Assigns new Target Device Groups to the Profile . Requires the caller be granted the \"Manage Profiles\" global permissions and the \"Read and Write\" profile-specific permission.\r\n            <br /><b>(Available Since MobiControl v15.2.1 and v15.3.0)</b>",
          "operationId": "Profiles_AssignDeviceGroupsToProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            },
            {
              "name": "deviceGroupPaths",
              "in": "body",
              "required": true,
              "description": "List of device group paths. The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. When using Path it must be (e.g. \\\\\\\\\\\\\\\\My Company\\\\\\\\Sales Devices).<br></br> POST Payload e.g. <br></br>while using paths [\"\\\\\\\\\\\\\\\\My Company\\\\\\\\Sales Devices\",\"\\\\\\\\\\\\\\\\My Company\\\\\\\\Management Devices\"] <br></br> while using reference ids [\"referenceId:9cae0e6e-dac7-4a80-afe9-481ceb87930f\", \"referenceId:72f4191f-379d-47a9-a87d-86a2c7a780b7\"]",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the profile that the package is added to",
              "schema": {
                "$ref": "#/definitions/ProfileAssignment"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            },
            "422": {
              "description": "Request validation failed"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/assignment/targetDeviceGroups/{deviceGroupPath}": {
        "delete": {
          "tags": [
            "Profiles"
          ],
          "summary": "Remove a Target Device Group from a Profile assignment",
          "description": "Remove a Target Device Group from a Profile.  Requires the caller be granted \"Manage Groups\" permission for the specified device group.",
          "operationId": "Profiles_RevokeDevicesGroupFromProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Profile Reference Id",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceGroupPath",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. Path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company).",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Device Group has been excluded from profile"
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            },
            "422": {
              "description": "Request validation failed"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/assignment/targetDevices": {
        "post": {
          "tags": [
            "Profiles"
          ],
          "summary": "Add new Target Devices to the Profile assignment",
          "description": "Assigns new Target Devices to the Profile. Requires the caller be granted the \"Manage Profiles\" global permissions and the \"Read and Write\" profile-specific permission.\r\n            <br /><b>(Available Since MobiControl v15.2.1 and v15.3.0)</b>",
          "operationId": "Profiles_AssignDevicesToProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            },
            {
              "name": "deviceIds",
              "in": "body",
              "required": true,
              "description": "List of device Ids. POST Payload e.g. [\"DeviceReferenceId1\",\"DeviceReferenceId2\"]",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the profile that the package is added to",
              "schema": {
                "$ref": "#/definitions/ProfileAssignment"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            },
            "422": {
              "description": "Request validation failed"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/assignment/targetDevices/{deviceId}": {
        "delete": {
          "tags": [
            "Profiles"
          ],
          "summary": "Remove a Device from a Profile Assignment",
          "description": "Remove a Device from a Profile Assignment. Requires the caller be granted the \"Manage Profiles\" global permissions and the \"Read and Write\" profile-specific permission.\r\n            <br /><b>(Available Since MobiControl v15.2.1 and v15.3.0)</b>",
          "operationId": "Profiles_RevokeDevicesFromProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Profile Reference Id Name",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "Device Id",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Device has been excluded from profile"
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            },
            "422": {
              "description": "Request validation failed"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}": {
        "get": {
          "tags": [
            "Profiles"
          ],
          "summary": "Get a Profile",
          "description": "To retrieve a single profile with the profile reference id being the input parameter.\r\n                <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_GetProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a single profile based on a profile reference id",
              "schema": {
                "$ref": "#/definitions/ProfileSummary"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Profiles"
          ],
          "summary": "Delete a Profile",
          "description": "Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read and Write\" profile-specific permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_DeleteProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "No Content"
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/versions/{versionNumber}/packages": {
        "get": {
          "tags": [
            "Profiles"
          ],
          "summary": "Get Packages of a Profile Version",
          "description": "Returns a list of packages associated with a specific version of a profile.\r\n            Requires the caller be granted the \"View Profiles\" global permission.\r\n            <br />Supported sort fields: InstallationOrder, ReferenceId, Version, Name, Size.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_GetProfilePackagesByVersion",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "versionNumber",
              "in": "path",
              "required": true,
              "description": "The version number of the profile",
              "format": "int32",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "Order",
              "in": "query",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/DataRetrievalOrder"
              }
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of packages based on a profile reference id",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PackageInfo"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference or profile version does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/logs": {
        "get": {
          "tags": [
            "Profiles"
          ],
          "summary": "Get Profile Logs",
          "description": "Returns a list of logs associated with a profile.\r\n            Requires the caller be granted the \"View Profiles\" global permission.\r\n            Ordering is restricted to Timestamp.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_GetProfileLogs",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "Return the logs whose severity matches that from the array",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "Return the logs whose date is startDate or later",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "Only return the logs whose date is endDate or before",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "Order",
              "in": "query",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/DataRetrievalOrder"
              }
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of a logs based on a profile reference id",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ProfileLogEntry"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/deviceAssignmentSummary": {
        "get": {
          "tags": [
            "Profiles"
          ],
          "summary": "Get Device Assignment Status Summary of a Profile",
          "description": "Return the device assignment status summary for a given profile. Requires the caller be granted the \"View Profiles\" global permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_GetProfileDeviceAssignmentSummary",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a device status summary based on a profile reference id",
              "schema": {
                "$ref": "#/definitions/DeviceAssignmentSummary"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/userAssignmentSummary": {
        "get": {
          "tags": [
            "Profiles"
          ],
          "summary": "Get User Assignment Status Summary of a Profile",
          "description": "Return the user assignment status summary for a given profile. Requires the caller be granted the \"View Profiles\" global permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_GetProfileUserAssignmentSummary",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a user status summary based on a profile reference id",
              "schema": {
                "$ref": "#/definitions/DeviceAssignmentSummary"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/versions": {
        "get": {
          "tags": [
            "Profiles"
          ],
          "summary": "Get Version Info of a Profile",
          "description": "Returns a list of versions for a profile. Requires the caller be granted the \"View Profiles\" global permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_GetProfileVersions",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of versions for a profile",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ProfileVersionInfo"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/actions/disable": {
        "post": {
          "tags": [
            "Profiles"
          ],
          "summary": "Disable a Profile",
          "description": "Disable this profile, this keeps the profile active for all currently assigned groups and devices but new assignments cannot be made to it.\r\n            Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read and Write\" profile-specific permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_DisableProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the profile based on a profile reference id, after performing disable action",
              "schema": {
                "$ref": "#/definitions/ProfileSummary"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/actions/revoke": {
        "post": {
          "tags": [
            "Profiles"
          ],
          "summary": "Revoke a Profile",
          "description": "Revoking a profile removes its configurations and packages from a device. You can reapply revoked profiles to devices in the future.\r\n            Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read and Write\" profile-specific permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_RevokeProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the profile based on a profile reference id, after performing revoke action",
              "schema": {
                "$ref": "#/definitions/ProfileSummary"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/logs/summary": {
        "get": {
          "tags": [
            "Profiles"
          ],
          "summary": "Get Profile logs summary",
          "description": "Returns logs summary associated with a Profile.\r\n            Requires the caller be granted the \"View Profile\" global permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_GetProfileLogSummaryBySeverity",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "Return the logs whose date is startDate or later",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "Return the logs whose date is endDate or before",
              "format": "date-time",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of a logs based on a profile reference id",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LogEntryCount"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/actions/retry": {
        "post": {
          "tags": [
            "Profiles"
          ],
          "summary": "Retry Installing a Profile",
          "description": "Re-installation will be attempted on devices where the profile is either \"Failed\" or \"Partially Installed\". Returns the profile based on a profile reference id, after performing a retry action.\r\n            <br />Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read and Write\" profile-specific permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_ReinstallFailedProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the profile based on a profile reference id, after performing retry action",
              "schema": {
                "$ref": "#/definitions/ProfileSummary"
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/name": {
        "put": {
          "tags": [
            "Profiles"
          ],
          "summary": "Updates profile name",
          "description": "Updates the name of the profile to the given value.\r\n            This name cannot be empty and must be unique.\r\n            Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read-Write\" profile-specific permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_UpdateProfileName",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            },
            {
              "name": "name",
              "in": "body",
              "required": true,
              "description": "The new name for the profile",
              "schema": {
                "$ref": "#/definitions/ProfileName"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Returns a new profile with the specified name"
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/description": {
        "put": {
          "tags": [
            "Profiles"
          ],
          "summary": "Updates profile description",
          "description": "Updates the description of the profile to the given value.\r\n            Blank values will clear the description.\r\n            Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read-Write\" profile-specific permission.\r\n            <br /><b>(Available Since MobiControl v14.3.0)</b>",
          "operationId": "Profiles_UpdateProfileDescription",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference Id of the profile",
              "x-nullable": false
            },
            {
              "name": "description",
              "in": "body",
              "required": true,
              "description": "The new description for the profile",
              "schema": {
                "$ref": "#/definitions/ProfileDescription"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Returns a new profile with the specified description"
            },
            "403": {
              "description": "Unauthorized access or profile reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/digests": {
        "get": {
          "tags": [
            "Profiles"
          ],
          "summary": "Get Profile Digest info for a device group",
          "description": "Returns the profile information for the provided path and device platform.\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "Profiles_ViewProfileDigests",
          "parameters": [
            {
              "type": "string",
              "name": "PathId",
              "in": "query",
              "description": "When using a reference ID, it must be prepended to the ID value, \"referenceId:\" (e.g. referenceId%3A7e39724b-6120-4c1f-96a8-c04d4570a974).\nWhen using path, Root of path must be prepended with \"\\\\\\\\\", where the first slash is an escape character. For example: \"\\\\\\\\My Company\" or \"\\\\\\\\My Company\\\\Management Devices\".",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "DevicePlatform",
              "in": "query",
              "description": "The DevicePlatform enum value.",
              "x-schema": {
                "$ref": "#/definitions/DeviceFamily4"
              },
              "x-nullable": false,
              "enum": [
                "NotSpecified",
                "All",
                "WindowsCE",
                "iOS",
                "WindowsDesktop",
                "AndroidPlus",
                "Scanner",
                "WindowsPhone",
                "Blackberry",
                "Printer",
                "WindowsRuntime",
                "Linux",
                "Chrome"
              ]
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "description": "How many records to skip.",
              "format": "int32",
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "description": "How many records to take.",
              "format": "int32",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the digest information about a profile",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ProfileDigest"
                }
              }
            },
            "403": {
              "description": "Unauthorized access or profile reference or the profile version does not exist"
            },
            "422": {
              "description": "Device Platform not specified"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/{referenceId}/profileInfo": {
        "put": {
          "tags": [
            "Profiles"
          ],
          "summary": "Updates the information of the specified Profile.",
          "description": "This API updates the name and description of the specified Profile.\r\n            Requires the caller be granted the \"Manage Profiles\" global permission and the \"Read-Write\" profile-specific permission.\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "Profiles_UpdateProfileInfo",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for a Profile.",
              "x-nullable": false
            },
            {
              "name": "profile",
              "in": "body",
              "required": true,
              "description": "The new name and description for the profile.",
              "schema": {
                "$ref": "#/definitions/ProfileInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Returns a new profile with the specified name and description"
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>[118]: Profile name '{Name}' already exists for specified family.\"</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/actions/export": {
        "post": {
          "tags": [
            "Profiles"
          ],
          "summary": "Exports given profiles so that they can be imported into another instance.",
          "description": "This API exports the reference IDs and password by making a zip file\r\n            Requires the caller be granted the \"Manage Profiles\" global permission\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "Profiles_ExportProfiles",
          "parameters": [
            {
              "name": "exportProfilesParameters",
              "in": "body",
              "required": true,
              "description": "Contains the password as well as a string array of referenceIds when entered in a JSON format.",
              "schema": {
                "$ref": "#/definitions/ExportProfilesParameters"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "403": {
              "description": "Not enough permissions"
            },
            "422": {
              "description": "Error extracting profile payload"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/profiles/actions/import": {
        "post": {
          "tags": [
            "Profiles"
          ],
          "summary": "Imports given profiles with the correct password key values and imports the archive file in a multipart data-form.",
          "description": "This API imports the profiles by getting a zip file and a password\r\n            Requires the caller be granted the \"Manage Profiles\" global permission\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "Profiles_ImportProfiles",
          "responses": {
            "403": {
              "description": "Insufficient permissions"
            },
            "422": {
              "description": "Generic error for payload import failure"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/servers": {
        "get": {
          "tags": [
            "Servers"
          ],
          "summary": "Get All Servers",
          "description": "Returns a list of Management and Deployment Servers powering the MobiControl environment. Requires the caller be granted \"Web Console Access\" permission.\r\n            <br /><B>(Available Since MobiControl v13.2.0)</B>",
          "operationId": "Servers_GetServers",
          "parameters": [
            {
              "type": "boolean",
              "name": "forceDsStatusRefresh",
              "in": "query",
              "description": "When set to true, Deployment Server(s) are notified to update status prior to API response. When set to false, API response will return the last known values from the MobiControl Database",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "getAdditionalCertificates",
              "in": "query",
              "description": "Get additional certificates including DSE, APNS, etc",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "List of DS, MS, and Assist server(s).",
              "schema": {
                "$ref": "#/definitions/Servers"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/servers/logLevels": {
        "get": {
          "tags": [
            "Servers"
          ],
          "summary": "Returns a list of Log Levels",
          "description": "Returns a list of Log Levels currently set for each of the MobiControl's functional areas\r\n            <br />\r\n            Requires the caller be granted the \"Web Console Access\" permission\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "Servers_GetLogLevels",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SystemLogLevel"
              }
            },
            "401": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Servers"
          ],
          "summary": "Updates the specific Log Level",
          "description": "Update the Log Levels for the specific MobiControl's functional area. Multiple functional areas can be updated in single attempt.\r\n            <br />\r\n            Requires the caller be granted the \"Manage Servers and Global Settings\" permission\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "Servers_SetLogLevels",
          "parameters": [
            {
              "name": "systemLogLevel",
              "in": "body",
              "required": true,
              "description": "Define the values in key value format for the desired MC functional area. Check Model for details.",
              "schema": {
                "$ref": "#/definitions/SystemLogLevel"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully set log levels"
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/windowsUpdates/device/{deviceId}": {
        "get": {
          "tags": [
            "Windows Updates"
          ],
          "summary": "Returns a summary list of Windows Updates for the specified device",
          "description": "Return a summary list of Windows Updates and their status for the specified device. Requires the caller be granted \"View Windows Updates\" permission.\r\n            <br /><B>(Available Since MobiControl v15.5.0)</B>",
          "operationId": "WindowsUpdates_GetDeviceWindowsUpdates",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "Device Id",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved all Windows Updates and their statuses from a given device",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/WindowsModernDeviceUpdatesSummary"
                }
              }
            },
            "400": {
              "description": "Bad request to approve:<br /><ol><li>Device id must be specified</li></ol>"
            },
            "403": {
              "description": "User is not authorized or reference does not exist"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/windowsUpdates/classifications": {
        "get": {
          "tags": [
            "Windows Updates"
          ],
          "summary": "Gets Windows Updates Classifications",
          "description": "Retrieves the list of Windows Updates classifications from MobiControl which is refreshed at a configurable interval. In case the classifications have not been synced during the configured interval, then Microsoft server is reached.\r\n            <br /><B>(Available Since MobiControl v15.5.0)</B>",
          "operationId": "WindowsUpdates_GetWindowsUpdateClassifications",
          "responses": {
            "200": {
              "description": "Successfully retrieved the list of Windows Updates classifications",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/WindowsModernUpdateClassification"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/windowsUpdates/device/{deviceId}/approve": {
        "post": {
          "tags": [
            "Windows Updates"
          ],
          "summary": "Approve Windows Updates for the specified device",
          "description": "Send request to the specified device to approve the specified Windows Updates.Requires the caller be granted \"Manage Windows Updates\" permission.\r\n            <br /><B>(Available Since MobiControl v15.5.0)</B>",
          "operationId": "WindowsUpdates_ApproveWindowsUpdates",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "Device Id",
              "x-nullable": false
            },
            {
              "name": "approveUpdateRequest",
              "in": "body",
              "required": true,
              "description": "A list of Windows Update ids to approve",
              "schema": {
                "$ref": "#/definitions/WindowsUpdateApproveRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully requested to approve a list of Windows Updates"
            },
            "400": {
              "description": "Bad request to approve:<br /><ol><li>Device id must be specified</li><li>Updates must be specified</li><li>Invalid approver</li></ol>"
            },
            "403": {
              "description": "User is not authorized or reference does not exist"
            },
            "422": {
              "description": "Violated logical condition. The following ErrorCode values can be returned:<br /><ol><li>7200 - Windows Update is invalid</li><li>7201 - There are no available Windows Updates on the device</li><li>7202 - Windows Update is not found</li><li>7203 - Windows Update is not installable</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollment/rules": {
        "get": {
          "tags": [
            "Enrollment Rules"
          ],
          "summary": "Returns a list of the summary of all the enrollment rules",
          "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B><p><br />Returns a list of the summary of all the enrollment rules, including whether the rule is the default rule for that platform.</p>",
          "operationId": "EnrollmentRules_GetRules",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RuleInfo"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollment/settings": {
        "get": {
          "tags": [
            "Enrollment Rules"
          ],
          "summary": "Returns additional device enrollment information.",
          "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "EnrollmentRules_Get",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DefaultRuleSetting"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollment/{ruleId}/actions/{actionName}": {
        "post": {
          "tags": [
            "Enrollment Rules"
          ],
          "summary": "Performs the specified action on the specified Add Device Rule.",
          "description": "<br />Requires the caller to be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />The only supported value for {actionName} is 'setDefault'. Sets the specified Add Device Rule as the Default Add Device Rule for that platform.",
          "operationId": "EnrollmentRules_Save",
          "parameters": [
            {
              "type": "string",
              "name": "ruleId",
              "in": "path",
              "required": true,
              "format": "guid",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "actionName",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/agentsAndPlugins/android/agents": {
        "get": {
          "tags": [
            "Agents And Plugins"
          ],
          "summary": "Returns a list of Android agents.",
          "description": "Returns a list of all Android agents for a manufacturer, either from SOTI Agent Delivery Service or local cache based on the configuration of the parameter 'forceRefresh'.\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AgentsAndPlugins_GetAgents",
          "parameters": [
            {
              "type": "string",
              "name": "manufacturer",
              "in": "query",
              "required": true,
              "description": "Manufacturer name.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "status",
              "in": "query",
              "required": true,
              "description": "Agent Status.",
              "x-schema": {
                "$ref": "#/definitions/AgentStatus"
              },
              "x-nullable": true,
              "enum": [
                "All",
                "OutOfDate",
                "Updated",
                "Incompatible",
                "InProgress"
              ],
              "x-enumType": "AgentStatus"
            },
            {
              "type": "boolean",
              "name": "forceRefresh",
              "in": "query",
              "description": "When set to True, always pulls agent information from SOTI Agent Delivery Service, instead of locally cached information.\r\n            <br />When set to False, make use of cached data until it's marked stale in 30mins.",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "return the list of Agent Info objects.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AgentInfo"
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/agentsAndPlugins/android/agents/manufacturers": {
        "get": {
          "tags": [
            "Agents And Plugins"
          ],
          "summary": "Returns a list of manufacturers for Android agents.",
          "description": "Returns a list of manufacturers for Android agents from SOTI Agent Delivery Service.\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AgentsAndPlugins_GetManufacturers",
          "parameters": [
            {
              "type": "string",
              "name": "status",
              "in": "query",
              "required": true,
              "description": "Agent status.",
              "x-schema": {
                "$ref": "#/definitions/AgentStatus"
              },
              "x-nullable": true,
              "enum": [
                "All",
                "OutOfDate",
                "Updated",
                "Incompatible",
                "InProgress"
              ],
              "x-enumType": "AgentStatus"
            },
            {
              "type": "boolean",
              "name": "forceRefresh",
              "in": "query",
              "description": "When set to True, always pulls agent information from SOTI Agent Delivery Service, instead of locally cached information.\r\n            <br />When set to False, make use of cached data until it's marked stale in 30mins.",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "return the list of Manufacture Info objects.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Manufacturer"
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6700 - Android Delivery Service sync is currently in progress. Please wait until it is finished.</li><li>6701 - Android Delivery Service sync could not be completed. Available agents might not be up-to-date.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/agentsAndPlugins/android/agents/actions/cancelDownload": {
        "post": {
          "tags": [
            "Agents And Plugins"
          ],
          "summary": "Cancel Android agent(s) download to MobiControl.",
          "description": "Cancel Android agent(s) download from SOTI Agent Delivery Service to MobiControl.\r\n            <br />Requires the caller to be granted \"Manage Android Agents and Plugins\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AgentsAndPlugins_CancelDownload",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "query",
              "description": "Job reference Id. Leave empty to cancel all active download jobs.",
              "default": "",
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully Canceled Agent Install."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/agentsAndPlugins/android/agents/actions/download": {
        "post": {
          "tags": [
            "Agents And Plugins"
          ],
          "summary": "Download Android agent(s) to MobiControl.",
          "description": "Initiate Android agent(s) download from SOTI's Agent Delivery Service to MobiControl.\r\n            <br />Requires the caller to be granted \"Manage Android Agents and Plugins\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AgentsAndPlugins_DownloadAgents",
          "parameters": [
            {
              "name": "agentInfo",
              "in": "body",
              "required": true,
              "description": "Agent Information.",
              "schema": {
                "$ref": "#/definitions/DownloadAgentsRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "return the object of download agents status.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AgentJob"
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/agentsAndPlugins/android/agents/agentCompatibility": {
        "get": {
          "tags": [
            "Agents And Plugins"
          ],
          "summary": "Returns compatibility information of an Android agent.",
          "description": "Returns compatibility information of an Android agent for given application Id and certificate hash from MobiControl database.\r\n            The details of  application Id and certificate hash to be fetched from \"GET /agentsAndPlugins/android/agents\".\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AgentsAndPlugins_Get",
          "parameters": [
            {
              "type": "string",
              "name": "applicationId",
              "in": "query",
              "required": true,
              "description": "The identifier of the agent.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "certificateHash",
              "in": "query",
              "required": true,
              "description": "The certificate hash of the agent.",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Return the agent compatibility info.",
              "schema": {
                "$ref": "#/definitions/AgentCompatibilityInfo"
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Agents And Plugins"
          ],
          "summary": "Updates the specified entry for android agent compatibility.",
          "description": "Updates the existing entry for android agent compatibility in MC database. This is the second\r\n            step after install operation on Agent.\r\n            <br />Requires the caller to be granted \"Manage Android Agents and Plugins\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AgentsAndPlugins_Update",
          "parameters": [
            {
              "type": "string",
              "name": "applicationId",
              "in": "query",
              "required": true,
              "description": "The identifier of the agent.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "certificateHash",
              "in": "query",
              "required": true,
              "description": "The certificate hash of the agent.",
              "x-nullable": true
            },
            {
              "name": "agentInfo",
              "in": "body",
              "required": true,
              "description": "Agent Information.",
              "schema": {
                "$ref": "#/definitions/AgentInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updated agent compatibility and returning the agent info.",
              "schema": {
                "$ref": "#/definitions/AgentInfo"
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Agents And Plugins"
          ],
          "summary": "Creates an entry for compatible MC server versions with Android agent.",
          "description": "Creates the entry for the min and maximum versions of MC server that will be compatible with Android agent downloaded from SOTI Agent Delivery Service.\r\n            <br />Requires the caller to be granted \"Manage Android Agents and Plugins\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AgentsAndPlugins_Insert",
          "parameters": [
            {
              "name": "agentInfo",
              "in": "body",
              "required": true,
              "description": "Agent Information.",
              "schema": {
                "$ref": "#/definitions/AgentInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully added agent compatibility and returning the agent info.",
              "schema": {
                "$ref": "#/definitions/AgentInfo"
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/agentsAndPlugins/android/plugins": {
        "get": {
          "tags": [
            "Agents And Plugins"
          ],
          "summary": "Returns a list of Android plugins.",
          "description": "Returns a list of all Android plugins for a manufacturer, either from SOTI Agent Delivery Service or local cache based on the configuration of the parameter 'forceRefresh'.\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AgentsAndPlugins_PlugInInfo",
          "parameters": [
            {
              "type": "string",
              "name": "status",
              "in": "query",
              "required": true,
              "description": "PlugIn Status.",
              "x-schema": {
                "$ref": "#/definitions/PlugInStatus"
              },
              "x-nullable": true,
              "enum": [
                "All",
                "OutOfDate",
                "UpToDate",
                "InProgress"
              ],
              "x-enumType": "PlugInStatus"
            },
            {
              "type": "boolean",
              "name": "forceRefresh",
              "in": "query",
              "description": "When set to True, always pulls agent information from SOTI Agent Delivery Service, instead of locally cached information.\r\n            <br />When set to False, make use of cached data until it's marked stale in 30mins.",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "return the list of PlugInInfo objects.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PlugInInfo"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/agentsAndPlugins/android/plugins/actions/download": {
        "post": {
          "tags": [
            "Agents And Plugins"
          ],
          "summary": "Download Android plugin(s) to MobiControl.",
          "description": "Initiate Android plugin(s) download from SOTI's Agent Delivery Service to MobiControl.\r\n            <br />Requires the caller to be granted \"Manage Android Agents and Plugins\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AgentsAndPlugins_Install",
          "parameters": [
            {
              "name": "pluginInfo",
              "in": "body",
              "required": true,
              "description": "Plugin Information.",
              "schema": {
                "$ref": "#/definitions/InstallPlugInsRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "return the list of PlugInJob objects.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PlugInJob"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/agentsAndPlugins/android/plugins/actions/cancelDownload": {
        "post": {
          "tags": [
            "Agents And Plugins"
          ],
          "summary": "Cancel Android plugin(s) download to MobiControl.",
          "description": "Cancel Android plugin(s) download from SOTI Agent Delivery Service to MobiControl.\r\n            <br />Requires the caller to be granted \"Manage Android Agents and Plugins\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "AgentsAndPlugins_CancelInstall",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "query",
              "description": "Job reference Id. Leave empty to cancel all active download jobs.",
              "default": "",
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully Canceled Plugins Install."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/android/googledomainbindings/{referenceId}/actions/{enterpriseAction}": {
        "post": {
          "tags": [
            "Google Domain Management"
          ],
          "summary": "Execute an action on a Google Domain binding.",
          "description": "Sends an action to an Google Domain binding.\r\n            <br />Requires the caller be granted the \"Manage Android Enterprise Bindings\" permission.<br /><br /><b>(Available Since MobiControl v15.2.0)</b><br />\r\n            Supported Actions:.\r\n            <ul><li>Sync: Sync approved Managed Google Play Store applications with MobiControl.</li></ul>",
          "operationId": "GoogleDomainManagement_ExecuteGoogleDomainAction",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Google Domain binding identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "enterpriseAction",
              "in": "path",
              "required": true,
              "description": "The action to be performed on the Google Domain binding.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "productId",
              "in": "query",
              "description": "ProductId to handle in case exists.",
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/android/googledomainbindings": {
        "get": {
          "tags": [
            "Google Domain Management"
          ],
          "summary": "Retrieve all Google Domain bindings.",
          "description": "This returns all Google Domain bindings.\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.<br /><b>(Available Since MobiControl v15.2.0)</b>",
          "operationId": "GoogleDomainManagement_GetGoogleDomainBindings",
          "responses": {
            "200": {
              "description": "Returns Google Domain bindings.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GoogleDomainEnterprise"
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Google Domain Management"
          ],
          "summary": "Bind Google domain with MobiControl.",
          "description": "This returns Google Domain binding.<br /><b>(Available Since MobiControl v15.2.0)</b><br />Requires the caller be granted the \"Manage Android Enterprise Bindings\" permission.<br />",
          "operationId": "GoogleDomainManagement_Bind",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Request information.",
              "schema": {
                "$ref": "#/definitions/GoogleDomainBindRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns google domain binding.",
              "schema": {
                "$ref": "#/definitions/GoogleDomainEnterprise"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Google Domain Management"
          ],
          "summary": "Delete Google domain from MobiControl.",
          "description": "Delete the binding from MobiControl<b>(Available Since MobiControl v15.2.0)</b><br />Requires the caller be granted the \"Manage Android Enterprise Bindings\" permission.<br />",
          "operationId": "GoogleDomainManagement_Unbind",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Request information.",
              "schema": {
                "$ref": "#/definitions/GoogleDomainUnbindRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully Delete the Google Domain."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/android/googledomainbindings/{referenceId}": {
        "get": {
          "tags": [
            "Google Domain Management"
          ],
          "summary": "Retrieves Google Domain binding with specified reference id.",
          "description": "This returns a Google Domain binding.<br /><b>(Available Since MobiControl v15.2.0)</b>\r\n            Requires the caller be granted the \"Web Console Access\" permission.<br />",
          "operationId": "GoogleDomainManagement_GetGoogleDomainBinding",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Google Domain binding identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns Google Domain binding for specified reference id.",
              "schema": {
                "$ref": "#/definitions/GoogleDomainEnterprise"
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/android/googledomainbindings/{referenceId}/apps": {
        "get": {
          "tags": [
            "Google Domain Management"
          ],
          "summary": "Retrieve approved applications for a Google Domain binding.",
          "description": "Returns a list of approved applications from the Managed Google Play Store for the provided Google Domain binding.\r\n            <br /><b>(Available Since MobiControl v15.2.0)</b>\r\n            Requires the caller be granted the \"Web Console Access\" permission..<br />",
          "operationId": "GoogleDomainManagement_GetGoogleDomainProducts",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Google Domain binding identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "appName",
              "in": "query",
              "description": "Filter apps by name.",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "isApproved",
              "in": "query",
              "description": "Filter apps by approved status.",
              "default": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GoogleDomainProduct"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/android/googledomainbindings/{referenceId}/secondarydomains": {
        "get": {
          "tags": [
            "Google Domain Management"
          ],
          "summary": "Retrieves Secondary Domains of Google Domain binding identifier.",
          "description": "This returns the secondary domains of Google Domain binding.<br /><b>(Available Since MobiControl v15.2.0)</b>\r\n            Requires the caller be granted the \"Web Console Access\" permission..<br />",
          "operationId": "GoogleDomainManagement_GetSecondaryDomains",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Google Domain binding identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns secondary domains of google domain binding.",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/android/googledomainbindings/{referenceId}/secondarydomains/{secondaryDomain}": {
        "post": {
          "tags": [
            "Google Domain Management"
          ],
          "summary": "Add the secondary domain to primary domain.",
          "description": "This returns primary Google Domain binding of secondary domain.<br /><b>(Available Since MobiControl v15.2.0)</b><br />Requires the caller be granted the \"Manage Android Enterprise Bindings\" permission.<br />",
          "operationId": "GoogleDomainManagement_AddSecondaryDomain",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Google Domain binding identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "secondaryDomain",
              "in": "path",
              "required": true,
              "description": "Secondary domain of google Domain binding.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns Google Domain binding.",
              "schema": {
                "$ref": "#/definitions/GoogleDomainEnterprise"
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Google Domain Management"
          ],
          "summary": "Remove the secondary domain from primary domain.",
          "description": "This returns Google Domain binding.<br /><b>(Available Since MobiControl v15.2.0)</b><br />Requires the caller be granted the \"Manage Android Enterprise Bindings\" permission.<br />",
          "operationId": "GoogleDomainManagement_RemoveSecondaryDomain",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Google Domain binding identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "secondaryDomain",
              "in": "path",
              "required": true,
              "description": "Secondary domain of google Domain binding.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully Delete the Managed Google Play.",
              "schema": {
                "$ref": "#/definitions/GoogleDomainEnterprise"
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/catalogueItems/{referenceId}/rights": {
        "get": {
          "tags": [
            "Catalogue Item Management"
          ],
          "summary": "Returns the permissions for the specified catalogue item.",
          "description": "Returns the permissions allocated to the catalogue item referred to by referenceId. These catalogue items can be users, user groups or roles.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "CatalogueItemManagement_GetCatalogueRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns permissions for the specified catalogue item.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityCatalogueItemRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Catalogue Item Management"
          ],
          "summary": "Updates the permissions for the specified catalogue item.",
          "description": "Updates the permissions allocated to the catalogue item referred to by referenceId. These catalogue items can be users, user groups or roles.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "CatalogueItemManagement_SetCatalogueItemRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference id of the catalogue item.",
              "x-nullable": false
            },
            {
              "name": "userRights",
              "in": "body",
              "required": true,
              "description": "The user rights.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityCatalogueItemRight"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns permissions.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityCatalogueItemRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/catalogueItems/{referenceId}/currentUserRights": {
        "get": {
          "tags": [
            "Catalogue Item Management"
          ],
          "summary": "Get permissions from the permission catalogue item for the current user.",
          "description": "This API retrieves all permissions from the permission catalogue item for the current user specified by its Reference Id.\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "CatalogueItemManagement_GetCurrentUserCatalogueRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of catalogue item, which could be that of a user, directory or role.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns right associated with a Catalogue Item for current user.",
              "schema": {
                "$ref": "#/definitions/SecurityCatalogueItemRightSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><li>6512: Insufficient view permission</li>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/roles": {
        "get": {
          "tags": [
            "Role Management"
          ],
          "summary": "Returns all roles.",
          "description": "Returns an array of all roles.\r\n            <br />Requires the caller be granted the \"Manage Console Security\" or \"Lookup Users and Group Membership\" permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_GetRoles",
          "parameters": [
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "description": "Role name search string.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of roles.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRoleSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation Failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Role Management"
          ],
          "summary": "Creates a new role.",
          "description": "Creates a single role.\r\n            <br />Requires the caller be granted the \"Manage Console Security\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_CreateRole",
          "parameters": [
            {
              "name": "role",
              "in": "body",
              "required": true,
              "description": "Role.",
              "schema": {
                "$ref": "#/definitions/SecurityRole"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully creates a single role.",
              "schema": {
                "$ref": "#/definitions/SecurityRoleSummary"
              }
            },
            "400": {
              "description": "Contract validation Failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/roles/{referenceId}": {
        "get": {
          "tags": [
            "Role Management"
          ],
          "summary": "Returns the specified role.",
          "description": "Returns the details of a given role.\r\n            <br />Requires the caller be granted the \"Manage Console Security\" or \"Lookup Users and Group Membership\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_GetRole",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Role reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a single role.",
              "schema": {
                "$ref": "#/definitions/SecurityRoleSummary"
              }
            },
            "400": {
              "description": "Contract validation Failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Role Management"
          ],
          "summary": "Updates the specified role.",
          "description": "Updates the role referred to by the referenceId.\r\n            <br />Requires the caller be granted the \"Manage Console Security\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_UpdateRole",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Role reference id.",
              "x-nullable": false
            },
            {
              "name": "role",
              "in": "body",
              "required": true,
              "description": "Role.",
              "schema": {
                "$ref": "#/definitions/SecurityRole"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully edits a single role.",
              "schema": {
                "$ref": "#/definitions/SecurityRoleSummary"
              }
            },
            "400": {
              "description": "Contract validation Failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Role Management"
          ],
          "summary": "Deletes the specified role.",
          "description": "Deletes the role referred to by the referenceId.\r\n            <br />Requires the caller be granted the \"Manage Console Security\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_DeleteRole",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Role reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deletes a single role."
            },
            "400": {
              "description": "Contract validation Failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6510: Deletion not allowed</li><li>6511: Insufficient Edit Permission</li><li>6516: Deletion not allowed</li><li>6518: Directory deletion is restricted under SOTI MobiControl, please delete through SOTI Identity</li><li>6519: Deletion not allowed</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/roles/{referenceId}/users": {
        "get": {
          "tags": [
            "Role Management"
          ],
          "summary": "Returns a list of users for a role.",
          "description": "This API retrieves all the users that are mapped to a role specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Web Console Access', 'Manage Console Security' and  'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_GetRoleUsers",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a role.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "description": "String to match the user names.",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of users.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityUser"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Role Management"
          ],
          "summary": "Updates the specified users for a role.",
          "description": "This API updates the users that map to a role\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_UpdateRoleUsers",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference id of a role.",
              "x-nullable": false
            },
            {
              "name": "userReferenceIds",
              "in": "body",
              "required": true,
              "description": "Reference id's for users.",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of users.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityUser"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li><li>6520: Partially Updated</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/roles/{referenceId}/userGroups": {
        "get": {
          "tags": [
            "Role Management"
          ],
          "summary": "Returns a list of directories for a role.",
          "description": "This API retrieves all the directories mapped to a role specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_GetRoleGroups",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference id of a role.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of directories.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityUserGroupSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Role Management"
          ],
          "summary": "Updates the specified directories for a role.",
          "description": "This API updates the directories that map to a role\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_UpdateRoleGroups",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference id of a role.",
              "x-nullable": false
            },
            {
              "name": "userGroupReferenceIds",
              "in": "body",
              "required": true,
              "description": "Reference Id's for directories.",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of directories.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityUserGroupSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li><li>6520: Partially Updated</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/roles/{referenceId}/catalogueItemReference": {
        "get": {
          "tags": [
            "Role Management"
          ],
          "summary": "Returns the catalogue reference for a role.",
          "description": "This API retrieves the catalogue reference ID for a role\r\n            <br />Requires the caller be granted the 'Manage Console Security' or ' Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_GetCatalogueItemReferenceIdOfRole",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a role.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns the specified catalogue reference id.",
              "schema": {
                "$ref": "#/definitions/SecurityCatalogueItemReference"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Role Management"
          ],
          "summary": "Creates a catalogue item for a role.",
          "description": "This API creates a new catalogue item for a role\r\n            <br /> Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_AssignCatalogueItemReferenceIdOfRole",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a role.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns the specified catalogue reference id.",
              "schema": {
                "$ref": "#/definitions/SecurityCatalogueItemReference"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li><li>6514: Insufficient Manage permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Role Management"
          ],
          "summary": "Deletes a catalogue item for a role.",
          "description": "This API deletes a catalogue reference ID for a role\r\n            <br />Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_DeleteCatalogueItemReferenceIdOfRole",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a role.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted catalogue reference id."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/roles/{referenceId}/{scope}/rights": {
        "get": {
          "tags": [
            "Role Management"
          ],
          "summary": "Returns the permissions of a role.",
          "description": "Returns the permissions allocated to a role.\r\n            <br />Requires the caller be granted the \"Manage Console Security\" or \"Lookup Users and Group Membership\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_GetRoleFeatureSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "scope",
              "in": "path",
              "required": true,
              "description": "The scope.",
              "x-schema": {
                "$ref": "#/definitions/Scope"
              },
              "x-nullable": false,
              "enum": [
                "Any",
                "SystemAdministrator",
                "DeviceOwner"
              ],
              "x-enumType": "Scope"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns permission for a role.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Role Management"
          ],
          "summary": "Updates the general permissions for a role.",
          "description": "This API updates the general permissions for a selected role specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_SetRoleFeatureSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a role.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "scope",
              "in": "path",
              "required": true,
              "description": "Authorization scope.",
              "x-schema": {
                "$ref": "#/definitions/Scope"
              },
              "x-nullable": false,
              "enum": [
                "Any",
                "SystemAdministrator",
                "DeviceOwner"
              ],
              "x-enumType": "Scope"
            },
            {
              "name": "rights",
              "in": "body",
              "required": true,
              "description": "Schema for permission and its boolean value.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRight"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of Right Summary.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6507: Invalid permission name.</li><li>6508: Duplicate permission name.</li><li>6509: Invalid parent child state.</li><li>6511: Insufficient Edit Permission.</li><li>6514: Insufficient Manage permission.</li><li>6515: Security right not found.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/roles/{referenceId}/deviceGroups/{deviceGroupReferenceId}/rights": {
        "get": {
          "tags": [
            "Role Management"
          ],
          "summary": "Returns device group permissions for a role.",
          "description": "This API retrieves all device group permission for a role specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_GetRoleDeviceGroupSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a role.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceGroupReferenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of a device group.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of Right Summary.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Role Management"
          ],
          "summary": "Updates the device group permission for a role.",
          "description": "This API updates all device group permission rights belonging to a single role specified by its Reference Id.\r\n            <br /> Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_SetRoleDeviceGroupSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a role.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceGroupReferenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a device group.",
              "x-nullable": false
            },
            {
              "name": "rights",
              "in": "body",
              "required": true,
              "description": "Schema for permission and its boolean value.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRight"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of Right Summary.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6507: Invalid permission name</li><li>6508: Duplicate permission name</li><li>6509: Security right has invalid parent/child state</li><li>6511: Insufficient Edit Permission</li><li>6514: Insufficient Manage permission</li><li>6515: Security right not found</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/roles/{referenceId}/{scope}/bulkActionLimits": {
        "get": {
          "tags": [
            "Role Management"
          ],
          "summary": "Returns the Bulk Action Limits allocated to a role.",
          "description": "Returns the Bulk Action Limit allocated to a role.\r\n            <br />Requires the caller be granted the \"Manage Console Security\" permission or the \"LookupUsersAndGroups\" permission.\r\n            <br /><b>(Available Since MobiControl v2024.1.0)</b>",
          "operationId": "RoleManagement_GetRoleBulkActionLimits",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "scope",
              "in": "path",
              "required": true,
              "description": "The scope.",
              "x-schema": {
                "$ref": "#/definitions/Scope"
              },
              "x-nullable": false,
              "enum": [
                "Any",
                "SystemAdministrator",
                "DeviceOwner"
              ],
              "x-enumType": "Scope"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns Bulk Action Limits for a role.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/BulkActionLimitSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/roles/{referenceId}/logs": {
        "get": {
          "tags": [
            "Role Management"
          ],
          "summary": "Retrieves logs for a role.",
          "description": "Retrieves the log activity for a particular role.\r\n            <br /> Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permissions.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_GetRoleLogs",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of a Role.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "Date to retrieve logs from. Please specify the time if start and end dates are the same.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "Date to retrieve logs to. Please specify the time if start and end dates are the same.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "One or more categories of log severities.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity3"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "description": "Order logs by timestamp, true for descending, false for ascending.",
              "default": true,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of Security Role Log Entry.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRoleLogEntry"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/roles/{referenceId}/logs/actions/download": {
        "get": {
          "tags": [
            "Role Management"
          ],
          "summary": "Returns the CSV file of logs for a role.",
          "description": "This API exports a CSV file of logs for a role specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' or ' Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "RoleManagement_DownloadRoleLogs",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The unique Identifier for the role.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "reportHeaderFields",
              "in": "query",
              "required": true,
              "description": "Comma separated field names to be included in the csv file.",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "List of log severities to include into result such as Information, Warning or Error.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity3"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The date starting which the logs will be fetched (UTC format).",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The date till which the logs will be fetched (UTC format).",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "format",
              "in": "query",
              "description": "File format [Currently only csv is supported.].",
              "default": "csv",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "timeZoneOffset",
              "in": "query",
              "description": "Time zone offset from UTC (in Minutes).",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "description": "Defines the sorting order by timestamp. Pass the value as true for descending, false for ascending.",
              "default": true,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/userGroups": {
        "get": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Returns a list of directories.",
          "description": "This API retrieves all directories\r\n            <br />Requires the caller be granted the 'Manage Console Security' or ' Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_GetGroups",
          "parameters": [
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "description": "The keyword to be searched in the directory name.",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "memberOf",
              "in": "query",
              "description": "Input a list of the reference id's of roles, mapped to the directory.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "name": "kind",
              "in": "query",
              "description": "Select the type of directory.",
              "x-schema": {
                "$ref": "#/definitions/SecurityUserGroupKind"
              },
              "x-nullable": true,
              "enum": [
                "LdapUserGroup",
                "SsoUserGroup",
                "SsoLdapUserGroup",
                "SsoThirdPartyUserGroup",
                "SsoAzureUserGroup",
                "RtlsServicePrincipalGroup",
                "RtlsServicePrincipalUser"
              ],
              "x-enumType": "SecurityUserGroupKind"
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of Directories.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityUserGroupSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/userGroups/{referenceId}": {
        "delete": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Deletes the specified directory.",
          "description": "This API deletes a selected directory mapping from MobiControl\r\n            <br /> Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_DeleteGroup",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a directory.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted specified Directory."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6510: Deletion not allowed</li><li>6511: Insufficient edit permission</li><li>6518: Directory deletion restricted through MobiControl</li><li>6519: Directory deletion not allowed</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Returns the details of a directory.",
          "description": "This API retrieves the details of a directory specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' or ' Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_GetGroup",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a directory.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns the specified directory.",
              "schema": {
                "$ref": "#/definitions/SecurityUserGroupSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/userGroups/{referenceId}/roles": {
        "get": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Returns a list of roles for a directory.",
          "description": "This API retrieves all roles that are mapped to a directory specified by its Reference Id.\r\n            <br /> Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_GetGroupRoles",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a directory.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of roles.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRoleSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Updates the roles associated to a user group.",
          "description": "Updates the roles associated to a user group. Here, the roles refer to the MobiControl default roles - MobiControl Administrators, MobiControl Technicians, MobiControl Viewers and BYOD.\r\n            <br /> Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_UpdateGroupRoles",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a directory.",
              "x-nullable": false
            },
            {
              "name": "roleReferenceIds",
              "in": "body",
              "required": true,
              "description": "Reference Id's for roles.",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of roles.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRoleSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li><li>6520: Partially Updated</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/userGroups/{referenceId}/users": {
        "get": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Returns a list of users for a directory.",
          "description": "This API retrieves all users that are mapped to a directory specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' or ' Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_GetGroupUsers",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a directory.",
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "includeHiddenUsers",
              "in": "query",
              "description": "Indicates whether to include hidden users.",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "description": "User name search string.",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of users.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityUser"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/userGroups/{referenceId}/catalogueItemReference": {
        "get": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Returns the catalogue reference for a directory.",
          "description": "This API retrieves the catalogue reference ID for a directory\r\n            <br /> Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_GetCatalogueItemReferenceIdOfUserGroup",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a directory.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns the specified catalogue reference id.",
              "schema": {
                "$ref": "#/definitions/SecurityCatalogueItemReference"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Creates a catalogue item for a directory.",
          "description": "This API creates a new catalogue item for a directory\r\n            <br /> Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_AssignCatalogueItemReferenceIdOfUserGroup",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a directory.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns the specified catalogue reference id.",
              "schema": {
                "$ref": "#/definitions/SecurityCatalogueItemReference"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Deletes a catalogue item for a directory.",
          "description": "This API deletes a catalogue reference ID for a directory\r\n            <br />Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_DeleteCatalogueItemReferenceIdOfUserGroup",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a directory.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted specified catalogue reference id."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/userGroups/{referenceId}/{scope}/rights": {
        "get": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Returns the permissions allocated to a UserGroup.",
          "description": "Returns the permissions allocated to a UserGroup. These UserGroups can be LDAP or IdP UserGroups.\r\n            <br />Requires the caller be granted the \"Manage Console Security\" permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_GetUserGroupFeatureSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "scope",
              "in": "path",
              "required": true,
              "description": "The scope.",
              "x-schema": {
                "$ref": "#/definitions/Scope"
              },
              "x-nullable": false,
              "enum": [
                "Any",
                "SystemAdministrator",
                "DeviceOwner"
              ],
              "x-enumType": "Scope"
            }
          ],
          "responses": {
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Updates the general permissions for a directory.",
          "description": "This API updates the general permissions for a selected directory specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_SetUserGroupFeatureSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a directory.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "scope",
              "in": "path",
              "required": true,
              "description": "Authorization scope.",
              "x-schema": {
                "$ref": "#/definitions/Scope"
              },
              "x-nullable": false,
              "enum": [
                "Any",
                "SystemAdministrator",
                "DeviceOwner"
              ],
              "x-enumType": "Scope"
            },
            {
              "name": "rights",
              "in": "body",
              "required": true,
              "description": "Schema for permission and its boolean value.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRight"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of right summary.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6507: Invalid permission name.</li><li>6508: Duplicate permission name.</li><li>6509: Invalid parent child state.</li><li>6511: Insufficient Edit Permission.</li><li>6515: Security right not found.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/userGroups/{referenceId}/deviceGroups/{deviceGroupReferenceId}/rights": {
        "get": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Returns device group permission for a directory.",
          "description": "This API retrieves all device group permission for a directory\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_GetUserGroupDeviceGroupSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a directory.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceGroupReferenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of a device group.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of right summary.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Updates the device group permission for a directory.",
          "description": "This API updates all device group permission Rights belonging to a single directory\r\n            <br /> Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_SetUserGroupDeviceGroupSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a directory.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceGroupReferenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a device group.",
              "x-nullable": false
            },
            {
              "name": "rights",
              "in": "body",
              "required": true,
              "description": "Schema for permission and its boolean value.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRight"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of right summary.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6507: Invalid permission name</li><li>6508: Duplicate permission name</li><li>6509: Security right has invalid parent/child state</li><li>6511: Insufficient Edit Permission</li><li>6515: Security right not found</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/userGroups/ldapUserGroup": {
        "post": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Creates a new LDAP directory.",
          "description": "This API adds a new LDAP directory into MobiControl\r\n            <br /> Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_CreateLdapUserGroup",
          "parameters": [
            {
              "name": "ldapUserGroup",
              "in": "body",
              "required": true,
              "description": "Schema for adding a directory.",
              "schema": {
                "$ref": "#/definitions/SecurityLdapUserGroup"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully created a new ldap directory.",
              "schema": {
                "$ref": "#/definitions/SecurityLdapUserGroupSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6503: Duplicate LDAP directory name</li><li>6504: Duplicate SID</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/userGroups/ssoUserGroup": {
        "post": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Creates a new SSO directory.",
          "description": "Add a new Identity Provider directory into MobiControl, it can be either from SOTI Identity or External Identity\r\n            <br /> Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_CreateSsoUserGroup",
          "parameters": [
            {
              "name": "ssoUserGroup",
              "in": "body",
              "required": true,
              "description": "Schema for adding a directory.",
              "schema": {
                "$ref": "#/definitions/SecuritySsoUserGroup"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully created a new sso directory.",
              "schema": {
                "$ref": "#/definitions/SecuritySsoUserGroupSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6505: Duplicate SSO directory name</li><li>6517: Directory creation not allowed</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/userGroups/{referenceId}/logs": {
        "get": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Returns the logs for a directory.",
          "description": "This API retrieves logs for a directory specified by its Reference Id.\r\n            <br /> Requires the caller be granted the 'Manage Console Security' or ' Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_GetUserGroupLogs",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference id of a directory.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The date starting which the logs will be fetched.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The date till which the logs will be fetched.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "Select the type of log.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity3"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "description": "Defines the sorting order by timestamp. Pass the value as true for descending, false for ascending.",
              "default": true,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of user log entry.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityUserGroupLogEntry"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><li>6512: Insufficient view permission</li>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/userGroups/{referenceId}/logs/actions/download": {
        "get": {
          "tags": [
            "User Group Management"
          ],
          "summary": "Returns the CSV file of logs for a directory.",
          "description": "This API exports a CSV file of logs for a directory specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserGroupManagement_DownloadUserGroupLogs",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The unique Identifier for the directory.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "reportHeaderFields",
              "in": "query",
              "required": true,
              "description": "Comma separated field names to be included in the csv file.",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "List of log severities to include into result such as Information, Warning or Error.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity3"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The date starting which the logs will be fetched (UTC format).",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The date till which the logs will be fetched (UTC format).",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "format",
              "in": "query",
              "description": "File format [Currently only csv is supported.].",
              "default": "csv",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "timeZoneOffset",
              "in": "query",
              "description": "Time zone offset from UTC (in Minutes).",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "description": "Defines the sorting order by timestamp. Pass the value as true for descending, false for ascending.",
              "default": true,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/mobiControlUser/{referenceId}/lockAccount": {
        "put": {
          "tags": [
            "User Management"
          ],
          "summary": "Locks the specified user account.",
          "description": "Locks the user account referred to by referenceId.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_UpdateMobiControlUserAccountLockStatus",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference id of mobi control user.",
              "x-nullable": false
            },
            {
              "name": "lockAccount",
              "in": "body",
              "required": true,
              "description": "The lock account info.",
              "schema": {
                "$ref": "#/definitions/SecurityAccountLockStatus"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully updated a user."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Returns all users in MobiControl.",
          "description": "Returns all users in MobiControl.\r\n            <br />Requires the caller be granted the 'Lookup Users and Groups Membership' or the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_GetUsers",
          "parameters": [
            {
              "type": "boolean",
              "name": "includeHiddenUsers",
              "in": "query",
              "description": "Indicates whether to include hidden users.",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "description": "User name search string.",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "memberOf",
              "in": "query",
              "description": "Only return users that are members of one or more of the specified groups.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "name": "kind",
              "in": "query",
              "description": "Only returns users of this kind.",
              "x-schema": {
                "$ref": "#/definitions/UserKind2"
              },
              "x-nullable": true,
              "enum": [
                "MobiControlUser",
                "LdapUser",
                "SsoUser",
                "SsoLdapUser",
                "SsoThirdPartyUser",
                "SsoAzureUser"
              ],
              "x-enumType": "UserKind"
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns the user.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityUser"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/mobiControlUser": {
        "post": {
          "tags": [
            "User Management"
          ],
          "summary": "Creates a new local user.",
          "description": "Creates a new local user.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_CreateMobiControlUser",
          "parameters": [
            {
              "name": "user",
              "in": "body",
              "required": true,
              "description": "MobiControl user.",
              "schema": {
                "$ref": "#/definitions/SecurityMobiControlUser"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully created a user.",
              "schema": {
                "$ref": "#/definitions/SecurityMobiControlUser"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/ldapUser": {
        "post": {
          "tags": [
            "User Management"
          ],
          "summary": "Creates a new LDAP user.",
          "description": "Creates a new LDAP user.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_CreateLdapUser",
          "parameters": [
            {
              "name": "user",
              "in": "body",
              "required": true,
              "description": "LDAP user.",
              "schema": {
                "$ref": "#/definitions/SecurityLdapUser"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully created a user.",
              "schema": {
                "$ref": "#/definitions/SecurityLdapUser"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/mobiControlUser/{referenceId}": {
        "put": {
          "tags": [
            "User Management"
          ],
          "summary": "Updates the user referred to by the referenceId.",
          "description": "Updates the user referred to by the referenceId.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_UpdateMobiControlUser",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "User reference id.",
              "x-nullable": false
            },
            {
              "name": "user",
              "in": "body",
              "required": true,
              "description": "MobiControl user.",
              "schema": {
                "$ref": "#/definitions/SecurityMobiControlUser"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updates the user.",
              "schema": {
                "$ref": "#/definitions/SecurityMobiControlUser"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/{referenceId}": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Returns the user details for a specified user.",
          "description": "Returns the user details for a specified user.\r\n            <br />Requires the caller be granted the 'Lookup Users and Groups Membership' or the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_GetUser",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "User reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns the user.",
              "schema": {
                "$ref": "#/definitions/SecurityUser"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "User Management"
          ],
          "summary": "Deletes the user referred to by the referenceId.",
          "description": "Deletes the user referred to by the referenceId.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_DeleteUser",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "User reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "204": {
              "description": "No content."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/{referenceId}/roles": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Returns a list of roles for a user.",
          "description": "This API retrieves all roles that are mapped to a user specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_GetUserRoles",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference id of a user.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of roles.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRoleSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "User Management"
          ],
          "summary": "Updates the specified roles for a user.",
          "description": "This API updates the roles that map to a user\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_UpdateUserRoles",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a user.",
              "x-nullable": false
            },
            {
              "name": "roleReferenceIds",
              "in": "body",
              "required": true,
              "description": "Reference Id's for roles.",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of roles.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRoleSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li><li>6520: Partially Updated</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/{referenceId}/userGroups": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Returns the role associated with the specified user.",
          "description": "Returns the role associated with the specified user.\r\n            <br />Requires the caller be granted the 'Lookup Users and Groups Membership' or the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_GetUserGroups",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "User reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns the role associated with the specified user.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityUserGroupSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/{referenceId}/catalogueItemReference": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Returns the catalogue reference for a user.",
          "description": "This API retrieves the catalogue reference ID for a user specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' or ' Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_GetCatalogueItemReferenceIdOfUser",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a user.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns the specified catalogue reference id.",
              "schema": {
                "$ref": "#/definitions/SecurityCatalogueItemReference"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "User Management"
          ],
          "summary": "Creates a catalogue item for a user.",
          "description": "This API creates a new catalogue item for a user\r\n            <br /> Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_AssignCatalogueItemReferenceIdOfUser",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a user.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns the specified catalogue reference id.",
              "schema": {
                "$ref": "#/definitions/SecurityCatalogueItemReference"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "User Management"
          ],
          "summary": "Deletes a catalogue item for a user.",
          "description": "This API deletes a catalogue reference ID for a user\r\n            <br />Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_DeleteCatalogueItemReferenceIdOfUser",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a user.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted specified catalogue reference id."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6511: Insufficient Edit Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/{referenceId}/{scope}/rights": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Returns the permissions allocated to the specified  given user.",
          "description": "Returns the permissions allocated to the specified  given user.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_GetUserFeatureSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "scope",
              "in": "path",
              "required": true,
              "description": "The scope.",
              "x-schema": {
                "$ref": "#/definitions/Scope"
              },
              "x-nullable": false,
              "enum": [
                "Any",
                "SystemAdministrator",
                "DeviceOwner"
              ],
              "x-enumType": "Scope"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns the specified user.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "User Management"
          ],
          "summary": "Updates the general permissions for a user.",
          "description": "This API updates the general permissions for a selected user specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_SetUserFeatureSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a user.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "scope",
              "in": "path",
              "required": true,
              "description": "Authorization scope.",
              "x-schema": {
                "$ref": "#/definitions/Scope"
              },
              "x-nullable": false,
              "enum": [
                "Any",
                "SystemAdministrator",
                "DeviceOwner"
              ],
              "x-enumType": "Scope"
            },
            {
              "name": "rights",
              "in": "body",
              "required": true,
              "description": "Schema for permission and its boolean value.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRight"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of right summary.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6507: Invalid permission name.</li><li>6508: Duplicate permission name.</li><li>6509: Invalid parent child state.</li><li>6511: Insufficient Edit Permission.</li><li>6515: Security right not found.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/{referenceId}/deviceGroups/{deviceGroupReferenceId}/rights": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Returns device group permissions for a user.",
          "description": "This API retrieves all device group permission for a user\r\n            <br />Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_GetDeviceGroupSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a user.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceGroupReferenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of a device group.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of right summary.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6512: Insufficient View Permission</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "User Management"
          ],
          "summary": "Updates the device group permission for a user.",
          "description": "This API updates all device group permission rights belonging to a single user\r\n            <br /> Requires the caller be granted the 'Manage Console Security' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_SetDeviceGroupSecurityRights",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a user.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceGroupReferenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id for a device group.",
              "x-nullable": false
            },
            {
              "name": "rights",
              "in": "body",
              "required": true,
              "description": "Schema for permission and its boolean value.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRight"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of right summary.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityRightSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>6507: Invalid permission name</li><li>6508: Duplicate permission name</li><li>6509: Security right has invalid parent/child state</li><li>6511: Insufficient Edit Permission</li><li>6515: Security right not found</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/{referenceId}/logs": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Retrieves logs for a user.",
          "description": "Retrieves the log activity for a particular user.\r\n            <br /> Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permissions.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_GetUserLogs",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of a User.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "Date to retrieve logs from. Please specify the time if start and end dates are the same.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "Date to retrieve logs to. Please specify the time if start and end dates are the same.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "One or more categories of log severities.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity3"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "description": "Order logs by timestamp, true for descending, false for ascending.",
              "default": true,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of user log entry.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityUserLogEntry"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/logs": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Returns the logs for MC users.",
          "description": "This API retrieves logs for users of MC, based on the request parameters.\r\n            <br /> Requires the caller be granted the 'Manage Console Security' or ' Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_GetFilteredUserLogs",
          "parameters": [
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The date starting which the logs will be fetched.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The date till which the logs will be fetched.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "Select the type of log.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity3"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "string",
              "name": "userLogFilter",
              "in": "query",
              "description": "Define the log filter for all or deleted users.  If left blank data is returned for all users.",
              "x-schema": {
                "$ref": "#/definitions/SecurityUserLogFilter"
              },
              "default": "AllUser",
              "x-nullable": false,
              "enum": [
                "AllUser",
                "DeletedUser"
              ],
              "x-enumType": "SecurityUserLogFilter"
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "description": "Defines the sorting order. Pass the value as true for descending, false for ascending.",
              "default": true,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully returns a list of user log entry.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SecurityUserLogEntry"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/{referenceId}/logs/actions/download": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Returns the CSV file of logs for a user.",
          "description": "This API exports a CSV file of logs for a user specified by its Reference Id.\r\n            <br />Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_DownloadUserLogs",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The unique Identifier for the user.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "reportHeaderFields",
              "in": "query",
              "required": true,
              "description": "Comma separated field names to be included in the csv file.",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "List of log severities to include into result such as Information, Warning or Error.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity3"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The date starting which the logs will be fetched (UTC format).",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The date till which the logs will be fetched (UTC format).",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "format",
              "in": "query",
              "description": "File format [Currently only csv is supported.].",
              "default": "csv",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "timeZoneOffset",
              "in": "query",
              "description": "Time zone offset from UTC (in Minutes).",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "description": "Defines the sorting order by timestamp. Pass the value as true for descending, false for ascending.",
              "default": true,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/logs/actions/download": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Returns the CSV file of logs for all user.",
          "description": "This API exports a CSV file of logs for all active and deleted users of MobiControl.\r\n            <br />Requires the caller be granted the 'Manage Console Security' or 'Lookup Users and Group Membership' permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_DownloadFilteredUserLogs",
          "parameters": [
            {
              "type": "string",
              "name": "reportHeaderFields",
              "in": "query",
              "required": true,
              "description": "Comma separated field names to be included in the csv file.",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "List of log severities to include into result such as Information, Warning or Error.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity3"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "required": true,
              "description": "The date starting which the logs will be fetched (UTC format).",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "required": true,
              "description": "The date till which the logs will be fetched (UTC format).",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "userLogFilter",
              "in": "query",
              "description": "Define the log filter for all or deleted users. If left blank data is returned for all users.",
              "x-schema": {
                "$ref": "#/definitions/SecurityUserLogFilter"
              },
              "default": "AllUser",
              "x-nullable": false,
              "enum": [
                "AllUser",
                "DeletedUser"
              ],
              "x-enumType": "SecurityUserLogFilter"
            },
            {
              "type": "string",
              "name": "format",
              "in": "query",
              "description": "File format [Currently only csv is supported.].",
              "default": "csv",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "timeZoneOffset",
              "in": "query",
              "description": "Time zone offset from UTC (in Minutes).",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "description": "Defines the sorting order by timestamp. Pass the value as true for descending, false for ascending.",
              "default": true,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/security/principal/users/currentUser": {
        "get": {
          "tags": [
            "User Management"
          ],
          "summary": "Returns the details of the current user.",
          "description": "This API retrieves the details of the user currently logged-in\r\n            <br /> Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available since MobiControl v15.4.0)</b>",
          "operationId": "UserManagement_GetCurrentUser",
          "responses": {
            "200": {
              "description": "Successfully returns the details of the current user.",
              "schema": {
                "$ref": "#/definitions/SecurityUser"
              }
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/smtp/connections": {
        "post": {
          "tags": [
            "Smtp"
          ],
          "operationId": "Smtp_CreateSmtpConnection",
          "parameters": [
            {
              "name": "connection",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SmtpConnection"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/SmtpConnectionSummary"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Smtp"
          ],
          "operationId": "Smtp_GetAllSmtpConnections",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SmtpConnectionSummary"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/smtp/connections/{referenceId}": {
        "delete": {
          "tags": [
            "Smtp"
          ],
          "operationId": "Smtp_DeleteSmtpConnection",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Smtp"
          ],
          "operationId": "Smtp_GetSmtpConnectionSummary",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/SmtpConnectionSummary"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Smtp"
          ],
          "operationId": "Smtp_UpdateSmtpConnection",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            },
            {
              "name": "connection",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SmtpConnection"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/SmtpConnectionSummary"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/smtp/connections/actions": {
        "post": {
          "tags": [
            "Smtp"
          ],
          "operationId": "Smtp_ExecuteSmtpAction",
          "parameters": [
            {
              "name": "action",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TestSmtpConnection"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/apple/iOS/{referenceId}/wallpaper": {
        "put": {
          "tags": [
            "Apple Ios Wallpaper"
          ],
          "summary": "Update the iOS wallpaper for specified Enrollment Policy.",
          "description": "This API updates the iOS wallpaper for the specified Enrollment Policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={any boundary identifier}</code><br />\r\n            Multipart request body must contain the following parts:</p><ol><li>image file - Contains image file with one of the following Content-Type:\r\n            <pre>image/png</pre><pre>image/jpeg</pre><pre>image/jpg</pre><br />\r\n            Mandatory headers <br />\r\n            Content-Disposition: attachment; filename=\"{image-filename}\"<br /><br />\r\n            Optional headers <br />\r\n            Content-Type-Encoding: binary<br /></li></ol>\r\n            The example below shows an wallpaper upload request.\r\n            <br /><pre>\r\n            Content-Type: multipart/related; boundary=foo_bar_baz\r\n            Content-Length: number_of_bytes_in_entire_request_body\r\n            <br />\r\n            --foo_bar_baz\r\n            Content-Type: image/jpeg\r\n            <br />\r\n            Content-Disposition: attachment; filename=\"image_name.jpg\"\r\n            <br />\r\n            image data\r\n            --foo_bar_baz--\r\n            </pre>",
          "operationId": "AppleIosWallpaper_AddIosWallpaper",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "modelType",
              "in": "query",
              "required": true,
              "description": "Model type will be either Iphone or Ipad.",
              "x-schema": {
                "$ref": "#/definitions/ModelType"
              },
              "x-nullable": false,
              "enum": [
                "Iphone",
                "Ipad"
              ],
              "x-enumType": "ModelType"
            },
            {
              "type": "string",
              "name": "screenType",
              "in": "query",
              "required": true,
              "description": "Screen type will be Home Screen or Lock Screen.",
              "x-schema": {
                "$ref": "#/definitions/ScreenType"
              },
              "x-nullable": false,
              "enum": [
                "HomeScreen",
                "LockScreen"
              ],
              "x-enumType": "ScreenType"
            }
          ],
          "responses": {
            "200": {
              "description": "Success."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "415": {
              "description": "Unsupported media type."
            },
            "422": {
              "description": "Business Logic Exception<br />The following ErrorCode values can be returned:.<br /><ol><li>7804 - You have selected a file with the incorrect format. Please select another .png, .jpeg or .jpg file.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/apple/iOS/{referenceId}/wallpaper/{screenType}/{modelType}": {
        "get": {
          "tags": [
            "Apple Ios Wallpaper"
          ],
          "summary": "Returns the wallpaper for specified iOS Enrollment Policy.",
          "description": "This API returns the wallpaper for specified iOS Enrollment Policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"View Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "AppleIosWallpaper_GetIosEnrollmentWallpaper",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "screenType",
              "in": "path",
              "required": true,
              "description": "Screen type will be Home Screen or Lock Screen.",
              "x-schema": {
                "$ref": "#/definitions/ScreenType"
              },
              "x-nullable": false,
              "enum": [
                "HomeScreen",
                "LockScreen"
              ],
              "x-enumType": "ScreenType"
            },
            {
              "type": "string",
              "name": "modelType",
              "in": "path",
              "required": true,
              "description": "Model type will be either Iphone or Ipad.",
              "x-schema": {
                "$ref": "#/definitions/ModelType"
              },
              "x-nullable": false,
              "enum": [
                "Iphone",
                "Ipad"
              ],
              "x-enumType": "ModelType"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "204": {
              "description": "No Content.",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/apple/iOS/{referenceId}/wallpaper/{screenType}/{modelType}/delete": {
        "delete": {
          "tags": [
            "Apple Ios Wallpaper"
          ],
          "summary": "Deletes the specified iOS enrollment policy wallpaper.",
          "description": "This API deletes the specified iOS enrollment policy wallpaper\r\n            <br />\r\n            For iPhone set Model Type as 1 and for iPad set Model Type as 2\r\n            <br />\r\n            For Home screen set Screen Type as 1 and for Lock screen set Screen Type as 2\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "AppleIosWallpaper_DeleteIosEnrollmentWallpaper",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "screenType",
              "in": "path",
              "required": true,
              "description": "Screen type will be Home Screen or Lock Screen.",
              "x-schema": {
                "$ref": "#/definitions/ScreenType"
              },
              "x-nullable": false,
              "enum": [
                "HomeScreen",
                "LockScreen"
              ],
              "x-enumType": "ScreenType"
            },
            {
              "type": "string",
              "name": "modelType",
              "in": "path",
              "required": true,
              "description": "Model type will be either Iphone or Ipad.",
              "x-schema": {
                "$ref": "#/definitions/ModelType"
              },
              "x-nullable": false,
              "enum": [
                "Iphone",
                "Ipad"
              ],
              "x-enumType": "ModelType"
            }
          ],
          "responses": {
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "204": {
              "description": "No Content."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/apple/iOS": {
        "post": {
          "tags": [
            "Ios Enrollment Policies"
          ],
          "summary": "Creates a new iOS enrollment policy.",
          "description": "This API creates a new iOS enrollment policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "IosEnrollmentPolicies_AddIosEnrollmentPolicy",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Request.",
              "schema": {
                "$ref": "#/definitions/IosEnrollmentPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/IosEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>7403 -  The database already contains enrollment policy named '{0}'. Please enter a different name.</li><li>7404 -  The database already contains enrollment policy tag '{0}'. Please enter a different enrollment policy tag.</li><li>7410 -  Authorization policy referenced with this enrollment policy is associated with another enrollment policy.</li><li>7803 -  Authorization policy referenced with this enrollment policy is other than No Password, Password, LDAP or Idp type.</li><li>7805 -  Prevent Un-enrollment setting can only be enabled if Supervise Device setting is also enabled.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/apple/iOS/{referenceId}": {
        "get": {
          "tags": [
            "Ios Enrollment Policies"
          ],
          "summary": "Returns the details of specified iOS enrollment policy.",
          "description": "This API returns the details of specified iOS enrollment policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "IosEnrollmentPolicies_GetIosEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/IosEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Ios Enrollment Policies"
          ],
          "summary": "Deletes the specified iOS enrollment policy.",
          "description": "This API deletes the iOS enrollment policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "IosEnrollmentPolicies_DeleteIosEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "No Content."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>1223: Can't delete an enrollment policy which leverages ADE and has ADE devices assigned to it</li><li>1224: Can't delete an enrollment policy which is set as default policy for an ADE account</li><li>7401: Can't delete default enrollment policy</li><li>7402: The deployment server failed to reach the enrollment service. Please check your network connections and settings</li><li>7405: Action can't be performed on the specified Enrollment Policy as MobiControl license is not valid.</li><li>7407: Calling the enrollment service is time out.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Ios Enrollment Policies"
          ],
          "summary": "Updates the specified iOS enrollment policy.",
          "description": "This API updates the specified iOS enrollment policy\r\n            <br /><br /><br />\r\n            Requires the caller be granted the 'Manage Enrollment Policies' permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "IosEnrollmentPolicies_UpdateIosEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "iOS Enrollment Policy Reference Id.",
              "x-nullable": false
            },
            {
              "name": "updateIosEnrollmentPolicy",
              "in": "body",
              "required": true,
              "description": "Ios Enrollment Policy.",
              "schema": {
                "$ref": "#/definitions/UpdateIosEnrollmentPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/IosEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>7403 - The database already contains enrollment policy named &lt;policy name&gt;. Please enter a different name.</li><li>7410 - Authorization policy referenced with this enrollment policy is associated with another enrollment policy.</li><li>7800 - Automated device enrollment option can't be disabled.</li><li>7801 - Cannot update or remove apple business manager account for this specified enrollment policy.</li><li>7803 -  Authorization policy referenced with this enrollment policy is other than No Password, Password, LDAP or Idp type.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/apple/iOS/{referenceId}/actions/email": {
        "post": {
          "tags": [
            "Ios Enrollment Policies"
          ],
          "summary": "Emails specified iOS Enrollment Policy details.",
          "description": "This API emails specified iOS Enrollment Policy details to the targeted recipient\r\n            <br /><br />\r\n            Requires the caller be granted the 'Manage Enrollment Policies' permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "IosEnrollmentPolicies_EmailEnrollmentPolicyInfo",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique Identifier for an Enrollment Policy.",
              "x-nullable": false
            },
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Parameters required for dispatching email.",
              "schema": {
                "$ref": "#/definitions/AppleEnrollmentPolicyEmailInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Success."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6021 - Failed to send email.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/apple/iOS/{referenceId}/actions/sync": {
        "put": {
          "tags": [
            "Ios Enrollment Policies"
          ],
          "summary": "Updates the specified iOS enrollment policy profile.",
          "description": "This API updates the specified iOS enrollment policy profile.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "IosEnrollmentPolicies_UpdatePublishProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/IosEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>7407: Calling the enrollment service is time out.</li><li>7405: Update profile action can't be performed on the specified Enrollment Policy as MobiControl license is not valid.</li><li>7402: The deployment server failed to reach the enrollment service. Please check your network connections and settings.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/apple/macOS": {
        "post": {
          "tags": [
            "Mac Enrollment Policies"
          ],
          "summary": "Creates a new macOS enrollment policy.",
          "description": "This API creates a new macOS enrollment policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "MacEnrollmentPolicies_AddMacEnrollmentPolicy",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Request.",
              "schema": {
                "$ref": "#/definitions/MacEnrollmentPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/MacEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>7403 -  The database already contains enrollment policy named '{0}'. Please enter a different name.</li><li>7404 -  The database already contains enrollment policy tag '{0}'. Please enter a different enrollment policy tag.</li><li>7410 -  Authorization policy referenced with this enrollment policy is associated with another enrollment policy.</li><li>7803 -  Authorization policy referenced with this enrollment policy is other than No Password, Password, LDAP or Idp type.</li><li>7805 - Prevent Un-enrollment setting can only be enabled if Supervise Device setting is also enabled.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/apple/macOS/{referenceId}": {
        "put": {
          "tags": [
            "Mac Enrollment Policies"
          ],
          "summary": "Updates the specified macOS enrollment policy.",
          "description": "This API updates the specified macOS enrollment policy\r\n            <br /><br />\r\n            Requires the caller be granted the 'Manage Enrollment Policies' permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "MacEnrollmentPolicies_UpdateMacEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "MacOs Enrollment Policy Reference Identifier.",
              "x-nullable": false
            },
            {
              "name": "updateMacEnrollmentPolicy",
              "in": "body",
              "required": true,
              "description": "Update Mac Enrollment Policy.",
              "schema": {
                "$ref": "#/definitions/UpdateMacEnrollmentPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/MacEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>7403 - The database already contains enrollment policy named &lt;policy name&gt;. Please enter a different name.</li><li>7410 - Authorization policy referenced with this enrollment policy is associated with another enrollment policy.</li><li>7800 - Automated device enrollment option can't be disabled.</li><li>7801 - Cannot update or remove apple business manager account for this specified enrollment policy.</li><li>7803 -  Authorization policy referenced with this enrollment policy is other than No Password, Password, LDAP or Idp type.</li><li>7805 - Prevent Un-enrollment setting can only be enabled if Supervise Device setting is also enabled.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Mac Enrollment Policies"
          ],
          "summary": "Returns the details of specified macOS enrollment policy.",
          "description": "This API returns the details of specified macOS enrollment policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "MacEnrollmentPolicies_GetMacEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/MacEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Mac Enrollment Policies"
          ],
          "summary": "Deletes the specified macOS enrollment policy.",
          "description": "This API deletes the macOS enrollment policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "MacEnrollmentPolicies_DeleteMacEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "No Content."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>1223: Can't delete an enrollment policy which leverages ADE and has ADE devices assigned to it</li><li>1224: Can't delete an enrollment policy which is set as default policy for an ADE account</li><li>7401: Can't delete default enrollment policy</li><li>7402: The deployment server failed to reach the enrollment service. Please check your network connections and settings</li><li>7405: Action can't be performed on the specified Enrollment Policy as MobiControl license is not valid.</li><li>7407: Calling the enrollment service is time out.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/apple/macOS/{referenceId}/actions/sync": {
        "put": {
          "tags": [
            "Mac Enrollment Policies"
          ],
          "summary": "Updates the specified macOS enrollment policy profile.",
          "description": "This API updates the specified macOS enrollment policy profile.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "MacEnrollmentPolicies_UpdatePublishProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/MacEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>7407: Calling the enrollment service is time out.</li><li>7405: Update profile action can't be performed on the specified Enrollment Policy as MobiControl license is not valid.</li><li>7402: The deployment server failed to reach the enrollment service. Please check your network connections and settings.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/apple/macOS/{referenceId}/actions/email": {
        "post": {
          "tags": [
            "Mac Enrollment Policies"
          ],
          "summary": "Emails specified macOS Enrollment Policy details.",
          "description": "This API emails specified macOS Enrollment Policy details to the targeted recipient\r\n            <br /><br />\r\n            Requires the caller be granted the 'Manage Enrollment Policies' permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "MacEnrollmentPolicies_EmailEnrollmentPolicyInfo",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique Identifier for an Enrollment Policy.",
              "x-nullable": false
            },
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Parameters required for dispatching email.",
              "schema": {
                "$ref": "#/definitions/AppleEnrollmentPolicyEmailInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "No Content."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6021 - Failed to send email.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/policies": {
        "get": {
          "tags": [
            "App Management Policies"
          ],
          "summary": "Returns app management policy summaries.",
          "description": "Returns app management policy summaries\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementPolicies_GetRulesSummary",
          "parameters": [
            {
              "type": "string",
              "name": "nameContains",
              "in": "query",
              "description": "App management policy name filter.",
              "x-nullable": true
            },
            {
              "type": "array",
              "name": "families",
              "in": "query",
              "description": "If specified, returns only app management policies for the selected families.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/RuleFamily"
              },
              "x-enumType": "RuleFamily"
            },
            {
              "type": "array",
              "name": "statuses",
              "in": "query",
              "description": "If specified, returns only app management policies having the selected status(es).",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/RuleStatus"
              },
              "x-enumType": "RuleStatus"
            },
            {
              "type": "boolean",
              "name": "isScheduled",
              "in": "query",
              "description": "When true, return app management policies that currently have a schedule. When false, only return app management policies that do not have a schedule. If undefined, then do not take schedule status into account.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "Defines the sorting order by property. Pass the value as -property for descending, and +property for ascending."
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Input the first X (count) entries that should not be returned.",
              "format": "int32"
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Input the number of entries to be returned, after skipping over the 'skip' count.",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Return app management policy summaries successfully.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RuleSummary"
                }
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/policies/{referenceId}/actions": {
        "post": {
          "tags": [
            "App Management Policies"
          ],
          "summary": "Executes an action on selected app management policy.",
          "description": "Executes an action on selected app management policy\r\n            <br />\r\n            Supported Actions:\r\n            <ul><li>Enable - Enables the App management policy</li><li>Disable - Disables the App management policy</li></ul><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AppManagementPolicies_ExecuteAction",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "App management policy reference id.",
              "x-nullable": false
            },
            {
              "name": "action",
              "in": "body",
              "required": true,
              "description": "The action to be performed on the app management policy.",
              "schema": {
                "$ref": "#/definitions/RuleAction"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Action executed successfully."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/policies/{referenceId}/assignment": {
        "put": {
          "tags": [
            "App Management Policies"
          ],
          "summary": "Updates app management policy assignment.",
          "description": "Updates app management policy assignment\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementPolicies_Assign",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "App management policy reference id.",
              "x-nullable": false
            },
            {
              "name": "assignment",
              "in": "body",
              "required": true,
              "description": "App management policy assignment.",
              "schema": {
                "$ref": "#/definitions/Assignment2"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Return app management policy assignment successfully.",
              "schema": {
                "$ref": "#/definitions/AssignmentSummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>5001 - Bad filter expression provided: {0}.</li><li>5003 - Cannot Disable the policy in the past, update the scheduled date.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "App Management Policies"
          ],
          "summary": "Returns app management policy assignment.",
          "description": "Returns app management policy assignment\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementPolicies_GetAssignment",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "App management policy reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Return app management policy assignment successfully.",
              "schema": {
                "$ref": "#/definitions/AssignmentSummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/policies/{referenceId}/logs": {
        "get": {
          "tags": [
            "App Management Policies"
          ],
          "summary": "Returns logs for selected app management policy.",
          "description": "Returns logs for selected app management policy. Ordering is restricted to Timestamp.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementPolicies_GetAppCatalogRuleLogs",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "App management policy reference id.",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "Log severities.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity4"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "Start date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "End date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "description": "Determines the order. If set to true order is descending.",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Determines how many entities to skip.",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Determines how many entities to take.",
              "format": "int32",
              "default": 50,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Return app management policy logs successfully.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AppCatalogRuleLog"
                }
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/policies/{referenceId}/logs/summary": {
        "get": {
          "tags": [
            "App Management Policies"
          ],
          "summary": "Returns logs summary for selected app management policy.",
          "description": "Returns logs summary for selected app management policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementPolicies_GetAppCatalogRuleLogEntryCounts",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "App management policy reference id.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "Start date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "End date.",
              "format": "date-time",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Return app management policy log summaries successfully.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RuleLogEntryCount"
                }
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devicegroups/{path}/appPolicies": {
        "get": {
          "tags": [
            "Device Group App Policy"
          ],
          "summary": "Retrieves details for all application policies assigned to a device group.",
          "operationId": "DeviceGroupAppPolicy_GetDeviceGroupAppPolicies",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "in": "path",
              "required": true,
              "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value. The path must be double URL-encoded (e.g. %255C%255CMy%2520Company). When called from this page, it should be encoded only once (%5C%5CMy%20Company). When using the path, the root of the path must be prepended with \"\\\\\". For example: \"\\\\My Company\" or \"\\\\My Company\\Management Devices\".",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "appPolicyFamily",
              "in": "query",
              "description": "The app policy family.",
              "x-schema": {
                "$ref": "#/definitions/RuleFamily"
              },
              "default": "All",
              "x-nullable": false,
              "enum": [
                "Android",
                "Apple",
                "Windows",
                "All"
              ],
              "x-enumType": "RuleFamily"
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "How many records to skip.",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "How many records to take.",
              "format": "int32",
              "default": 20,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved app policies for device group &lt;device group name&gt;.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RuleDigest"
                }
              }
            },
            "400": {
              "description": "Failed to retrieve app policies because of invalid &lt;parameter name&gt;."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Failed to retrieve app policies because you do not have the appropriate permissions. Please speak to your administrator."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/android/enterprise/apps/{referenceId}/{appPackageId}.apk": {
        "get": {
          "tags": [
            "Android Applications Package"
          ],
          "summary": "GetS Android Application Content Apk.",
          "operationId": "AndroidApplicationsPackage_GetAndroidApplicationContentApk",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "referenceId of an application.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "appPackageId of an application.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/appManagement/android/apps/enterprise/{referenceId}": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns Android application details.",
          "description": "Returns Android Enterprise application details.\r\n             <br /><br />\r\n             Requires the caller be granted the \"View App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidApps_GetCustomerApplication",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Application Reference Id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/EnterpriseApplicationDetails"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Deletes Enterprise Android application.",
          "description": "Deletes Enterprise Android application.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidApps_DeleteApplication",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Application Reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format.</li><li>4 - Inventory customer application Id is out of range.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li><li>5509 - The application is associated with these app policy(s): {0}. Delete the app policies before deleting the application.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Updates Enterprise Android application.",
          "description": "Updates Enterprise Android application details.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
          "operationId": "AppManagementAndroidApps_UpdateCustomerApplication",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Application reference Id.",
              "x-nullable": false
            },
            {
              "name": "updateCustomerApplicationRequest",
              "in": "body",
              "required": true,
              "description": "Enterprise Application details.",
              "schema": {
                "$ref": "#/definitions/UpdateApplicationRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/EnterpriseApplicationDetails"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - Customer application request is null.</li><li>1 - Inventory customer application is null.</li><li>1 - Inventory customer application's name is null.</li><li>1 - Android customer application inventory data is null.</li><li>2 - The given reference Id is not in valid format.</li><li>4 - Inventory customer application Id is out of range.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/enterprise/internal": {
        "post": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Creates an internal Android application.",
          "description": "Creates new enterprise Android application hosted internally by MobiControl.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={boundary identifier}</code><br />\r\n             Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n             <br />\r\n             Multipart request body must contain the following parts:</p><ol><li>application file - Contains application file with Content-Type: <pre>application/vnd.android.application OR</pre><pre>application/vnd.android.package-archive</pre><br />\r\n             Mandatory headers <br />\r\n             Content-Disposition: attachment; filename=\"{application-filename}\"<br /><br />\r\n             Optional headers <br />\r\n             Content-Type-Encoding: binary<br /></li></ol>\r\n             The maximum size of the Android enterprise application file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />\r\n             The example below shows an application upload request.\r\n             <br /><pre>\r\n             Content-Type: multipart/related; boundary=foo_bar_baz\r\n             Content-Length: number_of_bytes_in_entire_request_body\r\n             <br />\r\n             --foo_bar_baz\r\n             Content-Type: application/vnd.android.application\r\n             <br />\r\n             Content-Disposition: attachment; filename=\"application_name.apk\"\r\n             <br />\r\n             application data\r\n             --foo_bar_baz--\r\n             </pre>",
          "operationId": "AppManagementAndroidApps_UploadInternalCustomerApplication",
          "parameters": [
            {
              "type": "boolean",
              "name": "failIfApplicationAlreadyExists",
              "in": "query",
              "description": "",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "extractConfigurationSchema",
              "in": "query",
              "description": "",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/EnterpriseApplicationDetails"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "415": {
              "description": "Unsupported media type."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - Cannot create temporary file of the apk because the stream is null.</li><li>1 - The path of temporary created file is either null, empty or consists of only white space.</li><li>1 - The application package Id is either null, empty or consists of only white space.</li><li>1 - Android customer application inventory data is null.</li><li>1 - Application icon path is either null, empty or consists of white space.</li><li>1 - ApkMetaData is null.</li><li>1 - Android customer application inventory data is null.</li><li>2 - The given reference Id is not in valid format.</li><li>2 - Application Url must have a value for external applications.</li><li>2 - File path must be empty for external applications.</li><li>2 - File path must have a value for internal applications.</li><li>2 - Application url must be empty for internal applications.</li><li>4 - Inventory customer application Id is out of range.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li><li>5500 - The given android apk is invalid.</li><li>5506 - A customer application with the given application name and application package Id already exists in the inventory.</li><li>5508 - Unsupported customer application icon format.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/enterprise/external": {
        "post": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Creates an external Android application.",
          "description": "Creates new enterprise Android application hosted externally.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
          "operationId": "AppManagementAndroidApps_AddExternalCustomerApplication",
          "parameters": [
            {
              "name": "addExternalCustomerApplicationRequest",
              "in": "body",
              "required": true,
              "description": "External Application URL.",
              "schema": {
                "$ref": "#/definitions/AddExternalApplicationRequest"
              },
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "failIfApplicationAlreadyExists",
              "in": "query",
              "description": "Check for existing application.",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "extractConfigurationSchema",
              "in": "query",
              "description": "Extract configuration schema.",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/EnterpriseApplicationDetails"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - External customer application request is either null, empty or consists only of white space.</li><li>1 - Applicaiton url in external customer application request is either null, empty or consists only of white space.</li><li>1 - The file path of downloaded apk file is either null, empty or consists of only white space.</li><li>1 - The application package Id is either null, empty or consists of only white space.</li><li>1 - Android customer application inventory data is null.</li><li>1 - Application icon path is either null, empty or consists of white space.</li><li>2 - The given reference Id is not in valid format.</li><li>2 - Application Url must have a value for external applications.</li><li>2 - File path must be empty for external applications.</li><li>2 - File path must have a value for internal applications.</li><li>2 - Application url must be empty for internal applications.</li><li>4 - Inventory customer application Id is out of range.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li><li>5505 - Application url mentioned in the external customer application request is not accessible.</li><li>5506 - A customer application with the given application name and application package Id already exists in the inventory.</li><li>5508 - Unspported customer application icon format.</li><li>5500 - The given android apk is invalid.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/googlePlayStore/{appPackageId}": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns Google Play Store application details.",
          "description": "Returns Android application details for a Google Play Store app.\r\n             <br /><br />\r\n             Requires the caller be granted the \"View App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidApps_GetGooglePlayStoreApplicationApplication",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "Application package ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/GooglePlayStoreApplication"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Application package Id is either null, empty or consists only of white space.</li><li>5501 - Application with the given application package Id is not found in the inventory.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Updates Google Play Store application details.",
          "description": "Updates Android application details for a Google Play Store app.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidApps_PutGooglePlayStoreApplicationInInventory",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "Application package ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/GooglePlayStoreApplication"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Application package Id is either null, empty or consists only of white space.</li><li>1 - Google play store application is null.</li><li>1 - Language is null.</li><li>5501 - Application with the given application package Id is not found in the inventory.</li><li>5503 - Application with the given application package Id is not found on google play store.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/googlePlayStore/{appPackageId}/appFeedback/summary": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns summary of application feedback.",
          "description": "Returns summary for application feedback by severity\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)<br />Deprecated use GET googlePlayStore/{appPackageId}/appFeedbackGroups/summary instead.</b><br />",
          "operationId": "AppManagementAndroidApps_GetApplicationFeedbackSeveritySummary",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "Application package ID.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "ruleReferenceId",
              "in": "query",
              "required": true,
              "description": "Rule reference ID.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "The start date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "The end dat.",
              "format": "date-time",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.\r\n            {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.ApplicationFeedback.ApplicationFeedbackSeverityCount}.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ApplicationFeedbackSeverityCount"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br />"
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/offlineOEMConfig/{appPackageId}/appFeedback/summary": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns summary of Offline OEM Config application feedback.",
          "description": "<br />\r\n<b>(Available Since MobiControl v15.5.0)<br />Deprecated use GET offlineOEMConfig/{appPackageId}/appFeedbackGroups/summary instead.</b>\r\n<br />\r\n            Returns summary for Offline OEM Config application feedback by severity\r\n            <br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br />",
          "operationId": "AppManagementAndroidApps_GetOfflineOEMApplicationFeedbackSeveritySummary",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "ruleReferenceId",
              "in": "query",
              "required": true,
              "description": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "",
              "format": "date-time",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.\r\n            {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.ApplicationFeedback.ApplicationFeedbackSeverityCount}.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ApplicationFeedbackSeverityCount"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br />"
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/enterprise/{referenceId}/icon": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Gets customer's application icon.",
          "description": "Returns the application icon for an enterprise application with the given ReferenceId.\r\n             <br /><br />\r\n             Requires the caller be granted the \"View App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidApps_GetCustomerApplicationIcon",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Application Reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format.</li><li>4 - Inventory customer application Id is out of range.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li><li>5507 - Application icon for the given customer application reference Id does not exists in the inventory.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/googlePlayStore/{appPackageId}/appFeedback": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns application feedback reported by AE devices.",
          "description": "Returns application feedback reported by AE devices to Google Cloud.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)<br />Deprecated use GET googlePlayStore/{appPackageId}/appFeedbackGroups instead.</b><br />",
          "operationId": "AppManagementAndroidApps_GetApplicationFeedback",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "Application Package ID.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "ruleReferenceId",
              "in": "query",
              "required": true,
              "description": "Rule Reference ID.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "The start date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "The end date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "severity",
              "in": "query",
              "description": "Severity of applicaiton feedback event.",
              "x-schema": {
                "$ref": "#/definitions/Severity"
              },
              "x-nullable": true,
              "enum": [
                "Unspecified",
                "Info",
                "Error"
              ],
              "x-enumType": "Severity"
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.\r\n            {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.ApplicationFeedback.ApplicationFeedback}.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ApplicationFeedback"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br />"
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/offlineOEMConfig/{appPackageId}/appFeedback": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns Offline OEM Config application feedback reported by AE devices.",
          "description": "<br />\r\n<b>(Available Since MobiControl v15.5.0)<br />Deprecated use GET offlineOEMConfig/{appPackageId}/appFeedbackGroups instead.</b>\r\n<br />\r\n            Returns Offline OEM Config application feedback reported by AE devices.\r\n            <br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br />",
          "operationId": "AppManagementAndroidApps_GetOfflineOEMApplicationFeedback",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "ruleReferenceId",
              "in": "query",
              "required": true,
              "description": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "severity",
              "in": "query",
              "description": "",
              "x-schema": {
                "$ref": "#/definitions/Severity"
              },
              "x-nullable": true,
              "enum": [
                "Unspecified",
                "Info",
                "Error"
              ],
              "x-enumType": "Severity"
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK\r\n            {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.ApplicationFeedback.ApplicationFeedback}.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ApplicationFeedback"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br />"
            }
          },
          "deprecated": true,
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/googlePlayStore/{appPackageId}/appFeedbackGroups": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns application feedback groups reported by AE devices.",
          "description": "Returns application feedback groups reported by AE devices to Google Cloud.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.1)</b><br />",
          "operationId": "AppManagementAndroidApps_GetApplicationFeedbackGroups",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "Application Package ID.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "ruleReferenceId",
              "in": "query",
              "required": true,
              "description": "Rule Reference ID.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "timeRange",
              "in": "query",
              "required": true,
              "description": "Time Range.",
              "x-schema": {
                "$ref": "#/definitions/TimeRange"
              },
              "x-nullable": false,
              "enum": [
                "Every30Minutes",
                "Every1Hour",
                "Every3Hours",
                "Every6Hours",
                "Every12Hours",
                "Every1Day",
                "Every1Week",
                "Every2Weeks",
                "Every1Month",
                "Every3Months"
              ],
              "x-enumType": "TimeRange"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "The start date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "The end date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "severity",
              "in": "query",
              "description": "Severity of applicaiton feedback event.",
              "x-schema": {
                "$ref": "#/definitions/Severity"
              },
              "x-nullable": true,
              "enum": [
                "Unspecified",
                "Info",
                "Error"
              ],
              "x-enumType": "Severity"
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.\r\n            {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.ApplicationFeedback.ApplicationFeedbackGroup}.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ApplicationFeedbackGroup"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br />"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/googlePlayStore/{appPackageId}/appFeedbackGroups/summary": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns summary of application feedback groups.",
          "description": "Returns summary for application feedback groups by severity\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.1)</b><br />",
          "operationId": "AppManagementAndroidApps_GetApplicationFeedbackGroupsSeveritySummary",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "Application package ID.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "ruleReferenceId",
              "in": "query",
              "required": true,
              "description": "Rule reference ID.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "timeRange",
              "in": "query",
              "required": true,
              "description": "Time Range.",
              "x-schema": {
                "$ref": "#/definitions/TimeRange"
              },
              "x-nullable": false,
              "enum": [
                "Every30Minutes",
                "Every1Hour",
                "Every3Hours",
                "Every6Hours",
                "Every12Hours",
                "Every1Day",
                "Every1Week",
                "Every2Weeks",
                "Every1Month",
                "Every3Months"
              ],
              "x-enumType": "TimeRange"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "The start date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "The end dat.",
              "format": "date-time",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.\r\n            {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.ApplicationFeedback.ApplicationFeedbackSeverityCount}.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ApplicationFeedbackSeverityCount"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br />"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/googlePlayStore/{appPackageId}/appFeedbackDetails": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns application feedback groups reported by AE devices.",
          "description": "Returns application feedback groups reported by AE devices to Google Cloud.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.1)</b><br />",
          "operationId": "AppManagementAndroidApps_GetApplicationFeedbackDetails",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "Application Package ID.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "ruleReferenceId",
              "in": "query",
              "required": true,
              "description": "Rule Reference ID.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "timeRange",
              "in": "query",
              "required": true,
              "description": "Time Range.",
              "x-schema": {
                "$ref": "#/definitions/TimeRange"
              },
              "x-nullable": false,
              "enum": [
                "Every30Minutes",
                "Every1Hour",
                "Every3Hours",
                "Every6Hours",
                "Every12Hours",
                "Every1Day",
                "Every1Week",
                "Every2Weeks",
                "Every1Month",
                "Every3Months"
              ],
              "x-enumType": "TimeRange"
            },
            {
              "type": "string",
              "name": "timestampStart",
              "in": "query",
              "required": true,
              "description": "The Time Range start date.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "timestampEnd",
              "in": "query",
              "required": true,
              "description": "The Time Range end date.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "key",
              "in": "query",
              "required": true,
              "description": "key.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "message",
              "in": "query",
              "required": true,
              "description": "message.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "severity",
              "in": "query",
              "required": true,
              "description": "Severity of applicaiton feedback event.",
              "x-schema": {
                "$ref": "#/definitions/Severity"
              },
              "x-nullable": false,
              "enum": [
                "Unspecified",
                "Info",
                "Error"
              ],
              "x-enumType": "Severity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "The start date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "The end date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.\r\n            {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.ApplicationFeedback.ApplicationFeedback}.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ApplicationFeedback"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br />"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/offlineOEMConfig/{appPackageId}/appFeedbackGroups": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns Offline OEM Config application feedback groups reported by AE devices.",
          "description": "<br />\r\n<b>(Available Since MobiControl v15.6.1)</b>\r\n<br />\r\n            Returns Offline OEM Config application feedback groups reported by AE devices.\r\n            <br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br />",
          "operationId": "AppManagementAndroidApps_GetOfflineOEMApplicationFeedbackGroups",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "ruleReferenceId",
              "in": "query",
              "required": true,
              "description": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "timeRange",
              "in": "query",
              "required": true,
              "description": "",
              "x-schema": {
                "$ref": "#/definitions/TimeRange"
              },
              "x-nullable": false,
              "enum": [
                "Every30Minutes",
                "Every1Hour",
                "Every3Hours",
                "Every6Hours",
                "Every12Hours",
                "Every1Day",
                "Every1Week",
                "Every2Weeks",
                "Every1Month",
                "Every3Months"
              ],
              "x-enumType": "TimeRange"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "severity",
              "in": "query",
              "description": "",
              "x-schema": {
                "$ref": "#/definitions/Severity"
              },
              "x-nullable": true,
              "enum": [
                "Unspecified",
                "Info",
                "Error"
              ],
              "x-enumType": "Severity"
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.\r\n            {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.ApplicationFeedback.ApplicationFeedbackGroup}.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ApplicationFeedbackGroup"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br />"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/offlineOEMConfig/{appPackageId}/appFeedbackGroups/summary": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns summary of Offline OEM Config application feedback by severity.",
          "description": "<br />\r\n<b>(Available Since MobiControl v15.6.1)</b>\r\n<br />\r\n            Returns summary for Offline OEM Config application feedback by severity\r\n            <br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br />",
          "operationId": "AppManagementAndroidApps_GetOfflineOEMApplicationFeedbackGroupsSeveritySummary",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "ruleReferenceId",
              "in": "query",
              "required": true,
              "description": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "timeRange",
              "in": "query",
              "required": true,
              "description": "",
              "x-schema": {
                "$ref": "#/definitions/TimeRange"
              },
              "x-nullable": false,
              "enum": [
                "Every30Minutes",
                "Every1Hour",
                "Every3Hours",
                "Every6Hours",
                "Every12Hours",
                "Every1Day",
                "Every1Week",
                "Every2Weeks",
                "Every1Month",
                "Every3Months"
              ],
              "x-enumType": "TimeRange"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "",
              "format": "date-time",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.\r\n            {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.ApplicationFeedback.ApplicationFeedbackSeverityCount}.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ApplicationFeedbackSeverityCount"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br />"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/apps/offlineOEMConfig/{appPackageId}/appFeedbackDetails": {
        "get": {
          "tags": [
            "App Management Android Apps"
          ],
          "summary": "Returns Offline OEM Config application feedback reported by AE devices.",
          "description": "<br />\r\n<b>(Available Since MobiControl v15.6.1)</b>\r\n<br />\r\n            Returns Offline OEM Config application feedback reported by AE devices.\r\n            <br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br />",
          "operationId": "AppManagementAndroidApps_GetOfflineOEMApplicationFeedbackDetails",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "Application Package ID.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "ruleReferenceId",
              "in": "query",
              "required": true,
              "description": "Rule Reference ID.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "timeRange",
              "in": "query",
              "required": true,
              "description": "Time Range.",
              "x-schema": {
                "$ref": "#/definitions/TimeRange"
              },
              "x-nullable": false,
              "enum": [
                "Every30Minutes",
                "Every1Hour",
                "Every3Hours",
                "Every6Hours",
                "Every12Hours",
                "Every1Day",
                "Every1Week",
                "Every2Weeks",
                "Every1Month",
                "Every3Months"
              ],
              "x-enumType": "TimeRange"
            },
            {
              "type": "string",
              "name": "timestampStart",
              "in": "query",
              "required": true,
              "description": "The Time Range start date.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "timestampEnd",
              "in": "query",
              "required": true,
              "description": "The Time Range end date.",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "key",
              "in": "query",
              "required": true,
              "description": "key.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "message",
              "in": "query",
              "required": true,
              "description": "message.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "severity",
              "in": "query",
              "required": true,
              "description": "Severity of application feedback event.",
              "x-schema": {
                "$ref": "#/definitions/Severity"
              },
              "x-nullable": false,
              "enum": [
                "Unspecified",
                "Info",
                "Error"
              ],
              "x-enumType": "Severity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "The start date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "The end date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Skip",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "Take",
              "in": "query",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK\r\n            {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.ApplicationFeedback.ApplicationFeedback}.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ApplicationFeedback"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br />"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/policies/{referenceId}": {
        "get": {
          "tags": [
            "App Management Android Policies"
          ],
          "summary": "Returns Android app management policy details.",
          "description": "Returns Android app management policy details.\r\n             <br /><br />\r\n             Requires the caller be granted the \"View App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidPolicies_GetRule",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Policy reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/AndroidAppCatalogRuleSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "App Management Android Policies"
          ],
          "summary": "Deletes an Android app management policy.",
          "description": "Deletes an Android app management policy.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidPolicies_DeleteRule",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Policy reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "App Management Android Policies"
          ],
          "summary": "Updates an Android app management policy.",
          "description": "Updates an Android app management policy.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidPolicies_UpdateRule",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Policy reference ID.",
              "x-nullable": false
            },
            {
              "name": "rule",
              "in": "body",
              "required": true,
              "description": "Update Android App Policy request.",
              "schema": {
                "$ref": "#/definitions/UpdateAndroidAppCatalogRuleRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/AndroidAppCatalogRuleSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - App policy for given reference Id does not exists or is null.</li><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - App policy name param of the given app policy is null, empty or consists of white space.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li><li>5000 - Application catalog app policy name already exists.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/policies": {
        "post": {
          "tags": [
            "App Management Android Policies"
          ],
          "summary": "Creates new Android app management policy.",
          "description": "Creates a new Android app management policy.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidPolicies_CreateRule",
          "parameters": [
            {
              "name": "rule",
              "in": "body",
              "required": true,
              "description": "Android App Policy details.",
              "schema": {
                "$ref": "#/definitions/CreateAndroidAppCatalogRuleRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/AndroidAppCatalogRuleSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - App policy is null.</li><li>1 - App policy Id is null.</li><li>1 - App policy name param of the given app policy is null, empty or consists of white space.</li><li>1 - Missing enterprise reference Id in the given android application catalog app policy request.</li><li>2 - The given app policy kind does not exists.</li><li>2 - The app policy family does not exists.</li><li>5000 - Application catalog app policy name already exists.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/policies/{referenceId}/enterpriseReferenceId": {
        "put": {
          "tags": [
            "App Management Android Policies"
          ],
          "summary": "Updates an Android app management policy.",
          "description": "Updates an Android app management policy.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidPolicies_UpdateRuleEnterprise",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Policy reference ID.",
              "x-nullable": false
            },
            {
              "name": "rule",
              "in": "body",
              "required": true,
              "description": "Update Android Enterprise App Policy request.",
              "schema": {
                "$ref": "#/definitions/UpdateAndroidAppCatalogRuleEnterpriseRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/AndroidAppCatalogRuleSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - App policy for given reference Id does not exists or is null.</li><li>1 - App policy Id does not exists or is null.</li><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - App policy name param of the given app policy is null, empty or consists of white space.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/policies/{referenceId}/apps/enterprise": {
        "get": {
          "tags": [
            "App Management Android Policies"
          ],
          "summary": "Returns Android apps for the selected policy.",
          "description": "Returns a list of applications for the selected Android app management policy.\r\n             <br /><br />\r\n             Requires the caller be granted the \"View App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidPolicies_GetCustomerApplications",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Policy Reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK\r\n             {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.Rules.CustomerAppCatalogRuleItemAppInventory}\r\n             Collection of CustomerAppCatalogRuleItemAppInventory that holds information about the customer applications that are associated to a certain Android application catalog rule.\r\n             <seealso cref=\"T:Soti.MobiControl.AppPolicy.Android.Web.Rules.CustomerAppCatalogRuleItemAppInventory\" />",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CustomerAppCatalogRuleItemAppInventory"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "App Management Android Policies"
          ],
          "summary": "Updates Android applications for the selected policy.",
          "description": "Updates Android applications for the selected app management policy.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidPolicies_PutCustomerApplications",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Policy Reference ID.",
              "x-nullable": false
            },
            {
              "name": "applications",
              "in": "body",
              "required": true,
              "description": "{System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.Rules.CustomerAppCatalogRuleItem}Collection of Android Enterprise Applications.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CustomerAppCatalogRuleItem"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - The customer app management policy item list is null.</li><li>1 - App policy for given referenceId is null.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li><li>5502 - The application list is empty or null. It should contain at least one application.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/policies/apps/{appPackageId}/Configuration": {
        "get": {
          "tags": [
            "App Management Android Policies"
          ],
          "summary": "Returns available App Configuration for given App Package Id.",
          "description": "Returns available App Configuration for given App Package Id.\r\n            <br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><br /><b>(Available Since MobiControl v15.5.0)</b><br />",
          "operationId": "AppManagementAndroidPolicies_GetCustomerAppConfiguration",
          "parameters": [
            {
              "type": "string",
              "name": "appPackageId",
              "in": "path",
              "required": true,
              "description": "Application Package Id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "type": "string"
              }
            },
            "400": {
              "description": "App Package Id is either null, empty or consists only of white space."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 -5510 - Application with the given application package Id is not found in the inventory.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/policies/apps/{referenceId}/actions/ExtractCustomerAppConfiguration": {
        "post": {
          "tags": [
            "App Management Android Policies"
          ],
          "summary": "Updates App Configuration Schema for a given Application.",
          "description": "Updates App Configuration Schema for a given Application.\r\n             <br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><br /><b>(Available Since MobiControl v15.5.1)</b><br />",
          "operationId": "AppManagementAndroidPolicies_ExtractCustomerAppConfiguration",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Application reference Id.",
              "format": "guid",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - Cannot create temporary file of the apk because the stream is null.</li><li>1 - The path of temporary created file is either null, empty or consists of only white space.</li><li>1 - The application package Id is either null, empty or consists of only white space.</li><li>1 - Android customer application inventory data is null.</li><li>1 - Application icon path is either null, empty or consists of white space.</li><li>1 - ApkMetaData is null.</li><li>1 - Android customer application inventory data is null.</li><li>2 - File path must have a value for internal applications.</li><li>2 - Application url must be empty for internal applications.</li><li>4 - Inventory customer application Id is out of range.</li><li>5501 - Application with the given reference Id is not found in the inventory.</li><li>5506 - A customer application with the given application name and application package Id already exists in the inventory.</li><li>5508 - Unsupported customer application icon format.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/android/policies/{referenceId}/apps/googlePlayStore": {
        "get": {
          "tags": [
            "App Management Android Policies"
          ],
          "summary": "Returns Google Play store apps for the selected policy.",
          "description": "Returns Google Play store applications for the selected Android  app management policy.\r\n             <br /><br />\r\n             Requires the caller be granted the \"View App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidPolicies_GetGooglePlayStoreApplications",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Policy reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.\r\n             {System.Collections.Generic.IEnumerable`1} where T is {Soti.MobiControl.AppPolicy.Android.Web.Rules.GooglePlayStoreAppCatalogRuleItemAppInventory}.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GooglePlayStoreAppCatalogRuleItemAppInventory"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "App Management Android Policies"
          ],
          "summary": "Updates Google Play store applications for the selected policy.",
          "description": "Updates Google Play store applications for the selected Android app management policy.\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementAndroidPolicies_PutGooglePlayStoreApplications",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Policy reference ID.",
              "x-nullable": false
            },
            {
              "name": "applications",
              "in": "body",
              "required": true,
              "description": "Collection of Google PlayStore Applications.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GooglePlayStoreAppCatalogRuleItem"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>1 - The google play store app management policy item list is null.</li><li>2 - The given reference Id is not in valid format</li><li>4 - The app policy Id for the given reference Id is out of range.</li><li>5502 - The application list is empty or null. It should contain at least one application.</li><li>5504 - One of the given application is not approved for enterprise.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/iOS/apps/enterprise/internal": {
        "post": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Creates an internal iOS enterprise application.",
          "description": "Creates new iOS enterprise application hosted internally by MobiControl\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={boundary identifier}</code><br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br />\r\n            Multipart request body must contain the following parts:</p><ol><li>application file - Contains application file with Content-Type: <pre>application/vnd.ios.application</pre><br />\r\n            Mandatory headers <br />\r\n            Content-Disposition: attachment; filename=\"{application-filename}\"<br /><br />\r\n            Optional headers <br />\r\n            Content-Type-Encoding: binary<br /></li></ol>\r\n            The maximum size of the iOS enterprise application file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />\r\n            The example below shows an application upload request.\r\n            <br /><pre>\r\n            Content-Type: multipart/related; boundary=foo_bar_baz\r\n            Content-Length: number_of_bytes_in_entire_request_body\r\n            <br />\r\n            --foo_bar_baz\r\n            Content-Type: application/vnd.ios.application\r\n            <br />\r\n            Content-Disposition: attachment; filename=\"application_name.ipa\"\r\n            <br />\r\n            application data\r\n            --foo_bar_baz--\r\n            </pre>",
          "operationId": "AppleApplications_UploadIosEnterpriseApplication",
          "responses": {
            "200": {
              "description": "Application uploaded successfully.",
              "schema": {
                "$ref": "#/definitions/IosEnterpriseApplicationMetadata"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "415": {
              "description": "Unsupported media type."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>5100 - file has invalid format</li><li>5101 - file is not ipa</li><li>5106 - file exceeds maximum allowed limit</li><li>5109 - device management address not configured</li><li>5141 - The enterprise app contains files with a path longer than 260 characters and long paths are not supported.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/iOS/apps/enterprise/{referenceId}/provisioningProfile": {
        "post": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Updates provisioning profile for iOS enterprise application.",
          "description": "Updates provisioning profile for iOS enterprise application\r\n             <br /><br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={boundary identifier}</code><br />\r\n             Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n             <br />\r\n             Multipart request body must contain the following parts:</p><ol><li>file - Contains iOS provisioning profile with Content-Type: <pre>application/vnd.ios.provisioningprofile</pre><br />\r\n             Mandatory headers <br />\r\n             Content-Disposition: attachment; filename=\"{filename}\"<br /><br />\r\n             Content-Type-Encoding: binary<br /></li></ol>\r\n             The maximum size of the file to be uploaded when using this endpoint is <u>2 GB</u>.<br /><br />\r\n             The example below shows an upload request.\r\n             <br /><pre>\r\n             Content-Type: multipart/related; boundary=foo_bar_baz\r\n             Content-Length: number_of_bytes_in_entire_request_body\r\n             <br />\r\n             --foo_bar_baz\r\n             Content-Type: application/vnd.ios.provisioningprofile\r\n             <br />\r\n             Content-Disposition: attachment; filename=\"filename.mobileprovision\"\r\n             <br />\r\n             Content-Type-Encoding: binary\r\n             <br />\r\n             application data\r\n             --foo_bar_baz--\r\n             </pre>",
          "operationId": "AppleApplications_UploadProvisioningProfile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Application reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "File uploaded successfully.",
              "schema": {
                "type": "string"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "415": {
              "description": "Unsupported media type."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>5104 - file has invalid format</li><li>5106 - file exceeds maximum allowed limit</li><li>5113 - application doesn't exist</li><li>5114 - application bundle id doesnt match</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/iOS/apps/enterprise": {
        "post": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Deletes Apple iOS enterprise application.",
          "description": "Update Apple iOS enterprise application.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.",
          "operationId": "AppleApplications_UpdateIosEnterpriseApplication",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "IosEnterpriseApplicationMetadataUpdateRequest.",
              "schema": {
                "$ref": "#/definitions/IosEnterpriseApplicationMetadataUpdateRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Application updated successfully."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/iOS/apps/enterprise/{referenceId}": {
        "delete": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Deletes Apple iOS enterprise application.",
          "description": "Deletes Apple iOS enterprise application.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppleApplications_DeleteIosEnterpriseApplication",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Application reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Application deleted successfully."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/macOS/apps/enterprise/{referenceId}": {
        "delete": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Deletes Apple MacOS enterprise application.",
          "description": "Deletes Apple MacOS enterprise application\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppleApplications_DeleteMacEnterpriseApplication",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Application reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Application deleted successfully."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/iOS/apps/enterprise/external": {
        "post": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Creates an external iOS enterprise application.",
          "description": "Creates new iOS enterprise application hosted externally\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />\r\n            Returns retrieved application metadata.\r\n            <p>Content-Type of the Request body must be <code>application/json</code><br /></p><br />",
          "operationId": "AppleApplications_AddExternalIosEnterpriseApplicationToInventory",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "AddExternalFileRequest.",
              "schema": {
                "$ref": "#/definitions/AddExternalFileRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Application added successfully.",
              "schema": {
                "$ref": "#/definitions/IosEnterpriseApplicationMetadata"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>5101 - file is not ipa</li><li>5102 - URI has incorrect format</li><li>5103 - manifest file not found</li><li>5110 - The enterprise app contains files with a path longer than 260 characters and long paths are not supported.</li><li>5111 - manifest file is not correct</li><li>5112 - ipa file not found</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/common/apps/appStore": {
        "post": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Creates Apple App Store applications.",
          "description": "Creates Apple App Store applications.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />\r\n            Returns collection of applications with assigned reference ID.\r\n            <p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
          "operationId": "AppleApplications_AddStoreApplicationsToInventory",
          "parameters": [
            {
              "name": "applications",
              "in": "body",
              "required": true,
              "description": "Collection of applications to add.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AppleStoreApplicationMetadata"
                }
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Applications added successfully.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AppleStoreApplicationMetadata"
                }
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/macOS/apps/enterprise/internal": {
        "post": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Creates an internal MacOS enterprise application.",
          "description": "Creates new MacOS enterprise application hosted internally by MobiControl.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppleApplications_UploadMacApplication",
          "responses": {
            "200": {
              "description": "Application uploaded successfully.",
              "schema": {
                "$ref": "#/definitions/MacEnterpriseApplicationMetadata"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "415": {
              "description": "Unsupported media type."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>5105 - Invalid Mac app file</li><li>5106 - Max file size</li><li>5107 - Metadata not provided</li><li>5129 - Invalid app file</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/macOS/apps/enterprise/external": {
        "post": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Creates an external MacOS enterprise application.",
          "description": "Creates new MacOS enterprise application hosted externally\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppleApplications_AddMacExternalApplicationToInventory",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "AddExternalMacAppRequest.",
              "schema": {
                "$ref": "#/definitions/AddExternalMacAppRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Application added successfully.",
              "schema": {
                "$ref": "#/definitions/MacEnterpriseApplicationMetadata"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>5103 - No manifest found</li><li>5107 - Metadata not provided</li><li>5108 - Mac URI incorrect format</li><li>5116 - Mac manifest not correct</li><li>5117 - Referenced Mac file not found</li><li>5130 - Invalid app URL</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/iOS/apps/actions/forceUpdate": {
        "post": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Forces application update.",
          "description": "Forces Application update on devices\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
          "operationId": "AppleApplications_ForceApplicationUpdate",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "ForceApplicationUpdateRequest.",
              "schema": {
                "$ref": "#/definitions/ForceApplicationUpdateRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/common/apps/actions/forceUpdate": {
        "post": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Forces application update.",
          "description": "Forces Application update on devices\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
          "operationId": "AppleApplications_ForceAppleApplicationUpdate",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "ForceApplicationUpdateRequest.",
              "schema": {
                "$ref": "#/definitions/ForceApplicationUpdateRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/common/apps/{referenceId}/icon": {
        "get": {
          "tags": [
            "Apple Applications"
          ],
          "summary": "Returns application icon.",
          "description": "Returns application icon for the application reference ID\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppleApplications_GetApplicationIcon",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Application reference ID.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "applicationKind",
              "in": "query",
              "required": true,
              "description": "Application kind.",
              "x-schema": {
                "$ref": "#/definitions/AppleApplicationKind"
              },
              "x-nullable": false,
              "enum": [
                "Unknown",
                "AppleStore",
                "IosEnterprise",
                "MacEnterprise"
              ],
              "x-enumType": "AppleApplicationKind"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "file"
              }
            },
            "204": {
              "description": "No Content.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/iOS/redemptionCodes/{applicationId}/actions/cleanup": {
        "post": {
          "tags": [
            "Apple Redemption Codes"
          ],
          "summary": "Cleans up unused redemption codes.",
          "description": "Cleans up unused redemption codes\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
          "operationId": "AppleRedemptionCodes_CleanUnusedCodes",
          "parameters": [
            {
              "type": "string",
              "name": "applicationId",
              "in": "path",
              "required": true,
              "description": "Application ID.",
              "x-nullable": false
            },
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "request.",
              "schema": {
                "$ref": "#/definitions/RedemptionCodesRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Success."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/iOS/redemptionCodes/{applicationId}": {
        "get": {
          "tags": [
            "Apple Redemption Codes"
          ],
          "summary": "Returns application information.",
          "description": "Returns application information\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
          "operationId": "AppleRedemptionCodes_GetApplication",
          "parameters": [
            {
              "type": "string",
              "name": "applicationId",
              "in": "path",
              "required": true,
              "description": "Application ID.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "appPolicyReferenceId",
              "in": "query",
              "description": "Application Policy Reference ID.",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "useCodes",
              "in": "query",
              "description": "Use codes flag.",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "useCodesExclusive",
              "in": "query",
              "description": "Use codes exclusive flag.",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/RedemptionCodeApplicationInfo"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "415": {
              "description": "Unsupported media type."
            },
            "422": {
              "description": "Business Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Apple Redemption Codes"
          ],
          "summary": "Uploads redemption codes.",
          "description": "Uploads redemption codes from Microsoft Excel file.\r\n            <br></br>\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br><b>(Available Since MobiControl v15.3.0).</b></br><p>Content-Type of the Request body must be.<code>multipart/related; boundary={boundary identifier}</code><br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br />\r\n             Multipart request body must contain the following parts:.</p><ol><li>MS Excel file - Contains MS Excel file with Content-Type: <pre>application/vnd.ms-excel</pre><br />\r\n             or <pre>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</pre><br /><li>metadata - Contains json-formatted information with Content-Type: <pre>application/vnd.ms-excel.metadata+json</pre>\r\n             or <pre>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.metadata+json</pre><br /></li>\r\n             Mandatory headers <br />\r\n             Content-Disposition: attachment; filename=\"{filename}\"<br /><br />\r\n             Content-Type-Encoding: binary<br /></li></ol>\r\n            The maximum size of the MS Excel file to be uploaded when using this endpoint is <u>2 GB.</u>.<br></br>\r\n            The example below shows an upload request.\r\n            <br /><pre>\r\n             Content-Type: multipart/related; boundary=foo_bar_baz\r\n             Content-Length: number_of_bytes_in_entire_request_body\r\n             <br />\r\n             --foo_bar_baz\r\n             Content-Type: application/vnd.ms-excel.metadata+json<br />\r\n            {\"ExpectedName\":\"Tetris\",<br />\r\n            \"SuppressUpdateIssues\":[3],<br />\r\n            \"AppPolicyReferenceId\":\"b2467f93-7042-4792-be20-e3103acbf547\"}<br />\r\n             --foo_bar_baz\r\n             Content-Type: application/vnd.ms-excel\r\n             <br />\r\n             Content-Disposition: attachment; filename=\"filename.xls\"\r\n             <br />\r\n             Content-Type-Encoding: binary\r\n             <br />\r\n             application data\r\n             --foo_bar_baz--.\r\n             </pre>",
          "operationId": "AppleRedemptionCodes_UploadCodes",
          "parameters": [
            {
              "type": "string",
              "name": "applicationId",
              "in": "path",
              "required": true,
              "description": "Application ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "File uploaded successfully.",
              "schema": {
                "$ref": "#/definitions/RedemptionCodeApplicationExtendedInfo"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "415": {
              "description": "Unsupported media type."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/iOS/redemptionCodes/{applicationId}/summary": {
        "get": {
          "tags": [
            "Apple Redemption Codes"
          ],
          "summary": "Returns the redemption codes collection.",
          "description": "Returns the redemption codes collection\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>application/json</code><br /></p>",
          "operationId": "AppleRedemptionCodes_GetCodes",
          "parameters": [
            {
              "type": "string",
              "name": "applicationId",
              "in": "path",
              "required": true,
              "description": "Application ID.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "appPolicyReferenceId",
              "in": "query",
              "description": "Application Policy Reference ID.",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Number of entries to skip.",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Number of entries to take.",
              "format": "int32",
              "default": 50,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RedemptionCode"
                }
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/licenseAccounts/{accountId}/actions/refresh": {
        "post": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Refresh the specified App Store License account.",
          "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br><b>(Available Since MobiControl v15.3.0)</b></br>",
          "operationId": "AppleVolumePurchaseProgramAccount_RefreshAccount",
          "parameters": [
            {
              "type": "string",
              "name": "accountId",
              "in": "path",
              "required": true,
              "description": "The public identifier of App Store Records in MobiControl.",
              "x-nullable": false
            }
          ],
          "responses": {
            "201": {
              "description": ""
            },
            "400": {
              "description": "Bad request.<br /><ol><li>If the request missing AccountId</li></ol>"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            },
            "403": {
              "description": "Failed operation due to non-existing account."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>1302 - Refresh account licensing information failed.</li><li>1340 - The license account is owned by a different MobiControl instance</li><li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li><li>1328 - The Apple App Store License Management account token is invalid.</li><li>1346 - The Apple App Store License Management account token is revoked.</li><li>1343 - The Apple service cannot be reached.</li><li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li><li>1333 - The App Store License Management services returned an unexpected error.</li><li>1347 - A connection with Apple iTunes service cannot be established to retrieve information about apps in this account.</li><li>1348 - Failed to retrieve information about an app (ID: {0}) in this account using the Apple iTunes service.</li><li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li><li>1352 - Failed to refresh the Apple App Store License Management account '{0}', because another refresh or reconciliation is already in progress.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/licenseAccounts/actions/reconcile": {
        "post": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Reconcile all App Store License accounts.",
          "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br><b>(Available Since MobiControl v15.3.0)</b></br><p><br />Reconcile all App Store License accounts by revoking all licenses and users assigned or created by this instance of MobiControl</p><br>Call type : Async call</br>",
          "operationId": "AppleVolumePurchaseProgramAccount_Reconcile",
          "parameters": [
            {
              "name": "reconcileAccount",
              "in": "body",
              "required": true,
              "description": "Reconcile App Store License account.",
              "schema": {
                "$ref": "#/definitions/VppReconcileAccount"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "201": {
              "description": ""
            },
            "400": {
              "description": "Bad request."
            },
            "422": {
              "description": "<br>Violated logical condition. </br>\r\n<ol>\r\n  <li>1340 - The license account is owned by a different MobiControl instance </li>\r\n  <li>1343 - The Apple service cannot be reached</li>\r\n  <li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li>\r\n  <li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li>\r\n  <li>1328 - The Apple App Store License Management account token is invalid.</li>\r\n  <li>1346 - The Apple App Store License Management account token is revoked.</li>\r\n  <li>1333 - The App Store License Management services returned an unexpected error.</li>\r\n  <li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li>\r\n  <li>1353 - Failed to reconcile the Apple App Store License Management accounts, because another refresh or reconciliation is already in progress.</li>\r\n</ol>"
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/licenseAccounts/{accountId}": {
        "put": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Updates the specified App Store License account's name or server token.",
          "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br /></p><p>The request's body:\r\n            <ol><li>Should be multipart request comprising of metadata and certificate content encoded in base64.</li><li> Token file part of the request's body is mandatory and should be identified by Content-Type: application/octet-stream.</li><li> Metadata part of request's body is mandatory and should be identified by Content-Type: application/octet-stream.metadata.</li><li> Metadata is a JSON object with:<br />\r\n            -- AccountName: Friendly name of the account being created.<br />\r\n            -- ClaimOwnership: (Optional) If it is true, MobiControl will claim ownership of the account if it is owned by another host.If it is not specified, it defaults to false.<br />\r\n            -- RetireExistingUsers: (Optional) If it is true, MobiControl will retire all existing users associated with this account.If it is not specified, it defaults to false.<br /></li></ol></p><p>Sample request's body:</p><pre><br>--mobicontrol_boundary                                               </br><br>Content-Disposition: form-data; name=\"fieldNameHere\"; filename=\"test.vpptoken\"            </br><br>Content-Type: application/octet-stream                                                    </br><br>    eyJleHBEYXRlIjoiMjAyMS0wMi0yNlQxMToyOTo0OC0wODAwIiwidG9rZW4iOiIvMmY2ZUNMTTM2d01ERUpJ  </br><br>--mobicontrol_boundary                                                 </br><br>    Content-Type: application/octet-stream.metadata                                       </br><br>{AccountName:\"Test34\", ClaimOwnership : true}                                                                   </br><br>--mobicontrol_boundary--</br></pre>",
          "operationId": "AppleVolumePurchaseProgramAccount_UpdateAccount",
          "parameters": [
            {
              "type": "string",
              "name": "accountId",
              "in": "path",
              "required": true,
              "description": "The public identifier of App Store Records in MobiControl.",
              "x-nullable": false
            }
          ],
          "responses": {
            "201": {
              "description": ""
            },
            "400": {
              "description": "Bad request."
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            },
            "403": {
              "description": "Failed operation due to non-existing account."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>1336 - Failed to claim ownership of Apple App Store License Account ID</li><li>1302 - Refresh account licensing information failed.</li><li>1308 - The Apple App Store License account name '{0}' is already added to the system, please use another name.</li><li>1345 - Error updating account '{0}', because the provided token belongs to a different location '{1}({2})' than the existing account's location '{3}({4})'</li><li>1331 - Error updating account '{0}', because it is owned by a different MobiControl instance ({1})</li><li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li><li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li><li>1343 - The Apple service cannot be reached.</li><li>1327 - The Apple App Store License Management account token is invalid or expired.</li><li>1328 - The Apple App Store License Management account token is invalid.</li><li>1346 - The Apple App Store License Management account token is revoked.</li><li>1333 - The App Store License Management services returned an unexpected error.</li><li>1347 - A connection with Apple iTunes service cannot be established to retrieve information about apps in this account.</li><li>1348 - Failed to retrieve information about an app (ID: {0}) in this account using the Apple iTunes service.</li><li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li><li>1351 - Failed to update the Apple App Store License Management account '{0}', because another update is already in progress.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Deletes the specified App Store License account.",
          "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n             <br><b>(Available Since MobiControl v15.3.0)</b></br>\r\n             Call Type : Async call.",
          "operationId": "AppleVolumePurchaseProgramAccount_DeleteAccount",
          "parameters": [
            {
              "type": "string",
              "name": "accountId",
              "in": "path",
              "required": true,
              "description": "The public identifier of App Store Records in MobiControl.",
              "x-nullable": false
            }
          ],
          "responses": {
            "201": {
              "description": ""
            },
            "400": {
              "description": "Bad request."
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            },
            "403": {
              "description": "Failed operation due to non-existing account."
            },
            "422": {
              "description": "<ol>\r\n  <li>1342 - Error deleting account '{0}', because the account is used by at least one app in your App Policies</li>\r\n  <li>1343 - The Apple service cannot be reached</li>\r\n  <li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li>\r\n  <li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li>\r\n</ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Returns the specified App Store License account's summary.",
          "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "AppleVolumePurchaseProgramAccount_GetAccountsSummary",
          "parameters": [
            {
              "type": "string",
              "name": "accountId",
              "in": "path",
              "required": true,
              "description": "The public identifier of App Store Records in MobiControl.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/VppAccount"
              }
            },
            "400": {
              "description": "Bad request."
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            },
            "403": {
              "description": "Failed operation due to non-existing account."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/licenseAccounts": {
        "post": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Creates a new App Store License account.",
          "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>The request's headers must have: <code>Content-Type: multipart/related;boundary=mobicontrol_boundary</code><br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br /></p><p>The request's body:\r\n            <ol><li>Should be multipart request comprising of metadata and certificate content encoded in base64.</li><li>  Token file part of the request's body is mandatory and should be identified by Content-Type: application/octet-stream.</li><li> Metadata part of request's body is mandatory and should be identified by Content-Type: application/octet-stream.metadata.</li><li> Metadata is a JSON object with:<br />\r\n            -- AccountName: Friendly name of the account being created.<br />\r\n            -- ClaimOwnership: (Optional) If it is true, MobiControl will claim ownership of the account if it is owned by another host.If it is not specified, it defaults to false.<br />\r\n            -- RetireExistingUsers: (Optional) If it is true, MobiControl will retire all existing users associated with this account.If it is not specified, it defaults to false.<br /></li></ol></p><p>Sample request's body:</p><pre><br>--mobicontrol_boundary                                               </br><br>Content-Disposition: form-data; name=\"fieldNameHere\"; filename=\"test.vpptoken\"            </br><br>Content-Type: application/octet-stream                                                    </br><br>    eyJleHBEYXRlIjoiMjAyMS0wMi0yNlQxMToyOTo0OC0wODAwIiwidG9rZW4iOiIvMmY2ZUNMTTM2d01ERUpJ  </br><br>--mobicontrol_boundary                                                 </br><br>    Content-Type: application/octet-stream.metadata                                       </br><br>{AccountName:\"Test34\", ClaimOwnership : true, RetireExistingUsers: false }                                                               </br><br>--mobicontrol_boundary--</br></pre>",
          "operationId": "AppleVolumePurchaseProgramAccount_AddAccount",
          "responses": {
            "400": {
              "description": "Bad request."
            },
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/VppAccount"
              }
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>1316 - The Apple App Store License token you are attempting to upload already exists under different account. </li><li>1343 - The Apple service cannot be reached</li><li>1308 - The Apple's App Store License Management account name '{0}' is already added to the system, please use another name.</li><li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li><li>1327 - The Apple App Store License Management account token is invalid or expired.</li><li>1328 - The Apple App Store License Management account token is invalid.</li><li>1346 - The Apple App Store License Management account token is revoked.</li><li>1336 - Failed to claim ownership of Apple's App Store License Management Account ID '{0}'</li><li>1311 - Add Apple's Apple's App Store License Management License Management account '{0}' failed because fail to retire existing users.</li><li>1335 - Apple's App Store License Management Account '{0}' no longer managed by this instance of MobiControl but by '{1}'</li><li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li><li>1333 - The App Store License Management services returned an unexpected error.</li><li>1347 - A connection with Apple iTunes service cannot be established to retrieve information about apps in this account.</li><li>1348 - Failed to retrieve information about an app (ID: {0}) in this account using the Apple iTunes service.</li><li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li><li>1350 - Failed to add the Apple App Store License Management account '{0}', because another account is being added.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Returns a list of App Store License accounts.",
          "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "AppleVolumePurchaseProgramAccount_GetAllAccounts",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VppAccount"
                }
              }
            },
            "400": {
              "description": "Bad request."
            },
            "401": {
              "description": "Unauthorized."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/licenseAccounts/{accountId}/name": {
        "put": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Updates the specified App Store License account's name.",
          "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br><b>(Available Since MobiControl v15.3.0)</b></br>",
          "operationId": "AppleVolumePurchaseProgramAccount_UpdateAccountName",
          "parameters": [
            {
              "type": "string",
              "name": "accountId",
              "in": "path",
              "required": true,
              "description": "The public identifier of App Store Records in MobiControl.",
              "x-nullable": false
            },
            {
              "name": "updateAccount",
              "in": "body",
              "required": true,
              "description": "VppUpdateAccountName.",
              "schema": {
                "$ref": "#/definitions/VppUpdateAccountName"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request.<br /><ol><li>If the request missing AccountId</li><li>If the request body is missing</li></ol>"
            },
            "201": {
              "description": ""
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            },
            "403": {
              "description": "Failed operation due to non-existing account."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>1308 - The Apple App Store License account name '{0}' is already added to the system, please use another name.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/licenseAccounts/{accountId}/actions/cleanUp": {
        "post": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Clean up the specified App Store License account.",
          "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br><b>(Available Since MobiControl v15.3.0)</b></br><p><br />Clean up the specified App Store License account by revoking all licenses and users NOT assigned or created by this instance of MobiControl.</p>\r\n            Call Type : Async Call.",
          "operationId": "AppleVolumePurchaseProgramAccount_CleanupAccount",
          "parameters": [
            {
              "type": "string",
              "name": "accountId",
              "in": "path",
              "required": true,
              "description": "The public identifier of App Store Records in MobiControl.",
              "x-nullable": false
            }
          ],
          "responses": {
            "201": {
              "description": ""
            },
            "400": {
              "description": "Bad request."
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            },
            "403": {
              "description": "Failed operation due to non-existing account."
            },
            "422": {
              "description": "<ol>\r\n  <li>1340 - The license account is owned by a different MobiControl instance</li>\r\n  <li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li>\r\n  <li>1343 - The Apple service cannot be reached.</li>\r\n  <li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li>\r\n  <li>1328 - The Apple App Store License Management account token is invalid.</li>\r\n  <li>1346 - The Apple App Store License Management account token is revoked.</li>\r\n  <li>1333 - The App Store License Management services returned an unexpected error.</li>\r\n  <li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li>\r\n</ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/licenseAccounts/{accountId}/actions/reclaimOwnership": {
        "post": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Reclaim ownership of the specified App Store License account.",
          "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br><b>(Available Since MobiControl v15.3.0)</b></br>",
          "operationId": "AppleVolumePurchaseProgramAccount_ClaimAccountOwnership",
          "parameters": [
            {
              "type": "string",
              "name": "accountId",
              "in": "path",
              "required": true,
              "description": "Identifier of the target account.",
              "x-nullable": false
            }
          ],
          "responses": {
            "201": {
              "description": ""
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            },
            "400": {
              "description": "Bad request."
            },
            "403": {
              "description": "Failed operation due to non-existing account."
            },
            "422": {
              "description": "<ol>\r\n  <li>1343 - The Apple service cannot be reached</li>\r\n  <li>1336 - Failed to claim ownership of Apple App Store License Account ID</li>\r\n  <li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li>\r\n  <li>1328 - The Apple App Store License Management account token is invalid.</li>\r\n  <li>1346 - The Apple App Store License Management account token is revoked.</li>\r\n  <li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li>\r\n  <li>1333 - The App Store License Management services returned an unexpected error.</li>\r\n  <li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li>\r\n</ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/licenseAccounts/{accountId}/actions/test": {
        "post": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Tests the validity of the Automated Device Enrollment account.",
          "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AppleVolumePurchaseProgramAccount_TestAccount",
          "parameters": [
            {
              "type": "string",
              "name": "accountId",
              "in": "path",
              "required": true,
              "description": "The public identifier of App Store Records in MobiControl.",
              "x-nullable": false
            }
          ],
          "responses": {
            "201": {
              "description": ""
            },
            "400": {
              "description": "Bad request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Failed operation due to non-existing account."
            },
            "422": {
              "description": "<ol>\r\n  <li> 1340 - The license account is owned by a different MobiControl instance </li>\r\n  <li>1304 - Apple's App Store License Management service is unavailable.  Retry after {0} (UTC).</li>\r\n  <li>1328 - The Apple App Store License Management account token is invalid.</li>\r\n  <li>1346 - The Apple App Store License Management account token is revoked.</li>\r\n  <li>1343 - The Apple service cannot be reached.</li>\r\n  <li>1303 - The Apple's App Store License Management token you are attempting to upload has expired.</li>\r\n  <li>1333 - The App Store License Management services returned an unexpected error.</li>\r\n  <li>1349 - An unexpected error occurred while communicating with the App Store License Management service (Error: {0}).</li>\r\n</ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/apple/appleBusinessManager/licenseAccounts/settings": {
        "get": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Returns the settings for App Store License Management.",
          "description": "<br />Requires the caller to be granted the \"MobiControl Access\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "AppleVolumePurchaseProgramAccount_GetVppSettings",
          "responses": {
            "400": {
              "description": "Bad request."
            },
            "401": {
              "description": "Unauthorized."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Apple Volume Purchase Program Account"
          ],
          "summary": "Set settings for App Store License Management.",
          "description": "<br />Requires the caller to be granted the \"Manage Servers and Global Settings\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AppleVolumePurchaseProgramAccount_SetVppSettings",
          "parameters": [
            {
              "name": "vppSettings",
              "in": "body",
              "required": true,
              "description": "VppSettings.",
              "schema": {
                "$ref": "#/definitions/VppSettings"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/common/policies/{referenceId}": {
        "get": {
          "tags": [
            "App Management Apple Policies"
          ],
          "summary": "Returns Apple app management policy details.",
          "description": "Returns Apple app management policy details\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementApplePolicies_GetRule",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Policy reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/AppleAppCatalogRuleSummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "App Management Apple Policies"
          ],
          "summary": "Updates Apple app management policy.",
          "description": "Updates Apple app management policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementApplePolicies_UpdateRule",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Policy reference ID.",
              "x-nullable": false
            },
            {
              "name": "rule",
              "in": "body",
              "required": true,
              "description": "Update Apple App Policy request.",
              "schema": {
                "$ref": "#/definitions/AppleAppCatalogRuleUpdateRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/AppleAppCatalogRuleSummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/common/policies": {
        "post": {
          "tags": [
            "App Management Apple Policies"
          ],
          "summary": "Creates Apple app management policy.",
          "description": "Creates Apple app management policy\r\n            <br /><br />\r\n            Requires the call be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementApplePolicies_CreateRule",
          "parameters": [
            {
              "name": "rule",
              "in": "body",
              "required": true,
              "description": "Apple App Policy details.",
              "schema": {
                "$ref": "#/definitions/AppleAppCatalogRule"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/AppleAppCatalogRuleSummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/{referenceId}": {
        "delete": {
          "tags": [
            "App Management Apple Policies"
          ],
          "summary": "Deletes an Apple app management policy.",
          "description": "Deletes an Apple app management policy.\r\n             <br />\r\n             Requires the caller be granted the \"Manage App Policies\" permission.\r\n             <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AppManagementApplePolicies_DeleteRule",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The public identifier of App Store Records in MobiControl.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK."
            },
            "401": {
              "description": "Unauthorized."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>1 - Reference Id is either null, empty or consists only of white space.</li><li>2 - The given reference Id is not in valid format</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/macOS/policies/{referenceId}/apps": {
        "put": {
          "tags": [
            "App Management Apple Policies"
          ],
          "summary": "Updates the specified macOS App Policy.",
          "description": "Updates MacOS applications for selected Apple app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementApplePolicies_AssociateMacAppsWithAppCatalogRule",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the app policy.",
              "x-nullable": false
            },
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "AssociateMacAppsWithAppCatalogRuleRequest.",
              "schema": {
                "$ref": "#/definitions/AssociateMacAppsWithAppCatalogRuleRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>5131 - one or more MacOS app store apps has invalid App Store License Account configuration</li><li>5135 - one or more MacOS app store apps has invalid AppConfiguration configuration</li><li>5136 - one or more MacOS app store apps has invalid ConfigurationURI configuration</li><li>5137 - one or more MacOS app store apps has invalid ManagedAssociatedDomains configuration</li><li>5138 - one or more MacOS app store apps has invalid VppApplicationID configuration</li><li>5139 - one or more MacOS app store apps has invalid TimesPromptToInstall or PromptToInstall configuration</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "App Management Apple Policies"
          ],
          "summary": "Returns a list of macOS applications for an App Policy.",
          "description": "Returns MacOS applications for selected Apple app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementApplePolicies_GetMacAppsByRuleId",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the app policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/AppCatalogRuleMacApps"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/iOS/policies/{referenceId}/apps": {
        "put": {
          "tags": [
            "App Management Apple Policies"
          ],
          "summary": "Updates the specified iOS App Policy.",
          "description": "Updates iOS apps for specified Apple app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementApplePolicies_AssociateIosAppsWithAppCatalogRule",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the app policy.",
              "x-nullable": false
            },
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "AssociateIosAppsWithAppCatalogRuleRequest.",
              "schema": {
                "$ref": "#/definitions/AssociateIosAppsWithAppCatalogRuleRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>5131 - one or more iOS app store apps has invalid App Store License Account configuration</li><li>5132 - one or more iOS app store apps has invalid TimesPromptToInstall configuration</li><li>5133 - one or more mandatory iOS app store apps has invalid TimesPromptToInstall or PromptToInstall configuration</li><li>5134 - one or more iOS app store apps has invalid VppAccountGuid or VppApplicationId configuration</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "App Management Apple Policies"
          ],
          "summary": "Returns a list of iOS apps for an App Policy.",
          "description": "Returns iOS apps for selected Apple app management policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementApplePolicies_GetIosAppsByRuleId",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference ID of the app policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK.",
              "schema": {
                "$ref": "#/definitions/AppCatalogRuleIosApps"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/appManagement/apple/{referenceId}/banner": {
        "put": {
          "tags": [
            "App Management Apple Policies"
          ],
          "summary": "Updates App Policy Banner.",
          "description": "Updates the App Policy banner of the provided policy reference ID.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /><p>Content-Type of the Request body must be <code>multipart/related; boundary={boundary identifier}</code><br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br />\r\n            Multipart request body must contain the following parts:</p><ol><li>image file - Contains image file with one of the following Content-Type:\r\n            <pre>image/gif</pre><pre>image/png</pre><pre>image/jpeg</pre><pre>image/bmp</pre><pre>image/x-icon</pre><br />\r\n            Mandatory headers <br />\r\n            Content-Disposition: attachment; filename=\"{image-filename}\"<br /><br />\r\n            Optional headers <br />\r\n            Content-Type-Encoding: binary<br /></li></ol>\r\n            The maximum size of the image file to be uploaded when using this endpoint is <u>1 MB</u>.<br /><br />\r\n            The example below shows an banner image upload request.\r\n            <br /><pre>\r\n            Content-Type: multipart/related; boundary=foo_bar_baz\r\n            Content-Length: number_of_bytes_in_entire_request_body\r\n            <br />\r\n            --foo_bar_baz\r\n            Content-Type: image/jpeg\r\n            <br />\r\n            Content-Disposition: attachment; filename=\"image_name.jpg\"\r\n            <br />\r\n            image data\r\n            --foo_bar_baz--\r\n            </pre>",
          "operationId": "AppManagementApplePolicies_AddRuleBanner",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "App Policy reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Banner image uploaded successfully."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "415": {
              "description": "Unsupported media type."
            },
            "422": {
              "description": "Business Error<br />The following ErrorCode values can be returned:.<br /><ol><li>5120 - file has invalid format, not one of .ico, .gif, .png, .bmp, .jpeg or .jpg</li><li>5121 - file exceeds 1MB limit.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "App Management Apple Policies"
          ],
          "summary": "Deletes App Policy Banner.",
          "description": "Deletes an App Policy banner of the provided reference ID.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementApplePolicies_DeleteRuleBanner",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "App Policy reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "App Policy banner deleted successfully."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "App Management Apple Policies"
          ],
          "summary": "Returns App Policy Banner.",
          "description": "Returns an App Policy banner of the provided policy reference ID.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View App Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />",
          "operationId": "AppManagementApplePolicies_GetRuleBanner",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "App Policy reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "App Policy banner retrieved successfully.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/linux/{referenceId}": {
        "delete": {
          "tags": [
            "Linux Enrollment Policies"
          ],
          "summary": "Deletes the linux enrollment policy.",
          "description": "This API deletes the specified linux policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "LinuxEnrollmentPolicies_DeleteLinuxEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "No Content."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>7401: Can't delete default enrollment policy</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Linux Enrollment Policies"
          ],
          "summary": "Returns the linux enrollment policy details.",
          "description": "This API returns the details of specified linux enrollment policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"View Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "LinuxEnrollmentPolicies_GetLinuxEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/LinuxEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Linux Enrollment Policies"
          ],
          "summary": "Updates the specified Linux enrollment policy.",
          "description": "This API updates the specified Linux enrollment policy.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "LinuxEnrollmentPolicies_UpdateLinuxEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            },
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/UpdateLinuxEnrollmentPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/LinuxEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>7403 -  The database already contains enrollment policy named '{0}'. Please enter a different name.</li><li>7410 - Authorization policy referenced with this enrollment policy is associated with another enrollment policy.</li><li>7600 -  Authorization policy referenced with this enrollment policy has terms and conditions associated with it.</li><li>7601 -  Authorization policy referenced with this enrollment policy is other than No Password, Password or LDAP type.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/linux": {
        "post": {
          "tags": [
            "Linux Enrollment Policies"
          ],
          "summary": "Creates a new Linux enrollment policy.",
          "description": "This API creates a new Linux enrollment policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage Enrollment Policies\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "LinuxEnrollmentPolicies_CreateLinuxEnrollmentPolicy",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "Linux Enrollment Policy.",
              "schema": {
                "$ref": "#/definitions/LinuxEnrollmentPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/LinuxEnrollmentPolicySummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>7410 - Authorization policy referenced with this enrollment policy is associated with another enrollment policy.</li><li>7600: Authorization policy referenced with this enrollment policy has terms and conditions associated with it.</li><li>7601: Authorization policy referenced with this enrollment policy is other than No Password, Password or LDAP type.</li><li>7603: The database already contains enrollment policy named {0}. Please enter a different name.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/linux/{referenceId}/actions/downloadConfig": {
        "get": {
          "tags": [
            "Linux Enrollment Policies"
          ],
          "summary": "Returns the linux enrollment policy INI config file.",
          "description": "This API returns the INI config file of specified linux enrollment policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"View Enrollment Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b><br />",
          "operationId": "LinuxEnrollmentPolicies_GetLinuxINIConfigFile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/linux/{referenceId}/actions/email": {
        "post": {
          "tags": [
            "Linux Enrollment Policies"
          ],
          "summary": "Emails linux Enrollment Policy details.",
          "description": "This API emails linux Enrollment Policy details to the targetted recipient\r\n            <br /><br />\r\n            Requires the caller be granted the 'Manage Enrollment Policies' permission.\r\n            <br /><b>(Available since MobiControl v15.6.0)</b><br />",
          "operationId": "LinuxEnrollmentPolicies_EmailEnrollmentPolicyInfo",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            },
            {
              "name": "parameter",
              "in": "body",
              "required": true,
              "description": "Parameters required for dispatching email.",
              "schema": {
                "$ref": "#/definitions/LinuxEnrollmentPolicyEmailInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Success."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>6021 - Failed to send email.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/linux/{referenceId}/agents/{agentReferenceId}": {
        "get": {
          "tags": [
            "Linux Enrollment Policies"
          ],
          "summary": "Returns the linux enrollment policy Agent Installer.",
          "description": "This API returns the Agent Installer of specified linux enrollment policy\r\n            <br /><br />\r\n            Requires the caller be granted the \"View Enrollment Policies\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b><br />",
          "operationId": "LinuxEnrollmentPolicies_GetLinuxAgent",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for an enrollment policy.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "agentReferenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for linux agents.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/windowsModern/{referenceId}": {
        "get": {
          "tags": [
            "Windows Modern Enrollment Policies"
          ],
          "operationId": "WindowsModernEnrollmentPolicies_GetWindowsModernEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/WindowsModernEnrollmentPolicySummary"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Windows Modern Enrollment Policies"
          ],
          "operationId": "WindowsModernEnrollmentPolicies_DeleteWindowsModernEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Windows Modern Enrollment Policies"
          ],
          "operationId": "WindowsModernEnrollmentPolicies_UpdateWindowsModernEnrollmentPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            },
            {
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateWindowsModernEnrollmentPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/WindowsModernEnrollmentPolicySummary"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/windowsModern": {
        "post": {
          "tags": [
            "Windows Modern Enrollment Policies"
          ],
          "operationId": "WindowsModernEnrollmentPolicies_CreateWindowsModernEnrollmentPolicy",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/WindowsModernEnrollmentPolicy"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/WindowsModernEnrollmentPolicySummary"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentPolicies/windowsModern/{referenceId}/actions/downloadPackage": {
        "get": {
          "tags": [
            "Windows Modern Enrollment Policies"
          ],
          "operationId": "WindowsModernEnrollmentPolicies_DownloadWindowsModernProvisioningPackage",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "includeCertificateChain",
              "in": "query",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/appProtectionPolicies/settings": {
        "post": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Creates a new Microsoft App Protection Policy integration connection.",
          "description": "Creates a new Microsoft App Protection Policy integration connection to prepare for Microsoft 365 integration.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_SaveSettings",
          "parameters": [
            {
              "name": "settings",
              "in": "body",
              "required": true,
              "description": "Microsoft App Protection Policy integration settings.",
              "schema": {
                "$ref": "#/definitions/Microsoft365AppProtectionPolicySettings"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Success (No content)."
            },
            "400": {
              "description": "Invalid parameter.\r\n            <ol><li>Failed to save the Microsoft App Protection Policy integration settings because it is missing in request.</li><li>Failed to save the Microsoft App Protection Policy integration settings because the name is missing.</li><li>Failed to save the Microsoft App Protection Policy integration settings because the name exceeded the 50-character limit.</li><li>Failed to save the Microsoft App Protection Policy integration settings because the Azure tenant ID is missing.</li><li>Failed to save the Microsoft App Protection Policy integration settings because the Azure tenant ID is invalid.</li></ol>"
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8726 - Failed to save the Microsoft App Protection Policy integration settings because a connection already exists.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Returns the Microsoft App Protection Policy integration settings.",
          "description": "Retrieves Microsoft App Protection Policy integration settings to prepare for Microsoft 365 integration.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_GetSettings",
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/Microsoft365AppProtectionPolicySettings"
              }
            },
            "204": {
              "description": "Success (No content).",
              "schema": {
                "$ref": "#/definitions/Microsoft365AppProtectionPolicySettings"
              }
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Deletes the Microsoft App Protection Policy integration.",
          "description": "Disconnects the Microsoft App Protection Policy integration. This will delete the connection from the console and unlink your Microsoft account from MobiControl.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_DeleteSettings",
          "responses": {
            "204": {
              "description": "Success (No content)."
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8707 - Failed to disconnect the Microsoft App Protection Policy integration because there is no connection.</li><li>8708 - Failed to disconnect the Microsoft App Protection Policy integration because of error(s). Please consult the Management Server logs for more information.</li><li>8714 - Failed to disconnect the Microsoft App Protection Policy integration because of SOTI Service communication error(s). Please consult the Management Server logs for more information.</li><li>8716 - Failed to disconnect the Microsoft App Protection Policy integration because access to SOTI Service was forbidden.</li><li>8718 - Failed to disconnect the Microsoft App Protection Policy integration because access to SOTI Service was unauthorized.</li><li>8720 - Failed to disconnect the Microsoft App Protection Policy integration because invalid request was sent to SOTI Service.</li><li>8722 - Failed to disconnect the Microsoft App Protection Policy integration because SOTI Service is unavailable.</li><li>8724 - Failed to disconnect the Microsoft App Protection Policy integration because of SOTI Service internal error(s). Please contact SOTI for support.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/appProtectionPolicies": {
        "get": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Returns a list of Microsoft App Protection policies.",
          "description": "Retrieves Microsoft App Protection policies from Microsoft Endpoint Manager.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_GetAppProtectionPolicies",
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AppProtectionPolicySummary"
                }
              }
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8707 - Failed to retrieve Microsoft App Protection policies because there is no connection.</li><li>8708 - Failed to retrieve Microsoft App Protection policies because of error(s). Please consult the Management Server logs for more information.</li><li>8714 - Failed to retrieve Microsoft App Protection policies because of SOTI Service communication error(s). Please consult the Management Server logs for more information.</li><li>8716 - Failed to retrieve Microsoft App Protection policies because access to SOTI Service was forbidden.</li><li>8718 - Failed to retrieve Microsoft App Protection policies because access to SOTI Service was unauthorized.</li><li>8720 - Failed to retrieve Microsoft App Protection policies because invalid request was sent to SOTI Service.</li><li>8722 - Failed to retrieve Microsoft App Protection policies because SOTI Service is unavailable.</li><li>8724 - Failed to retrieve Microsoft App Protection policies because of SOTI Service internal error(s). Please contact SOTI for support.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/appProtectionPolicies/android": {
        "post": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Creates a new Microsoft App Protection policy for Android.",
          "description": "Creates a new Microsoft App Protection policy for Android.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_CreateAndroidAppProtectionPolicy",
          "parameters": [
            {
              "name": "policy",
              "in": "body",
              "required": true,
              "description": "Android App Protection policy.",
              "schema": {
                "$ref": "#/definitions/AndroidAppProtectionPolicyRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/AppProtectionPolicySummary"
              }
            },
            "400": {
              "description": "Invalid parameter.\r\n            <ol><li>Failed to create a new Microsoft App Protection policy because the policy data is missing.</li><li>Failed to create a new Microsoft App Protection policy because the policy name is missing.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy name exceeded the 100-character limit.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy description exceeded the 2000-character limit.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy is missing 'Disable Save As' when 'Allowed Outbound Destinations' is set to 'Policy Managed Apps'.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy is missing 'Allowed Outbound Destinations' when 'Disable Save As' is true.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy 'Allowed Outbound Destinations' should be set to 'Policy Managed Apps' when 'Disable Save As' is true.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the Data Storage Location '{location}' is not supported.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Unmanaged Web Browser data is missing.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Unmanaged Web Browser ID is missing.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Unmanaged Web Browser Name is missing.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Unmanaged Web Browser ID exceeded the 200-character limit.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Unmanaged Web Browser Name exceeded the 200-character limit.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the PIN type 'PIN Type' is invalid.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the minimum PIN length 'Min PIN Length' is invalid.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Days Before Reset PIN value 'n' is not within allowable range 1-65535.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Days Before Reset PIN value 'n' is not 0 when Reset PIN is disabled.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Access Requirement Timeout value 'n' is not within allowable range 1-65535.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the target group ID '{group ID}' is invalid.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because duplicate target group ID '{group ID}' found in the request.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy managed apps are missing.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because of empty or invalid target application name.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because of empty or invalid target application ID.</li></ol>"
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8709 - Failed to create the Microsoft App Protection policy '{display name}' because there is no connection.</li><li>8710 - Failed to create the Microsoft App Protection policy '{display name}' because of error(s). Please consult the Management Server logs for more information.</li><li>8715 - Failed to create the Microsoft App Protection policy '{display name}' because of SOTI Service communication error(s). Please consult the Management Server logs for more information.</li><li>8717 - Failed to create the Microsoft App Protection policy '{display name}' because access to SOTI Service was forbidden.</li><li>8719 - Failed to create the Microsoft App Protection policy '{display name}' because access to SOTI Service was unauthorized.</li><li>8721 - Failed to create the Microsoft App Protection policy '{display name}' because invalid request was sent to SOTI Service.</li><li>8723 - Failed to create the Microsoft App Protection policy '{display name}' because SOTI Service is unavailable.</li><li>8725 - Failed to create the Microsoft App Protection policy '{display name}' because of SOTI Service internal error(s). Please contact SOTI for support.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/appProtectionPolicies/ios": {
        "post": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Creates a new Microsoft App Protection policy for iOS.",
          "description": "Creates a new Microsoft App Protection policy for iOS.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_CreateIosAppProtectionPolicy",
          "parameters": [
            {
              "name": "policy",
              "in": "body",
              "required": true,
              "description": "iOS App Protection policy.",
              "schema": {
                "$ref": "#/definitions/IosAppProtectionPolicyRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/AppProtectionPolicySummary"
              }
            },
            "400": {
              "description": "Invalid parameter.\r\n            <ol><li>Failed to create a new Microsoft App Protection policy because the policy data is missing.</li><li>Failed to create a new Microsoft App Protection policy because the policy name is missing.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy name exceeded the 100-character limit.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy description exceeded the 2000-character limit.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy is missing 'Disable Save As' when 'Allowed Outbound Destinations' is set to 'Policy Managed Apps'.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy is missing 'Allowed Outbound Destinations' when 'Disable Save As' is true.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy 'Allowed Outbound Destinations' should be set to 'Policy Managed Apps' when 'Disable Save As' is true.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the Data Storage Location '{location}' is not supported.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Unmanaged Web Browser Protocol is missing.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Unmanaged Web Browser Protocol exceeded the 200-character limit.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the PIN type 'PIN Type' is invalid.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the minimum PIN length 'Min PIN Length' is invalid.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Days Before Reset PIN value 'n' is not within allowable range 1-65535.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Days Before Reset PIN value 'n' is not 0 when Reset PIN is disabled.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because Access Requirement Timeout value 'n' is not within allowable range 1-65535.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the target group ID '{group ID}' is invalid.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because duplicate target group ID '{group ID}' found in the request.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because the policy managed apps are missing.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because of empty or invalid target application name.</li><li>Failed to create the Microsoft App Protection policy '{display name}' because of empty or invalid target application ID.</li></ol>"
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8709 - Failed to create the Microsoft App Protection policy '{display name}' because there is no connection.</li><li>8710 - Failed to create the Microsoft App Protection policy '{display name}' because of error(s). Please consult the Management Server logs for more information.</li><li>8715 - Failed to create the Microsoft App Protection policy '{display name}' because of SOTI Service communication error(s). Please consult the Management Server logs for more information.</li><li>8717 - Failed to create the Microsoft App Protection policy '{display name}' because access to SOTI Service was forbidden.</li><li>8719 - Failed to create the Microsoft App Protection policy '{display name}' because access to SOTI Service was unauthorized.</li><li>8721 - Failed to create the Microsoft App Protection policy '{display name}' because invalid request was sent to SOTI Service.</li><li>8723 - Failed to create the Microsoft App Protection policy '{display name}' because SOTI Service is unavailable.</li><li>8725 - Failed to create the Microsoft App Protection policy '{display name}' because of SOTI Service internal error(s). Please contact SOTI for support.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/appProtectionPolicies/{appFamily}/{policyId}": {
        "delete": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Deletes the specified Microsoft App Protection policy.",
          "description": "Deletes the specified Microsoft App Protection policy.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_DeleteAppProtectionPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "appFamily",
              "in": "path",
              "required": true,
              "description": "App Protection policy family.",
              "x-schema": {
                "$ref": "#/definitions/AppFamily"
              },
              "x-nullable": false,
              "enum": [
                "Android",
                "Ios"
              ],
              "x-enumType": "AppFamily"
            },
            {
              "type": "string",
              "name": "policyId",
              "in": "path",
              "required": true,
              "description": "Policy ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Success (No content)."
            },
            "400": {
              "description": "Invalid parameter.\r\n            <ol><li>Failed to delete the specified Microsoft App Protection policy because the policy ID is missing.</li><li>Failed to delete the specified Microsoft App Protection policy because the policy ID '{policy ID}' is invalid.</li><li>Failed to delete the specified Microsoft App Protection policy of ID '{policy ID}' because the policy family '{App family}' is not supported.</li></ol>"
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8709 - Failed to delete the specified Microsoft App Protection policy of ID '{policy ID}' because there is no connection.</li><li>8710 - Failed to delete the specified Microsoft App Protection policy of ID '{policy ID}' because of error(s). Please consult the Management Server logs for more information.</li><li>8711 - Failed to delete the specified Microsoft App Protection policy of ID '{policy ID}' because the policy was not found.</li><li>8715 - Failed to delete the specified Microsoft App Protection policy of ID '{policy ID}' because of SOTI Service communication error(s). Please consult the Management Server logs for more information.</li><li>8717 - Failed to delete the specified Microsoft App Protection policy of ID '{policy ID}' because access to SOTI Service was forbidden.</li><li>8719 - Failed to delete the specified Microsoft App Protection policy of ID '{policy ID}' because access to SOTI Service was unauthorized.</li><li>8721 - Failed to delete the specified Microsoft App Protection policy of ID '{policy ID}' because invalid request was sent to SOTI Service.</li><li>8723 - Failed to delete the specified Microsoft App Protection policy of ID '{policy ID}' because SOTI Service is unavailable.</li><li>8725 - Failed to delete the specified Microsoft App Protection policy of ID '{policy ID}' because of SOTI Service internal error(s). Please contact SOTI for support.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/appProtectionPolicies/azureGroups": {
        "get": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Returns a list of Microsoft Azure Active Directory groups.",
          "description": "Returns a list of Microsoft Azure Active Directory groups.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_GetAzureGroups",
          "parameters": [
            {
              "type": "string",
              "name": "filter",
              "in": "query",
              "required": true,
              "description": "Filter for group name.",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AzureActiveDirectoryGroup"
                }
              }
            },
            "400": {
              "description": "Invalid parameter.\r\n            <ol><li>Failed to retrieve Microsoft Azure Active Directory groups summary because the filter exceeded the 120-character limit.</li></ol>"
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8707 - Failed to retrieve Microsoft Azure Active Directory groups summary because there is no connection.</li><li>8708 - Failed to retrieve Microsoft Azure Active Directory groups summary because of error(s). Please consult the Management Server logs for more information.</li><li>8714 - Failed to retrieve Microsoft Azure Active Directory groups summary because of SOTI Service communication error(s). Please consult the Management Server logs for more information.</li><li>8716 - Failed to retrieve Microsoft Azure Active Directory groups summary because access to SOTI Service was forbidden.</li><li>8718 - Failed to retrieve Microsoft Azure Active Directory groups summary because access to SOTI Service was unauthorized.</li><li>8720 - Failed to retrieve Microsoft Azure Active Directory groups summary because invalid request was sent to SOTI Service.</li><li>8722 - Failed to retrieve Microsoft Azure Active Directory groups summary because SOTI Service is unavailable.</li><li>8724 - Failed to retrieve Microsoft Azure Active Directory groups summary because of SOTI Service internal error(s). Please contact SOTI for support.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/appProtectionPolicies/android/{policyId}": {
        "get": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Returns the specified Android App Protection policy.",
          "description": "Retrieves the specified Android App Protection policy detail information from Microsoft Endpoint Manager.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_GetAndroidPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "policyId",
              "in": "path",
              "required": true,
              "description": "Policy ID of the App Protection policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/AndroidAppProtectionPolicy"
              }
            },
            "400": {
              "description": "Invalid parameter.\r\n            <ol><li>Failed to retrieve the specified Microsoft App Protection policy information because the policy ID is missing.</li><li>Failed to retrieve the specified Microsoft App Protection policy information because the policy ID '{policy ID}' is invalid.</li></ol>"
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8709 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because there is no connection.</li><li>8710 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because of error(s). Please consult the Management Server logs for more information.</li><li>8711 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because the policy was not found.</li><li>8715 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because of SOTI Service communication error(s). Please consult the Management Server logs for more information.</li><li>8717 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because access to SOTI Service was forbidden.</li><li>8719 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because access to SOTI Service was unauthorized.</li><li>8721 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because invalid request was sent to SOTI Service.</li><li>8723 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because SOTI Service is unavailable.</li><li>8725 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because of SOTI Service internal error(s). Please contact SOTI for support.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Updates the specified Android App Protection policy.",
          "description": "Updates the specified Android App Protection policy.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_UpdateAndroidAppProtectionPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "policyId",
              "in": "path",
              "required": true,
              "description": "App Protection policy Id.",
              "x-nullable": false
            },
            {
              "name": "policy",
              "in": "body",
              "required": true,
              "description": "App Protection policy to be updated.",
              "schema": {
                "$ref": "#/definitions/AndroidAppProtectionPolicyRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Success (No content)."
            },
            "400": {
              "description": "Invalid parameter.\r\n            <ol><li>Failed to update the specified Microsoft App Protection policy because the policy ID is missing or invalid.</li><li>Failed to update the specified Microsoft App Protection policy because the policy data is missing.</li><li>Failed to update the specified Microsoft App Protection policy because the policy name is missing.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy name exceeded the 100-character limit.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy description exceeded the 2000-character limit.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy is missing 'Disable Save As' when 'Allowed Outbound Destinations' is set to 'Policy Managed Apps'.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy is missing 'Allowed Outbound Destinations' when 'Disable Save As' is true.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy 'Allowed Outbound Destinations' should be set to 'Policy Managed Apps' when 'Disable Save As' is true.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the Data Storage Location '{location}' is not supported.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Unmanaged Web Browser data is missing.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Unmanaged Web Browser ID is missing.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Unmanaged Web Browser Name is missing.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Unmanaged Web Browser ID exceeded the 200-character limit.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Unmanaged Web Browser Name exceeded the 200-character limit.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the PIN type 'PIN Type' is invalid.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the minimum PIN length 'Min PIN Length' is invalid.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Days Before Reset PIN value 'n' is not within allowable range 1-65535.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Days Before Reset PIN value 'n' is not 0 when Reset PIN is disabled.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Access Requirement Timeout value 'n' is not within allowable range 1-65535.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the target group ID '{group ID}' is invalid. </li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because duplicate target group ID '{group ID}' found in the request.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy managed apps are missing.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because of empty or invalid target application name.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because of empty or invalid target application ID.</li></ol>"
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8709 - Failed to update the specified Microsoft App Protection policy '{display name}' because there is no connection.</li><li>8710 - Failed to update the specified Microsoft App Protection policy '{display name}' because of error(s). Please consult the Management Server logs for more information.</li><li>8711 - Failed to update the specified Microsoft App Protection policy '{display name}' because the policy was not found.</li><li>8715 - Failed to update the specified Microsoft App Protection policy '{display name}' because of SOTI Service communication error(s). Please consult the Management Server logs for more information.</li><li>8717 - Failed to update the specified Microsoft App Protection policy '{display name}' because access to SOTI Service was forbidden.</li><li>8719 - Failed to update the specified Microsoft App Protection policy '{display name}' because access to SOTI Service was unauthorized.</li><li>8721 - Failed to update the specified Microsoft App Protection policy '{display name}' because invalid request was sent to SOTI Service.</li><li>8723 - Failed to update the specified Microsoft App Protection policy '{display name}' because SOTI Service is unavailable.</li><li>8725 - Failed to update the specified Microsoft App Protection policy '{display name}' because of SOTI Service internal error(s). Please contact SOTI for support.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/appProtectionPolicies/ios/{policyId}": {
        "get": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Returns the specified iOS App Protection policy.",
          "description": "Retrieves the specified iOS App Protection policy detail information from Microsoft Endpoint Manager.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_GetIosPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "policyId",
              "in": "path",
              "required": true,
              "description": "Policy ID of the App Protection policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/IosAppProtectionPolicy"
              }
            },
            "400": {
              "description": "Invalid parameter.\r\n            <ol><li>Failed to retrieve the specified Microsoft App Protection policy information because the policy ID is missing.</li><li>Failed to retrieve the specified Microsoft App Protection policy information because the policy ID '{policyId}' is invalid.</li></ol>"
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8709 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because there is no connection.</li><li>8710 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because of error(s). Please consult the Management Server logs for more information.</li><li>8711 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because the policy was not found.</li><li>8715 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because of SOTI Service communication error(s). Please consult the Management Server logs for more information.</li><li>8717 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because access to SOTI Service was forbidden.</li><li>8719 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because access to SOTI Service was unauthorized.</li><li>8721 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because invalid request was sent to SOTI Service.</li><li>8723 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because SOTI Service is unavailable.</li><li>8725 - Failed to retrieve the specified Microsoft App Protection policy information of ID '{policy ID}' because of SOTI Service internal error(s). Please contact SOTI for support.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Microsoft365 App Protection Policies"
          ],
          "summary": "Updates the specified iOS App Protection policy.",
          "description": "Updates the specified iOS App Protection policy.\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v15.6.0)</b>",
          "operationId": "Microsoft365AppProtectionPolicies_UpdateIosAppProtectionPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "policyId",
              "in": "path",
              "required": true,
              "description": "App Protection policy Id.",
              "x-nullable": false
            },
            {
              "name": "policy",
              "in": "body",
              "required": true,
              "description": "App Protection policy to be updated.",
              "schema": {
                "$ref": "#/definitions/IosAppProtectionPolicyRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Success (No content)."
            },
            "400": {
              "description": "Invalid parameter.\r\n            <ol><li>Failed to update the specified Microsoft App Protection policy because the policy data is missing.</li><li>Failed to update the specified Microsoft App Protection policy because the policy name is missing.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy name exceeded the 100-character limit.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy description exceeded the 2000-character limit.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy is missing 'Disable Save As' when 'Allowed Outbound Destinations' is set to 'Policy Managed Apps'.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy is missing 'Allowed Outbound Destinations' when 'Disable Save As' is true.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy 'Allowed Outbound Destinations' should be set to 'Policy Managed Apps' when 'Disable Save As' is true.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the Data Storage Location '{location}' is not supported.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Unmanaged Web Browser Protocol is missing.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Unmanaged Web Browser Protocol exceeded the 200-character limit.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the PIN type 'PIN Type' is invalid.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the minimum PIN length 'Min PIN Length' is invalid.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Days Before Reset PIN value 'n' is not within allowable range 1-65535.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Days Before Reset PIN value 'n' is not 0 when Reset PIN is disabled.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because Access Requirement Timeout value 'n' is not within allowable range 1-65535.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the target group ID '{group ID}' is invalid.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because duplicate target group ID '{group ID}' found in the request.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because the policy managed apps are missing.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because of empty or invalid target application name.</li><li>Failed to update the specified Microsoft App Protection policy '{display name}' because of empty or invalid target application ID.</li></ol>"
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8709 - Failed to update the specified Microsoft App Protection policy '{display name}' because there is no connection.</li><li>8710 - Failed to update the specified Microsoft App Protection policy '{display name}' because of error(s). Please consult the Management Server logs for more information.</li><li>8711 - Failed to update the specified Microsoft App Protection policy '{display name}' because the policy was not found.</li><li>8715 - Failed to update the specified Microsoft App Protection policy '{display name}' because of SOTI Service communication error(s). Please consult the Management Server logs for more information.</li><li>8717 - Failed to update the specified Microsoft App Protection policy '{display name}' because access to SOTI Service was forbidden.</li><li>8719 - Failed to update the specified Microsoft App Protection policy '{display name}' because access to SOTI Service was unauthorized.</li><li>8721 - Failed to update the specified Microsoft App Protection policy '{display name}' because invalid request was sent to SOTI Service.</li><li>8723 - Failed to update the specified Microsoft App Protection policy '{display name}' because SOTI Service is unavailable.</li><li>8725 - Failed to update the specified Microsoft App Protection policy '{display name}' because of SOTI Service internal error(s). Please contact SOTI for support.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/conditionalAccess/settings": {
        "get": {
          "tags": [
            "Microsoft365 Conditional Access"
          ],
          "summary": "Gets Latest Microsoft 365 Integration Status.",
          "description": "Returns Microsoft 365 Integration status and the time when the last sync time.Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><B>(Available Since MobiControl v15.5.0)</B>",
          "operationId": "Microsoft365ConditionalAccess_GetStatusSummary",
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/Microsoft365ConditionalAccessSummary"
              }
            },
            "204": {
              "description": "Success(No content).",
              "schema": {
                "$ref": "#/definitions/Microsoft365ConditionalAccessSummary"
              }
            },
            "403": {
              "description": "User is not authorized or reference does not exist."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Microsoft365 Conditional Access"
          ],
          "summary": "Updates Microsoft 365 Integration Credentials.",
          "description": "Updates the Azure Tenant ID to prepare for Microsoft 365 Integration. Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><B>(Available Since MobiControl v15.5.0)</B>",
          "operationId": "Microsoft365ConditionalAccess_SaveSettings",
          "parameters": [
            {
              "name": "settings",
              "in": "body",
              "required": true,
              "description": "Microsoft 365 Integration Credentials.",
              "schema": {
                "$ref": "#/definitions/Microsoft365ConditionalAccessSettings"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Success."
            },
            "400": {
              "description": "Bad request due to invalid parameters."
            },
            "403": {
              "description": "User is not authorized or reference does not exist."
            },
            "422": {
              "description": "Violated logical condition. The following ErrorCode values can be returned.<br /><ol><li>8700 - The tenant already exists</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/conditionalAccess/onboarding": {
        "post": {
          "tags": [
            "Microsoft365 Conditional Access"
          ],
          "summary": "Initiates the Microsoft 365 Integration.",
          "description": "Initiates the Microsoft 365 Integration, the user will be prompted to log in and accept permissions for the SOTI MobiControl Device Compliance application on the Microsoft Azure portal. Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><B>(Available Since MobiControl v15.5.0)</B>",
          "operationId": "Microsoft365ConditionalAccess_Onboarding",
          "responses": {
            "204": {
              "description": "Success."
            },
            "403": {
              "description": "User is not authorized or reference does not exist."
            },
            "422": {
              "description": "Violated logical condition. The following ErrorCode values can be returned.<br /><ol><li>8701 - Failed to initiate the Microsoft 365 Integration because the connection failed.</li><li>8704 - Failed to initiate the Microsoft 365 Integration because there is no account found.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/conditionalAccess/offboarding": {
        "post": {
          "tags": [
            "Microsoft365 Conditional Access"
          ],
          "summary": "Deletes the Microsoft 365 Integration.",
          "description": "Deletes the Microsoft 365 Integration, this will permanently delete Name from the console and unlink your Microsoft account from MobiControl. Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><B>(Available Since MobiControl v15.5.0)</B>",
          "operationId": "Microsoft365ConditionalAccess_Offboarding",
          "responses": {
            "204": {
              "description": "Success."
            },
            "403": {
              "description": "User is not authorized or reference does not exist."
            },
            "422": {
              "description": "Violated logical condition. The following ErrorCode values can be returned.<br /><ol><li>8702 -  Failed to delete the Microsoft 365 Integration because the account is being used by one or more Compliance Policies.</li><li>8703 -  Failed to delete the Microsoft 365 Integration because there is no account found.</li><li>8705 -  Failed to delete the Microsoft 365 Integration because the connection failed.</li><li>8706 -  Failed to delete the Microsoft 365 Integration because there are pending actions involving the account that are being processed.</li><li>8730 -  Failed to delete the Microsoft 365 Integration because the account is being used by a Microsoft Single Sign-On connection.</li><li>8731 -  Failed to delete the Microsoft 365 Integration because there are active devices registered in Azure.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/microsoft365/mobileApps": {
        "get": {
          "tags": [
            "Microsoft365 Mobile Apps"
          ],
          "summary": "Returns a list of Microsoft Azure managed applications.",
          "description": "Returns a list of Microsoft Azure Application(s).\r\n            <br /><br />\r\n            Requires the caller to be granted the \"Manage Microsoft 365 Integration\" permission.\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "Microsoft365MobileApps_GetAzureMobileApplications",
          "parameters": [
            {
              "type": "string",
              "name": "filter",
              "in": "query",
              "required": true,
              "description": "Filter for application name.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "appFamily",
              "in": "query",
              "required": true,
              "description": "Application family.",
              "x-schema": {
                "$ref": "#/definitions/AppFamily"
              },
              "x-nullable": false,
              "enum": [
                "Android",
                "Ios"
              ],
              "x-enumType": "AppFamily"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ManagedMobileApp"
                }
              }
            },
            "400": {
              "description": "Invalid parameter.\r\n            <ol><li>Failed to retrieve Microsoft Azure application(s) because the filter exceeded the 120-character limit.</li></ol>"
            },
            "401": {
              "description": "Unauthorized Access."
            },
            "403": {
              "description": "Forbidden Access."
            },
            "422": {
              "description": "Violated logical condition.<br /><ol><li>8707 - Failed to retrieve Microsoft Azure application(s) because there is no connection.</li><li>8708 - Failed to retrieve Microsoft Azure application(s) because of error(s). Please consult the Management Server logs for more information.</li><li>8714 - Failed to retrieve Microsoft Azure application(s) because of SOTI Service communication error(s). Please consult the Management Server logs for more information.</li><li>8716 - Failed to retrieve Microsoft Azure application(s) because access to SOTI Service was forbidden.</li><li>8718 - Failed to retrieve Microsoft Azure application(s) because access to SOTI Service was unauthorized.</li><li>8720 - Failed to retrieve Microsoft Azure application(s) because invalid request was sent to SOTI Service.</li><li>8722 - Failed to retrieve Microsoft Azure application(s) because SOTI Service is unavailable.</li><li>8724 - Failed to retrieve Microsoft Azure application(s) because of SOTI Service internal error(s). Please contact SOTI for support.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/termsAndConditions": {
        "get": {
          "tags": [
            "Terms And Conditions"
          ],
          "operationId": "TermsAndConditions_GetAllTermsAndConditions",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TermsAndConditionsSummary"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Terms And Conditions"
          ],
          "operationId": "TermsAndConditions_SaveTermsAndConditions",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/TermsAndConditionsSummary"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/termsAndConditions/{referenceId}/versions": {
        "get": {
          "tags": [
            "Terms And Conditions"
          ],
          "operationId": "TermsAndConditions_GetTermsAndConditionsVersions",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TermsAndConditionsVersionSummary"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/termsAndConditions/{referenceId}/versions/{versionNumber}": {
        "get": {
          "tags": [
            "Terms And Conditions"
          ],
          "operationId": "TermsAndConditions_GetVersionContent",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "versionNumber",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/termsAndConditions/{referenceId}": {
        "put": {
          "tags": [
            "Terms And Conditions"
          ],
          "operationId": "TermsAndConditions_UpdateTermsAndConditions",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "file"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Terms And Conditions"
          ],
          "operationId": "TermsAndConditions_DeleteTermsAndConditions",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/windows/healthattestation/server/configuration": {
        "get": {
          "tags": [
            "Health Attestation"
          ],
          "summary": "Gets the current Health Attestation Server Summary.",
          "description": "This gets the current Health Attestation Server summary.\r\n            <br />Requires the caller to be granted Global Setting permission.\r\n            <br /><B> (Available Since MobiControl v15.3.0)</B>",
          "operationId": "HealthAttestation_GetServerConfiguration",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/ServerSummary"
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Health Attestation"
          ],
          "summary": "Sets the Health Attestation Server configuration.",
          "description": "This updates the Health Attestation Server configuration.\r\n            This API confirms that the server is reachable by attempting to establish a connection before saving the configuration.\r\n            <br />Requires the caller to be granted Global Setting permission.\r\n            <br /><B> (Available Since MobiControl v15.3.0)</B>",
          "operationId": "HealthAttestation_UpdateServerConfiguration",
          "parameters": [
            {
              "name": "serverConfiguration",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ServerConfiguration"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Server configuration updated."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Health Attestation"
          ],
          "summary": "Delete the current Health Attestation Server configuration.",
          "description": "This will delete the current Health Attestation Server configuration and set the default configuration.\r\n            The default configuration uses the Microsoft Servers: https://has.spserv.microsoft.com/HealthAttestation/ValidateHealthCertificate/v1\r\n            <br />Requires the caller to be granted Global Setting permission.\r\n            <br /><B> (Available Since MobiControl v15.3.0)</B>",
          "operationId": "HealthAttestation_DeleteServerConfiguration",
          "responses": {
            "204": {
              "description": "Server configuration deleted."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/fileVault/certificate": {
        "get": {
          "tags": [
            "Mac File Vault Certificate"
          ],
          "summary": "Returns the macOS Personal Recovery Key encryption certificate metadata.",
          "description": "Returns the details/metadata about the certificate used for macOS FileVault Personal Recovery Key encryption.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage PRK Encryption Certificate\" permission.\r\n            <br /><b>(Available since MobiControl v15.6.2)</b><br />",
          "operationId": "MacFileVaultCertificate_GetActiveCertificateMetaData",
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/FileVaultCertificateMetadata"
              }
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Mac File Vault Certificate"
          ],
          "summary": "Create new Personal Recovery Key encryption certificate for FileVault.",
          "description": "Create new Personal Recovery Key encryption certificate for macOS FileVault, using the p12 certificate.\r\n            <p>Content-Type of the request body must be multipart/related; boundary={any boundary identifier}. </p><p>Multipart body request must contain the following parts:\r\n            <pre>\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12.metadata+json\r\n            {\"password\": \"&lt;password&gt;\"}\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"&lt;filename&gt;\"\r\n            &lt;base64 representation of the certificate file&gt;\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            </pre></p><br /><b>(Available since MobiControl v15.6.2)</b><br />Requires the caller be granted the 'Manage PRK Encryption Certificate' permission.",
          "operationId": "MacFileVaultCertificate_AddFileVaultCertificate",
          "responses": {
            "403": {
              "description": "Unauthorized access."
            },
            "204": {
              "description": "Success."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "415": {
              "description": "Unsupported content type."
            },
            "422": {
              "description": "Violated logical condition. The following ErrorCode values can be returned:.<br /><ol><li>8201 - Use p12 file.</li><li>8202 - Certificate has expired. Try again with different certificate.</li><li>8203 - The password for the certificate is invalid. Please correct it and try again.</li><li>8204 - Invalid file. Please try again.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/mailServers": {
        "post": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Creates a New Email Server",
          "description": "Creates a new mail server. Requires the caller be granted \"Manage Exchange Servers\" permission.\r\n                <br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "MailServers_CreateServer",
          "parameters": [
            {
              "name": "server",
              "in": "body",
              "required": true,
              "description": "The server to create",
              "schema": {
                "$ref": "#/definitions/MailServer"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully created the mail server '{0}'.",
              "schema": {
                "$ref": "#/definitions/MailServer"
              }
            },
            "400": {
              "description": "Failed to create a mail server due to an invalid parameter. Please consult the Management Server logs for more information."
            },
            "401": {
              "description": "Failed to create a mail server because the user from IP '{0}' is not authenticated."
            },
            "403": {
              "description": "Failed to create a mail server because the user is not authorized."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3904 - Failed to create the mail server '{0}' because the name already exists.</li></ol>"
            },
            "500": {
              "description": "Failed to create a mail server due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Retrieves all mail servers",
          "description": "Gets all mail servers.\r\n                <br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "MailServers_GetServers",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MailServer"
                }
              }
            },
            "401": {
              "description": "Failed to retrieve all mail servers because the user from IP '{0}' is not authenticated."
            },
            "403": {
              "description": "Failed to retrieve all mail servers because the user is not authorized."
            },
            "500": {
              "description": "Failed to retrieve all mail servers due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/mailServers/{referenceId}": {
        "delete": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Deletes server entry",
          "description": "Deletes the specified mail server. Requires the caller be granted \"Manage Exchange Servers\" permission.\r\n                <br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "MailServers_DeleteServer",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "server identifier",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully deleted the mail server '{0}'."
            },
            "400": {
              "description": "Failed to delete a mail server due to an invalid parameter. Please consult the Management Server logs for more information."
            },
            "401": {
              "description": "Failed to delete a mail server because the user from IP 'X' is not authenticated."
            },
            "403": {
              "description": "Failed to delete a mail server because the user is not authorized."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3910 - Failed to delete the mail server '{0}' because the server is currently used in the following compliance policies: {1}.</li></ol>"
            },
            "500": {
              "description": "Failed to rename a mail server due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Retrieves mail server by ID",
          "description": "Gets a mail server by ID.\r\n                <br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "MailServers_GetServer",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/MailServer"
              }
            },
            "400": {
              "description": "Failed to retrieve a mail server due to an invalid parameter. Please consult the Management Server logs for more information."
            },
            "401": {
              "description": "Failed to retrieve a mail server because the user from IP '{0}' is not authenticated."
            },
            "403": {
              "description": "Failed to retrieve a mail server because the user is not authorized."
            },
            "500": {
              "description": "Failed to retrieve a mail server due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/mailServers/exchange/certificate": {
        "post": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Generates a certificate with private key",
          "description": "<b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "MailServers_GenerateCertificate",
          "responses": {
            "200": {
              "description": "Successfully generated a new certificate for Exchange Server connection.",
              "schema": {
                "$ref": "#/definitions/ExchangeSigningCertificateInfo"
              }
            },
            "401": {
              "description": "Failed to generate new Exchange Server connection certificate because the user from IP '{0}' is not authenticated."
            },
            "403": {
              "description": "Failed to generate new Exchange Server connection certificate because the user is not authorized."
            },
            "500": {
              "description": "Failed to generate the Exchange Server connection certificate due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/mailServers/exchange/{referenceId}/connection": {
        "put": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Updates Exchange Server connection setting",
          "description": "Updates connection settings for the specified mail server. Requires the caller be granted \"Manage Exchange Servers\" permission.\r\n                <br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "MailServers_UpdateExchangeConnectionSettings",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Server ID",
              "x-nullable": false
            },
            {
              "name": "settings",
              "in": "body",
              "required": true,
              "description": "Connection settings",
              "schema": {
                "$ref": "#/definitions/ExchangeServerConnectionSettings"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updated the Exchange Server connection '{0}'."
            },
            "400": {
              "description": "Failed to update an Exchange Server connection due to an invalid parameter. Please consult the Management Server logs for more information."
            },
            "401": {
              "description": "Failed to update an Exchange Server connection because the user from IP '{0}' is not authenticated."
            },
            "403": {
              "description": "Failed to update an Exchange Server connection because the user is not authorized."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3903 - Failed to update an Exchange Server connection because the mail server was not found.</li><li>3906 - Failed to update the Exchange Server connection '{0}' due to a too long password.</li><li>3908 - Failed to create the Exchange Server connection '{0}' due to a too long password.</li><li>3912 - Failed to update the Exchange Server connection '{0}' because the certificate has expired.</li><li>3913 - Failed to update the Exchange Server connection '{0}' because the certificate was not found.</li></ol>"
            },
            "500": {
              "description": "Failed to update an Exchange Server connection due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Gets Exchange Server connection settings",
          "description": "Gets Exchange connection settings for the specified mail server.\r\n                <br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "MailServers_GetExchangeConnectionSettings",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for a Email Server",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Return the connection settings info",
              "schema": {
                "$ref": "#/definitions/ExchangeServerConnectionSettings"
              }
            },
            "400": {
              "description": "Failed to retrieve an Exchange Server connection due to an invalid parameter. Please consult the Management Server logs for more information."
            },
            "401": {
              "description": "Failed to retrieve an Exchange Server connection because the user from IP '{0}' is not authenticated."
            },
            "403": {
              "description": "Failed to retrieve an Exchange Server connection because the user is not authorized."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3903 - Failed to retrieve an Exchange Server connection because the mail server was not found.</li><li>3905 - Failed to retrieve an Exchange Server '{0}' connection due to an unknown error.</li></ol>"
            },
            "500": {
              "description": "Failed to retrieve an Exchange Server connection due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/mailServers/exchange/{referenceId}/publicKey": {
        "get": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Retrieves the public part of a generated certificate stored in the db",
          "description": "<b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "MailServers_GetPublicKey",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Failed to retrieve the Exchange Server connection certificate due to an invalid parameter. Please consult the Management Server logs for more information."
            },
            "401": {
              "description": "Failed to retrieve the Exchange Server connection certificate because the user from IP '{0}' is not authenticated."
            },
            "403": {
              "description": "Failed to retrieve the Exchange Server connection certificate because the user is not authorized."
            },
            "500": {
              "description": "Failed to retrieve the Exchange Server connection certificate due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/mailServers/exchange/regions": {
        "get": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Retrieves list of regions endpoints",
          "description": "<b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "MailServers_GetRegions",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Region"
                }
              }
            },
            "401": {
              "description": "Failed to retrieve the Azure national clouds because the user from IP '{0}' is not authenticated."
            },
            "403": {
              "description": "Failed to retrieve the Azure national clouds because the user is not authorized."
            },
            "500": {
              "description": "Failed to retrieve the Azure national clouds due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/mailServers/{referenceId}/name": {
        "put": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Rename an existing Email Server",
          "description": "Renames the specified email server. Requires the caller be granted \"Manage Exchange Servers\" permission.\r\n                <br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "MailServers_RenameServer",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Server ID",
              "x-nullable": false
            },
            {
              "name": "newName",
              "in": "body",
              "required": true,
              "description": "New server name",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully renamed the mail server '{0}' to '{1}'.",
              "schema": {
                "$ref": "#/definitions/MailServer"
              }
            },
            "400": {
              "description": "Failed to rename a mail server due to an invalid parameter. Please consult the Management Server logs for more information."
            },
            "401": {
              "description": "Failed to rename a mail server because the user from IP '{0}' is not authenticated."
            },
            "403": {
              "description": "Failed to rename a mail server because the user is not authorized."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3904 - Failed to rename the mail server to '{0}' because the name already exists.</li></ol>"
            },
            "500": {
              "description": "Failed to rename a mail server due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/mailServers/exchange/actions/test": {
        "post": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Tests Exchange Server connection",
          "description": "Tests the Exchange server connection using the settings specified.\r\n                <br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "MailServers_TestExchangeConnection",
          "parameters": [
            {
              "name": "settings",
              "in": "body",
              "required": true,
              "description": "Connection settings",
              "schema": {
                "$ref": "#/definitions/ExchangeServerConnectionSettings"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully tested the Exchange Server connection to '{0}'.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Failed to test an Exchange Server connection due to an invalid parameter. Please consult the Management Server logs for more information."
            },
            "401": {
              "description": "Failed to test an Exchange Server connection because the user from IP '{0}' is not authenticated."
            },
            "403": {
              "description": "Failed to test an Exchange Server connection because the user is not authorized."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3911 - Failed to test the Exchange Server connection to '{0}' because you may not have the appropriate permissions to manage this Exchange Server.</li><li>3915 - Failed to test the Exchange Server connection to '{0}' because could not recover password from persisted connection.</li></ol>"
            },
            "500": {
              "description": "Failed to test an Exchange Server connection due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/mailServers/exchange/{referenceId}/actions/test": {
        "put": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Tests an existing or modified Exchange Server connection",
          "description": "Tests the Exchange server connection using the settings specified.\r\n                <br /><b>(Available Since MobiControl v15.1.0)</b>",
          "operationId": "MailServers_TestIndividualExchangeConnection",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Server ID",
              "x-nullable": false
            },
            {
              "name": "settings",
              "in": "body",
              "required": true,
              "description": "(Optional) Updated connection settings",
              "schema": {
                "$ref": "#/definitions/ExchangeServerConnectionSettings"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully tested the Exchange Server connection to '{0}'.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Failed to test an Exchange Server connection due to an invalid parameter. Please consult the Management Server logs for more information."
            },
            "401": {
              "description": "Failed to test an Exchange Server connection because the user from IP '{0}' is not authenticated."
            },
            "403": {
              "description": "Failed to test an Exchange Server connection because the user is not authorized."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>3911 - Failed to test the Exchange Server connection to '{0}' because you may not have the appropriate permissions to manage this Exchange Server.</li><li>3915 - Failed to test the Exchange Server connection to '{0}' because could not recover password from persisted connection.</li></ol>"
            },
            "500": {
              "description": "Failed to test an Exchange Server connection due to an unexpected error. Please consult the Management Server logs for more information."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/mailServers/{referenceId}/logs": {
        "get": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Returns Management Server Logs for specific Email Server.",
          "description": "This API returns the Management Server Logs for specific Email Server.\r\n            <br />\r\n            Requires the caller be granted the \"Manage Global Settings and Servers\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "MailServers_GetEmailServerLogs",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for a Email Server.",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "The log severities.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity2"
              }
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "The start date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "The end date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "description": "if set to true [order by desc].",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "The skip.",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "The take.",
              "format": "int32",
              "default": 50,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MailServerLog"
                }
              }
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/mailServers/{referenceId}/logs/summary": {
        "get": {
          "tags": [
            "Mail Servers"
          ],
          "summary": "Fetches the count of Logs in specified Mail Server.",
          "description": "API to get the count of Logs in specified Mail Server.\r\n            <br />\r\n            Requires the caller be granted the \"Manage Global Settings and Servers\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "MailServers_GetMailServerLogsSummary",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for a Mail Server.",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "The log severities.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity2"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "The start date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "The end date.",
              "format": "date-time",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/MailServerLogCount"
              }
            },
            "400": {
              "description": "Contract validation failed"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/adcsDcom": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Creates a new ADCS PKI DCOM Certification Authority.",
          "description": "Creates a new ADCS PKI DCOM Certification Authority.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_CreateAdcsPkiDcomCertificationAuthority",
          "parameters": [
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/AdcsPkiDcomCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Action executed successfully.",
              "schema": {
                "$ref": "#/definitions/CertificationAuthoritySummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/adcsHttps": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Creates a new ADCS PKI HTTPS Certification Authority.",
          "description": "Creates a new ADCS PKI HTTPS Certification Authority\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_CreateAdcsPkiHttpsCertificationAuthority",
          "parameters": [
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/AdcsPkiHttpsCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Action executed successfully.",
              "schema": {
                "$ref": "#/definitions/CertificationAuthoritySummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/adcsScep": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Creates a new ADCS SCEP Certification Authority.",
          "description": "Creates a new ADCS SCEP Certification Authority.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_CreateAdcsScepCertificationAuthority",
          "parameters": [
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/AdcsScepCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Action executed successfully.",
              "schema": {
                "$ref": "#/definitions/CertificationAuthoritySummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/certificateTemplates": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Creates a new certificate template.",
          "description": "Creates a new certificate template to the certification authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_CreateCertificateTemplateForCertificationAuthority",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            },
            {
              "name": "certificateTemplate",
              "in": "body",
              "required": true,
              "description": "The certificate template object.",
              "schema": {
                "$ref": "#/definitions/CertificateTemplate"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Action executed successfully.",
              "schema": {
                "$ref": "#/definitions/CertificateTemplate"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Returns the certificate templates for the specified certification authority.",
          "description": "Returns certificate templates for the certification authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be grated the \"WebConsole Access\" permission.",
          "operationId": "CertificateManagement_GetCertificateTemplatesForCertificationAuthority",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            }
          ],
          "responses": {
            "403": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/entrust": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Creates a new Entrust Certification Authority.",
          "description": "Creates a new Entrust Certification Authority.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_CreateEntrustCertificationAuthority",
          "parameters": [
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/EntrustCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Action executed successfully.",
              "schema": {
                "$ref": "#/definitions/CertificationAuthoritySummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/scep": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Creates a new Generic SCEP Certification Authority.",
          "description": "Creates a new Generic SCEP Certification Authority.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_CreateGenericScepCertificationAuthority",
          "parameters": [
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/GenericScepCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Action executed successfully.",
              "schema": {
                "$ref": "#/definitions/CertificationAuthoritySummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/symantec": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Creates a new Symantec Certification Authority.",
          "description": "Creates new Symantec Certification Authority\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_CreateSymantecCertificationAuthority",
          "parameters": [
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/SymantecCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Action executed successfully.",
              "schema": {
                "$ref": "#/definitions/CertificationAuthoritySummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/ejbcaEst": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Creates a new EJBCA EST Certification Authority.",
          "description": "Creates new EJBCA EST Certification Authority\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_CreateEjbcaEstCertificationAuthority",
          "parameters": [
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/EjbcaEstCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Action executed successfully.",
              "schema": {
                "$ref": "#/definitions/CertificationAuthoritySummary"
              }
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/certificateTemplates/{certificateTemplateReferenceId}": {
        "delete": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Deletes the specified certificate template.",
          "description": "Deletes a certificate template from the certification authority specified by \"ReferenceID\". The certificate template to be deleted is provided by the \"CertificateTemplateReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_DeleteCertificateTemplate",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "certificateTemplateReferenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certificate template.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Certification Authority deleted."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>3506 - Certificate template has references in a profile and cannot be deleted</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Updates the specified certificate template.",
          "description": "Updates an existing certificate template for a certification authority specified by the \"ReferenceID\". The certificate template to be updated is specified by the \"CertificateTemplateReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UpdateCertificateTemplateForCertificationAuthorities",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "certificateTemplateReferenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certificate template.",
              "x-nullable": false
            },
            {
              "name": "certificateTemplate",
              "in": "body",
              "required": true,
              "description": "The certificate template object.",
              "schema": {
                "$ref": "#/definitions/CertificateTemplate"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid request."
            },
            "403": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}": {
        "delete": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Deletes the specified certification authority.",
          "description": "Deletes the certification authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_DeleteCertificationAuthority",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Certification Authority deleted."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Returns the specified certification authority.",
          "description": "Returns the certification authority referenced by \"ReferenceID\"\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be grated the \"WebConsole Access\" permission.",
          "operationId": "CertificateManagement_GetCertificationAuthorityByReferenceId",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            }
          ],
          "responses": {
            "403": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/extendedKeyUsage": {
        "delete": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Deletes the specified Extended Key Usage entry.",
          "description": "Deletes Extended Key Usage entry specified by \"EkuEntry\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_DeleteEkuEntry",
          "parameters": [
            {
              "name": "ekuEntry",
              "in": "body",
              "required": true,
              "description": "The Extended Key Entry to delete.",
              "schema": {
                "$ref": "#/definitions/EkuEntry"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "Certification Authority deleted."
            },
            "400": {
              "description": "Invalid request."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>3508 - Extended Key Entry has references in certificate templates and cannot be deleted.</li><li>3509 - Cannot delete system generated Extended Key Usage entry.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Returns a list of Extended Key Usage entries.",
          "description": "Returns all Extended Key Usage entries.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be grated the \"WebConsole Access\" permission.",
          "operationId": "CertificateManagement_GetEkuEntries",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Response Contract.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EkuEntry"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Creates a new Extended Key Usage entry.",
          "description": "Creates a new Extended Key Usage entry.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_SaveEkuEntry",
          "parameters": [
            {
              "name": "ekuEntry",
              "in": "body",
              "required": true,
              "description": "The Extended Key Entry to create.",
              "schema": {
                "$ref": "#/definitions/EkuEntry"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Updates the specified Extended Key Usage entry.",
          "description": "Updates an existing Extended Key Usage entry.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UpdateEkuEntry",
          "parameters": [
            {
              "name": "ekuEntry",
              "in": "body",
              "required": true,
              "description": "The Extended Key Entry to update.",
              "schema": {
                "$ref": "#/definitions/EkuEntry"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid request."
            },
            "403": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/symantecCertificateRequest": {
        "get": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Returns a Symantec Certificate Signing Request.",
          "description": "Returns a certificate signing request (CSR) for a Symantec Certification Authority. This CSR can then be used to generate an RA certificate on Symantec's PKI Manager.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_GenerateSymantecCertificateSigningRequest",
          "responses": {
            "403": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/symantecCertificate": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Upload Symantec certificate.",
          "description": "Creates a new Symantec P7B certificate for a certification authority specified by \"ReferenceID\".\r\n            <p>Content-Type of the request body must be multipart/related; boundary={boundary identifier}.\r\n            <br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br /></p><p>Multipart body request must contain the following parts:\r\n            <pre>\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs7-certificates.metadata+json\r\n            {\"filename\": \"&lt;filename&gt;\"}\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs7-certificates\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"&lt;filename&gt;\"\r\n            &lt;base64 representation of the certificate file&gt;\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            </pre></p><br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UploadSymantecP7bFile",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            }
          ],
          "responses": {
            "403": {
              "description": "Unauthorized access."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>3507 - The uploaded .p7b file does not match the last created Certificate Signing Request (CSR). Please generate a new CSR and try again.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/adcsRootCertificate": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Upload ADCS Root certificate.",
          "description": "Creates a new ADCS Root certificate for a certification authority, specified by \"ReferenceID\".\r\n            <p>Content-Type of the request body must be multipart/related; boundary={boundary identifier}.\r\n            <br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br /></p><p>Multipart body request must contain the following parts:\r\n            <pre>\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/pkix-cert+json\r\n            {\"filename\": \"&lt;filename&gt;\"}\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/pkix-cert\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"&lt;filename&gt;\"\r\n            &lt;base64 representation of the certificate file&gt;\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            </pre></p><br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UploadAdcsTrustedRootCertificate",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            }
          ],
          "responses": {
            "403": {
              "description": "Unauthorized access."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>3510 - MobiControl does not support multiple certificate PFX files. Please create a separate PFX file for each certificate if you want all to be installed on the device.</li><li>3511 - Certificate does not have a private key.</li><li>3512 - File is not a valid certificate.</li><li>3513 - Invalid certificate password specified.</li><li>3514 - The provided certificate is invalid because it has expired.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/adcsEnrollmentCertificate": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Upload ADCS Enrolment certificate.",
          "description": "Creates a new ADCS Enrollment Certificate for a certification authority, specified by \"ReferenceID\".\r\n            <p>Content-Type of the request body must be multipart/related; boundary={boundary identifier}.\r\n            <br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br /></p><p>Multipart body request must contain the following parts:\r\n            <pre>\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12.metadata+json\r\n            {\"filename\": \"&lt;filename&gt;\", \"password\": \"&lt;password&gt;\"}\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"&lt;filename&gt;\"\r\n            &lt;base64 representation of the certificate file&gt;\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            </pre></p><br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UploadAdcsEnrollmentCertificate",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            }
          ],
          "responses": {
            "403": {
              "description": "Unauthorized access."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>3510 - MobiControl does not support multiple certificate PFX files. Please create a separate PFX file for each certificate if you want all to be installed on the device.</li><li>3511 - Certificate does not have a private key.</li><li>3512 - File is not a valid certificate.</li><li>3513 - Invalid certificate password specified.</li><li>3514 - The provided certificate is invalid because it has expired.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/adcsAuthenticationCredential": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Upload ADCS Authentication Credential certificate.",
          "description": "Creates a new ADCS Authentication Credential certificate for a certification authority, specified by \"ReferenceID\".\r\n            <p>Content-Type of the request body must be multipart/related; boundary={boundary identifier}.\r\n            <br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br /></p><p>Multipart body request must contain the following parts:\r\n            <pre>\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12.metadata+json\r\n            {\"filename\": \"&lt;filename&gt;\", \"password\": \"&lt;password&gt;\"}\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"&lt;filename&gt;\"\r\n            &lt;base64 representation of the certificate file&gt;\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            </pre></p><br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UploadAdcsAuthenticationCredentialCertificate",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            }
          ],
          "responses": {
            "403": {
              "description": "Unauthorized access."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>3510 - MobiControl does not support multiple certificate PFX files. Please create a separate PFX file for each certificate if you want all to be installed on the device.</li><li>3511 - Certificate does not have a private key.</li><li>3512 - File is not a valid certificate.</li><li>3513 - Invalid certificate password specified.</li><li>3514 - The provided certificate is invalid because it has expired.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/ejbcaAuthenticationCredential": {
        "post": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Upload EJBCA Authentication Credential certificate.",
          "description": "Creates a new EJBCA Authentication Credential certificate for a certification authority, specified by \"ReferenceID\".\r\n            <p>Content-Type of the request body must be multipart/related; boundary={boundary identifier}.\r\n            <br />\r\n            Boundary length must be set to less than or equal to 11 to prevent internal server errors.\r\n            <br /></p><p>Multipart body request must contain the following parts:\r\n            <pre>\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12.metadata+json\r\n            {\"filename\": \"&lt;filename&gt;\", \"password\": \"&lt;password&gt;\"}\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            Content-Type: application/x-pkcs12\r\n            Content-Transfer-Encoding: base64\r\n            Content-Disposition: attachment; filename=\"&lt;filename&gt;\"\r\n            &lt;base64 representation of the certificate file&gt;\r\n            <br />\r\n            --&lt;boundary&gt;\r\n            </pre></p><br /><b>(Available Since MobiControl v2024.0.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UploadEjbcaAuthenticationCredentialCertificate",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            }
          ],
          "responses": {
            "403": {
              "description": "Unauthorized access."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>3511 - Certificate does not have a private key.</li><li>3512 - File is not a valid certificate.</li><li>3513 - Invalid certificate password specified.</li><li>3514 - The provided certificate is invalid because it has expired.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificateTemplates": {
        "get": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Returns a list of certificate templates.",
          "description": "Returns the certificate templates by the provided certificate retrieval method, filtering by certificate authority type.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br />Requires the caller be grated the \"WebConsole Access\" permission.",
          "operationId": "CertificateManagement_GetCertificateTemplates",
          "parameters": [
            {
              "type": "array",
              "name": "certificationAuthorityTypes",
              "in": "query",
              "description": "Type of the certificate authority.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/CertificationAuthorityType"
              },
              "x-enumType": "CertificationAuthorityType"
            },
            {
              "type": "string",
              "name": "method",
              "in": "query",
              "description": "Certificate retrieval method.",
              "x-schema": {
                "$ref": "#/definitions/CertificateRetrievalMethod2"
              },
              "x-nullable": true,
              "enum": [
                "FileUpload",
                "PkiRequest",
                "ScepRequest",
                "WindowsScepRequest"
              ],
              "x-enumType": "CertificateRetrievalMethod"
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Response Contract.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CertificateTemplate"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities": {
        "get": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Returns a list of certification authorities.",
          "description": "Returns all certification authorities.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be grated the \"WebConsole Access\" permission.",
          "operationId": "CertificateManagement_GetCertificationAuthoritySummaries",
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Response Contract.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CertificationAuthoritySummary"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/adcsDcom": {
        "put": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Updates the specified ADCS PKI DCOM Certification Authority.",
          "description": "Updates ADCS PKI DCOM Certification Authority.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UpdateAdcsPkiDcomCertificationAuthority",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            },
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/AdcsPkiDcomCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/adcsHttps": {
        "put": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Updates the specified ADCS PKI HTTPS Certification Authority.",
          "description": "Updates the ADCS PKI HTTPS Certification Authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UpdateAdcsPkiHttpsCertificationAuthority",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            },
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/AdcsPkiHttpsCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/adcsScep": {
        "put": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Updates the specified ADCS SCEP Certification Authority.",
          "description": "Updates an existing ADCS SCEP Certification Authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UpdateAdcsScepCertificationAuthority",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            },
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/AdcsScepCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid request."
            },
            "403": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/entrust": {
        "put": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Updates the specified Entrust Certification Authority.",
          "description": "Updates an existing Entrust Certification Authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UpdateEntrustCertificationAuthority",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            },
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/EntrustCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid request."
            },
            "403": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/scep": {
        "put": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Updates the specified Generic SCEP Certification Authority.",
          "description": "Updates an existing Generic SCEP Certification Authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UpdateGenericScepCertificationAuthority",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            },
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/GenericScepCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid request."
            },
            "403": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/symantec": {
        "put": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Updates the specified Symantec Certification Authority.",
          "description": "Updates an existing Symantec Certification Authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UpdateSymantecCertificationAuthority",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            },
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/SymantecCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid request."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/certificateManagement/certificationAuthorities/{referenceId}/ejbcaEst": {
        "put": {
          "tags": [
            "Certificate Management"
          ],
          "summary": "Updates the specified EJBCA EST Certification Authority.",
          "description": "Updates an existing EJBCA EST Certification Authority specified by \"ReferenceID\".\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b><br /> Requires the caller be granted the \"Manage Certificate Authorities\" permission.",
          "operationId": "CertificateManagement_UpdateEjbcaEstCertificationAuthority",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The reference ID of the certification authority.",
              "x-nullable": false
            },
            {
              "name": "certificationAuthority",
              "in": "body",
              "required": true,
              "description": "The certification authority object.",
              "schema": {
                "$ref": "#/definitions/EjbcaEstCertificationAuthority"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid request."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/windows/wns": {
        "put": {
          "tags": [
            "Wns Configuration"
          ],
          "summary": "Saves the Windows Notification Service (WNS) configuration",
          "description": "Configures Windows Notification Services (WNS), which enables MobiControl to send push notifications to Windows devices on demand.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "WnsConfiguration_Put",
          "parameters": [
            {
              "name": "wnsConfiguration",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/WnsConfiguration"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized attempt to execute the method"
            },
            "403": {
              "description": "User is not authorized to perform the operation."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>5700 - Failed to update the Windows Notification Service configuration due to an unknown error.</li><li>5701 - Failed to update the Windows Notification Service configuration because the service failed to obtain a token.</li><li>5704 - Failed to update the Windows Notification Service configuration because the Client secret for WNS configuration is invalid.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Wns Configuration"
          ],
          "summary": "Gets the Windows Notification Service (WNS) configuration.",
          "description": "Retrieves the configured Windows Notification Services (WNS) details.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "WnsConfiguration_Get",
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/WnsConfiguration"
              }
            },
            "401": {
              "description": "Unauthorized attempt to execute the method."
            },
            "403": {
              "description": "User is not authorized to perform the operation."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/license": {
        "get": {
          "tags": [
            "License Management"
          ],
          "summary": "Returns the license information.",
          "description": "This API returns the license information along with family wise usage count.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View License Information\" permission.\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b><br />",
          "operationId": "LicenseManagement_GetLicenseInfo",
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/LicenseInfo"
              }
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/license/offlineActivation": {
        "put": {
          "tags": [
            "License Management"
          ],
          "summary": "Uploads license file to activate MobiControl.",
          "description": "This API uploads license file to activate MobiControl.\r\n            <br /><br />\r\n            Note: Only applicable for on premise instances.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage License Information\" permission.\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b><br />",
          "operationId": "LicenseManagement_UpdateRegistrationOffline",
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/LicenseInfo"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned.<br /><ol><li>[3401]: Product activation failed.</li><li>[3402]: Product activation failed with server error message.</li><li>[3406]: Product activation failed: Decommissioned registration code is provided for the activation.</li><li>[3410]: Product Activation failed: Entered registration code does not belong to MobiControl.</li><li>[3411]: Product activation failed: Entered installation id is incorrect.</li><li>[3412]: Product activation failed: The current product version is higher than the maximum allowed version.</li><li>[3413]: Product activation failed: The current assembly version is higher than the maximum allowed version.</li><li>[3414]: Product activation failed: The license expired before the release date.</li><li>[3415]: Product activation failed: Sorry, this registration code has expired! Please contact SOTI sales representative</li><li>[3416]: Product activation failed: Your new registration code has a lower device license count than the current number of enrolled devices in Mobicontrol. Please use a registration code that has an appropriate number of device licenses.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/license/updateRegistrationCode": {
        "put": {
          "tags": [
            "License Management"
          ],
          "summary": "Updates the registration key of MobiControl.",
          "description": "This API updates the registration key of MobiControl.\r\n            <br /><br />\r\n            Note: Only applicable for on premise instances.\r\n            <br /><br />\r\n            Requires the caller be granted the \"Manage License Information\" permission.\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b><br />",
          "operationId": "LicenseManagement_UpdateRegistrationCode",
          "parameters": [
            {
              "name": "registrationInfo",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RegistrationInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/LicenseInfo"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.\r\n            <br />The following ErrorCode values can be returned.<br /><ol><li>[3401]: Product activation failed.</li><li>[3402]: Product activation failed with server error message.</li><li>[3403]: product activation failed: This registration code has already been activated on another computer</li><li>[3404]: Product activation failed: Activation cannot be completed before the deployment date that was specified at the time of purchase.</li><li>[3405]: Product activation failed: Your Subscription is expired</li><li>[3406]: Product activation failed: Decommissioned registration code is provided for the activation.</li><li>[3407]: Product activation failed: The key you are attempting to activate has expired</li><li>[3408]: Product activation failed: Maximum allowed number of enrollment profiles was reached already</li><li>[3409]: Product activation failed: This Installation Id has already been used on another computer</li><li>[3410]: Product Activation failed: Entered registration code does not belong to MobiControl.</li><li>[3411]: Product activation failed: Entered installation id is incorrect.</li><li>[3412]: Product activation failed: The current product version is higher than the maximum allowed version.</li><li>[3413]: Product activation failed: The current assembly version is higher than the maximum allowed version.</li><li>[3414]: Product activation failed: The license expired before the release date.</li><li>[3415]: Product activation failed: Sorry, this registration code has expired! Please contact SOTI sales representative</li><li>[3416]: Product activation failed: Your new registration code has a lower device license count than the current number of enrolled devices in Mobicontrol. Please use a registration code that has an appropriate number of device licenses.</li><li>[3417]: Product Activation failed: Failed to establish communication with SOTI Services. </li></ol>"
            }
          },
          "security": [
            {
              "oauth2": []
            }
          ]
        }
      },
      "/signal/signalHealth/services": {
        "get": {
          "tags": [
            "Signal Health"
          ],
          "summary": "Returns list of the health of all Signal Services.",
          "description": "Retrieves a list of the health status of all Signal Services.\r\n            <br />\r\n            Requires the caller be granted the \"View System Health\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SignalHealth_GetServiceHealth",
          "responses": {
            "200": {
              "description": "Operation Successful.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SignalServerMetric"
                }
              }
            },
            "401": {
              "description": "Failed to authenticate the request."
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            },
            "503": {
              "description": "Service Unavailable."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/signal/signalPolicies/{referenceId}/enable/{enabled}": {
        "put": {
          "tags": [
            "Signal Policies"
          ],
          "summary": "Enable/Disable the specific Signal Policy.",
          "description": "Enables or disables the specified Signal Policy.\r\n            <br />\r\n            Requires the caller be granted the \"Manage Signal Policy\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SignalPolicies_EnablePolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of Signal Policy.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "enabled",
              "in": "path",
              "required": true,
              "description": "True or False.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/SignalPolicy"
              }
            },
            "400": {
              "description": "Contract Validation Failed."
            },
            "401": {
              "description": "Failed to authenticate the request."
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            },
            "503": {
              "description": "Service Unavailable."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/signal/signalPolicies": {
        "get": {
          "tags": [
            "Signal Policies"
          ],
          "summary": "Returns all Signal Policies.",
          "description": "Retrieves all Signal Policies from the server.\r\n            <br />\r\n            Requires the caller be granted the \"View Signal Policy\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SignalPolicies_GetAllPolicies",
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SignalPolicySummary"
                }
              }
            },
            "401": {
              "description": "Failed to authenticate the request."
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            },
            "503": {
              "description": "Service Unavailable."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/signal/signalPolicies/actionSearch": {
        "get": {
          "tags": [
            "Signal Policies"
          ],
          "summary": "Returns all Signal Policies filtered by Action.",
          "description": "Retrieves all Signal Policies from the server that are using the specified action with the specified parameter value.\r\n            <br />\r\n            Requires the caller be granted the \"View Signal Policy\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SignalPolicies_GetPoliciesUsingActionParameter",
          "parameters": [
            {
              "type": "string",
              "name": "actionName",
              "in": "query",
              "required": true,
              "description": "Name of action to filter on.",
              "x-schema": {
                "$ref": "#/definitions/MobiControlActionTypes"
              },
              "x-nullable": false,
              "enum": [
                "SendEmail",
                "SendScript",
                "SendMessageToDevice",
                "RelocateDevice",
                "TriggerAlert",
                "TriggerWebhook"
              ],
              "x-enumType": "MobiControlActionTypes"
            },
            {
              "type": "string",
              "name": "parameterName",
              "in": "query",
              "description": "Name of parameter used by action to check.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "parameterValue",
              "in": "query",
              "description": "Value of parameter used by action to check.",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SignalPolicySummary"
                }
              }
            },
            "400": {
              "description": "Contract Validation Failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            },
            "503": {
              "description": "Service Unavailable."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/signal/signalPolicies/webhookSearch": {
        "get": {
          "tags": [
            "Signal Policies"
          ],
          "summary": "Retrieves all Signal Policies that are using a specific webhook action.",
          "description": "Retrieves all Signal Policies from the server that are using a specific webhook action.\r\n            <br />\r\n            Requires the caller be granted the \"View Signal Policy\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SignalPolicies_GetPoliciesUsingWebhook",
          "parameters": [
            {
              "type": "string",
              "name": "webhookId",
              "in": "query",
              "required": true,
              "description": "Reference Id of the Webhook.",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SignalPolicySummary"
                }
              }
            },
            "400": {
              "description": "Contract Validation Failed."
            },
            "401": {
              "description": "Failed to authenticate the request."
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            },
            "503": {
              "description": "Service Unavailable."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/signal/signalPolicies/{referenceId}": {
        "get": {
          "tags": [
            "Signal Policies"
          ],
          "summary": "Retrieves details about the specified Signal Policy.",
          "description": "Retrieves details about the specified Signal Policy from the server.\r\n            <br />\r\n            Requires the caller be granted the 'View Signal Policies' permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SignalPolicies_GetPolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of the Signal Policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/SignalPolicy"
              }
            },
            "400": {
              "description": "Contract Validation Failed."
            },
            "401": {
              "description": "Failed to authenticate the request."
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            },
            "503": {
              "description": "Service Unavailable."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Signal Policies"
          ],
          "summary": "Deletes an existing Signal Policy.",
          "description": "Deletes the specified Signal Policy.\r\n            <br />\r\n            Requires the caller be granted the \"Manage Signal Policy\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SignalPolicies_RemovePolicy",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of Signal Policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Success."
            },
            "400": {
              "description": "Contract Validation Failed."
            },
            "401": {
              "description": "Failed to authenticate the request."
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            },
            "503": {
              "description": "Service Unavailable."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/signal/signalPolicies/{referenceId}/activityLog": {
        "get": {
          "tags": [
            "Signal Policies"
          ],
          "summary": "Returns the Activity Log for a specific Signal Policy.",
          "description": "Retrieves the activity log associated with the specified Signal Policy.\r\n            <br />\r\n            Requires the caller be granted the \"View Signal Policy\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SignalPolicies_GetPolicyActivity",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of Signal Policy.",
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Where in the list to begin.",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "The size of the list to be returned.",
              "format": "int32",
              "default": 50,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SignalPolicyActivity"
                }
              }
            },
            "400": {
              "description": "Contract Validation Failed."
            },
            "401": {
              "description": "Failed to authenticate the request."
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            },
            "503": {
              "description": "Service Unavailable."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/signal/signalPolicies/{referenceId}/changelog": {
        "get": {
          "tags": [
            "Signal Policies"
          ],
          "summary": "Returns the Change Log for a specific Signal Policy.",
          "description": "Retrieves the change log associated with the specified Signal Policy.\r\n            <br />\r\n            Requires the caller be granted the \"View Signal Policy\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SignalPolicies_GetPolicyChangeLog",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Reference Id of Signal Policy.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SignalPolicyChangeLog"
                }
              }
            },
            "400": {
              "description": "Contract Validation Failed."
            },
            "401": {
              "description": "Failed to authenticate the request."
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            },
            "503": {
              "description": "Service Unavailable."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/signal/domainschemas": {
        "get": {
          "tags": [
            "Signal Schema"
          ],
          "summary": "Returns the Signal Domain Schemas.",
          "description": "Retrieves Signal Policy domain schemas from the server.\r\n            <br />\r\n            Requires the caller be granted the \"View Signal Policy\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SignalSchema_GetDomainSchemas",
          "parameters": [
            {
              "type": "string",
              "name": "locale",
              "in": "query",
              "required": true,
              "description": "Locale used when returning language-specific strings.",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DomainSchema"
                }
              }
            },
            "400": {
              "description": "Contract Validation Failed."
            },
            "401": {
              "description": "Failed to authenticate the request."
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            },
            "503": {
              "description": "Service Unavailable."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/android/managedGooglePlayBindings/{referenceId}/actions/{enterpriseAction}": {
        "post": {
          "tags": [
            "Managed Google Play Management"
          ],
          "summary": "Execute an action on a Managed Google Play binding.",
          "description": "Sends an action to an Managed Google Play binding.<br /><b>(Available Since MobiControl v15.4.0)</b><br />\r\n            Supported Actions:\r\n            <ul><li>Sync: Sync approved Managed Google Play Store applications with MobiControl.</li></ul><br />Requires the caller be granted the \"Manage Android Enterprise Bindings\" permission.<br />",
          "operationId": "ManagedGooglePlayManagement_ExecuteManagedGooglePlayAction",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Managed Google Play binding identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "enterpriseAction",
              "in": "path",
              "required": true,
              "description": "The action to be performed on the Google Domain binding.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "productId",
              "in": "query",
              "description": "ProductId to handle in case exists.",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully execute an action on a Managed Google Play binding."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/android/managedGooglePlayBindings": {
        "get": {
          "tags": [
            "Managed Google Play Management"
          ],
          "summary": "Returns the list of Managed Google Play bindings.",
          "description": "Returns the list of bindings for Managed Google Play under MobiControl.\r\n            <br />Requires the caller be granted the \"Web Console Access\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "ManagedGooglePlayManagement_GetManagedGooglePlayBindings",
          "responses": {
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "200": {
              "description": "Successfully returned list of enterprises.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ManagedGooglePlayEnterprise"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/android/managedGooglePlayBindings/{referenceId}": {
        "delete": {
          "tags": [
            "Managed Google Play Management"
          ],
          "summary": "Deletes the binding for Managed Google Play.",
          "description": "Deletes the binding for Managed Google Play under MobiControl.\r\n            <br />Requires the caller be granted the \"Manage Android Enterprise Bindings\" permission.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>",
          "operationId": "ManagedGooglePlayManagement_Unbind",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Identifier of the binding for Managed Google Play.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted the google play bindings."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>1104 - Unable to delete Enterprise Binding.&lt;exceptionMessage&gt;</li><li>1114 - Unable to delete Enterprise Binding. Please check your connectivity to SOTI Services and try again.</li><li>1115 -The Enterprise has Add Device Rules and/or App Catalog Rules associated with it and cannot be removed. Please delete the following Add Device Rules and App Catalog Rules from your server and try again:\r\n            <br /> Add Device: &lt;addDeviceRules&gt;\r\n            <br /> App Catalog: &lt;appCalatalogs&gt;  </li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/android/managedGooglePlayBindings/{referenceId}/apps": {
        "get": {
          "tags": [
            "Managed Google Play Management"
          ],
          "summary": "Retrieve approved applications for a Managed Google Play binding.",
          "description": "Returns a list of approved applications from the Managed Google Play Store for the provided Managed Google Play binding.\r\n            <br /><b>(Available Since MobiControl v15.4.0)</b>\r\n            Requires the caller be granted the \"Web Console Access\" permission..<br />",
          "operationId": "ManagedGooglePlayManagement_GetManagedGooglePlayProducts",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Managed Google Play binding identifier.",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "appName",
              "in": "query",
              "description": "Application bundle id.",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "isApproved",
              "in": "query",
              "description": "@deprecated. true if app is approved.",
              "default": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns approved applications for a Managed Google Play binding.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ManagedGooglePlayProduct"
                }
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/servers/searchServer": {
        "get": {
          "tags": [
            "Search Server"
          ],
          "summary": "Returns the list of search servers.",
          "description": "This API returns the list of search servers\r\n            <br /><br />Requires the caller be granted the \"Manage SOTI Search\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SearchServer_GetCurrentServers",
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/SearchServerInfo"
              }
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/servers/searchServer/{referenceId}": {
        "delete": {
          "tags": [
            "Search Server"
          ],
          "summary": "Deletes obsolete search server.",
          "description": "This API deletes obsolete search server.\r\n            <br /><br />Requires the caller be granted the \"Manage SOTI Search\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b><br />",
          "operationId": "SearchServer_DeleteObsoleteServer",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "No Content."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>9901 - Search server {FQDN} cannot be deleted when it is online.</li><li>9902 - Last remaining Search Server cannot be deleted.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/schedules/{referenceId}": {
        "get": {
          "tags": [
            "Schedules"
          ],
          "summary": "Returns a specified Schedules.",
          "description": "This API returns a specified Schedule.\r\n            <br />\r\n            Requires the caller be granted the \"View File Sync Policies\", \"View Telecom Expense Management Policies\", or \"View Profile Schedules\" permission.\r\n            <br /><b>(Available since MobiControl v2024.1.0).</b><br />",
          "operationId": "Schedules_GetSchedule",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "reference identifier of schedule.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/ScheduleSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Schedules"
          ],
          "summary": "Updates the specified schedule.",
          "description": "This API updates a specified Schedule.\r\n            <br />\r\n            Requires the caller be granted the \"Manage File Sync Policies\", \"Manage Telecom Expense Management Policies\", or \"Manage Profile Schedules\" permission.\r\n            <br /><b>(Available since MobiControl v2024.1.0).</b><br />",
          "operationId": "Schedules_UpdateSchedule",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "reference identifier of schedule.",
              "x-nullable": false
            },
            {
              "name": "schedule",
              "in": "body",
              "required": true,
              "description": "The schedule.",
              "schema": {
                "$ref": "#/definitions/ScheduleInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/ScheduleSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Schedules"
          ],
          "summary": "Deletes the specified schedule.",
          "description": "This API deletes a specified Schedule.\r\n            <br />\r\n            Requires the caller be granted the \"Manage File Sync Policies\" or \"Manage Telecom Expense Management Policies\" permission.\r\n            <br /><b>(Available since MobiControl v2024.1.0).</b><br />",
          "operationId": "Schedules_DeleteSchedule",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "reference identifier of schedule.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/schedules": {
        "post": {
          "tags": [
            "Schedules"
          ],
          "summary": "Creates schedule.",
          "description": "This API creates a schedule.\r\n            <br />\r\n            Requires the caller be granted the \"Manage File Sync Policies\", \"Manage Telecom Expense Management Policies\", or \"Manage Profile Schedules\" permission.\r\n            <br /><b>(Available since MobiControl v2024.1.0).</b><br />",
          "operationId": "Schedules_AddSchedule",
          "parameters": [
            {
              "name": "schedule",
              "in": "body",
              "required": true,
              "description": "The schedule.",
              "schema": {
                "$ref": "#/definitions/ScheduleInfo"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/ScheduleSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/scriptStatus/executionStatus": {
        "get": {
          "tags": [
            "Device Script Execution Status"
          ],
          "operationId": "DeviceScriptExecutionStatus_GetDeviceScriptsExecutionStatusInfo",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceScriptsExecutionStatusInfo"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/scriptStatus": {
        "get": {
          "tags": [
            "Device Script Execution Status"
          ],
          "operationId": "DeviceScriptExecutionStatus_GetDeviceScriptsStatus",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "sourceTypes",
              "in": "query",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/ScriptOrigin"
              },
              "x-enumType": "ScriptOrigin"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "orderBy",
              "in": "query",
              "x-schema": {
                "$ref": "#/definitions/ScriptExecutionStatusOrderBy"
              },
              "default": "CreatedDate",
              "x-nullable": false,
              "enum": [
                "CreatedDate",
                "ExecutionStatus"
              ],
              "x-enumType": "ScriptExecutionStatusOrderBy"
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "default": true,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "format": "int32",
              "default": 0,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "format": "int32",
              "default": 50,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceScriptStatus"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/scriptStatus/scriptOrigins": {
        "get": {
          "tags": [
            "Device Script Execution Status"
          ],
          "operationId": "DeviceScriptExecutionStatus_GetDeviceScriptsOrigins",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/scriptStatus/{deviceScriptExecutionReferenceId}/scriptContent": {
        "get": {
          "tags": [
            "Device Script Execution Status"
          ],
          "operationId": "DeviceScriptExecutionStatus_GetDeviceScriptContent",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceScriptExecutionReferenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceScript"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/scriptStatus/{deviceScriptExecutionReferenceId}/scriptOutput": {
        "get": {
          "tags": [
            "Device Script Execution Status"
          ],
          "operationId": "DeviceScriptExecutionStatus_GetDeviceScriptExecutionOutput",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceScriptExecutionReferenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeviceScriptExecutionOutput"
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/devices/{deviceId}/scriptStatus/{deviceScriptExecutionReferenceId}/scriptOutput/actions/request": {
        "post": {
          "tags": [
            "Device Script Execution Status"
          ],
          "operationId": "DeviceScriptExecutionStatus_RequestScriptExecutionOutputFromDevice",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "deviceScriptExecutionReferenceId",
              "in": "path",
              "required": true,
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": ""
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/servers/database/status": {
        "get": {
          "tags": [
            "Server Health"
          ],
          "summary": "Gets the Health Status of SQL Server and MobiControl databases.",
          "description": "Get the health status of SQL Server and MobiControl databases. This API also returns information about your MobiControl archive database and the temporary database. Requires the caller be granted \"View System Health\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "ServerHealth_GetSqlServerHealth",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SqlServerHealth"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/servers/deploymentServer/status": {
        "get": {
          "tags": [
            "Server Health"
          ],
          "summary": "Gets the status of the Deployment Servers.",
          "description": "Returns status information about all Deployment Servers. This includes the name, number of connected devices, status and queue length for each Deployment Server, as stored in the MobiControl database. Requires the caller be granted \"View System Health\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "ServerHealth_GetDeployServersStatus",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeploymentServerHealth"
                }
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/servers/deploymentServer/{dsName}/status": {
        "get": {
          "tags": [
            "Server Health"
          ],
          "summary": "Gets the status of a specific Deployment Server.",
          "description": "Returns status information as stored in the MobiControl Database about the Deployment Server specified by {dsName}. Requires the caller be granted \"View System Health\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "ServerHealth_GetDeploymentServerStatusDetailsByName",
          "parameters": [
            {
              "type": "string",
              "name": "dsName",
              "in": "path",
              "required": true,
              "description": "Host name of the Deployment Server",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/DeploymentServerHealthDetails"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/servers/managementServer/status": {
        "get": {
          "tags": [
            "Server Health"
          ],
          "summary": "Gets the status of the Management Servers.",
          "description": "Get the status of all Management Servers powering the MobiControl environment. Requires the caller be granted \"View System Health\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "ServerHealth_GetMsStatus",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ManagementServerHealth"
                }
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/servers/managementServer/{msName}/status": {
        "get": {
          "tags": [
            "Server Health"
          ],
          "summary": "Gets the status of a specific Management Server.",
          "description": "Get the status detail of a specific Management Server powering the MobiControl environment. Requires the caller be granted \"View System Health\" permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "ServerHealth_GetMsStatusDetail",
          "parameters": [
            {
              "type": "string",
              "name": "msName",
              "in": "path",
              "required": true,
              "description": "Host name of the Management Server",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/ManagementServerHealthDetails"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/systemHealth/settings": {
        "get": {
          "tags": [
            "System Health"
          ],
          "summary": "Gets the System Health Advanced Analytics Settings.",
          "description": "Get the status of System Health advanced analytics charts and if data is being collected by MobiControl to display the charts. This API also gets the rate at which the data is being collected from MobiControl to be displayed in charts. This API is only available with SOTI Premium Plus and Enterprise Plus Service. Requires the caller be granted \"Manage System Health\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "SystemHealth_GetSettings",
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "$ref": "#/definitions/SystemHealthSettingsResponse"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6600 - Failed to retrieve System Health settings because the MobiControl server does not have the required support contract. System Health settings are only available with SOTI Premium Plus and Enterprise Plus Service.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "System Health"
          ],
          "summary": "Update the System Health Advanced Analytics Settings.",
          "description": "This API is only available with SOTI Premium Plus and Enterprise Plus Service. When collect system data setting is disabled, the advanced analytics charts will not be shown and MobiControl system metrics data will not be collected. This API also allows to configure the rate at which the metrics data is collected from MobiControl to be displayed in charts. Requires the caller be granted \"Manage System Health\" permission.\r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "SystemHealth_PutSettings",
          "parameters": [
            {
              "name": "systemHealthSettings",
              "in": "body",
              "required": true,
              "description": "System Health Settings",
              "schema": {
                "$ref": "#/definitions/SystemHealthSettingsRequest"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "System Health Settings have been updated"
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6601 - Failed to update System Health settings because the MobiControl server does not have the required support contract. System Health settings are only available with SOTI Premium Plus and Enterprise Plus Service.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/systemHealth/metrics": {
        "get": {
          "tags": [
            "System Health"
          ],
          "summary": "Gets System Health metrics data for specified servers",
          "description": "Gets the metrics data for specified servers. You can specify start and end date time to see metrics data for the specified time period given the data is available. System Health metrics is only available with SOTI Premium Plus and Enterprise Plus Service. Requires the caller be granted \"View System Health\" permission.  \r\n            <br /><B>(Available Since MobiControl v15.3.0)</B>",
          "operationId": "SystemHealth_GetMetricPointData",
          "parameters": [
            {
              "type": "string",
              "name": "startTime",
              "in": "query",
              "required": true,
              "description": "Start Date Time. Format Year-Month-DayTHour:Minutes:SecondsZ (e.g. 2020-12-14T19:00:00Z)",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "string",
              "name": "endTime",
              "in": "query",
              "required": true,
              "description": "End Date Time. Format Year-Month-DayTHour:Minutes:SecondsZ (e.g. 2020-12-14T20:00:00Z)",
              "format": "date-time",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "ds",
              "in": "query",
              "description": "Host name of the Deployment Server (e.g. ds1 ds2)",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "type": "string"
              }
            },
            {
              "type": "array",
              "name": "ms",
              "in": "query",
              "description": "Host name of the Management Server (e.g. ms1 ms2)",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "type": "string"
              }
            },
            {
              "type": "array",
              "name": "m",
              "in": "query",
              "description": "Metric name (e.g. CPU Usage Available RAM Check-Ins)",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "name": "timeDensity",
              "in": "query",
              "description": "Time Density Frequency to define the time interval between each data point. Format [[h]ours | [m]inutes | [s]econds]:value (e.g. m:5)",
              "default": "",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "includeSummary",
              "in": "query",
              "description": "Should the summary be included in output",
              "default": true,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "includeStatistics",
              "in": "query",
              "description": "Should the statistics be included in output",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "includeHeader",
              "in": "query",
              "description": "Should the header be included in output",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "boolean",
              "name": "initialLoad",
              "in": "query",
              "description": "This is the initial or first load of data required, use internal mechanisms to retrieve necessary data",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Returns System Health metrics",
              "schema": {
                "type": "file"
              }
            },
            "401": {
              "description": "Unauthorized access"
            },
            "403": {
              "description": "Forbidden"
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:<br /><ol><li>6602 - Failed to retrieve System Health metrics because the MobiControl server does not have the required support contract. System Health metrics are only available with SOTI Premium Plus and Enterprise Plus Service.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/deviceScripts/type": {
        "get": {
          "tags": [
            "Device Script"
          ],
          "summary": "Gets metadata of all device scripts of selected types currently saved on the system. (Defaults to Legacy type if not defined).",
          "description": "Requires the caller be granted the 'View Device Scripts' permission.<br />\r\n            If no type is provided, it will default to Legacy.<br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "DeviceScript_GetScripts",
          "parameters": [
            {
              "type": "array",
              "name": "scriptTypes",
              "in": "query",
              "description": "script search type filter.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/DeviceScriptType"
              },
              "x-enumType": "DeviceScriptType"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceScriptMetadata"
                }
              }
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/deviceScripts/{referenceId}": {
        "get": {
          "tags": [
            "Device Script"
          ],
          "summary": "Gets a specific device script.",
          "description": "Requires the caller be granted the 'View Device Scripts' permission.<br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "DeviceScript_GetDeviceScript",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The device script's reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "$ref": "#/definitions/DeviceScriptSummary"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Device Script"
          ],
          "summary": "Updates a specified device script.",
          "description": "Requires the caller be granted the 'Manage Device Scripts' permission.<br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "DeviceScript_UpdateDeviceScript",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The device script's reference ID.",
              "x-nullable": false
            },
            {
              "name": "content",
              "in": "body",
              "required": true,
              "description": "The new content for the device script (in quotes). Max size 10MB.",
              "schema": {
                "type": "string"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "204": {
              "description": "No Content."
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden."
            },
            "413": {
              "description": "Content Too Large."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Device Script"
          ],
          "summary": "Delete a specified device script.",
          "description": "Requires the caller be granted the 'Manage Device Scripts' permission.<br />\r\n            Will only allow deletion if no other features (profiles, policies, etc.) are currently using the script.<br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "DeviceScript_DeleteDeviceScript",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "The device script's reference ID.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "No Content."
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>[8000] : Specified script with Id {reference ID} cannot be deleted as there are still features using it.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/deviceScripts": {
        "post": {
          "tags": [
            "Device Script"
          ],
          "summary": "Add a new device script to the System.",
          "description": "Requires the caller be granted the 'Manage Device Scripts' permission.<br />\r\n            If an existing script has the same name as the new script, by default it will not be added.<br />\r\n            However, if replaceExisting is set to true, it will return the same reference ID as the old script that was replaced.<br /><br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "DeviceScript_AddNewDeviceScript",
          "parameters": [
            {
              "name": "newScript",
              "in": "body",
              "required": true,
              "description": "The new device script object. Max size 10MB.",
              "schema": {
                "$ref": "#/definitions/DeviceScriptRequest"
              },
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "replaceExisting",
              "in": "query",
              "description": "If there is a device script saved in the system with the same name, should this device script replace replace it? (Defaults to false).",
              "default": false,
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "string"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "413": {
              "description": "Content Too Large."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>[8001] : Cannot add device script with name {name} since one with that name already exists.</li><li>[8002] : Cannot add device script with name {0} since special characters like \\, /, *, ?, \", :, &lt;, &gt;, and | are not allowed.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/androidFirmwareUpgrade/clients/{clientType}/actions/sync": {
        "get": {
          "tags": [
            "Android Firmware Upgrade Client"
          ],
          "summary": "Synchronize Android firmware upgrade client.",
          "description": "Synchronize Enrollment &amp; FOTA Ready status and target firmware version for target devices.\r\n            <br />Requires the caller to be granted Web Console Access permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AndroidFirmwareUpgradeClient_SyncClient",
          "parameters": [
            {
              "type": "string",
              "name": "clientType",
              "in": "path",
              "required": true,
              "description": "Android Firmware Upgrade Client Type.",
              "x-schema": {
                "$ref": "#/definitions/AndroidFirmwareUpgradeClientType"
              },
              "x-nullable": false,
              "enum": [
                "None",
                "Samsung",
                "Zebra"
              ],
              "x-enumType": "AndroidFirmwareUpgradeClientType"
            }
          ],
          "responses": {
            "400": {
              "description": "Contract validation failed."
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>3716 - Android Firmware Upgrade Zebra Synchronization is In-Progress State.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/androidFirmwareUpgrade/clients/zebra/actions/syncStatus": {
        "get": {
          "tags": [
            "Android Firmware Upgrade Client"
          ],
          "summary": "Retrieve Android firmware upgrade zebra synchronization status.",
          "description": "Returns the status of Android firmware upgrade synchronization process.\r\n            <br />Requires the caller to be granted Web Console Access permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AndroidFirmwareUpgradeClient_GetSyncStatus",
          "responses": {
            "200": {
              "description": "Returns zebra android firmware upgrade synchronization status.",
              "schema": {
                "$ref": "#/definitions/AndroidFirmwareUpgradeClientSyncStatus"
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>3717 - Android Firmware Upgrade Zebra Synchronization Process is not initiated.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/androidFirmwareUpgrade/clients/zebra/authorizationGrant": {
        "get": {
          "tags": [
            "Android Firmware Upgrade Client"
          ],
          "summary": "Retrieve Android firmware upgrade Zebra authorization grant.",
          "description": "Retrieve authorization grant from Zebra to generate access token required for firmware upgrade.\r\n            <br />Requires the caller to be granted Web Console Access permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AndroidFirmwareUpgradeClient_GetAuthorizationGrant",
          "responses": {
            "200": {
              "description": "Returns Zebra Android firmware upgrade authorization grant.",
              "schema": {
                "$ref": "#/definitions/AndroidFirmwareUpgradeAuthorizationGrant"
              }
            },
            "401": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/androidFirmwareUpgrade/clients/{clientType}/status": {
        "get": {
          "tags": [
            "Android Firmware Upgrade Client"
          ],
          "summary": "Retrieve Android firmware upgrade client status.",
          "description": "Retrieve OEM's Android firmware upgrade client registration status.\r\n            <br />Requires the caller to be granted Web Console Access permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AndroidFirmwareUpgradeClient_GetAndroidFirmwareUpgradeClientStatus",
          "parameters": [
            {
              "type": "string",
              "name": "clientType",
              "in": "path",
              "required": true,
              "description": "Android Firmware Upgrade Client Type.",
              "x-schema": {
                "$ref": "#/definitions/AndroidFirmwareUpgradeClientType"
              },
              "x-nullable": false,
              "enum": [
                "None",
                "Samsung",
                "Zebra"
              ],
              "x-enumType": "AndroidFirmwareUpgradeClientType"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns android firmware upgrade client response.",
              "schema": {
                "$ref": "#/definitions/AndroidFirmwareUpgradeClientStatus"
              }
            },
            "401": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/androidFirmwareUpgrade/zebra/availableFirmwareVersions": {
        "get": {
          "tags": [
            "Android Firmware Upgrade Client"
          ],
          "summary": "Retrieve Android firmware versions zebra.",
          "description": "Retrieve available target firmware versions for a Zebra device.\r\n            <br />Requires the caller to be granted Web Console Access permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "AndroidFirmwareUpgradeClient_GetAndroidFirmwareVersions",
          "parameters": [
            {
              "type": "string",
              "name": "model",
              "in": "query",
              "required": true,
              "description": "",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "currentFirmwareVersion",
              "in": "query",
              "required": true,
              "description": "",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "x-nullable": true,
              "description": "Android Firmware Versions.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AndroidFirmwareVersionContract"
                }
              }
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/androidFirmwareUpgrade/clients/{clientType}/reset": {
        "put": {
          "tags": [
            "Android Firmware Upgrade Client"
          ],
          "summary": "Reset Account.",
          "description": "Reset account for our OEM partner.\r\n            <br />Requires the caller to be granted Web Console Access permission.\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b>",
          "operationId": "AndroidFirmwareUpgradeClient_ResetAccount",
          "parameters": [
            {
              "type": "string",
              "name": "clientType",
              "in": "path",
              "required": true,
              "description": "Android Firmware Upgrade Client Type.",
              "x-schema": {
                "$ref": "#/definitions/AndroidFirmwareUpgradeClientType"
              },
              "x-nullable": false,
              "enum": [
                "None",
                "Samsung",
                "Zebra"
              ],
              "x-enumType": "AndroidFirmwareUpgradeClientType"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful.",
              "schema": {
                "type": "boolean"
              }
            },
            "401": {
              "description": "Unauthorized access."
            },
            "403": {
              "description": "Security Exception."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned:.<br /><ol><li>3721 - Android Firmware Upgrade Zebra Reset Account is In-Progress.</li></ol>"
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/androidFirmwareUpgrade/clients/{clientType}/summary": {
        "get": {
          "tags": [
            "Zebra Android Firmware Upgrade Client Summary"
          ],
          "summary": "Retrieve Android firmware upgrade client summary.",
          "description": "Retrieve the count of target devices, enrolled devices and FOTA Ready devices.\r\n            <br />Requires the caller to be granted Web Console Access permission.\r\n            <br /><b>(Available Since MobiControl v15.3.0)</b>",
          "operationId": "ZebraAndroidFirmwareUpgradeClientSummary_GetClientSummary",
          "parameters": [
            {
              "type": "string",
              "name": "clientType",
              "in": "path",
              "required": true,
              "description": "Android Firmware Upgrade ClientType.",
              "x-schema": {
                "$ref": "#/definitions/AndroidFirmwareUpgradeClientType2"
              },
              "x-nullable": false,
              "enum": [
                "None",
                "Samsung",
                "Zebra"
              ],
              "x-enumType": "AndroidFirmwareUpgradeClientType"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns Zebra Android firmware upgrade client summary.",
              "schema": {
                "$ref": "#/definitions/AndroidFirmwareUpgradeClientSummary"
              }
            },
            "401": {
              "description": "Unauthorized access."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentConfiguration/android/qRCodes": {
        "get": {
          "tags": [
            "Android Enrollment Configuration Qr Code"
          ],
          "summary": "GetQrCodeConfigurationsSummarySimple method to do the same.",
          "operationId": "AndroidEnrollmentConfigurationQrCode_GetQrCodeConfigurationsSummary",
          "parameters": [
            {
              "type": "string",
              "name": "searchString",
              "in": "query",
              "description": "Qr code name filter string.",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "order",
              "in": "query",
              "description": "data Retrieval options.",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "How many records to skip. Same as index.",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Record count to take.",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns {System.Collections.Generic.List`1}where T is {Soti.MobiControl.Android.QrCode.Web.Contracts.AndroidEnrollmentQrCodeConfigurationSummary}\r\n            on success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AndroidEnrollmentQrCodeConfigurationSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Android Enrollment Configuration Qr Code"
          ],
          "summary": "API to create new Android Enrollment Qr code configuration.",
          "operationId": "AndroidEnrollmentConfigurationQrCode_CreateQrCodeConfiguration",
          "parameters": [
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "qr code generator request.",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentQrCodeGenerator"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Android.QrCode.Web.Contracts.AndroidEnrollmentQrCodeConfiguration} Success.",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentQrCodeConfiguration"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentConfiguration/android/qRCodes/{referenceId}": {
        "get": {
          "tags": [
            "Android Enrollment Configuration Qr Code"
          ],
          "summary": "GetQrCodeConfigurationSummaryUsingReferenceId method to do the same.",
          "operationId": "AndroidEnrollmentConfigurationQrCode_GetQrCodeConfigurationUsingReferenceId",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Qr code reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Android.QrCode.Web.Contracts.AndroidEnrollmentQrCodeConfiguration} Success.",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentQrCodeConfiguration"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Android Enrollment Configuration Qr Code"
          ],
          "summary": "API to update existing QR code configuration.",
          "operationId": "AndroidEnrollmentConfigurationQrCode_UpdateQrCodeConfiguration",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "unique reference id.",
              "x-nullable": false
            },
            {
              "name": "request",
              "in": "body",
              "required": true,
              "description": "request parameter.",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentQrCodeGenerator"
              },
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Android.QrCode.Web.Contracts.AndroidEnrollmentQrCodeConfiguration}\r\n            Success.",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentQrCodeConfiguration"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Android Enrollment Configuration Qr Code"
          ],
          "summary": "API to delete existing QR code configuration.",
          "operationId": "AndroidEnrollmentConfigurationQrCode_DeleteQrCodeConfiguration",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "unique reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Success."
            },
            "202": {
              "description": "Success but in pipeline."
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentConfiguration/android/qRCodes/{referenceId}/svg": {
        "get": {
          "tags": [
            "Android Enrollment Configuration Qr Code"
          ],
          "summary": "API to get svg data for Qr code configuration.",
          "operationId": "AndroidEnrollmentConfigurationQrCode_GetQrCodeImageData",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "unique reference id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "file"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentConfiguration/android/qRCodes/{referenceId}/logs/summary": {
        "get": {
          "tags": [
            "Android Enrollment Configuration Qr Code"
          ],
          "summary": "API to get the count of information, warning and error logs.",
          "operationId": "AndroidEnrollmentConfigurationQrCode_GetQrCodeConfigurationLogsCountSummary",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for a QRCode configuration.",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "If specified, returns logs count only for the given log Severities.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity5"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "If specified, then returns logs count from specified startDate.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "If specified, then returns logs count till specified endDate.",
              "format": "date-time",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Android.QrCode.Web.Contracts.AndroidEnrollmentQrCodeConfigLogsCountSummary}\r\n            Success.",
              "schema": {
                "$ref": "#/definitions/AndroidEnrollmentQrCodeConfigLogsCountSummary"
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/enrollmentConfiguration/android/qRCodes/{referenceId}/logs": {
        "get": {
          "tags": [
            "Android Enrollment Configuration Qr Code"
          ],
          "summary": "Api to get the list of AndroidEnrollmentConfigurationQrCode logs.",
          "operationId": "AndroidEnrollmentConfigurationQrCode_GetQrCodeConfigurationLogsSummary",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Unique identifier for a QRCode configuration.",
              "x-nullable": false
            },
            {
              "type": "array",
              "name": "logSeverities",
              "in": "query",
              "description": "Log severity.",
              "collectionFormat": "multi",
              "x-nullable": true,
              "items": {
                "$ref": "#/definitions/EventSeverity5"
              },
              "x-enumType": "EventSeverity"
            },
            {
              "type": "string",
              "name": "startDate",
              "in": "query",
              "description": "Start date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "string",
              "name": "endDate",
              "in": "query",
              "description": "End date.",
              "format": "date-time",
              "x-nullable": true
            },
            {
              "type": "boolean",
              "name": "orderByDesc",
              "in": "query",
              "description": "Determines the order. If set to true order is descending.",
              "default": false,
              "x-nullable": false
            },
            {
              "type": "integer",
              "name": "skip",
              "in": "query",
              "description": "Determines how many entities to skip.",
              "format": "int32",
              "x-nullable": true
            },
            {
              "type": "integer",
              "name": "take",
              "in": "query",
              "description": "Determines how many entities to take.",
              "format": "int32",
              "x-nullable": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returns {System.Collections.Generic.List`1}where T is {Soti.MobiControl.Android.QrCode.Web.Contracts.AndroidEnrollmentQrCodeConfigLogSummary}\r\n            on success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AndroidEnrollmentQrCodeConfigLogSummary"
                }
              }
            },
            "400": {
              "description": "Contract validation failed."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/windows/devices/{deviceId}/actions/fetchBitLockerKeys": {
        "post": {
          "tags": [
            "Windows Bit Locker Keys"
          ],
          "summary": "Returns the BitLocker keys information for a device.",
          "description": "This API returns the BitLocker keys information for a device.\r\n            <br /><br />\r\n            Requires the caller be granted the \"View Decrypted Personal Recovery Key\" permission.\r\n            <br /><b>(Available Since MobiControl v2024.0.0)</b><br />",
          "operationId": "WindowsBitLockerKeys_RequestWindowsBitLockerKeys",
          "parameters": [
            {
              "type": "string",
              "name": "deviceId",
              "in": "path",
              "required": true,
              "description": "The device identifier.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "Success.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/WindowsBitLockerKey"
                }
              }
            },
            "400": {
              "description": "Contract Validation Failed."
            },
            "401": {
              "description": "Unauthorized."
            },
            "403": {
              "description": "Forbidden."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/webhookCredentials/basic": {
        "post": {
          "tags": [
            "Webhook Credentials"
          ],
          "summary": "Creates a new Basic Webhook Credential in MobiControl.",
          "description": "Returns Webhook Credential Details with Reference Id.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "WebhookCredentials_CreateBasic",
          "parameters": [
            {
              "name": "basicCredential",
              "in": "body",
              "required": true,
              "description": "Webhook Credential Details.",
              "schema": {
                "$ref": "#/definitions/BasicCredential"
              },
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Webhooks.Web.Contracts.Authentication.BasicCredentialSummary}Successfully returns newly created Webhook Credential details.",
              "schema": {
                "$ref": "#/definitions/BasicCredentialSummary"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10001: Webhook Credential name already exists.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/webhookCredentials/apiKey": {
        "post": {
          "tags": [
            "Webhook Credentials"
          ],
          "summary": "Creates a new ApiKey Webhook Credential in MobiControl.",
          "description": "Returns Webhook Credential Details with Reference Id.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "WebhookCredentials_CreateApiKey",
          "parameters": [
            {
              "name": "apiKeyCredential",
              "in": "body",
              "required": true,
              "description": "Webhook Credential Details.",
              "schema": {
                "$ref": "#/definitions/ApiKeyCredential"
              },
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Webhooks.Web.Contracts.Authentication.ApiKeyCredentialSummary}Successfully returns newly created Webhook Credential details.",
              "schema": {
                "$ref": "#/definitions/ApiKeyCredentialSummary"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10001: Webhook Credential name already exists.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/webhookCredentials/none": {
        "post": {
          "tags": [
            "Webhook Credentials"
          ],
          "summary": "Creates a new None Webhook Credential in MobiControl.",
          "description": "Returns Webhook Credential Details with Reference Id.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "WebhookCredentials_CreateNone",
          "parameters": [
            {
              "name": "noneCredential",
              "in": "body",
              "required": true,
              "description": "Webhook Credential Details.",
              "schema": {
                "$ref": "#/definitions/NoneCredential"
              },
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Webhooks.Web.Contracts.Authentication.NoneCredentialSummary}Successfully returns newly created Webhook Credential details.",
              "schema": {
                "$ref": "#/definitions/NoneCredentialSummary"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10001: Webhook Credential name already exists.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/webhookCredentials/{referenceId}": {
        "get": {
          "tags": [
            "Webhook Credentials"
          ],
          "summary": "Gets Webhook Credential Details in MobiControl based on the Reference Id.",
          "description": "Webhook Credential Details based on Reference Id parameter.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "WebhookCredentials_Get",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Webhook Credential Reference Id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Webhooks.Web.Contracts.Authentication.WebhookCredentialSummary}Successfully returns a Webhook Credential Details.",
              "schema": {
                "$ref": "#/definitions/WebhookCredentialSummary"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden or no data found."
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Webhook Credentials"
          ],
          "summary": "Deletes Webhook Credential in MobiControl based on the Reference Id.",
          "description": "<br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "WebhookCredentials_Delete",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Webhook Credential Reference Id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted Webhook Credential."
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden or no data found."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10004: Cannot delete Webhook Credential since it is being used by active Webhooks.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/webhookCredentials/basic/{referenceId}": {
        "put": {
          "tags": [
            "Webhook Credentials"
          ],
          "summary": "Update Webhook Credential Details in MobiControl based on the Reference Id.",
          "description": "Returns Webhook Credential Details with Reference Id.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "WebhookCredentials_UpdateBasic",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "External ReferenceId to identify the WebhookCredential.",
              "x-nullable": false
            },
            {
              "name": "basicCredential",
              "in": "body",
              "required": true,
              "description": "Webhook Credential Details.",
              "schema": {
                "$ref": "#/definitions/BasicCredential"
              },
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Webhooks.Web.Contracts.Authentication.BasicCredentialSummary}Successfully returns newly created Webhook Credential details.",
              "schema": {
                "$ref": "#/definitions/BasicCredentialSummary"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10001: Webhook Credential name already exists.</li><li>10003: Webhook Credential not found.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/webhookCredentials/apiKey/{referenceId}": {
        "put": {
          "tags": [
            "Webhook Credentials"
          ],
          "summary": "Update Webhook Credential Details in MobiControl based on the Reference Id.",
          "description": "Returns Webhook Credential Details with Reference Id.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "WebhookCredentials_UpdateApiKey",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "External ReferenceId to identify the WebhookCredential.",
              "x-nullable": false
            },
            {
              "name": "apiKeyCredential",
              "in": "body",
              "required": true,
              "description": "Webhook Credential Details.",
              "schema": {
                "$ref": "#/definitions/ApiKeyCredential"
              },
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Webhooks.Web.Contracts.Authentication.ApiKeyCredentialSummary}Successfully returns newly created Webhook Credential details.",
              "schema": {
                "$ref": "#/definitions/ApiKeyCredentialSummary"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10001: Webhook Credential name already exists.</li><li>10003: Webhook Credential not found.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/webhookCredentials/none/{referenceId}": {
        "put": {
          "tags": [
            "Webhook Credentials"
          ],
          "summary": "Update Webhook Credential Details in MobiControl based on the Reference Id.",
          "description": "Returns Webhook Credential Details with Reference Id.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "WebhookCredentials_UpdateNone",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "External ReferenceId to identify the WebhookCredential.",
              "x-nullable": false
            },
            {
              "name": "noneCredential",
              "in": "body",
              "required": true,
              "description": "Webhook Credential Details.",
              "schema": {
                "$ref": "#/definitions/NoneCredential"
              },
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Webhooks.Web.Contracts.Authentication.NoneCredentialSummary}Successfully returns newly created Webhook Credential details.",
              "schema": {
                "$ref": "#/definitions/NoneCredentialSummary"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10001: Webhook Credential name already exists.</li><li>10003: Webhook Credential not found.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/webhooks": {
        "post": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Creates a new Webhook in MobiControl.",
          "description": "Returns Webhook Details with Reference Id.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "Webhooks_Create",
          "parameters": [
            {
              "name": "webhook",
              "in": "body",
              "required": true,
              "description": "Webhook Details.",
              "schema": {
                "$ref": "#/definitions/Webhook"
              },
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Webhooks.Web.Contracts.WebhookSummary}Successfully returns newly created Webhook details.",
              "schema": {
                "$ref": "#/definitions/WebhookSummary"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10000: Webhook name already exists.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "get": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Gets all the Webhooks in MobiControl.",
          "description": "Returns all Webhooks Details in the MobiControl.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "Webhooks_GetAll",
          "responses": {
            "200": {
              "description": "{System.Collections.Generic.List`1}where T is {Soti.MobiControl.Webhooks.Web.Contracts.WebhookSummary}Successfully returns a list of all Webhooks.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/WebhookSummary"
                }
              }
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/webhooks/{referenceId}": {
        "get": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Gets Webhook Details in MobiControl based on the Reference Id.",
          "description": "Webhook Details based on Reference Id parameter.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "Webhooks_Get",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Webhook Reference Id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Webhooks.Web.Contracts.WebhookSummary}Successfully returns a Webhook Details.",
              "schema": {
                "$ref": "#/definitions/WebhookSummary"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden or no data found."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10005: Cannot process request on deleted webhook.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Deletes Webhook in MobiControl based on the Reference Id.",
          "description": "<br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "Webhooks_Delete",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Webhook Reference Id.",
              "x-nullable": false
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted the Webhook."
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden or no data found."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10005: Cannot process request on deleted webhook.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Update Webhook Details in MobiControl based on the Reference Id.",
          "description": "Updated Webhook Details based on Reference Id parameter.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "Webhooks_Update",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Webhook Reference Id.",
              "x-nullable": false
            },
            {
              "name": "updatedWebhook",
              "in": "body",
              "required": true,
              "description": "Updated webhook info.",
              "schema": {
                "$ref": "#/definitions/Webhook"
              },
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "{Soti.MobiControl.Webhooks.Web.Contracts.WebhookSummary}Successfully returns a Webhook Details.",
              "schema": {
                "$ref": "#/definitions/WebhookSummary"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden or no data found."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10000: Webhook name already exists.</li><li>10002: Webhook not found.</li><li>10005: Cannot process request on deleted webhook.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/webhooks/status/{referenceId}": {
        "put": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Update Webhook Status in MobiControl based on the Reference Id.",
          "description": "<br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "Webhooks_UpdateStatus",
          "parameters": [
            {
              "type": "string",
              "name": "referenceId",
              "in": "path",
              "required": true,
              "description": "Webhook Reference Id.",
              "x-nullable": false
            },
            {
              "name": "status",
              "in": "body",
              "required": true,
              "description": "Updated webhook info.",
              "schema": {
                "$ref": "#/definitions/WebhookStatus",
                "x-enumType": "WebhookStatus"
              },
              "x-nullable": false,
              "x-enumType": "WebhookStatus"
            }
          ],
          "responses": {
            "200": {
              "description": "Status update success or failure.",
              "schema": {
                "type": "boolean"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden or no data found."
            },
            "422": {
              "description": "Violated logical condition.<br />The following ErrorCode values can be returned.<br /><ol><li>10007: Cannot process request on deleted webhook.</li></ol>"
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      },
      "/webhooks/test": {
        "post": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Test a Webhook in MobiControl.",
          "description": "True if successful, else False.\r\n            <br />Requires the caller be granted the \"Manage Webhooks\" permission.\r\n            <br /><b>(Available since MobiControl v2024.0.0)</b>",
          "operationId": "Webhooks_Test",
          "parameters": [
            {
              "name": "webhook",
              "in": "body",
              "required": true,
              "description": "Webhook Details.",
              "schema": {
                "$ref": "#/definitions/Webhook"
              },
              "x-nullable": false
            }
          ],
          "responses": {
            "200": {
              "description": "True if successful else False.",
              "schema": {
                "type": "boolean"
              }
            },
            "400": {
              "description": "Bad Request."
            },
            "403": {
              "description": "Forbidden."
            },
            "500": {
              "description": "Internal Server Error."
            }
          },
          "security": [
            {
              "oauth2": [
                ""
              ]
            }
          ]
        }
      }
    },
    "definitions": {
      "AndroidDeploymentType": {
        "type": "object",
        "required": [
          "DeploymentType"
        ],
        "properties": {
          "DeploymentType": {
            "$ref": "#/definitions/AllowedAndroidType",
            "x-enumType": "AllowedAndroidType"
          }
        }
      },
      "AllowedAndroidType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AndroidEnterpriseOnly",
          "OemLegacy",
          "All"
        ],
        "enum": [
          "AndroidEnterpriseOnly",
          "OemLegacy",
          "All"
        ],
        "x-enumType": "AllowedAndroidType"
      },
      "SamsungElmConfiguration": {
        "type": "object",
        "required": [
          "ConfigurationType"
        ],
        "properties": {
          "ConfigurationType": {
            "$ref": "#/definitions/SamsungElmConfigurationType",
            "x-enumType": "SamsungElmConfigurationType"
          },
          "ElmKey": {
            "type": "string"
          }
        }
      },
      "SamsungElmConfigurationType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Standard",
          "Custom"
        ],
        "enum": [
          "Standard",
          "Custom"
        ],
        "x-enumType": "SamsungElmConfigurationType"
      },
      "SamsungKpeConfiguration": {
        "type": "object",
        "properties": {
          "ConfigurationType": {
            "$ref": "#/definitions/SamsungKpeConfigurationType",
            "x-enumType": "SamsungKpeConfigurationType"
          },
          "KpeKey": {
            "type": "string"
          },
          "BckKey": {
            "type": "string"
          }
        }
      },
      "SamsungKpeConfigurationType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Standard",
          "Custom"
        ],
        "enum": [
          "Standard",
          "Custom"
        ],
        "x-enumType": "SamsungKpeConfigurationType"
      },
      "MatchDeviceCriteria": {
        "type": "object",
        "required": [
          "MatchCriteria"
        ],
        "properties": {
          "MatchCriteria": {
            "$ref": "#/definitions/DeviceMatchCriteria",
            "x-enumType": "DeviceMatchCriteria"
          }
        }
      },
      "DeviceMatchCriteria": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "DeviceId",
          "HardwareId"
        ],
        "enum": [
          "DeviceId",
          "HardwareId"
        ],
        "x-enumType": "DeviceMatchCriteria"
      },
      "AndroidEnterpriseCertificateInfo": {
        "type": "object",
        "description": "Android Enterprise Certificate Info which is specific to an OEM    \n----------------\nAn OEM is different from manufacturer in the following way.\nFor example Honeywell OEM can have Honeywell, Inc or intermec or Honeywell as its manufacturers. \nor a Zebra as an OEM can have Zebra Technologies as its manufacturer\n--------------",
        "required": [
          "NotBeforeDate",
          "NotAfterDate",
          "Oem"
        ],
        "properties": {
          "SubjectName": {
            "type": "string"
          },
          "IssuerName": {
            "type": "string"
          },
          "NotBeforeDate": {
            "type": "string",
            "format": "date-time"
          },
          "NotAfterDate": {
            "type": "string",
            "format": "date-time"
          },
          "Thumbprint": {
            "type": "string"
          },
          "Oem": {
            "description": "OEM",
            "allOf": [
              {
                "$ref": "#/definitions/AndroidOEM"
              }
            ],
            "x-enumType": "AndroidOEM"
          }
        }
      },
      "AndroidOEM": {
        "type": "string",
        "description": "Android Vendors ",
        "x-enumNames": [
          "ACER",
          "AMAZON",
          "BQ",
          "CASIO",
          "CROSSMATCH",
          "DATALOGIC",
          "DRS",
          "ELO",
          "GARMIN",
          "GENERIC",
          "GETAC",
          "GOOGLE",
          "HONEYWELL",
          "HUAWEI",
          "HUAWEIEMUI",
          "INTERMEC",
          "JANAM",
          "KYOCERA",
          "KYOCERAPS",
          "LENOVO",
          "LG",
          "M3",
          "Matsunichi",
          "MOTOROLA",
          "PANASONIC",
          "PIDION",
          "POINTMOBILE",
          "SAMSUNG",
          "SONIM",
          "SONY",
          "SOTI",
          "UNITECH",
          "UROVO",
          "WORKMATE",
          "ZEBRA"
        ],
        "enum": [
          "ACER",
          "AMAZON",
          "BQ",
          "CASIO",
          "CROSSMATCH",
          "DATALOGIC",
          "DRS",
          "ELO",
          "GARMIN",
          "GENERIC",
          "GETAC",
          "GOOGLE",
          "HONEYWELL",
          "HUAWEI",
          "HUAWEIEMUI",
          "INTERMEC",
          "JANAM",
          "KYOCERA",
          "KYOCERAPS",
          "LENOVO",
          "LG",
          "M3",
          "Matsunichi",
          "MOTOROLA",
          "PANASONIC",
          "PIDION",
          "POINTMOBILE",
          "SAMSUNG",
          "SONIM",
          "SONY",
          "SOTI",
          "UNITECH",
          "UROVO",
          "WORKMATE",
          "ZEBRA"
        ],
        "x-enumType": "AndroidOEM"
      },
      "BrandingImages": {
        "type": "string",
        "description": "Branding Image Types",
        "x-enumNames": [
          "SelfServicePortalLogo",
          "EnrollmentPortalLogo",
          "LoginPortalLogo",
          "AdminConsolePortalLogo"
        ],
        "enum": [
          "SelfServicePortalLogo",
          "EnrollmentPortalLogo",
          "LoginPortalLogo",
          "AdminConsolePortalLogo"
        ],
        "x-enumType": "BrandingImages"
      },
      "CompliancePolicySummary": {
        "type": "object",
        "description": "Summary of a compliance policy\n            ",
        "required": [
          "DeviceFamily",
          "IsAssigned",
          "Status",
          "Actions"
        ],
        "properties": {
          "Assigned": {
            "type": "integer",
            "description": "Number of devices that the compliance policy is assigned to\n            ",
            "format": "int32"
          },
          "AssignedBy": {
            "type": "string",
            "description": "User the policy was assigned by\n            "
          },
          "AssignedDate": {
            "type": "string",
            "description": "Date the policy was assigned\n            ",
            "format": "date-time"
          },
          "Compliant": {
            "type": "integer",
            "description": "Number of compliant devices\n            ",
            "format": "int32"
          },
          "CreatedBy": {
            "type": "string",
            "description": "User who created the compliance policy\n            "
          },
          "CreatedDate": {
            "type": "string",
            "description": "Created date\n            ",
            "format": "date-time"
          },
          "CriteriaExpression": {
            "type": "string",
            "description": "Conditions of this compliance policy\n            "
          },
          "Description": {
            "type": "string",
            "description": "Description of this compliance policy\n            "
          },
          "DeviceFamily": {
            "description": "Target device family\nWhen the DeviceFamily is iOS, both iOS and macOS devices are included\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/ComplianceDeviceFamily"
              }
            ],
            "x-enumType": "ComplianceDeviceFamily"
          },
          "IsAssigned": {
            "type": "boolean"
          },
          "LastModified": {
            "type": "string",
            "description": "Updated date\n            ",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "type": "string",
            "description": "User who updated the compliance policy\n            "
          },
          "Name": {
            "type": "string",
            "description": "Name of this compliance policy\n            "
          },
          "NonCompliant": {
            "type": "integer",
            "description": "Number of non compliant devices\n            ",
            "format": "int32"
          },
          "Pending": {
            "type": "integer",
            "description": "Number of devices that are pending compliance evaluation\n            ",
            "format": "int32"
          },
          "ReferenceId": {
            "type": "string",
            "description": "Reference ID of this compliance policy\n            "
          },
          "Status": {
            "description": "Status of the policy\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/CompliancePolicyStatus"
              }
            ],
            "x-enumType": "CompliancePolicyStatus"
          },
          "Actions": {
            "type": "integer",
            "description": "Number of Actions\n            ",
            "format": "int32"
          }
        }
      },
      "ComplianceDeviceFamily": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "iOS",
          "Android",
          "Linux",
          "WindowsModern",
          "Chrome"
        ],
        "enum": [
          "iOS",
          "Android",
          "Linux",
          "WindowsModern",
          "Chrome"
        ],
        "x-enumType": "ComplianceDeviceFamily"
      },
      "CompliancePolicyStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Disabled",
          "Active"
        ],
        "enum": [
          "Disabled",
          "Active"
        ],
        "x-enumType": "CompliancePolicyStatus"
      },
      "CompliancePolicy": {
        "type": "object",
        "description": "Compliance Policy\n            ",
        "required": [
          "CriteriaExpression",
          "DeviceFamily",
          "Name",
          "Status"
        ],
        "properties": {
          "CriteriaExpression": {
            "type": "string",
            "description": "Conditions of this compliance policy\n            ",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Description": {
            "type": "string",
            "description": "Description of this compliance policy\n            ",
            "maxLength": 500
          },
          "DeviceFamily": {
            "description": "Target device family\nWhen the DeviceFamily is iOS, both iOS and macOS devices are included\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/ComplianceDeviceFamily"
              }
            ],
            "x-enumType": "ComplianceDeviceFamily"
          },
          "Name": {
            "type": "string",
            "description": "Name of this compliance policy\n            ",
            "maxLength": 250,
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Status": {
            "description": "Status of the policy\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/CompliancePolicyStatus"
              }
            ],
            "x-enumType": "CompliancePolicyStatus"
          }
        }
      },
      "CompliancePolicyAssignmentSummary": {
        "type": "object",
        "description": "Assignment of a compliance policy\n            ",
        "properties": {
          "DeviceFilterExpression": {
            "type": "string",
            "description": "Gets or sets device filter expression"
          },
          "UserGroupsFilterExpression": {
            "type": "string",
            "description": "Gets or sets user groups filter expression"
          },
          "TargetDeviceGroups": {
            "type": "array",
            "description": "The target device groups.\n            ",
            "items": {
              "$ref": "#/definitions/TargetDeviceGroup"
            }
          },
          "TargetDevices": {
            "type": "array",
            "description": "The target devices.\n            ",
            "items": {
              "$ref": "#/definitions/ComplianceTargetDeviceInfo"
            }
          },
          "AssignDate": {
            "type": "string",
            "description": "Assignment date\n            ",
            "format": "date-time"
          },
          "AssignedBy": {
            "type": "string",
            "description": "Assignment user\n            "
          }
        }
      },
      "TargetDeviceGroup": {
        "type": "object",
        "description": "Target device group\n            ",
        "required": [
          "DeviceGroupPath",
          "Excluded"
        ],
        "properties": {
          "DeviceGroupPath": {
            "type": "string",
            "description": "Device group path\n            ",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Excluded": {
            "type": "boolean",
            "description": "Indicates whether the device group is excluded.\n            "
          }
        }
      },
      "ComplianceTargetDeviceInfo": {
        "allOf": [
          {
            "$ref": "#/definitions/TargetDevice"
          },
          {
            "type": "object",
            "description": "The target device definition",
            "properties": {
              "ParentPath": {
                "type": "string",
                "description": "Parent Path"
              },
              "DeviceName": {
                "type": "string",
                "description": "Device Name"
              }
            }
          }
        ]
      },
      "TargetDevice": {
        "type": "object",
        "description": "The target device definition\n            ",
        "required": [
          "DeviceId",
          "Excluded"
        ],
        "properties": {
          "DeviceId": {
            "type": "string",
            "description": "Device id\n            ",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Excluded": {
            "type": "boolean",
            "description": "Indicates whether the device is excluded\n            "
          }
        }
      },
      "TargetDeviceInfo": {
        "allOf": [
          {
            "$ref": "#/definitions/TargetDevice"
          },
          {
            "type": "object",
            "description": "The target device definition",
            "properties": {
              "ParentPath": {
                "type": "string",
                "description": "Parent Path"
              },
              "DeviceName": {
                "type": "string",
                "description": "Device Name"
              }
            }
          }
        ]
      },
      "DataRetrievalOptions": {
        "allOf": [
          {
            "$ref": "#/definitions/DataRetrievalOptionsSkipTakeOnly"
          },
          {
            "type": "object",
            "properties": {
              "Order": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DataRetrievalOrder"
                }
              }
            }
          }
        ]
      },
      "DataRetrievalOrder": {
        "type": "object",
        "required": [
          "Descending"
        ],
        "properties": {
          "By": {
            "type": "string"
          },
          "Descending": {
            "type": "boolean"
          }
        }
      },
      "DataRetrievalOptionsSkipTakeOnly": {
        "type": "object",
        "properties": {
          "Skip": {
            "type": "integer",
            "format": "int32"
          },
          "Take": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ComplianceAction": {
        "type": "object",
        "description": "Compliance action base\n            ",
        "x-abstract": true,
        "required": [
          "Type",
          "ActionInfoDescriptor"
        ],
        "properties": {
          "ExecutionDelay": {
            "type": "integer",
            "description": "Execution delay\n            ",
            "format": "int32"
          },
          "ExecutionDelayUnit": {
            "description": "Execution delay unit type\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/ExecutionDelayUnitType"
              }
            ],
            "x-enumType": "ExecutionDelayUnitType"
          },
          "ActionInformation": {
            "type": "string",
            "description": "Information based on compliance action\n            "
          },
          "Type": {
            "description": "Compliance action type\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/ComplianceActionType"
              }
            ],
            "x-enumType": "ComplianceActionType"
          },
          "ActionInfoDescriptor": {
            "description": "Action Info Descriptor",
            "allOf": [
              {
                "$ref": "#/definitions/ComplianceActionInfoDescriptor"
              }
            ],
            "x-enumType": "ComplianceActionInfoDescriptor"
          }
        }
      },
      "ExecutionDelayUnitType": {
        "type": "string",
        "description": "Execution Delay Unit Type\n            ",
        "x-enumNames": [
          "Hours",
          "Days"
        ],
        "enum": [
          "Hours",
          "Days"
        ],
        "x-enumType": "ExecutionDelayUnitType"
      },
      "ComplianceActionType": {
        "type": "string",
        "description": "Compliance action types\n            ",
        "x-enumNames": [
          "Exchange",
          "EmailNotification",
          "AzureConditionalAccess"
        ],
        "enum": [
          "Exchange",
          "EmailNotification",
          "AzureConditionalAccess"
        ],
        "x-enumType": "ComplianceActionType"
      },
      "ComplianceActionInfoDescriptor": {
        "type": "string",
        "description": "Action Information Descriptor",
        "x-enumNames": [
          "Na",
          "ExchangeServerName",
          "EmailRecipient",
          "AzureDeviceComplianceStatus"
        ],
        "enum": [
          "Na",
          "ExchangeServerName",
          "EmailRecipient",
          "AzureDeviceComplianceStatus"
        ],
        "x-enumType": "ComplianceActionInfoDescriptor"
      },
      "ExchangeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ComplianceAction"
          },
          {
            "type": "object",
            "required": [
              "ExchangeServerId"
            ],
            "properties": {
              "ExchangeServerId": {
                "type": "string",
                "description": "Reference ID of the exchange server.\n            ",
                "format": "guid"
              }
            }
          }
        ]
      },
      "EmailNotificationAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ComplianceAction"
          },
          {
            "type": "object",
            "properties": {
              "RepeatCountInDays": {
                "type": "integer",
                "description": "Count of how many days the action wil be repeated for\n            ",
                "format": "int32"
              },
              "EmailProfileName": {
                "type": "string",
                "description": "Email profile that will be used to send the email.\n            "
              },
              "Recipients": {
                "type": "array",
                "description": "List of recipients of the email\n            ",
                "items": {
                  "$ref": "#/definitions/ComplianceEmailRecipient"
                }
              },
              "EmailTemplateReferenceId": {
                "type": "string",
                "description": "Email template reference Id that will specify how the outgoing message will look like.\n            "
              }
            }
          }
        ]
      },
      "ComplianceEmailRecipient": {
        "type": "object",
        "description": "Email recipient\n            ",
        "required": [
          "Addressee"
        ],
        "properties": {
          "Addressee": {
            "description": "Addressee type\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/EmailAddresseeType"
              }
            ],
            "x-enumType": "EmailAddresseeType"
          },
          "Email": {
            "type": "string",
            "description": "Email address\n            "
          }
        }
      },
      "EmailAddresseeType": {
        "type": "string",
        "description": "Addressee type\n            ",
        "x-enumNames": [
          "To",
          "CarbonCopy",
          "BlindCarbonCopy"
        ],
        "enum": [
          "To",
          "CarbonCopy",
          "BlindCarbonCopy"
        ],
        "x-enumType": "EmailAddresseeType"
      },
      "AzureConditionalAccessAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ComplianceAction"
          },
          {
            "type": "object"
          }
        ]
      },
      "CompliancePolicyAssignment": {
        "allOf": [
          {
            "$ref": "#/definitions/Assignment"
          },
          {
            "type": "object",
            "description": "Assignment of a compliance policy\n            "
          }
        ]
      },
      "Assignment": {
        "type": "object",
        "description": "Assignment details",
        "properties": {
          "TargetDeviceGroups": {
            "type": "array",
            "description": "The target device groups.",
            "items": {
              "$ref": "#/definitions/TargetDeviceGroup"
            }
          },
          "TargetDevices": {
            "type": "array",
            "description": "The target devices.",
            "items": {
              "$ref": "#/definitions/TargetDevice"
            }
          },
          "DeviceFilterExpression": {
            "type": "string",
            "description": "Gets or sets device filter expression"
          },
          "UserGroupsFilterExpression": {
            "type": "string",
            "description": "Gets or sets user groups filter expression"
          }
        }
      },
      "ProfileAssignment": {
        "allOf": [
          {
            "$ref": "#/definitions/Assignment"
          },
          {
            "type": "object",
            "properties": {
              "AssignmentOptions": {
                "description": "Gets or sets Assignment Options for the profile",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileAssignmentOptions"
                  }
                ]
              }
            }
          }
        ]
      },
      "ProfileAssignmentOptions": {
        "type": "object",
        "description": "Profile assignment options",
        "required": [
          "IsInstalledSilently",
          "IsInstalledOnNextUpdate",
          "ReattemptIfFailed",
          "NetworkRestriction"
        ],
        "properties": {
          "IsInstalledSilently": {
            "type": "boolean",
            "description": "Indicates whether profile can be installed by device user on demand"
          },
          "AutoAssignDate": {
            "type": "string",
            "description": "The date when profile must be installed automatically",
            "format": "date-time"
          },
          "DisableDate": {
            "type": "string",
            "description": "The date when profile must be disabled automatically",
            "format": "date-time"
          },
          "RevokeDate": {
            "type": "string",
            "description": "The date when profile must be revoked automatically",
            "format": "date-time"
          },
          "IsInstalledOnNextUpdate": {
            "type": "boolean",
            "description": "Indicates whether this profile is installed immediately\nor on next device update schedule"
          },
          "ReattemptIfFailed": {
            "type": "boolean",
            "description": "Indicates if previously failed installations of a profile should be re-tried"
          },
          "NetworkRestriction": {
            "description": "Network restriction",
            "allOf": [
              {
                "$ref": "#/definitions/NetworkRestriction"
              }
            ],
            "x-enumType": "NetworkRestriction"
          },
          "PackageAssignmentOptions": {
            "description": "Package assignment options",
            "allOf": [
              {
                "$ref": "#/definitions/PackageAssignmentOptions"
              }
            ]
          },
          "ProfileAssignmentSchedule": {
            "description": "Profile Assignment Schedule\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/ProfileAssignmentSchedule"
              }
            ]
          },
          "ProfileSchedules": {
            "description": "Profile Schedules",
            "allOf": [
              {
                "$ref": "#/definitions/ProfileSchedules"
              }
            ]
          },
          "BatteryStatusRestriction": {
            "type": "integer",
            "description": "Battery status restriction.",
            "format": "int32"
          }
        }
      },
      "NetworkRestriction": {
        "type": "string",
        "description": "The network restrictions for profile assignment",
        "x-enumNames": [
          "ActiveSync",
          "LAN",
          "WiFi",
          "Cellular",
          "Roaming",
          "AnyNetwork"
        ],
        "enum": [
          "ActiveSync",
          "LAN",
          "WiFi",
          "Cellular",
          "Roaming",
          "AnyNetwork"
        ],
        "x-enumType": "NetworkRestriction"
      },
      "PackageAssignmentOptions": {
        "type": "object",
        "description": "The package assignment options",
        "required": [
          "PersistPackages",
          "UninstallUponRevocation",
          "ForceReinstallation"
        ],
        "properties": {
          "InstallationSchedule": {
            "description": "The installation schedule",
            "allOf": [
              {
                "$ref": "#/definitions/InstallationSchedule"
              }
            ]
          },
          "PersistPackages": {
            "type": "boolean",
            "description": "Indicates whether the packages should be persisted"
          },
          "UninstallUponRevocation": {
            "type": "boolean",
            "description": "Indicates whether package should be uninstalled upon revocation"
          },
          "ForceReinstallation": {
            "type": "boolean",
            "description": "Indicates whether package should be reinstalled whenever the device connects to the server "
          }
        }
      },
      "InstallationSchedule": {
        "type": "object",
        "description": "The installation schedule",
        "required": [
          "IsUtc",
          "IsTimeWindowUtc",
          "IsTimeWindowEnforced"
        ],
        "properties": {
          "DateTime": {
            "type": "string",
            "description": "The date and time",
            "format": "date-time"
          },
          "IsUtc": {
            "type": "boolean",
            "description": "Indicates whether date is UTC"
          },
          "TimeWindows": {
            "type": "array",
            "description": "Time windows during which the package should be installed",
            "items": {
              "$ref": "#/definitions/TimeWindow"
            }
          },
          "IsTimeWindowUtc": {
            "type": "boolean",
            "description": "Indicates whether the time windows are in UTC or device time"
          },
          "IsTimeWindowEnforced": {
            "type": "boolean",
            "description": "Indicates whether the time window restriction should be enforced or not"
          }
        }
      },
      "TimeWindow": {
        "type": "object",
        "description": "Time window during a day between which the package should be installed",
        "required": [
          "DayOfWeek",
          "From",
          "To"
        ],
        "properties": {
          "DayOfWeek": {
            "description": "Indicates on which day of the week this time window is specified for",
            "allOf": [
              {
                "$ref": "#/definitions/DayOfWeek"
              }
            ],
            "x-enumType": "DayOfWeek"
          },
          "From": {
            "type": "string",
            "description": "The start time of the time window",
            "format": "date-time"
          },
          "To": {
            "type": "string",
            "description": "The end time of the time window",
            "format": "date-time"
          }
        }
      },
      "DayOfWeek": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Daily",
          "Weekday",
          "Weekend"
        ],
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Daily",
          "Weekday",
          "Weekend"
        ],
        "x-enumType": "DayOfWeek"
      },
      "ProfileAssignmentSchedule": {
        "type": "object",
        "description": "Profile Assignment Schedule",
        "required": [
          "IsTimeWindowEnforced"
        ],
        "properties": {
          "TimeWindows": {
            "type": "array",
            "description": "Time windows during which the package should be pushed",
            "items": {
              "$ref": "#/definitions/TimeWindow"
            }
          },
          "IsTimeWindowEnforced": {
            "type": "boolean",
            "description": "Is time window enforced"
          }
        }
      },
      "ProfileSchedules": {
        "type": "object",
        "description": "Profile Schedules.",
        "properties": {
          "Schedules": {
            "type": "array",
            "description": "An array of schedules for this Profile Assignment.",
            "items": {
              "$ref": "#/definitions/ProfileSchedule"
            }
          }
        }
      },
      "ProfileSchedule": {
        "type": "object",
        "description": "Schedule during which Profile is assigned.",
        "properties": {
          "AssignmentScheduleReferenceId": {
            "type": "string",
            "description": "The Reference Id of the schedule\nthat assigns Profile."
          },
          "RevokingScheduleReferenceId": {
            "type": "string",
            "description": "The Reference Id of the schedule\nthat revokes Profile."
          }
        }
      },
      "ProfileAssignmentInfo": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileAssignment"
          },
          {
            "type": "object",
            "description": "Profile Assignment Info",
            "required": [
              "ProfileAssignmentStatus",
              "CreatedByDate"
            ],
            "properties": {
              "ProfileAssignmentStatus": {
                "description": "ProfileAssignmentStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProfileAssignmentStatus"
                  }
                ]
              },
              "CreatedByDate": {
                "type": "string",
                "description": "Created date",
                "format": "date-time"
              },
              "CreatedBy": {
                "type": "string",
                "description": "Created By"
              },
              "LastModifiedDate": {
                "type": "string",
                "description": "Last modified date",
                "format": "date-time"
              },
              "LastModifiedBy": {
                "type": "string",
                "description": "Last modified by"
              }
            }
          }
        ]
      },
      "ProfileAssignmentStatus": {
        "type": "string",
        "description": "Profile Assignment Status",
        "x-enumNames": [
          "NotAssigned",
          "Scheduled",
          "Active",
          "Superseded",
          "Abandoned",
          "Revoked"
        ],
        "enum": [
          "NotAssigned",
          "Scheduled",
          "Active",
          "Superseded",
          "Abandoned",
          "Revoked"
        ],
        "x-enumType": "ProfileAssignmentStatus"
      },
      "CompliancePolicyLogEntry": {
        "type": "object",
        "description": "Contains information for a compliance policy log entry",
        "required": [
          "Timestamp",
          "EventSeverity",
          "EventId",
          "EventOriginator"
        ],
        "properties": {
          "Timestamp": {
            "type": "string",
            "description": "Log entry timestamp",
            "format": "date-time"
          },
          "EventSeverity": {
            "description": "Log entry severity",
            "allOf": [
              {
                "$ref": "#/definitions/EventSeverity"
              }
            ],
            "x-enumType": "EventSeverity"
          },
          "Message": {
            "type": "string",
            "description": "Log entry message"
          },
          "SourceName": {
            "type": "string",
            "description": "Log entry source name"
          },
          "EventId": {
            "type": "integer",
            "description": "Log entry event identifier",
            "format": "int32"
          },
          "EventCode": {
            "type": "string",
            "description": "Log entry event identifier"
          },
          "EventOriginator": {
            "description": "Log entry source type",
            "allOf": [
              {
                "$ref": "#/definitions/EventOriginator"
              }
            ],
            "x-enumType": "EventOriginator"
          }
        }
      },
      "EventSeverity": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Information",
          "Warning",
          "Error"
        ],
        "enum": [
          "Information",
          "Warning",
          "Error"
        ],
        "x-enumType": "EventSeverity"
      },
      "EventOriginator": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "User",
          "Device",
          "Server",
          "System",
          "Exchange",
          "PrinterAdminServer"
        ],
        "enum": [
          "Unknown",
          "User",
          "Device",
          "Server",
          "System",
          "Exchange",
          "PrinterAdminServer"
        ],
        "x-enumType": "EventOriginator"
      },
      "LogEntryCount": {
        "type": "object",
        "required": [
          "EventSeverity",
          "LogSource",
          "Count"
        ],
        "properties": {
          "EventSeverity": {
            "$ref": "#/definitions/EventSeverity2",
            "x-enumType": "EventSeverity"
          },
          "LogSource": {
            "$ref": "#/definitions/EventOriginator2",
            "x-enumType": "EventOriginator"
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EventSeverity2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Information",
          "Warning",
          "Error"
        ],
        "enum": [
          "Information",
          "Warning",
          "Error"
        ],
        "x-enumType": "EventSeverity"
      },
      "EventOriginator2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "User",
          "Device",
          "Server",
          "System",
          "Exchange",
          "PrinterAdminServer"
        ],
        "enum": [
          "Unknown",
          "User",
          "Device",
          "Server",
          "System",
          "Exchange",
          "PrinterAdminServer"
        ],
        "x-enumType": "EventOriginator"
      },
      "DeviceGroup": {
        "type": "object",
        "required": [
          "Name",
          "Path",
          "Icon",
          "Kind"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": "msg_requiredProperty_deviceValidation"
              },
              {
                "type": "regexValidator",
                "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
                "errorMessage": "msg_invalidChar_deviceValidation"
              },
              {
                "type": "stringLengthValidator",
                "min": 0,
                "max": 255,
                "errorMessage": "msg_max255Character_deviceGroupName"
              }
            ]
          },
          "Path": {
            "type": "string",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": "msg_requiredProperty_deviceValidation"
              }
            ]
          },
          "Icon": {
            "$ref": "#/definitions/DeviceGroupIcon",
            "x-enumType": "DeviceGroupIcon",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": "msg_requiredProperty_deviceValidation"
              }
            ]
          },
          "Kind": {
            "$ref": "#/definitions/DeviceGroupKind",
            "x-enumType": "DeviceGroupKind",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": "msg_requiredProperty_deviceValidation"
              }
            ]
          },
          "ReferenceId": {
            "type": "string"
          }
        }
      },
      "DeviceGroupIcon": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Yellow",
          "Red",
          "Green",
          "Blue",
          "Purple",
          "Cyan",
          "None"
        ],
        "enum": [
          "Yellow",
          "Red",
          "Green",
          "Blue",
          "Purple",
          "Cyan",
          "None"
        ],
        "x-enumType": "DeviceGroupIcon"
      },
      "DeviceGroupKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Regular",
          "Virtual"
        ],
        "enum": [
          "Regular",
          "Virtual"
        ],
        "x-enumType": "DeviceGroupKind"
      },
      "VirtualDeviceGroup": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceGroup"
          },
          {
            "type": "object",
            "required": [
              "IsActualizationInProgress"
            ],
            "properties": {
              "Filter": {
                "$ref": "#/definitions/VirtualDeviceGroupFilter"
              },
              "IsActualizationInProgress": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "VirtualDeviceGroupFilter": {
        "type": "object",
        "required": [
          "FilterScope"
        ],
        "properties": {
          "Expression": {
            "type": "string"
          },
          "FilterScope": {
            "$ref": "#/definitions/FilterScope",
            "x-enumType": "FilterScope"
          }
        }
      },
      "FilterScope": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "ParentGroup",
          "Global"
        ],
        "enum": [
          "ParentGroup",
          "Global"
        ],
        "x-enumType": "FilterScope"
      },
      "CustomAttributeInfo": {
        "type": "object",
        "required": [
          "IsInherited",
          "DataType"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "OriginName": {
            "type": "string"
          },
          "IsInherited": {
            "type": "boolean"
          },
          "Value": {
            "type": "string"
          },
          "DataType": {
            "$ref": "#/definitions/CustomAttributeDataType",
            "x-enumType": "CustomAttributeDataType"
          }
        }
      },
      "CustomAttributeDataType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Boolean",
          "Numeric",
          "Text",
          "DateTime",
          "Enumerator",
          "Date"
        ],
        "enum": [
          "Boolean",
          "Numeric",
          "Text",
          "DateTime",
          "Enumerator",
          "Date"
        ],
        "x-enumType": "CustomAttributeDataType"
      },
      "CustomAttributeParameters": {
        "type": "object",
        "properties": {
          "Attributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomAttributeUpdateValue"
            }
          }
        }
      },
      "CustomAttributeUpdateValue": {
        "type": "object",
        "properties": {
          "AttributeName": {
            "type": "string"
          },
          "AttributeValue": {
            "type": "string"
          }
        }
      },
      "DeviceLocation": {
        "type": "object",
        "required": [
          "Latitude",
          "Longitude",
          "Speed",
          "Heading",
          "CollectionTimestamp"
        ],
        "properties": {
          "DeviceId": {
            "type": "string"
          },
          "Latitude": {
            "type": "number",
            "format": "double"
          },
          "Longitude": {
            "type": "number",
            "format": "double"
          },
          "Speed": {
            "type": "number",
            "format": "float"
          },
          "Heading": {
            "type": "number",
            "format": "float"
          },
          "CollectionTimestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BulkDeviceActionStatus": {
        "type": "object",
        "required": [
          "Succeeded",
          "Failed",
          "Pending"
        ],
        "properties": {
          "Succeeded": {
            "type": "integer",
            "format": "int32"
          },
          "Failed": {
            "type": "integer",
            "format": "int32"
          },
          "Pending": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ActionBase": {
        "type": "object",
        "x-abstract": true,
        "required": [
          "Action"
        ],
        "properties": {
          "Action": {
            "$ref": "#/definitions/DeviceAction",
            "x-enumType": "DeviceAction"
          }
        }
      },
      "DeviceAction": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "CheckIn",
          "Wipe",
          "Lock",
          "Unenroll",
          "SendMessage",
          "Locate",
          "SendScript",
          "Delete",
          "Disable",
          "Enable",
          "Rename",
          "SetPasscode",
          "AppleSoftwareUpdateScan",
          "AppleSoftwareUpdateSchedule",
          "AppleSoftwareUpdateRefreshStatus",
          "SetDeviceName",
          "ResetPasscode",
          "AllowSotiSurf",
          "BlockSotiSurf",
          "ClearRestrictions",
          "BypassActivationLock",
          "SoftReset",
          "RemoteRing",
          "TurnOffSuspend",
          "StartTracking",
          "StopTracking",
          "ClearSotiSurfCache",
          "BlockSotiHub",
          "AllowSotiHub",
          "ClearSotiHubCache",
          "DisablePasscodeLock",
          "ScanForViruses",
          "UpdateVirusDefinitions",
          "SendTestPage",
          "FactoryReset",
          "EnableWorkProfile",
          "DisableWorkProfile",
          "SendSmsMessage",
          "SetWallpaper",
          "ResetUserBinding",
          "EnableLostMode",
          "DisableLostMode",
          "BlockExchangeAccess",
          "AllowExchangeAccess",
          "EnableAgentUpgrade",
          "DisableAgentUpgrade",
          "MigrateToELMAgent",
          "UpgradeAgentNow",
          "SyncFilesNow",
          "SendScriptViaSms",
          "EnrollInEFOTA",
          "LinuxSoftwareUpdateSchedule",
          "UpgradeFirmware",
          "UpdateManagementProfile",
          "SendScriptViaPns",
          "ResetContainerPasscode",
          "UpgradeAgent",
          "UpdateLicense",
          "PlaySound",
          "LinuxSoftwareUpdateScan",
          "SetFirmwarePassword",
          "UnlockUserAccount",
          "MigrateToAndroidEnterprise",
          "SharedDeviceLogout",
          "DeleteUser",
          "AdsInstallPlugIns",
          "SharedDeviceTroubleshoot",
          "MoveDevice",
          "ResetAccount",
          "ResetExchangeAccess",
          "AppFeedbackUpdate",
          "RefreshCellularPlans",
          "UpgradeFirmwareZebra",
          "EnableAdminMode",
          "DisableAdminMode",
          "EnableKioskMode",
          "DisableKioskMode",
          "RemoveUserAccounts",
          "GenerateMacOsPersonalRecoveryKey",
          "SharedIpadUserLogout",
          "ContactSabhaDevice",
          "SharedIpadUsersRemove",
          "SetRecoveryLock"
        ],
        "enum": [
          "CheckIn",
          "Wipe",
          "Lock",
          "Unenroll",
          "SendMessage",
          "Locate",
          "SendScript",
          "Delete",
          "Disable",
          "Enable",
          "Rename",
          "SetPasscode",
          "AppleSoftwareUpdateScan",
          "AppleSoftwareUpdateSchedule",
          "AppleSoftwareUpdateRefreshStatus",
          "SetDeviceName",
          "ResetPasscode",
          "AllowSotiSurf",
          "BlockSotiSurf",
          "ClearRestrictions",
          "BypassActivationLock",
          "SoftReset",
          "RemoteRing",
          "TurnOffSuspend",
          "StartTracking",
          "StopTracking",
          "ClearSotiSurfCache",
          "BlockSotiHub",
          "AllowSotiHub",
          "ClearSotiHubCache",
          "DisablePasscodeLock",
          "ScanForViruses",
          "UpdateVirusDefinitions",
          "SendTestPage",
          "FactoryReset",
          "EnableWorkProfile",
          "DisableWorkProfile",
          "SendSmsMessage",
          "SetWallpaper",
          "ResetUserBinding",
          "EnableLostMode",
          "DisableLostMode",
          "BlockExchangeAccess",
          "AllowExchangeAccess",
          "EnableAgentUpgrade",
          "DisableAgentUpgrade",
          "MigrateToELMAgent",
          "UpgradeAgentNow",
          "SyncFilesNow",
          "SendScriptViaSms",
          "EnrollInEFOTA",
          "LinuxSoftwareUpdateSchedule",
          "UpgradeFirmware",
          "UpdateManagementProfile",
          "SendScriptViaPns",
          "ResetContainerPasscode",
          "UpgradeAgent",
          "UpdateLicense",
          "PlaySound",
          "LinuxSoftwareUpdateScan",
          "SetFirmwarePassword",
          "UnlockUserAccount",
          "MigrateToAndroidEnterprise",
          "SharedDeviceLogout",
          "DeleteUser",
          "AdsInstallPlugIns",
          "SharedDeviceTroubleshoot",
          "MoveDevice",
          "ResetAccount",
          "ResetExchangeAccess",
          "AppFeedbackUpdate",
          "RefreshCellularPlans",
          "UpgradeFirmwareZebra",
          "EnableAdminMode",
          "DisableAdminMode",
          "EnableKioskMode",
          "DisableKioskMode",
          "RemoveUserAccounts",
          "GenerateMacOsPersonalRecoveryKey",
          "SharedIpadUserLogout",
          "ContactSabhaDevice",
          "SharedIpadUsersRemove",
          "SetRecoveryLock"
        ],
        "x-enumType": "DeviceAction"
      },
      "AdsInstallPlugInsAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "AllowExchangeAccessAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "AllowSotiHubAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "AllowSotiSurfAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "AppFeedbackUpdateAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "AppleSoftwareUpdateRefreshStatusAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "AppleSoftwareUpdateScanAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "AppleSoftwareUpdateScheduleAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "UpdateType"
            ],
            "properties": {
              "UpdateType": {
                "$ref": "#/definitions/IosUpdateType"
              },
              "ProductVersion": {
                "type": "string"
              }
            }
          }
        ]
      },
      "IosUpdateType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "DownloadOrInstallUpdate",
          "DownloadAndNotInstallUpdate",
          "InstallAlreadyDownloadedUpdate",
          "DownloadUpdateAndNotifyUser",
          "DownloadAndInstallLaterTime"
        ],
        "enum": [
          "DownloadOrInstallUpdate",
          "DownloadAndNotInstallUpdate",
          "InstallAlreadyDownloadedUpdate",
          "DownloadUpdateAndNotifyUser",
          "DownloadAndInstallLaterTime"
        ],
        "x-enumType": "IosUpdateType"
      },
      "BlockExchangeAccessAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "BlockSotiHubAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "BlockSotiSurfAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "BypassActivationLockAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "CheckInAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "ClearRestrictionsAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "ClearSotiHubCacheAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "ClearSotiSurfCacheAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "ContactSabhaDeviceAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "DeleteAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "RevokeCertificates"
            ],
            "properties": {
              "RevokeCertificates": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "DeleteUserAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "ForceDeletion"
            ],
            "properties": {
              "UserName": {
                "type": "string"
              },
              "ForceDeletion": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "DisableAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "DisableAdminModeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "DisableAgentUpgradeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "DisableKioskModeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "DisableLostModeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "DisablePasscodeLockAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "DisableWorkProfileAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "EnableAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "EnableAdminModeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "EnableAgentUpgradeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "EnableKioskModeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "EnableLostModeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Message"
            ],
            "properties": {
              "Message": {
                "type": "string",
                "maxLength": 512,
                "minLength": 0
              },
              "PhoneNumber": {
                "type": "string",
                "maxLength": 32,
                "minLength": 0
              },
              "Footnote": {
                "type": "string",
                "maxLength": 64,
                "minLength": 0
              }
            }
          }
        ]
      },
      "EnableWorkProfileAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "EnrollInEFOTAAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "properties": {
              "LicenseName": {
                "type": "string"
              },
              "CorpId": {
                "type": "string"
              }
            }
          }
        ]
      },
      "FactoryResetAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "GenerateMacOsPersonalRecoveryKeyAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "RegeneratePrkActionMethod"
            ],
            "properties": {
              "RegeneratePrkActionMethod": {
                "$ref": "#/definitions/RegeneratePrkActionType"
              },
              "AdminUsername": {
                "type": "string"
              },
              "AdminUserPassword": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RegeneratePrkActionType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Key",
          "Credentials",
          "UserInteraction"
        ],
        "enum": [
          "Key",
          "Credentials",
          "UserInteraction"
        ],
        "x-enumType": "RegeneratePrkActionType"
      },
      "LinuxSoftwareUpdateScanAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "LinuxSoftwareUpdateScheduleAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "LocateAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "LockAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "AutogenerateNewPasscode"
            ],
            "properties": {
              "PhoneNumber": {
                "type": "string"
              },
              "Message": {
                "type": "string"
              },
              "AutogenerateNewPasscode": {
                "type": "boolean"
              },
              "Pin": {
                "type": "string"
              }
            }
          }
        ]
      },
      "MigrateToAndroidEnterpriseAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "MigrateToELMAgentAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "MoveDeviceAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "TargetGroupReferenceId"
            ],
            "properties": {
              "TargetGroupReferenceId": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      },
      "PlaySoundAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "RefreshCellularPlansAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "CarrierUrl"
            ],
            "properties": {
              "CarrierUrl": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      },
      "RemoteRingAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "RemoveUserAccountsAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "RenameAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Name"
            ],
            "properties": {
              "Name": {
                "type": "string",
                "maxLength": 250,
                "minLength": 0,
                "pattern": "^[^\\s$*\\[\\]\\{\\};\"<>/|\\\\?][^$*\\[\\]\\{\\};\"<>/|\\\\?]*$"
              }
            }
          }
        ]
      },
      "ResetAccountAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "properties": {
              "EnterpriseBinding": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ResetContainerPasscodeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "ResetExchangeAccessAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "ResetPasscodeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Passcode",
              "SendBy"
            ],
            "properties": {
              "Passcode": {
                "type": "string",
                "minLength": 4
              },
              "SendBy": {
                "$ref": "#/definitions/DeliveryMethodPnsAndMobiControlEnum"
              }
            }
          }
        ]
      },
      "DeliveryMethodPnsAndMobiControlEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "MobiControl",
          "PlatformNotificationService"
        ],
        "enum": [
          "MobiControl",
          "PlatformNotificationService"
        ],
        "x-enumType": "DeliveryMethodPnsAndMobiControlEnum"
      },
      "ResetUserBindingAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "ScanForVirusesAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "QuickVirusScan"
            ],
            "properties": {
              "QuickVirusScan": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SendMessageAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Message",
              "SendBy",
              "QueueForOfflineDelivery",
              "MessageType",
              "DisplayDuration"
            ],
            "properties": {
              "Message": {
                "type": "string",
                "minLength": 1
              },
              "SendBy": {
                "$ref": "#/definitions/DeliveryMethod"
              },
              "QueueForOfflineDelivery": {
                "type": "boolean"
              },
              "MessageType": {
                "$ref": "#/definitions/DeviceMessageBoxType"
              },
              "DisplayDuration": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "DeliveryMethod": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "MobiControl",
          "PlatformNotificationService",
          "Sms"
        ],
        "enum": [
          "MobiControl",
          "PlatformNotificationService",
          "Sms"
        ],
        "x-enumType": "DeliveryMethod"
      },
      "DeviceMessageBoxType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Information",
          "Warning",
          "Question",
          "Error"
        ],
        "enum": [
          "None",
          "Information",
          "Warning",
          "Question",
          "Error"
        ],
        "x-enumType": "DeviceMessageBoxType"
      },
      "SendScriptAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Message",
              "QueueMessagesOfflineDevices",
              "ReportScriptStatus",
              "SendBy"
            ],
            "properties": {
              "Message": {
                "type": "string",
                "minLength": 1
              },
              "QueueMessagesOfflineDevices": {
                "type": "boolean"
              },
              "ReportScriptStatus": {
                "type": "boolean"
              },
              "SendBy": {
                "$ref": "#/definitions/DeliveryMethod"
              },
              "ScriptType": {
                "$ref": "#/definitions/ScriptType"
              },
              "ScriptName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ScriptType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Legacy",
          "JavaScript",
          "Powershell32",
          "Powershell"
        ],
        "enum": [
          "Legacy",
          "JavaScript",
          "Powershell32",
          "Powershell"
        ],
        "x-enumType": "ScriptType"
      },
      "SendScriptViaPnsAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Message"
            ],
            "properties": {
              "Message": {
                "type": "string",
                "minLength": 1
              },
              "ScriptType": {
                "$ref": "#/definitions/ScriptType"
              }
            }
          }
        ]
      },
      "SendScriptViaSmsAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Message"
            ],
            "properties": {
              "Message": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      },
      "SendSmsMessageAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Message"
            ],
            "properties": {
              "Message": {
                "type": "string",
                "maxLength": 200,
                "minLength": 0
              }
            }
          }
        ]
      },
      "SendTestPageAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "ConfigurationLabel",
              "NetworkConfigurationLabel",
              "DirectoryLabel"
            ],
            "properties": {
              "ConfigurationLabel": {
                "type": "boolean"
              },
              "NetworkConfigurationLabel": {
                "type": "boolean"
              },
              "DirectoryLabel": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SetDeviceNameAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Name"
            ],
            "properties": {
              "Name": {
                "type": "string",
                "minLength": 1,
                "pattern": "^[^\\s$*\\[\\]\\{\\};\"<>/|\\\\?][^$*\\[\\]\\{\\};\"<>/|\\\\?]*$"
              }
            }
          }
        ]
      },
      "SetFirmwarePasswordAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "AllowOroms",
              "RequestRequiresNetworkTether"
            ],
            "properties": {
              "CurrentPassword": {
                "type": "string"
              },
              "NewPassword": {
                "type": "string"
              },
              "ConfirmPassword": {
                "type": "string"
              },
              "AllowOroms": {
                "type": "boolean"
              },
              "RequestRequiresNetworkTether": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SetPasscodeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Passcode"
            ],
            "properties": {
              "Passcode": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      },
      "SetRecoveryLockAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "RequestRequiresNetworkTether"
            ],
            "properties": {
              "CurrentPassword": {
                "type": "string"
              },
              "NewPassword": {
                "type": "string"
              },
              "RequestRequiresNetworkTether": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SharedDeviceLogoutAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "SharedDeviceTroubleshootAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "SharedIpadUserLogoutAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "RequestRequiresNetworkTether"
            ],
            "properties": {
              "RequestRequiresNetworkTether": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SharedIpadUsersRemoveAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "RequestRequiresNetworkTether",
              "ForceDeletion",
              "IsDeleteAll"
            ],
            "properties": {
              "RequestRequiresNetworkTether": {
                "type": "boolean"
              },
              "ForceDeletion": {
                "type": "boolean"
              },
              "IsDeleteAll": {
                "type": "boolean"
              },
              "Users": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "SoftResetAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "StartTrackingAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Frequency",
              "Duration",
              "LeaveGpsRadioOn"
            ],
            "properties": {
              "Frequency": {
                "type": "integer",
                "format": "int32",
                "maximum": 2147483647.0,
                "minimum": 1.0
              },
              "Duration": {
                "type": "integer",
                "format": "int32",
                "maximum": 2147483647.0,
                "minimum": 1.0
              },
              "LeaveGpsRadioOn": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "StopTrackingAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "SyncFilesNowAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "TurnOffSuspendAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "UnenrollAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "RevokeCertificates"
            ],
            "properties": {
              "RevokeCertificates": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "UnlockUserAccountAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "properties": {
              "UserName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "UpdateLicenseAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "Type",
              "License"
            ],
            "properties": {
              "Type": {
                "$ref": "#/definitions/UpdateLicenseType"
              },
              "License": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      },
      "UpdateLicenseType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "ProductKey",
          "LicenseFile"
        ],
        "enum": [
          "None",
          "ProductKey",
          "LicenseFile"
        ],
        "x-enumType": "UpdateLicenseType"
      },
      "UpdateManagementProfileAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "UpdateVirusDefinitionsAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "UpgradeAgentAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "UpgradeAgentScheduleType"
            ],
            "properties": {
              "UpgradeAgentScheduleType": {
                "$ref": "#/definitions/UpgradeAgentScheduleType"
              }
            }
          }
        ]
      },
      "UpgradeAgentScheduleType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "UpgradeAgentOnSchedule",
          "UpgradeAgentNow"
        ],
        "enum": [
          "UpgradeAgentOnSchedule",
          "UpgradeAgentNow"
        ],
        "x-enumType": "UpgradeAgentScheduleType"
      },
      "UpgradeAgentNowAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "UpgradeFirmwareAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "UpgradeFirmwareZebraAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "properties": {
              "DeviceTargetFirmware": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ZebraDeviceTarget"
                }
              }
            }
          }
        ]
      },
      "ZebraDeviceTarget": {
        "type": "object",
        "required": [
          "Network",
          "IsScheduled"
        ],
        "properties": {
          "DeviceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "TargetFirmwareReferenceId": {
            "type": "string"
          },
          "Network": {
            "$ref": "#/definitions/NetworkType",
            "x-enumType": "NetworkType"
          },
          "IsScheduled": {
            "type": "boolean"
          },
          "Schedule": {
            "$ref": "#/definitions/ZebraDeviceSchedule"
          }
        }
      },
      "NetworkType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Wifi",
          "WifiCellular",
          "Any"
        ],
        "enum": [
          "Wifi",
          "WifiCellular",
          "Any"
        ],
        "x-enumType": "NetworkType"
      },
      "ZebraDeviceSchedule": {
        "type": "object",
        "required": [
          "DownloadStartDate",
          "DownloadStartTime",
          "DownloadEndTime",
          "InstallStartDate",
          "InstallStartTime",
          "InstallEndTime"
        ],
        "properties": {
          "DownloadStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "DownloadStartTime": {
            "type": "string",
            "format": "time-span"
          },
          "DownloadEndTime": {
            "type": "string",
            "format": "time-span"
          },
          "InstallStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "InstallStartTime": {
            "type": "string",
            "format": "time-span"
          },
          "InstallEndTime": {
            "type": "string",
            "format": "time-span"
          }
        }
      },
      "WipeAction": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionBase"
          },
          {
            "type": "object",
            "required": [
              "WipeSdCard",
              "BypassFactoryResetProtection",
              "RevokeCertificates",
              "RequestRequiresNetworkTether",
              "ObliterationBehavior",
              "PreserveDataPlan",
              "DisallowProximitySetup",
              "SendBy"
            ],
            "properties": {
              "WipeSdCard": {
                "type": "boolean"
              },
              "BypassFactoryResetProtection": {
                "type": "boolean"
              },
              "RevokeCertificates": {
                "type": "boolean"
              },
              "Pin": {
                "type": "string"
              },
              "RequestRequiresNetworkTether": {
                "type": "boolean"
              },
              "ObliterationBehavior": {
                "$ref": "#/definitions/ObliterationBehavior"
              },
              "RemoteWipeType": {
                "$ref": "#/definitions/RemoteWipeType"
              },
              "PreserveDataPlan": {
                "type": "boolean"
              },
              "DisallowProximitySetup": {
                "type": "boolean"
              },
              "SendBy": {
                "$ref": "#/definitions/DeliveryMethod"
              }
            }
          }
        ]
      },
      "ObliterationBehavior": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Default",
          "Always",
          "ObliterateWithWarning",
          "DoNotObliterate"
        ],
        "enum": [
          "Default",
          "Always",
          "ObliterateWithWarning",
          "DoNotObliterate"
        ],
        "x-enumType": "ObliterationBehavior"
      },
      "RemoteWipeType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "DoWipeProtected",
          "DoWipe",
          "DoWipePersistProvisionedData",
          "DoWipePersistUserData"
        ],
        "enum": [
          "None",
          "DoWipeProtected",
          "DoWipe",
          "DoWipePersistProvisionedData",
          "DoWipePersistUserData"
        ],
        "x-enumType": "RemoteWipeType"
      },
      "BulkDeviceGroupAction": {
        "type": "object",
        "required": [
          "ActionInfo"
        ],
        "properties": {
          "ActionInfo": {
            "$ref": "#/definitions/ActionBase",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Filter": {
            "type": "string"
          }
        }
      },
      "DeviceGroupAdvancedSettingsStatus": {
        "type": "object",
        "properties": {
          "GroupSettings": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DeviceGroupFamilyAdvancedSetting"
            }
          }
        }
      },
      "DeviceGroupFamilyAdvancedSetting": {
        "type": "object",
        "required": [
          "TargetFamily"
        ],
        "properties": {
          "TargetFamily": {
            "$ref": "#/definitions/DeviceFamily",
            "x-enumType": "DeviceFamily"
          },
          "GroupAdvancedSettings": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DeviceGroupAdvancedSetting"
            }
          }
        }
      },
      "DeviceFamily": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "WindowsCE",
          "Apple",
          "WindowsDesktop",
          "AndroidPlus",
          "Scanner",
          "WindowsPhone",
          "Blackberry",
          "Printer",
          "WindowsRuntime",
          "Linux"
        ],
        "enum": [
          "WindowsCE",
          "Apple",
          "WindowsDesktop",
          "AndroidPlus",
          "Scanner",
          "WindowsPhone",
          "Blackberry",
          "Printer",
          "WindowsRuntime",
          "Linux"
        ],
        "x-enumType": "DeviceFamily"
      },
      "DeviceGroupAdvancedSetting": {
        "type": "object",
        "required": [
          "IsInherited"
        ],
        "properties": {
          "SettingName": {
            "type": "string"
          },
          "IsInherited": {
            "type": "boolean"
          },
          "InheritsFrom": {
            "type": "string"
          },
          "LastUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "ConfiguredBy": {
            "type": "string"
          }
        }
      },
      "Note": {
        "type": "object",
        "required": [
          "Type",
          "Icon"
        ],
        "properties": {
          "Type": {
            "$ref": "#/definitions/NoteType",
            "x-enumType": "NoteType"
          },
          "Subject": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Icon": {
            "$ref": "#/definitions/NoteIcon",
            "x-enumType": "NoteIcon"
          },
          "EditDate": {
            "type": "string",
            "format": "date-time"
          },
          "UserName": {
            "type": "string"
          },
          "ReferenceId": {
            "type": "string"
          }
        }
      },
      "NoteType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NotSet",
          "DeviceNote",
          "GroupNote"
        ],
        "enum": [
          "NotSet",
          "DeviceNote",
          "GroupNote"
        ],
        "x-enumType": "NoteType"
      },
      "NoteIcon": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Red",
          "Blue",
          "Green",
          "Purple",
          "Cyan",
          "Yellow",
          "None"
        ],
        "enum": [
          "Red",
          "Blue",
          "Green",
          "Purple",
          "Cyan",
          "Yellow",
          "None"
        ],
        "x-enumType": "NoteIcon"
      },
      "MemberNote": {
        "allOf": [
          {
            "$ref": "#/definitions/Note"
          },
          {
            "type": "object",
            "properties": {
              "DeviceName": {
                "type": "string"
              },
              "DeviceId": {
                "type": "string"
              }
            }
          }
        ]
      },
      "DeviceKindActionSchema": {
        "type": "object",
        "description": "Schema that represents actions a given device kind can perform",
        "required": [
          "Kind"
        ],
        "properties": {
          "Kind": {
            "description": "The device kind",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceKind"
              }
            ],
            "x-enumType": "DeviceKind"
          },
          "AvailableActions": {
            "type": "array",
            "description": "Actions that can be performed on this device kind",
            "items": {
              "$ref": "#/definitions/ActionItemSchema"
            }
          }
        }
      },
      "DeviceKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AndroidForWork",
          "AndroidElm",
          "AndroidKnox",
          "AndroidPlus",
          "AndroidGeneric",
          "Ios",
          "Mac",
          "WindowsCE",
          "WindowsDesktop",
          "WindowsDesktopLegacy",
          "WindowsPhone",
          "WindowsRuntime",
          "ZebraPrinter",
          "Linux",
          "WindowsHoloLens",
          "WindowsXtHub",
          "Chrome",
          "LinuxXtHub",
          "Unknown"
        ],
        "enum": [
          "AndroidForWork",
          "AndroidElm",
          "AndroidKnox",
          "AndroidPlus",
          "AndroidGeneric",
          "Ios",
          "Mac",
          "WindowsCE",
          "WindowsDesktop",
          "WindowsDesktopLegacy",
          "WindowsPhone",
          "WindowsRuntime",
          "ZebraPrinter",
          "Linux",
          "WindowsHoloLens",
          "WindowsXtHub",
          "Chrome",
          "LinuxXtHub",
          "Unknown"
        ],
        "x-enumType": "DeviceKind"
      },
      "ActionItemSchema": {
        "type": "object",
        "description": "Schema for an individual action for a device",
        "required": [
          "MultipleDevicesAccepted"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the action"
          },
          "MultipleDevicesAccepted": {
            "type": "boolean",
            "description": "Whether this action can affect one or multiple devices"
          },
          "ApplicableInstanceType": {
            "type": "string",
            "description": "Whether this action can be executed only on real devices, virtual \ndevices, or all instances"
          },
          "ActionParameters": {
            "type": "array",
            "description": "Parameters for this action",
            "items": {
              "$ref": "#/definitions/ActionParameter"
            }
          }
        }
      },
      "ActionParameter": {
        "type": "object",
        "description": "Base class for all parameters",
        "x-abstract": true,
        "required": [
          "IsRequired"
        ],
        "properties": {
          "IsRequired": {
            "type": "boolean",
            "description": "Whether this parameter is required for execution of this action"
          }
        }
      },
      "ActionParameterCollectionSchema": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionParameter"
          },
          {
            "type": "object",
            "description": "Defines a collection of related parameters",
            "properties": {
              "Parameters": {
                "type": "array",
                "description": "The grouped parameters",
                "items": {
                  "$ref": "#/definitions/ActionParameter"
                }
              }
            }
          }
        ]
      },
      "ActionParameterSchema": {
        "allOf": [
          {
            "$ref": "#/definitions/ActionParameter"
          },
          {
            "type": "object",
            "description": "Schema for device action parameters",
            "properties": {
              "ParameterName": {
                "type": "string",
                "description": "The name of the parameter"
              },
              "ParameterDataType": {
                "type": "string",
                "description": "The data type of the parameter"
              }
            }
          }
        ]
      },
      "DeviceConfigurationSchema": {
        "type": "object",
        "description": "A device configuration payload",
        "required": [
          "IsAdvanced"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name"
          },
          "IsAdvanced": {
            "type": "boolean",
            "description": "Whether this is an advanced payload"
          }
        }
      },
      "DeviceBase": {
        "type": "object",
        "description": "Base class for all device types",
        "required": [
          "Kind",
          "CompliancePolicyStatus",
          "ComplianceStatus",
          "EnrollmentType",
          "Family",
          "IsAgentOnline",
          "Mode",
          "Platform",
          "Watermark",
          "AzureRegistrationMode",
          "AzureRegistrationStatus",
          "AzureComplianceStatus"
        ],
        "properties": {
          "Kind": {
            "description": "Gets or sets device Kind",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceKind"
              }
            ],
            "x-enumType": "DeviceKind"
          },
          "CompliancePolicyStatus": {
            "description": "Gets or sets the device compliance policy status",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceCompliancePolicyStatus"
              }
            ],
            "x-enumType": "DeviceCompliancePolicyStatus"
          },
          "ComplianceStatus": {
            "type": "boolean",
            "description": "Gets or sets ComplianceStatus"
          },
          "ComplianceItems": {
            "type": "array",
            "description": "Gets or sets ComplianceItems",
            "items": {
              "$ref": "#/definitions/ComplianceItem"
            }
          },
          "DeviceId": {
            "type": "string",
            "description": "Gets or sets DeviceId"
          },
          "DeviceName": {
            "type": "string",
            "description": "Gets or sets DeviceName"
          },
          "EnrollmentType": {
            "description": "Indicate if this is user enrollment or device enrollment.",
            "allOf": [
              {
                "$ref": "#/definitions/EnrollmentType"
              }
            ],
            "x-enumType": "EnrollmentType"
          },
          "EnrollmentTime": {
            "type": "string",
            "description": "Gets or sets EnrollmentTime",
            "format": "date-time"
          },
          "EnrollmentPolicyReferenceId": {
            "type": "string",
            "description": "Gets or Sets Device's EnrollmentPolicyReferenceId"
          },
          "Family": {
            "description": "Gets or sets Family",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamily2"
              }
            ],
            "x-enumType": "DeviceFamily"
          },
          "HostName": {
            "type": "string",
            "description": "Gets or sets HostName"
          },
          "IsAgentOnline": {
            "type": "boolean",
            "description": "Gets or sets IsAgentOnline"
          },
          "CustomAttributes": {
            "type": "array",
            "description": "Gets or sets CustomAttributes",
            "items": {
              "$ref": "#/definitions/DeviceCustomAttribute"
            }
          },
          "MACAddress": {
            "type": "string",
            "description": "Gets or sets MACAddress"
          },
          "BluetoothMAC": {
            "type": "string",
            "description": "Gets or sets BluetoothMac Address"
          },
          "WifiMAC": {
            "type": "string",
            "description": "Gets or sets WifiMACAddress"
          },
          "Manufacturer": {
            "type": "string",
            "description": "Gets or sets Manufacturer"
          },
          "Mode": {
            "description": "Gets or sets Mode",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceMode"
              }
            ],
            "x-enumType": "DeviceMode"
          },
          "Model": {
            "type": "string",
            "description": "Gets or sets Model"
          },
          "OSVersion": {
            "type": "string",
            "description": "Gets or sets OSVersion"
          },
          "Path": {
            "type": "string",
            "description": "Gets or sets Path"
          },
          "Platform": {
            "description": "Gets or sets Platform",
            "allOf": [
              {
                "$ref": "#/definitions/DevicePlatform"
              }
            ],
            "x-enumType": "DevicePlatform"
          },
          "ServerName": {
            "type": "string",
            "description": "Gets or sets ServerName"
          },
          "Watermark": {
            "type": "integer",
            "description": "Watermark of when device metadata was updated last (either device information, application list or other properties associated with a device that are searchable via ES).",
            "format": "int32"
          },
          "AzureRegistrationMode": {
            "description": "Gets or sets Azure Device Registration Mode.",
            "allOf": [
              {
                "$ref": "#/definitions/AzureRegistrationMode"
              }
            ],
            "x-enumType": "AzureRegistrationMode"
          },
          "AzureRegistrationStatus": {
            "description": "Gets or sets Azure Device Registration Status.",
            "allOf": [
              {
                "$ref": "#/definitions/AzureRegistrationStatus"
              }
            ],
            "x-enumType": "AzureRegistrationStatus"
          },
          "AzureDeviceId": {
            "type": "string",
            "description": "Gets or sets Azure Device Id"
          },
          "AzureComplianceStatus": {
            "description": "Gets or sets Azure Compliance Status",
            "allOf": [
              {
                "$ref": "#/definitions/AzureComplianceStatus"
              }
            ],
            "x-enumType": "AzureComplianceStatus"
          },
          "AzureUserId": {
            "type": "string",
            "description": "Gets or sets Azure User Id"
          }
        }
      },
      "DeviceCompliancePolicyStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Pending",
          "NonCompliant",
          "Compliant"
        ],
        "enum": [
          "Pending",
          "NonCompliant",
          "Compliant"
        ],
        "x-enumType": "DeviceCompliancePolicyStatus"
      },
      "ComplianceItem": {
        "type": "object",
        "description": "Dictates a single compliance item related to a device's being in compliance.",
        "required": [
          "ComplianceType"
        ],
        "properties": {
          "ComplianceType": {
            "description": "Compliance type (rooted, deviceadmin, wiped, disabled, unenrolled, etc.)",
            "allOf": [
              {
                "$ref": "#/definitions/ComplianceItemType"
              }
            ],
            "x-enumType": "ComplianceItemType"
          },
          "ComplianceValue": {
            "type": "boolean",
            "description": "Determines if Compliance type is true/false or null."
          }
        }
      },
      "ComplianceItemType": {
        "type": "string",
        "description": "Items affecting compliance status of a device within MobiControl.",
        "x-enumNames": [
          "None",
          "IsSecured",
          "IsDeviceAdmin",
          "NotWiped",
          "IsEnabled",
          "IsEnrolled"
        ],
        "enum": [
          "None",
          "IsSecured",
          "IsDeviceAdmin",
          "NotWiped",
          "IsEnabled",
          "IsEnrolled"
        ],
        "x-enumType": "ComplianceItemType"
      },
      "EnrollmentType": {
        "type": "string",
        "description": "Apple Device Enrollment Type",
        "x-enumNames": [
          "NotApplicable",
          "Device",
          "User"
        ],
        "enum": [
          "NotApplicable",
          "Device",
          "User"
        ],
        "x-enumType": "EnrollmentType"
      },
      "DeviceFamily2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "WindowsCE",
          "Apple",
          "WindowsDesktop",
          "AndroidPlus",
          "Scanner",
          "WindowsPhone",
          "Blackberry",
          "Printer",
          "WindowsRuntime",
          "Linux",
          "Chrome"
        ],
        "enum": [
          "WindowsCE",
          "Apple",
          "WindowsDesktop",
          "AndroidPlus",
          "Scanner",
          "WindowsPhone",
          "Blackberry",
          "Printer",
          "WindowsRuntime",
          "Linux",
          "Chrome"
        ],
        "x-enumType": "DeviceFamily"
      },
      "DeviceCustomAttribute": {
        "type": "object",
        "description": "Represents a Label assigned to Device",
        "required": [
          "DataType"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets name of the label. Must be unique."
          },
          "Value": {
            "type": "string",
            "description": "Gets or sets value of the label"
          },
          "DataType": {
            "description": "Gets or sets custom attribute data type",
            "allOf": [
              {
                "$ref": "#/definitions/CustomAttributeDataType"
              }
            ],
            "x-enumType": "CustomAttributeDataType"
          }
        }
      },
      "DeviceMode": {
        "type": "string",
        "description": "Represents valid types of assets protected by security ",
        "x-enumNames": [
          "Active",
          "Disabled",
          "UnenrollPendingUser",
          "UnenrollPendingAdmin",
          "UnenrolledByUser",
          "UnenrolledByAdmin"
        ],
        "enum": [
          "Active",
          "Disabled",
          "UnenrollPendingUser",
          "UnenrollPendingAdmin",
          "UnenrolledByUser",
          "UnenrolledByAdmin"
        ],
        "x-enumType": "DeviceMode"
      },
      "DevicePlatform": {
        "type": "string",
        "description": "Enumerates the different supported device platforms.",
        "x-enumNames": [
          "Unknown",
          "CESimulator",
          "DOS",
          "WindowsCE",
          "HPCPro",
          "HPC2000",
          "PocketPC",
          "WindowsMobile",
          "Smartphone",
          "WindowsCEDotNet",
          "Windows",
          "Windows95",
          "Windows98",
          "WindowsME",
          "WindowsNT351",
          "WindowsNT40DomainController",
          "WindowsNT40Server",
          "WindowsNT40Workstation",
          "Windows2000DomainController",
          "Windows2000Server",
          "Windows2000Professional",
          "WindowsXPProfessional",
          "WindowsXPHome",
          "Windows2003Server",
          "WindowsVista",
          "WindowsVista64",
          "Windows2008Server",
          "Windows2008Server64",
          "WindowsSeven",
          "WindowsSeven64",
          "Windows2008ServerR2",
          "Windows2008ServerR264",
          "WindowsEight",
          "WindowsEight64",
          "Windows2012Server",
          "Windows2012Server64",
          "WindowsEightOne",
          "WindowsEightOne64",
          "Windows2012ServerR2",
          "Windows2012ServerR264",
          "WindowsTen",
          "WindowsTen64",
          "Windows2016Server",
          "Windows2016Server64",
          "HHPImager",
          "Android",
          "iOS",
          "macOS",
          "AndroidPlus",
          "ScannerPlatformGeneral",
          "WindowsSeven32BitDeviceManager",
          "WindowsSeven64BitDeviceManager",
          "WindowsXPDeviceManager",
          "WEPosDeviceManager",
          "PosReadyDeviceManager",
          "RemHub",
          "RemScanner",
          "RemBiopticScanner",
          "RemMaximal",
          "WindowsPhone",
          "WindowsPhone81",
          "WindowsPhone10",
          "WindowsDesktop10",
          "WindowsPhone10RS1",
          "WindowsDesktop10RS1",
          "WindowsHolographic10",
          "WindowsHolographic10RS1",
          "ZebraPrinter",
          "Linux",
          "Chrome"
        ],
        "enum": [
          "Unknown",
          "CESimulator",
          "DOS",
          "WindowsCE",
          "HPCPro",
          "HPC2000",
          "PocketPC",
          "WindowsMobile",
          "Smartphone",
          "WindowsCEDotNet",
          "Windows",
          "Windows95",
          "Windows98",
          "WindowsME",
          "WindowsNT351",
          "WindowsNT40DomainController",
          "WindowsNT40Server",
          "WindowsNT40Workstation",
          "Windows2000DomainController",
          "Windows2000Server",
          "Windows2000Professional",
          "WindowsXPProfessional",
          "WindowsXPHome",
          "Windows2003Server",
          "WindowsVista",
          "WindowsVista64",
          "Windows2008Server",
          "Windows2008Server64",
          "WindowsSeven",
          "WindowsSeven64",
          "Windows2008ServerR2",
          "Windows2008ServerR264",
          "WindowsEight",
          "WindowsEight64",
          "Windows2012Server",
          "Windows2012Server64",
          "WindowsEightOne",
          "WindowsEightOne64",
          "Windows2012ServerR2",
          "Windows2012ServerR264",
          "WindowsTen",
          "WindowsTen64",
          "Windows2016Server",
          "Windows2016Server64",
          "HHPImager",
          "Android",
          "iOS",
          "macOS",
          "AndroidPlus",
          "ScannerPlatformGeneral",
          "WindowsSeven32BitDeviceManager",
          "WindowsSeven64BitDeviceManager",
          "WindowsXPDeviceManager",
          "WEPosDeviceManager",
          "PosReadyDeviceManager",
          "RemHub",
          "RemScanner",
          "RemBiopticScanner",
          "RemMaximal",
          "WindowsPhone",
          "WindowsPhone81",
          "WindowsPhone10",
          "WindowsDesktop10",
          "WindowsPhone10RS1",
          "WindowsDesktop10RS1",
          "WindowsHolographic10",
          "WindowsHolographic10RS1",
          "ZebraPrinter",
          "Linux",
          "Chrome"
        ],
        "x-enumType": "DevicePlatform"
      },
      "AzureRegistrationMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "MicrosoftUser",
          "MicrosoftSharedDevice"
        ],
        "enum": [
          "Unknown",
          "MicrosoftUser",
          "MicrosoftSharedDevice"
        ],
        "x-enumType": "AzureRegistrationMode"
      },
      "AzureRegistrationStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Pending",
          "Registered",
          "Failed",
          "Unregistered"
        ],
        "enum": [
          "Unknown",
          "Pending",
          "Registered",
          "Failed",
          "Unregistered"
        ],
        "x-enumType": "AzureRegistrationStatus"
      },
      "AzureComplianceStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NotApplicable",
          "NonCompliant",
          "Compliant"
        ],
        "enum": [
          "NotApplicable",
          "NonCompliant",
          "Compliant"
        ],
        "x-enumType": "AzureComplianceStatus"
      },
      "DeviceAndroidGeneric": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceAndroidGeneric contracts",
            "required": [
              "AgentUpgradeEnabled",
              "AndroidDeviceAdmin",
              "CanResetPassword",
              "ExchangeBlocked",
              "ExchangeAccessRequest",
              "ExchangeStatus",
              "HardwareEncryptionCaps",
              "HardwareEncryption",
              "IsAgentCompatible",
              "IsAgentless",
              "IsEncrypted",
              "IsOSSecure",
              "NetworkConnectionType",
              "PasscodeEnabled",
              "IsAdminModeEnabled"
            ],
            "properties": {
              "AgentUpgradeEnabled": {
                "type": "boolean",
                "description": "Gets or sets AgentUpgradeEnabled"
              },
              "AgentVersion": {
                "type": "string",
                "description": "Gets or sets AgentVersion"
              },
              "AndroidApiLevel": {
                "type": "integer",
                "description": "Gets or sets AndroidApiLevel",
                "format": "int32"
              },
              "AndroidDeviceAdmin": {
                "type": "boolean",
                "description": "Gets or sets AndroidDeviceAdmin"
              },
              "Antivirus": {
                "description": "Gets or sets Antivirus",
                "allOf": [
                  {
                    "$ref": "#/definitions/Antivirus"
                  }
                ]
              },
              "AsuLevel": {
                "type": "integer",
                "description": "Gets or sets AsuLevel",
                "format": "int32"
              },
              "Memory": {
                "description": "Gets or sets Memory",
                "allOf": [
                  {
                    "$ref": "#/definitions/Memory"
                  }
                ]
              },
              "BatteryStatus": {
                "type": "integer",
                "description": "Gets or sets BatteryStatus"
              },
              "BuildSecurityPatch": {
                "type": "string",
                "description": "Gets or sets BuildSecurityPatch"
              },
              "CanResetPassword": {
                "type": "boolean",
                "description": "Gets or sets CanResetPassword"
              },
              "CellularCarrier": {
                "type": "string",
                "description": "Gets or sets CellularCarrier"
              },
              "CellularSignalStrength": {
                "type": "integer",
                "description": "Gets or sets CellularSignalStrength",
                "format": "int32"
              },
              "CustomData": {
                "type": "array",
                "description": "Gets or sets CustomData",
                "items": {
                  "$ref": "#/definitions/CustomDataEntry"
                }
              },
              "DeviceTerms": {
                "description": "Gets or sets DeviceTerms",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceTerms"
                  }
                ]
              },
              "DeviceUserInfo": {
                "description": "Gets or sets DeviceUserInfo",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceUser"
                  }
                ]
              },
              "ExchangeBlocked": {
                "type": "boolean",
                "description": "Gets or sets ExchangeBlocked"
              },
              "ExchangeAccessRequest": {
                "description": "Gets or sets ExchangeOverridenAccess",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeAccessRequest"
                  }
                ]
              },
              "ExchangeStatus": {
                "description": "Gets or sets ExchangeStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeDeviceStatus"
                  }
                ]
              },
              "HardwareEncryptionCaps": {
                "type": "integer",
                "description": "Gets or sets HardwareEncryptionCaps",
                "format": "int32"
              },
              "HardwareEncryption": {
                "description": "Gets or sets HardwareEncryption",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceEncryptionCap"
                  }
                ]
              },
              "ICCID": {
                "type": "string",
                "description": "Gets or sets ICCID"
              },
              "IMEI_MEID_ESN": {
                "type": "string",
                "description": "Gets or sets IMEI_MEID_ESN"
              },
              "InRoaming": {
                "type": "boolean",
                "description": "Gets or sets InRoaming"
              },
              "Ipv6": {
                "type": "string",
                "description": "Gets or sets Ipv6"
              },
              "IsAgentCompatible": {
                "type": "boolean",
                "description": "Gets or sets IsAgentCompatible"
              },
              "IsAgentless": {
                "type": "boolean",
                "description": "Gets or sets IsAgentless"
              },
              "IsEncrypted": {
                "type": "boolean",
                "description": "Gets or sets IsEncrypted"
              },
              "IsOSSecure": {
                "type": "boolean",
                "description": "Gets or sets IsOSSecure"
              },
              "LastCheckInTime": {
                "type": "string",
                "description": "Gets or sets LastCheckInTime",
                "format": "date-time"
              },
              "LastAgentConnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentConnectTime",
                "format": "date-time"
              },
              "LastAgentDisconnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentDisconnectTime",
                "format": "date-time"
              },
              "LastLoggedOnUser": {
                "type": "string",
                "description": "Gets or sets LastLoggedOnUser"
              },
              "NetworkBSSID": {
                "type": "string",
                "description": "Gets or sets NetworkBSSID"
              },
              "NetworkConnectionType": {
                "description": "Gets or sets NetworkConnectionType",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceConnectionType"
                  }
                ]
              },
              "NetworkRSSI": {
                "type": "integer",
                "description": "Gets or sets NetworkRSSI",
                "format": "int32"
              },
              "NetworkSSID": {
                "type": "string",
                "description": "Gets or sets NetworkSSID"
              },
              "PasscodeEnabled": {
                "type": "boolean",
                "description": "Gets or sets PasscodeEnabled"
              },
              "PersonalizedName": {
                "type": "string",
                "description": "Gets or sets PersonalizedName"
              },
              "PhoneNumber": {
                "type": "string",
                "description": "Gets or sets PhoneNumber"
              },
              "SEForAndroidStatus": {
                "type": "string",
                "description": "Gets or sets SEForAndroidStatus"
              },
              "SubscriberNumber": {
                "type": "string",
                "description": "Gets or sets SubscriberNumber"
              },
              "IsAdminModeEnabled": {
                "type": "boolean",
                "description": "Gets or sets the IsAdminModeEnabled status"
              }
            }
          }
        ]
      },
      "Antivirus": {
        "type": "object",
        "description": "Android for work properties",
        "properties": {
          "LastEmptyQuarantine": {
            "type": "integer",
            "description": "Gets or sets LastEmptyQuarantine",
            "format": "int64"
          },
          "LastVirusScan": {
            "type": "integer",
            "description": "Gets or sets LastVirusScan",
            "format": "int64"
          },
          "AntivirusVersion": {
            "type": "string",
            "description": "Gets or sets AntivirusVersion"
          },
          "InfectedFilesCount": {
            "type": "integer",
            "description": "Gets or sets InfectedFilesCount",
            "format": "int32"
          },
          "LastScanDuration": {
            "type": "integer",
            "description": "Gets or sets LastScanDuration",
            "format": "int64"
          },
          "QuarantinedFilesCount": {
            "type": "integer",
            "description": "Gets or sets QuarantinedFilesCount",
            "format": "int32"
          }
        }
      },
      "Memory": {
        "type": "object",
        "description": "Memory properties",
        "properties": {
          "AvailableExternalStorage": {
            "type": "integer",
            "description": "Gets or sets AvailableExternalStorage",
            "format": "int64"
          },
          "AvailableMemory": {
            "type": "integer",
            "description": "Gets or sets AvailableMemory",
            "format": "int64"
          },
          "AvailableSDCardStorage": {
            "type": "integer",
            "description": "Gets or sets AvailableSDCardStorage",
            "format": "int64"
          },
          "AvailableStorage": {
            "type": "integer",
            "description": "Gets or sets AvailableStorage",
            "format": "int64"
          },
          "TotalExternalStorage": {
            "type": "integer",
            "description": "Gets or sets TotalExternalStorage",
            "format": "int64"
          },
          "TotalMemory": {
            "type": "integer",
            "description": "Gets or sets TotalMemory",
            "format": "int64"
          },
          "TotalSDCardStorage": {
            "type": "integer",
            "description": "Gets or sets TotalSDCardStorage",
            "format": "int64"
          },
          "TotalStorage": {
            "type": "integer",
            "description": "Gets or sets TotalStorage",
            "format": "int64"
          }
        }
      },
      "CustomDataEntry": {
        "type": "object",
        "description": "Custom data name value pair.",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets name."
          },
          "Value": {
            "type": "string",
            "description": "Gets or sets value."
          }
        }
      },
      "DeviceTerms": {
        "type": "object",
        "description": "Represents single permission mapped to one of specific internal permission enums.",
        "required": [
          "Status",
          "StatusEnum"
        ],
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Gets or sets status",
            "format": "int32"
          },
          "StatusTime": {
            "type": "string",
            "description": "Gets or sets status time",
            "format": "date-time"
          },
          "StatusVersion": {
            "type": "string",
            "description": "Gets or sets status version"
          },
          "RuleId": {
            "type": "integer",
            "description": "Gets or sets rule id",
            "format": "int32"
          },
          "RuleName": {
            "type": "string",
            "description": "Gets or sets rule name"
          },
          "StatusEnum": {
            "description": "Gets or sets Terms Status as an enum",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceTermsStatus"
              }
            ],
            "x-enumType": "DeviceTermsStatus"
          }
        }
      },
      "DeviceTermsStatus": {
        "type": "string",
        "description": "Converts the device terms and conditions status from an integer to a user-friendly string",
        "x-enumNames": [
          "NotRequired",
          "PushToDevicePending",
          "UserAcceptancePending",
          "Accepted",
          "Rejected",
          "Enrolling",
          "StaticEnrollPending",
          "StaticEnrollUserAcceptancePending"
        ],
        "enum": [
          "NotRequired",
          "PushToDevicePending",
          "UserAcceptancePending",
          "Accepted",
          "Rejected",
          "Enrolling",
          "StaticEnrollPending",
          "StaticEnrollUserAcceptancePending"
        ],
        "x-enumType": "DeviceTermsStatus"
      },
      "DeviceUser": {
        "type": "object",
        "description": "Device User entity.",
        "properties": {
          "UserName": {
            "type": "string",
            "description": "Gets or sets User Name."
          },
          "FirstName": {
            "type": "string",
            "description": "Gets or sets First Name."
          },
          "MiddleName": {
            "type": "string",
            "description": "Gets or sets Middle Name."
          },
          "LastName": {
            "type": "string",
            "description": "Gets or sets Last Name."
          },
          "DomainName": {
            "type": "string",
            "description": "Gets or sets Domain Name."
          },
          "UPN": {
            "type": "string",
            "description": "Gets or sets UPN."
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Gets or sets Phone Number."
          },
          "Email": {
            "type": "string",
            "description": "Gets or sets Email."
          },
          "CustomProperty1": {
            "type": "string",
            "description": "Gets or sets CustomProperty1."
          },
          "CustomProperty2": {
            "type": "string",
            "description": "Gets or sets CustomProperty2."
          },
          "CustomProperty3": {
            "type": "string",
            "description": "Gets or sets CustomProperty3."
          },
          "Identifier": {
            "type": "string",
            "description": "Gets or sets unique SID."
          }
        }
      },
      "ExchangeAccessRequest": {
        "type": "string",
        "description": "Enumerates the different requested access for a device to Exchange Server and ERG.",
        "x-enumNames": [
          "None",
          "ForceAllow",
          "ForceBlock"
        ],
        "enum": [
          "None",
          "ForceAllow",
          "ForceBlock"
        ],
        "x-enumType": "ExchangeAccessRequest"
      },
      "ExchangeDeviceStatus": {
        "type": "string",
        "description": "Enumerates the different reasons a device could be denied access to\nExchange ActiveSync.",
        "x-enumNames": [
          "Accepted",
          "BannedUser",
          "BannedPlatform",
          "BannedDevice",
          "TooManyDevices",
          "Unregistered",
          "Unconfigured",
          "BadState",
          "InternalError"
        ],
        "enum": [
          "Accepted",
          "BannedUser",
          "BannedPlatform",
          "BannedDevice",
          "TooManyDevices",
          "Unregistered",
          "Unconfigured",
          "BadState",
          "InternalError"
        ],
        "x-enumType": "ExchangeDeviceStatus"
      },
      "DeviceEncryptionCap": {
        "type": "string",
        "description": "Enumerates of the device support encryption.",
        "x-enumFlags": true,
        "x-enumNames": [
          "None",
          "Block",
          "File",
          "Both",
          "DataProtectionEnabled"
        ],
        "enum": [
          "None",
          "Block",
          "File",
          "Both",
          "DataProtectionEnabled"
        ],
        "x-enumType": "DeviceEncryptionCap"
      },
      "DeviceConnectionType": {
        "type": "string",
        "description": "Represents imported Soti.MobiControl.Entities.DeviceConnectionType enumeration.\n            ",
        "x-enumNames": [
          "Unknown",
          "CellularCsd",
          "CellularGprs",
          "Ethernet",
          "Wifi",
          "Bluetooth",
          "VPN",
          "ActiveSync",
          "Infrared",
          "Edge",
          "Cellular2GMask",
          "Cellular3G",
          "Umts",
          "Hsdpa",
          "Hspap",
          "Ehrpd",
          "Cellular3GMask",
          "Lte",
          "Cellular4GMask",
          "Cellular5GMask",
          "CellularRoaming"
        ],
        "enum": [
          "Unknown",
          "CellularCsd",
          "CellularGprs",
          "Ethernet",
          "Wifi",
          "Bluetooth",
          "VPN",
          "ActiveSync",
          "Infrared",
          "Edge",
          "Cellular2GMask",
          "Cellular3G",
          "Umts",
          "Hsdpa",
          "Hspap",
          "Ehrpd",
          "Cellular3GMask",
          "Lte",
          "Cellular4GMask",
          "Cellular5GMask",
          "CellularRoaming"
        ],
        "x-enumType": "DeviceConnectionType"
      },
      "DeviceAndroidPlus": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceAndroidPlus contracts",
            "required": [
              "AgentUpgradeEnabled",
              "AndroidDeviceAdmin",
              "CanResetPassword",
              "ExchangeBlocked",
              "ExchangeAccessRequest",
              "ExchangeStatus",
              "HardwareEncryptionCaps",
              "HardwareEncryption",
              "IsAgentCompatible",
              "IsAgentless",
              "IsEncrypted",
              "IsOSSecure",
              "NetworkConnectionType",
              "PasscodeEnabled",
              "PasscodeStatus",
              "IsCharging",
              "AndroidEnterpriseMigrationStatus",
              "IsAdminModeEnabled"
            ],
            "properties": {
              "AgentUpgradeEnabled": {
                "type": "boolean",
                "description": "Gets or sets AgentUpgradeEnabled"
              },
              "AgentVersion": {
                "type": "string",
                "description": "Gets or sets AgentVersion"
              },
              "PlugInVersion": {
                "type": "string",
                "description": "Gets or sets the version of the Plugin installed on the device."
              },
              "AndroidApiLevel": {
                "type": "integer",
                "description": "Gets or sets AndroidApiLevel",
                "format": "int32"
              },
              "AndroidDeviceAdmin": {
                "type": "boolean",
                "description": "Gets or sets AndroidDeviceAdmin"
              },
              "AndroidRcLibraryVersion": {
                "type": "string",
                "description": "Gets or sets AndroidRcLibraryVersion"
              },
              "Antivirus": {
                "description": "Gets or sets Antivirus",
                "allOf": [
                  {
                    "$ref": "#/definitions/Antivirus"
                  }
                ]
              },
              "AsuLevel": {
                "type": "integer",
                "description": "Gets or sets AsuLevel",
                "format": "int32"
              },
              "Memory": {
                "description": "Gets or sets Memory",
                "allOf": [
                  {
                    "$ref": "#/definitions/Memory"
                  }
                ]
              },
              "BatteryStatus": {
                "type": "integer",
                "description": "Gets or sets BatteryStatus"
              },
              "CanResetPassword": {
                "type": "boolean",
                "description": "Gets or sets CanResetPassword"
              },
              "CellularCarrier": {
                "type": "string",
                "description": "Gets or sets CellularCarrier"
              },
              "CellularSignalStrength": {
                "type": "integer",
                "description": "Gets or sets CellularSignalStrength",
                "format": "int32"
              },
              "CustomData": {
                "type": "array",
                "description": "Gets or sets CustomData",
                "items": {
                  "$ref": "#/definitions/CustomDataEntry"
                }
              },
              "DeviceTerms": {
                "description": "Gets or sets DeviceTerms",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceTerms"
                  }
                ]
              },
              "DeviceUserInfo": {
                "description": "Gets or sets DeviceUserInfo",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceUser"
                  }
                ]
              },
              "MultiUserDeviceInfo": {
                "description": "Gets or sets MultiUserDeviceInfo  ",
                "allOf": [
                  {
                    "$ref": "#/definitions/MultiUserDeviceInfo"
                  }
                ]
              },
              "ExchangeBlocked": {
                "type": "boolean",
                "description": "Gets or sets ExchangeBlocked"
              },
              "ExchangeAccessRequest": {
                "description": "Gets or sets ExchangeOverridenAccess",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeAccessRequest"
                  }
                ]
              },
              "ExchangeStatus": {
                "description": "Gets or sets ExchangeStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeDeviceStatus"
                  }
                ]
              },
              "HardwareEncryptionCaps": {
                "type": "integer",
                "description": "Gets or sets HardwareEncryptionCaps",
                "format": "int32"
              },
              "HardwareEncryption": {
                "description": "Gets or sets HardwareEncryption",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceEncryptionCap"
                  }
                ]
              },
              "HardwareSerialNumber": {
                "type": "string",
                "description": "Gets or sets HardwareSerialNumber"
              },
              "MobileSerialNumber": {
                "type": "string",
                "description": "Gets or sets MobileSerialNumber"
              },
              "HardwareVersion": {
                "type": "string",
                "description": "Gets or sets HardwareVersion"
              },
              "ICCID": {
                "type": "string",
                "description": "Gets or sets ICCID"
              },
              "IMEI_MEID_ESN": {
                "type": "string",
                "description": "Gets or sets IMEI_MEID_ESN"
              },
              "InRoaming": {
                "type": "boolean",
                "description": "Gets or sets InRoaming"
              },
              "IntegratedApplications": {
                "type": "array",
                "description": "Gets or sets IntegratedApplications",
                "items": {
                  "$ref": "#/definitions/DeviceIntegratedApplication"
                }
              },
              "Ipv6": {
                "type": "string",
                "description": "Gets or sets Ipv6"
              },
              "IsAgentCompatible": {
                "type": "boolean",
                "description": "Gets or sets IsAgentCompatible"
              },
              "IsAgentless": {
                "type": "boolean",
                "description": "Gets or sets IsAgentless"
              },
              "IsEncrypted": {
                "type": "boolean",
                "description": "Gets or sets IsEncrypted"
              },
              "IsOSSecure": {
                "type": "boolean",
                "description": "Gets or sets IsOSSecure"
              },
              "LastCheckInTime": {
                "type": "string",
                "description": "Gets or sets LastCheckInTime",
                "format": "date-time"
              },
              "LastAgentConnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentConnectTime",
                "format": "date-time"
              },
              "LastAgentDisconnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentDisconnectTime",
                "format": "date-time"
              },
              "LastLoggedOnUser": {
                "type": "string",
                "description": "Gets or sets LastLoggedOnUser"
              },
              "NetworkBSSID": {
                "type": "string",
                "description": "Gets or sets NetworkBSSID"
              },
              "NetworkConnectionType": {
                "description": "Gets or sets NetworkConnectionType",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceConnectionType"
                  }
                ]
              },
              "NetworkRSSI": {
                "type": "integer",
                "description": "Gets or sets NetworkRSSI",
                "format": "int32"
              },
              "NetworkSSID": {
                "type": "string",
                "description": "Gets or sets NetworkSSID"
              },
              "OEMVersion": {
                "type": "string",
                "description": "Gets or sets OEMVersion"
              },
              "PasscodeEnabled": {
                "type": "boolean",
                "description": "Gets or sets PasscodeEnabled"
              },
              "PasscodeStatus": {
                "description": "Gets or sets PasscodeStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/DevicePasscodeStatus"
                  }
                ]
              },
              "PersonalizedName": {
                "type": "string",
                "description": "Gets or sets PersonalizedName"
              },
              "PhoneNumber": {
                "type": "string",
                "description": "Gets or sets PhoneNumber"
              },
              "SEForAndroidStatus": {
                "type": "string",
                "description": "Gets or sets SEForAndroidStatus"
              },
              "SelectedApn": {
                "type": "string",
                "description": "Gets or sets SelectedApn"
              },
              "SubscriberNumber": {
                "type": "string",
                "description": "Gets or sets SubscriberNumber"
              },
              "SupportedApis": {
                "type": "array",
                "description": "Gets or sets SupportedApis",
                "items": {
                  "$ref": "#/definitions/DeviceApi"
                }
              },
              "EFOTAFirmwareVersion": {
                "type": "string",
                "description": "Gets or sets EFOTAFirmwareVersion"
              },
              "CarrierCode": {
                "type": "string",
                "description": "Gets or sets CarrierCode"
              },
              "DeviceFirmwareUpgrade": {
                "description": "Gets or sets DeviceFirmwareUpgrade",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceFirmwareUpgrade"
                  }
                ]
              },
              "BuildSecurityPatch": {
                "type": "string",
                "description": "Gets or sets BuildSecurityPatch"
              },
              "LifeGuardVersion": {
                "type": "string",
                "description": "Gets or sets LifeGuardVersion"
              },
              "Elm": {
                "description": "Represents ELM capibility state provided by Samsung Android device",
                "allOf": [
                  {
                    "$ref": "#/definitions/Elm"
                  }
                ]
              },
              "IsCharging": {
                "type": "boolean",
                "description": "Get or sets Charging value"
              },
              "MXVersion": {
                "type": "string",
                "description": "Get or sets a value for MXVersion on Device"
              },
              "AndroidEnterpriseMigrationStatus": {
                "description": "Get or sets a value for AndroidEnterpriseMigrationStatus on Device",
                "allOf": [
                  {
                    "$ref": "#/definitions/AndroidEnterpriseMigrationUiStatus"
                  }
                ]
              },
              "UserAccountsCount": {
                "type": "integer",
                "description": "Get or sets a value for UserAccountsCount on Device"
              },
              "ExchangeOnlineEmailAccess": {
                "type": "array",
                "description": "Gets or sets ExchangeOnlineEmailAccess",
                "items": {
                  "$ref": "#/definitions/DeviceExchangeOnlineEmailAccess"
                }
              },
              "IsAdminModeEnabled": {
                "type": "boolean",
                "description": "Gets or sets the IsAdminModeEnabled status"
              },
              "TimeZone": {
                "type": "string",
                "description": "Get or sets a value for TimeZone on Device"
              },
              "Kpe": {
                "description": "Represents KPE capibility state provided by Samsung Android device",
                "allOf": [
                  {
                    "$ref": "#/definitions/Kpe"
                  }
                ]
              },
              "Sims": {
                "type": "array",
                "description": "The DeviceSimInfo[]",
                "items": {
                  "$ref": "#/definitions/DeviceSimInfo"
                }
              }
            }
          }
        ]
      },
      "MultiUserDeviceInfo": {
        "type": "object",
        "description": "Shared Device Details",
        "required": [
          "State"
        ],
        "properties": {
          "State": {
            "description": "Gets or sets SharedDeviceState",
            "allOf": [
              {
                "$ref": "#/definitions/MultiUserDeviceState"
              }
            ],
            "x-enumType": "MultiUserDeviceState"
          },
          "CurrentUserSession": {
            "description": "Gets or sets CurrentUserName",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceUserSession"
              }
            ]
          },
          "LastUserSession": {
            "description": "Gets or sets LastUserName",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceUserSession"
              }
            ]
          }
        }
      },
      "MultiUserDeviceState": {
        "type": "string",
        "description": "Shared Device State",
        "x-enumNames": [
          "LoggingInRemovingManagedApps",
          "LogInErrorRemovingManagedApps",
          "LoggingInRelocatingDevice",
          "LogInErrorRelocatingDevice",
          "LoggingInRemovingProfiles",
          "LogInErrorRemovingProfiles",
          "LogInError",
          "LoggingOutRemovingManagedApps",
          "LogOutErrorRemovingManagedApps",
          "LoggingOutRelocatingDevice",
          "LogOutErrorRelocatingDevice",
          "LoggingOutRemovingProfiles",
          "LogOutErrorRemovingProfiles",
          "LoggingOutDisablingPasscode",
          "LogOutErrorDisablingPasscode",
          "LogOutError",
          "LoggedIn",
          "LoggedOut",
          "NotAvailable"
        ],
        "enum": [
          "LoggingInRemovingManagedApps",
          "LogInErrorRemovingManagedApps",
          "LoggingInRelocatingDevice",
          "LogInErrorRelocatingDevice",
          "LoggingInRemovingProfiles",
          "LogInErrorRemovingProfiles",
          "LogInError",
          "LoggingOutRemovingManagedApps",
          "LogOutErrorRemovingManagedApps",
          "LoggingOutRelocatingDevice",
          "LogOutErrorRelocatingDevice",
          "LoggingOutRemovingProfiles",
          "LogOutErrorRemovingProfiles",
          "LoggingOutDisablingPasscode",
          "LogOutErrorDisablingPasscode",
          "LogOutError",
          "LoggedIn",
          "LoggedOut",
          "NotAvailable"
        ],
        "x-enumType": "MultiUserDeviceState"
      },
      "DeviceUserSession": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "LoginTime": {
            "type": "string",
            "format": "date-time"
          },
          "LogoutTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DeviceIntegratedApplication": {
        "type": "object",
        "description": "Device integrated application status entity",
        "required": [
          "Id",
          "Status"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Device integrated application status ID\n            ",
            "format": "int32"
          },
          "AppName": {
            "type": "string",
            "description": "Integrated application Name\n            "
          },
          "Version": {
            "type": "string",
            "description": "Integrated application version"
          },
          "Status": {
            "description": "Integrated application status",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceIntegratedApplicationStatus"
              }
            ],
            "x-enumType": "DeviceIntegratedApplicationStatus"
          }
        }
      },
      "DeviceIntegratedApplicationStatus": {
        "type": "string",
        "description": "Defines the device integrated applicationStatus statuses.",
        "x-enumNames": [
          "NotConfigured",
          "Configured",
          "Blocked"
        ],
        "enum": [
          "NotConfigured",
          "Configured",
          "Blocked"
        ],
        "x-enumType": "DeviceIntegratedApplicationStatus"
      },
      "DevicePasscodeStatus": {
        "type": "string",
        "description": "Enumerates the different supported device passcode status.",
        "x-enumNames": [
          "Unknown",
          "Present",
          "CompliantWithProfiles",
          "DataProtectionEnabled"
        ],
        "enum": [
          "Unknown",
          "Present",
          "CompliantWithProfiles",
          "DataProtectionEnabled"
        ],
        "x-enumType": "DevicePasscodeStatus"
      },
      "DeviceApi": {
        "type": "string",
        "description": "Enumerates all available APIs for all device platforms.\nAlways copy this enum from GeneratedEnums.cs",
        "x-enumNames": [
          "None",
          "RcError",
          "SamsungMdmV1",
          "SamsungMdmV2",
          "SamsungMdmV21",
          "SamsungMdmV3",
          "SamsungMdmV4",
          "SamsungMdmV401",
          "SamsungMdmV5",
          "SamsungMdmV55",
          "SamsungMdmV57",
          "SamsungRcV1",
          "AndroidRcPlus",
          "AndroidRcVirtualDisplay",
          "AndroidRcRemoteView",
          "AndroidSonyRc",
          "AndroidZebraRc",
          "SamsungMdmV56",
          "SamsungKnoxV1",
          "SamsungKnoxV2",
          "SamsungKnoxV22",
          "SamsungKnoxV23",
          "SamsungKnoxV24",
          "SamsungKnoxV30",
          "SamsungKnoxV31",
          "SamsungKnoxV32",
          "SamsungKnoxV321",
          "SamsungKnoxV33",
          "SamsungKnoxV34",
          "SamsungKnoxV341",
          "SamsungKnoxV35",
          "SamsungKnoxV36",
          "SamsungKnoxV37",
          "SamsungKnoxV371",
          "SamsungKnoxV38",
          "Android22Enterprise",
          "Android23Enterprise",
          "Android30Enterprise",
          "Android40Enterprise",
          "Android41Enterprise",
          "AndroidGeneric",
          "GingerbreadHoneywell",
          "AndroidLgMdm1",
          "AndroidLgMdm2",
          "AndroidLgMdm3",
          "AndroidLgMdm621",
          "AndroidLenovo40",
          "AndroidKyoceraMdm1",
          "AndroidKyoceraMdm2",
          "AndroidKyoceraMdm3",
          "AndroidSonyMdm1",
          "AndroidSonyMdm2",
          "AndroidSonyMdm3",
          "AndroidSonyMdm4",
          "AndroidSonyMdm7",
          "AndroidSonyMdm71",
          "AndroidSonyMdm8",
          "AndroidMotorolaMX10",
          "AndroidMotorolaMX11",
          "AndroidMotorolaMX12",
          "AndroidMotorolaMX13",
          "AndroidMotorolaMX321",
          "AndroidMSI",
          "AndroidCasioMdm1",
          "AndroidAcerMdm0",
          "AndroidAmazonMdm1",
          "AndroidBqMdm1",
          "AndroidWorkCompatible",
          "AndroidWorkManagedProfile",
          "AndroidWorkManagedDevice",
          "AndroidWorkManagedDeviceWithWorkProfile",
          "AndroidWorkCorporatePersonal",
          "AndroidZebraMX321",
          "AndroidZebraPlus",
          "AndroidLgMdm23",
          "AndroidZebraEmdk",
          "AndroidZebraMX321WithSoti10",
          "AndroidUrovoMdm1",
          "AndroidSotiMDM10",
          "AndroidSotiMDM11",
          "AndroidSotiMDM118",
          "AndroidSotiMDM120",
          "AndroidSotiMDM122",
          "AndroidPlusMDM15",
          "AndroidPlusMDM16",
          "AndroidPlusMDM17",
          "AndroidPlusMDM110",
          "AndroidPlusMDM111",
          "AndroidPlusMDM112",
          "AndroidPlusMDM113",
          "AndroidPlusMDM114",
          "AndroidPlusMDM115",
          "AndroidPlusMDM116",
          "AndroidPanasonicMdm1",
          "AndroidHuaweiEmuiPluginMdm1",
          "AndroidHuaweiEmuiPluginMdm2",
          "AndroidPlusMDM117",
          "AndroidPlusMDM119",
          "AndroidPlusMDM124",
          "AndroidVideoStreaming"
        ],
        "enum": [
          "None",
          "RcError",
          "SamsungMdmV1",
          "SamsungMdmV2",
          "SamsungMdmV21",
          "SamsungMdmV3",
          "SamsungMdmV4",
          "SamsungMdmV401",
          "SamsungMdmV5",
          "SamsungMdmV55",
          "SamsungMdmV57",
          "SamsungRcV1",
          "AndroidRcPlus",
          "AndroidRcVirtualDisplay",
          "AndroidRcRemoteView",
          "AndroidSonyRc",
          "AndroidZebraRc",
          "SamsungMdmV56",
          "SamsungKnoxV1",
          "SamsungKnoxV2",
          "SamsungKnoxV22",
          "SamsungKnoxV23",
          "SamsungKnoxV24",
          "SamsungKnoxV30",
          "SamsungKnoxV31",
          "SamsungKnoxV32",
          "SamsungKnoxV321",
          "SamsungKnoxV33",
          "SamsungKnoxV34",
          "SamsungKnoxV341",
          "SamsungKnoxV35",
          "SamsungKnoxV36",
          "SamsungKnoxV37",
          "SamsungKnoxV371",
          "SamsungKnoxV38",
          "Android22Enterprise",
          "Android23Enterprise",
          "Android30Enterprise",
          "Android40Enterprise",
          "Android41Enterprise",
          "AndroidGeneric",
          "GingerbreadHoneywell",
          "AndroidLgMdm1",
          "AndroidLgMdm2",
          "AndroidLgMdm3",
          "AndroidLgMdm621",
          "AndroidLenovo40",
          "AndroidKyoceraMdm1",
          "AndroidKyoceraMdm2",
          "AndroidKyoceraMdm3",
          "AndroidSonyMdm1",
          "AndroidSonyMdm2",
          "AndroidSonyMdm3",
          "AndroidSonyMdm4",
          "AndroidSonyMdm7",
          "AndroidSonyMdm71",
          "AndroidSonyMdm8",
          "AndroidMotorolaMX10",
          "AndroidMotorolaMX11",
          "AndroidMotorolaMX12",
          "AndroidMotorolaMX13",
          "AndroidMotorolaMX321",
          "AndroidMSI",
          "AndroidCasioMdm1",
          "AndroidAcerMdm0",
          "AndroidAmazonMdm1",
          "AndroidBqMdm1",
          "AndroidWorkCompatible",
          "AndroidWorkManagedProfile",
          "AndroidWorkManagedDevice",
          "AndroidWorkManagedDeviceWithWorkProfile",
          "AndroidWorkCorporatePersonal",
          "AndroidZebraMX321",
          "AndroidZebraPlus",
          "AndroidLgMdm23",
          "AndroidZebraEmdk",
          "AndroidZebraMX321WithSoti10",
          "AndroidUrovoMdm1",
          "AndroidSotiMDM10",
          "AndroidSotiMDM11",
          "AndroidSotiMDM118",
          "AndroidSotiMDM120",
          "AndroidSotiMDM122",
          "AndroidPlusMDM15",
          "AndroidPlusMDM16",
          "AndroidPlusMDM17",
          "AndroidPlusMDM110",
          "AndroidPlusMDM111",
          "AndroidPlusMDM112",
          "AndroidPlusMDM113",
          "AndroidPlusMDM114",
          "AndroidPlusMDM115",
          "AndroidPlusMDM116",
          "AndroidPanasonicMdm1",
          "AndroidHuaweiEmuiPluginMdm1",
          "AndroidHuaweiEmuiPluginMdm2",
          "AndroidPlusMDM117",
          "AndroidPlusMDM119",
          "AndroidPlusMDM124",
          "AndroidVideoStreaming"
        ],
        "x-enumType": "DeviceApi"
      },
      "DeviceFirmwareUpgrade": {
        "type": "object",
        "description": "Gets or sets DeviceFirmwareUpgrade",
        "required": [
          "EnrolmentStatus",
          "FirmwareUpgradeStatus",
          "LifeGuardEnrollmentStatus"
        ],
        "properties": {
          "DeviceId": {
            "type": "string",
            "description": "Gets or sets Device Id"
          },
          "EnrolmentStatus": {
            "description": "Gets or sets License Status",
            "allOf": [
              {
                "$ref": "#/definitions/AndroidFirmwareUpgradeEnrolmentStatus"
              }
            ],
            "x-enumType": "AndroidFirmwareUpgradeEnrolmentStatus"
          },
          "TargetFirmwareVersion": {
            "description": "Gets or sets Software Version value",
            "allOf": [
              {
                "$ref": "#/definitions/AndroidFirmwareVersion"
              }
            ]
          },
          "DeliveryStartDate": {
            "type": "string",
            "description": "Gets or sets Delivery start date and time",
            "format": "date-time"
          },
          "DeliveryEndDate": {
            "type": "string",
            "description": "Gets or sets Delivery end date and time",
            "format": "date-time"
          },
          "FirmwareUpgradeStatus": {
            "description": "Gets or sets Firmware Upgrade Status",
            "allOf": [
              {
                "$ref": "#/definitions/AndroidFirmwareUpgradeStatus"
              }
            ],
            "x-enumType": "AndroidFirmwareUpgradeStatus"
          },
          "AndroidFirmwareUpgradeLicenseGroup": {
            "description": "Gets or Set Android Firmware Upgrade License Group value",
            "allOf": [
              {
                "$ref": "#/definitions/AndroidFirmwareUpgradeLicenseGroup"
              }
            ]
          },
          "LifeGuardEnrollmentStatus": {
            "description": "Gets or sets Zebra LifeGuard OTA Enrollment Status. Applicable for Zebra Devices (Zebra Technologies) only.",
            "allOf": [
              {
                "$ref": "#/definitions/AndroidFirmwareUpgradeEnrolmentStatus"
              }
            ],
            "x-enumType": "AndroidFirmwareUpgradeEnrolmentStatus"
          }
        }
      },
      "AndroidFirmwareUpgradeEnrolmentStatus": {
        "type": "string",
        "description": "Android Firmware Upgrade Enrolment Status",
        "x-enumNames": [
          "Processing",
          "Failure",
          "Success",
          "ReadyForFirmwareUpgrade",
          "Blocked",
          "ReEnrolment"
        ],
        "enum": [
          "Processing",
          "Failure",
          "Success",
          "ReadyForFirmwareUpgrade",
          "Blocked",
          "ReEnrolment"
        ],
        "x-enumType": "AndroidFirmwareUpgradeEnrolmentStatus"
      },
      "AndroidFirmwareVersion": {
        "type": "object",
        "description": "Android Firmware Version",
        "required": [
          "ReleaseDate",
          "IsLatestVersion"
        ],
        "properties": {
          "OsVersion": {
            "type": "string",
            "description": "Gets or sets OS Version"
          },
          "FirmwareType": {
            "type": "string",
            "description": "Gets or sets Firmware Type"
          },
          "ReleaseDate": {
            "type": "string",
            "description": "Gets or sets Release Date",
            "format": "date-time"
          },
          "FirmwareVersion": {
            "type": "string",
            "description": "Gets or sets Firmware Version"
          },
          "Description": {
            "type": "string",
            "description": "Gets or sets description"
          },
          "IsLatestVersion": {
            "type": "boolean",
            "description": "Gets or sets IsLatestVersion"
          }
        }
      },
      "AndroidFirmwareUpgradeStatus": {
        "type": "string",
        "description": "Android Firmware Upgrade Status",
        "x-enumNames": [
          "None",
          "Unknown",
          "Delivered",
          "Processing",
          "Failure",
          "Success",
          "Scheduled",
          "Cancelled"
        ],
        "enum": [
          "None",
          "Unknown",
          "Delivered",
          "Processing",
          "Failure",
          "Success",
          "Scheduled",
          "Cancelled"
        ],
        "x-enumType": "AndroidFirmwareUpgradeStatus"
      },
      "AndroidFirmwareUpgradeLicenseGroup": {
        "type": "object",
        "description": "Android Firmware Upgrade License Group",
        "properties": {
          "License": {
            "description": "Get or sets a Android Firmware Upgrade License",
            "allOf": [
              {
                "$ref": "#/definitions/AndroidFirmwareUpgradeLicense"
              }
            ]
          },
          "Group": {
            "description": "Get or sets a Android Firmware Upgrade Group",
            "allOf": [
              {
                "$ref": "#/definitions/AndroidFirmwareUpgradeGroup"
              }
            ]
          }
        }
      },
      "AndroidFirmwareUpgradeLicense": {
        "type": "object",
        "description": "Represents Firmware Upgrade License",
        "properties": {
          "LicenseName": {
            "type": "string",
            "description": "Gets or sets License Name"
          },
          "CustomerId": {
            "type": "string",
            "description": "Gets or sets Customer Id"
          },
          "LicenseKey": {
            "type": "string",
            "description": "Gets or sets a license key"
          },
          "ExpirationDate": {
            "type": "string",
            "description": "Gets or sets expiration date",
            "format": "date-time"
          },
          "TotalSeats": {
            "type": "integer",
            "description": "Gets or sets a total number of devices that can use this license",
            "format": "int32"
          },
          "UsedSeats": {
            "type": "integer",
            "description": "Gets or sets a number of used seats for devices",
            "format": "int32"
          }
        }
      },
      "AndroidFirmwareUpgradeGroup": {
        "type": "object",
        "description": "Android Firmware Upgrade License Group",
        "required": [
          "UsedSeats"
        ],
        "properties": {
          "GroupId": {
            "type": "string",
            "description": "Gets or sets Android Firmware Upgrade License Group Id"
          },
          "UsedSeats": {
            "type": "integer",
            "description": "Number of license used in group",
            "format": "int32"
          }
        }
      },
      "Elm": {
        "type": "object",
        "description": "Represents a Elm capibility state provided by Samsung Android device",
        "required": [
          "Status"
        ],
        "properties": {
          "ActivationFailureReason": {
            "type": "string",
            "description": "Gets or sets the reason why ELM license activation failed."
          },
          "Status": {
            "description": "Gets or sets license status",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceElmLicenseStatus"
              }
            ],
            "x-enumType": "DeviceElmLicenseStatus"
          }
        }
      },
      "DeviceElmLicenseStatus": {
        "type": "string",
        "description": "Contains statuses for a device ELM License.",
        "x-enumNames": [
          "Pending",
          "Active",
          "ActivationFailed",
          "Declined",
          "Revoked",
          "Unknown"
        ],
        "enum": [
          "Pending",
          "Active",
          "ActivationFailed",
          "Declined",
          "Revoked",
          "Unknown"
        ],
        "x-enumType": "DeviceElmLicenseStatus"
      },
      "AndroidEnterpriseMigrationUiStatus": {
        "type": "string",
        "description": "AndroidEnterpriseMigrationUiStatus",
        "x-enumNames": [
          "None",
          "Available",
          "Success",
          "Failed",
          "Pending"
        ],
        "enum": [
          "None",
          "Available",
          "Success",
          "Failed",
          "Pending"
        ],
        "x-enumType": "AndroidEnterpriseMigrationUiStatus"
      },
      "DeviceExchangeOnlineEmailAccess": {
        "type": "object",
        "description": "Dictates an array of exchange server status on device",
        "required": [
          "DeviceExchangeOnlineEmailAccessStatus"
        ],
        "properties": {
          "ServerName": {
            "type": "string",
            "description": "Name of exchange server"
          },
          "ReferenceId": {
            "type": "string",
            "description": "ReferenceId of exchange server"
          },
          "DeviceExchangeOnlineEmailAccessStatus": {
            "description": "DeviceExchangeOnlineEmailAccessStatus (unknown, allowed, blocked, quarantined, device discovery)",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceExchangeOnlineEmailAccessStatus"
              }
            ],
            "x-enumType": "DeviceExchangeOnlineEmailAccessStatus"
          }
        }
      },
      "DeviceExchangeOnlineEmailAccessStatus": {
        "type": "string",
        "description": "Enumerates the status of exchange online email access\nExchange ActiveSync.",
        "x-enumNames": [
          "Unknown",
          "Allowed",
          "Blocked",
          "Quarantined",
          "DeviceDiscovery"
        ],
        "enum": [
          "Unknown",
          "Allowed",
          "Blocked",
          "Quarantined",
          "DeviceDiscovery"
        ],
        "x-enumType": "DeviceExchangeOnlineEmailAccessStatus"
      },
      "Kpe": {
        "type": "object",
        "description": "Represents a Kpe capibility state provided by Samsung Android device",
        "required": [
          "Status"
        ],
        "properties": {
          "Status": {
            "description": "Gets or sets license status",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceKpeLicenseStatus"
              }
            ],
            "x-enumType": "DeviceKpeLicenseStatus"
          }
        }
      },
      "DeviceKpeLicenseStatus": {
        "type": "string",
        "description": "Contains statuses for a device KPE License.",
        "x-enumNames": [
          "Pending",
          "Active",
          "ActivationFailed",
          "Declined",
          "Revoked",
          "Unknown"
        ],
        "enum": [
          "Pending",
          "Active",
          "ActivationFailed",
          "Declined",
          "Revoked",
          "Unknown"
        ],
        "x-enumType": "DeviceKpeLicenseStatus"
      },
      "DeviceSimInfo": {
        "type": "object",
        "description": "Device Sim Info",
        "required": [
          "Type",
          "IsDataPreferred",
          "IsRoaming",
          "IsVoicePreferred"
        ],
        "properties": {
          "Type": {
            "description": "Gets or sets the SimType",
            "allOf": [
              {
                "$ref": "#/definitions/SimType"
              }
            ],
            "x-enumType": "SimType"
          },
          "CarrierSettingsVersion": {
            "type": "string",
            "description": "Gets or sets the device's Service Subscription Property eSIM Carrier Settings Version."
          },
          "CurrentCarrierNetwork": {
            "type": "string",
            "description": "Gets or sets the device's Service Subscription Property(eSIM) : he name of the current carrier network."
          },
          "CurrentMCC": {
            "type": "string",
            "description": "Gets or sets the device's Service Subscription Property(eSIM) Mobile Country Code."
          },
          "CurrentMNC": {
            "type": "string",
            "description": "Gets or sets the device's Service Subscription Property(eSIM). The current mobile network code (MNC)."
          },
          "EID": {
            "type": "string",
            "description": "Gets or sets the device's Service Subscription Property(eSIM). The eSIM identifier."
          },
          "ICCID": {
            "type": "string",
            "description": "Gets or sets the device's Service Subscription Property(eSIM):The integrated circuit card identifier (ICCID) value"
          },
          "ImeiOrMeid": {
            "type": "string",
            "description": "Gets or sets the device's Service Subscription Property(eSIM) :\nThe device International Mobile Equipment Identity (IMEI) or Mobile Equipment Identifier (MEID) number."
          },
          "IMSI": {
            "type": "string",
            "description": "Gets or sets the device's IMSI:\nThe international mobile subscriber identity (IMSI) is a number that uniquely identifies every user of a cellular network."
          },
          "IsDataPreferred": {
            "type": "boolean",
            "description": "Gets or sets the device's Service Subscription Property(eSIM):If true, this subscription is the preference for data."
          },
          "IsRoaming": {
            "type": "boolean",
            "description": "Gets or sets the device's Service Subscription Property(eSIM) :If true, the phone is roaming."
          },
          "IsVoicePreferred": {
            "type": "boolean",
            "description": "Gets or sets the device's Service Subscription Property(eSIM) : If true, this subscription is the preference for voice."
          },
          "LabelID": {
            "type": "string",
            "description": "Gets or sets the device's Service Subscription Property(eSIM) : The unique identifier for this subscription."
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Gets or sets the device's Service Subscription Property(eSIM) : If true, this subscription is the preference for voice.The raw phone number without punctuation and including country code."
          },
          "CellularSignalStrength": {
            "type": "integer",
            "description": "Gets or sets the Cellular Signal Strength.",
            "format": "byte"
          }
        }
      },
      "SimType": {
        "type": "string",
        "description": "SimType",
        "x-enumNames": [
          "MainSim",
          "SecondarySim",
          "ESim"
        ],
        "enum": [
          "MainSim",
          "SecondarySim",
          "ESim"
        ],
        "x-enumType": "SimType"
      },
      "DeviceAndroidElm": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceAndroidPlus"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceAndroidElm contracts",
            "x-deprecated": true,
            "x-deprecatedMessage": "Use Elm property of DeviceAndroidPlus"
          }
        ]
      },
      "DeviceAndroidKnox": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceAndroidElm"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceAndroidKnox contracts",
            "properties": {
              "Knox": {
                "description": "Gets or sets Knox",
                "allOf": [
                  {
                    "$ref": "#/definitions/Knox"
                  }
                ]
              },
              "DeviceKnoxLicense": {
                "description": "Gets or sets DeviceKnoxLicense",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceKnoxLicense"
                  }
                ]
              }
            }
          }
        ]
      },
      "Knox": {
        "type": "object",
        "description": "Samsung Knox properties",
        "properties": {
          "KnoxCapability": {
            "description": "Knox supported on device",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceKnoxCapability"
              }
            ],
            "x-enumType": "DeviceKnoxCapability"
          },
          "KnoxAttestationCapability": {
            "description": "Knox attestation capability",
            "allOf": [
              {
                "$ref": "#/definitions/KnoxAttestationCapability"
              }
            ],
            "x-enumType": "KnoxAttestationCapability"
          },
          "KnoxAttestationStatus": {
            "description": "Knox license status",
            "allOf": [
              {
                "$ref": "#/definitions/KnoxAttestationStatus"
              }
            ],
            "x-enumType": "KnoxAttestationStatus"
          },
          "KnoxLicenseInfo": {
            "description": "Knox license information",
            "allOf": [
              {
                "$ref": "#/definitions/KnoxLicense"
              }
            ]
          }
        }
      },
      "DeviceKnoxCapability": {
        "type": "string",
        "description": "KNOX attestation capability",
        "x-enumNames": [
          "NotSupported",
          "Supported"
        ],
        "enum": [
          "NotSupported",
          "Supported"
        ],
        "x-enumType": "DeviceKnoxCapability"
      },
      "KnoxAttestationCapability": {
        "type": "string",
        "description": "KNOX attestation capability",
        "x-enumNames": [
          "Unknown",
          "Supported",
          "NotSupported",
          "Error"
        ],
        "enum": [
          "Unknown",
          "Supported",
          "NotSupported",
          "Error"
        ],
        "x-enumType": "KnoxAttestationCapability"
      },
      "KnoxAttestationStatus": {
        "type": "string",
        "description": "KNOX license types",
        "x-enumNames": [
          "Unknown",
          "NotStarted",
          "Pending",
          "Passed",
          "Failed"
        ],
        "enum": [
          "Unknown",
          "NotStarted",
          "Pending",
          "Passed",
          "Failed"
        ],
        "x-enumType": "KnoxAttestationStatus"
      },
      "KnoxLicense": {
        "type": "object",
        "description": "Represents a third party license",
        "required": [
          "LicenseType",
          "LicenseStatus",
          "Enabled"
        ],
        "properties": {
          "LicenseGuid": {
            "type": "string",
            "description": "Gets or sets a unique identifier of the license"
          },
          "LicenseKey": {
            "type": "string",
            "description": "Gets or sets a license key, to be sent to device"
          },
          "LicenseType": {
            "description": "Gets or sets a license type, like Monthly",
            "allOf": [
              {
                "$ref": "#/definitions/LicenseObjectTypes"
              }
            ],
            "x-enumType": "LicenseObjectTypes"
          },
          "LicenseStatus": {
            "description": "Gets or sets a license status, like Valid",
            "allOf": [
              {
                "$ref": "#/definitions/KnoxLicenseStatus"
              }
            ],
            "x-enumType": "KnoxLicenseStatus"
          },
          "OrderNumber": {
            "type": "string",
            "description": "Gets or sets an optional order number for a license"
          },
          "StartDate": {
            "type": "string",
            "description": "Gets or sets a start date of the validity period of a license if any",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "Gets or sets an end date of the validity period of a license if any",
            "format": "date-time"
          },
          "TotalSeats": {
            "type": "integer",
            "description": "Gets or sets a total number of devices that can use this license",
            "format": "int32"
          },
          "AvailableSeats": {
            "type": "integer",
            "description": "Gets or sets a number of available seats for devices",
            "format": "int32"
          },
          "UpdateDate": {
            "type": "string",
            "description": "Gets or sets a date/time when license information was reconciled with SLM",
            "format": "date-time"
          },
          "Enabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether knox license is enabled."
          }
        }
      },
      "LicenseObjectTypes": {
        "type": "string",
        "description": "Represents the license object type.\n            ",
        "x-enumFlags": true,
        "x-enumNames": [
          "None",
          "SamsungElm",
          "WebrootAntivirus",
          "WebrootWebFilter",
          "SamsungKnoxMonthly",
          "SamsungKnoxPerpetual",
          "SamsungKnoxElm",
          "SamsungKpe"
        ],
        "enum": [
          "None",
          "SamsungElm",
          "WebrootAntivirus",
          "WebrootWebFilter",
          "SamsungKnoxMonthly",
          "SamsungKnoxPerpetual",
          "SamsungKnoxElm",
          "SamsungKpe"
        ],
        "x-enumType": "LicenseObjectTypes"
      },
      "KnoxLicenseStatus": {
        "type": "string",
        "description": "Represents valid statuses for KNOX licenses",
        "x-enumNames": [
          "Unknown",
          "Valid",
          "Expired",
          "Terminated",
          "FailedToActivate",
          "Invalid",
          "Deactivated"
        ],
        "enum": [
          "Unknown",
          "Valid",
          "Expired",
          "Terminated",
          "FailedToActivate",
          "Invalid",
          "Deactivated"
        ],
        "x-enumType": "KnoxLicenseStatus"
      },
      "DeviceKnoxLicense": {
        "type": "object",
        "description": "Represents a KNOX license provided to device",
        "required": [
          "Status"
        ],
        "properties": {
          "KnoxLicense": {
            "description": "Gets or sets license id",
            "allOf": [
              {
                "$ref": "#/definitions/KnoxLicense"
              }
            ]
          },
          "DeviceId": {
            "type": "string",
            "description": "Gets or sets the device identifier."
          },
          "Status": {
            "description": "Gets or sets license status",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceKnoxLicenseStatus"
              }
            ],
            "x-enumType": "DeviceKnoxLicenseStatus"
          }
        }
      },
      "DeviceKnoxLicenseStatus": {
        "type": "string",
        "description": "Represents valid statuses for a device Knox License",
        "x-enumNames": [
          "Unknown",
          "Pending",
          "Active",
          "FailedUnknownError",
          "FailedNullParametersError",
          "FailedInternalError",
          "FailedInternalServerError",
          "FailedInvalidLicenseError",
          "FailedLicenseDeactivatedError",
          "FailedLicenseExpiredError",
          "FailedLicenseQuantityExhausted",
          "FailedLicenseTerminatedError",
          "FailedNetworkDisconnectedError",
          "FailedNetworkGeneralError",
          "FailedUserDidNotAcceptLicenseAgreement",
          "FailedTemporary",
          "FailedPermanent",
          "Revoked",
          "FailedOptional",
          "Declined"
        ],
        "enum": [
          "Unknown",
          "Pending",
          "Active",
          "FailedUnknownError",
          "FailedNullParametersError",
          "FailedInternalError",
          "FailedInternalServerError",
          "FailedInvalidLicenseError",
          "FailedLicenseDeactivatedError",
          "FailedLicenseExpiredError",
          "FailedLicenseQuantityExhausted",
          "FailedLicenseTerminatedError",
          "FailedNetworkDisconnectedError",
          "FailedNetworkGeneralError",
          "FailedUserDidNotAcceptLicenseAgreement",
          "FailedTemporary",
          "FailedPermanent",
          "Revoked",
          "FailedOptional",
          "Declined"
        ],
        "x-enumType": "DeviceKnoxLicenseStatus"
      },
      "DeviceAndroidForWork": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceAndroidPlus"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceAndroidForWork contracts",
            "required": [
              "CellularTechnology",
              "AndroidAccountType"
            ],
            "properties": {
              "AndroidForWork": {
                "description": "Gets or sets AndroidForWork",
                "allOf": [
                  {
                    "$ref": "#/definitions/AndroidForWork"
                  }
                ]
              },
              "BuildVersion": {
                "type": "string",
                "description": "Gets or sets BuildVersion"
              },
              "CellularTechnology": {
                "description": "Gets or sets CellularTechnology",
                "allOf": [
                  {
                    "$ref": "#/definitions/CellTechnologyType"
                  }
                ]
              },
              "UserIdentities": {
                "type": "array",
                "description": "Gets or sets UserIdentities",
                "items": {
                  "$ref": "#/definitions/DeviceUserIdentity"
                }
              },
              "AndroidAccountType": {
                "description": "Gets or sets AndroidAccountType",
                "allOf": [
                  {
                    "$ref": "#/definitions/AndroidAccountType"
                  }
                ]
              },
              "SafetynetAttestationStatus": {
                "description": "Gets or sets AndroidAccountType",
                "allOf": [
                  {
                    "$ref": "#/definitions/SafetynetAttestationStatus"
                  }
                ]
              },
              "AndroidEnterpriseEmail": {
                "type": "string",
                "description": "Gets or sets Email address associated with device email account."
              }
            }
          }
        ]
      },
      "AndroidForWork": {
        "type": "object",
        "description": "Android for work properties",
        "required": [
          "IsAndroidManagementEnrolledDevice"
        ],
        "properties": {
          "AfwProfileDisabled": {
            "type": "boolean",
            "description": "Gets or sets AfwProfileDisabled"
          },
          "AfwProvisionStage": {
            "description": "Gets or sets AfwProvisionStage",
            "allOf": [
              {
                "$ref": "#/definitions/AfwProvisionStage"
              }
            ],
            "x-enumType": "AfwProvisionStage"
          },
          "AfwManagementType": {
            "description": "Gets or sets AfwManagementType",
            "allOf": [
              {
                "$ref": "#/definitions/AfwManagementType"
              }
            ],
            "x-enumType": "AfwManagementType"
          },
          "AndroidEnterpriseName": {
            "type": "string",
            "description": "Gets or sets Enterprise name"
          },
          "FeedbackReportPolicyEnabled": {
            "description": "Gets or sets Device Report Policy value",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceReportPolicy"
              }
            ],
            "x-enumType": "DeviceReportPolicy"
          },
          "IsAndroidManagementEnrolledDevice": {
            "type": "boolean",
            "description": "Gets or sets IsAndroidManagement EnrolledDevice value\nTrue for AndroidManagement Enrolled Device "
          }
        }
      },
      "AfwProvisionStage": {
        "type": "string",
        "description": "Android for work provision stage",
        "x-enumNames": [
          "NotProvision",
          "CompletedProvision",
          "InProgressProvision",
          "NotApplicable",
          "FailedProvision"
        ],
        "enum": [
          "NotProvision",
          "CompletedProvision",
          "InProgressProvision",
          "NotApplicable",
          "FailedProvision"
        ],
        "x-enumType": "AfwProvisionStage"
      },
      "AfwManagementType": {
        "type": "string",
        "description": "Android for work management type",
        "x-enumNames": [
          "Unknown",
          "AfwManagedProfile",
          "AfwManagedDevice",
          "AfwManagedDeviceWithWorkProfile"
        ],
        "enum": [
          "Unknown",
          "AfwManagedProfile",
          "AfwManagedDevice",
          "AfwManagedDeviceWithWorkProfile"
        ],
        "x-enumType": "AfwManagementType"
      },
      "DeviceReportPolicy": {
        "type": "string",
        "description": "Device Report Policy",
        "x-enumNames": [
          "DeviceReportDisabled",
          "DeviceReportEnabled"
        ],
        "enum": [
          "DeviceReportDisabled",
          "DeviceReportEnabled"
        ],
        "x-enumType": "DeviceReportPolicy"
      },
      "CellTechnologyType": {
        "type": "string",
        "description": "Represents valid types of assets protected by security ",
        "x-enumNames": [
          "None",
          "GSM",
          "CDMA",
          "GSMAndCDMA"
        ],
        "enum": [
          "None",
          "GSM",
          "CDMA",
          "GSMAndCDMA"
        ],
        "x-enumType": "CellTechnologyType"
      },
      "DeviceUserIdentity": {
        "type": "object",
        "description": "Represents a Device Email Account.",
        "properties": {
          "Email": {
            "type": "string",
            "description": "Email address"
          }
        }
      },
      "AndroidAccountType": {
        "type": "string",
        "description": "Android for work provision stage",
        "x-enumNames": [
          "GoogleAccount",
          "ManagedGooglePlayAccount",
          "SkipGoogleAccountAddition"
        ],
        "enum": [
          "GoogleAccount",
          "ManagedGooglePlayAccount",
          "SkipGoogleAccountAddition"
        ],
        "x-enumType": "AndroidAccountType"
      },
      "SafetynetAttestationStatus": {
        "type": "string",
        "description": "Google Sertifyed device attestation status",
        "x-enumNames": [
          "Unknown",
          "Passed",
          "Failed",
          "PassedHardwareBacked"
        ],
        "enum": [
          "Unknown",
          "Passed",
          "Failed",
          "PassedHardwareBacked"
        ],
        "x-enumType": "SafetynetAttestationStatus"
      },
      "DeviceIos": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceIos contracts",
            "required": [
              "CellularTechnology",
              "ExchangeBlocked",
              "ExchangeAccessRequest",
              "ExchangeStatus",
              "HardwareEncryptionCaps",
              "HardwareEncryption",
              "IsAgentCompatible",
              "IsAgentless",
              "IsEncrypted",
              "IsEnrolled",
              "IsOSSecure",
              "PasscodeEnabled",
              "PasscodeStatus",
              "AppleBusinessManagerUserId",
              "IsMultiUser"
            ],
            "properties": {
              "ActivationLockBypassCode": {
                "type": "string",
                "description": "Gets or sets ActivationLockBypassCode"
              },
              "ActivationLockBypassStatus": {
                "description": "Gets or sets ActivationLockBypassStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/ActivationLockBypassStatus"
                  }
                ]
              },
              "AgentVersion": {
                "type": "string",
                "description": "Gets or sets AgentVersion"
              },
              "Memory": {
                "description": "Gets or sets Memory",
                "allOf": [
                  {
                    "$ref": "#/definitions/Memory"
                  }
                ]
              },
              "BatteryStatus": {
                "type": "integer",
                "description": "Gets or sets BatteryStatus"
              },
              "BuildVersion": {
                "type": "string",
                "description": "Gets or sets BuildVersion"
              },
              "CarrierSettingsVersion": {
                "type": "string",
                "description": "Gets or sets CarrierSettingsVersion"
              },
              "CellularCarrier": {
                "type": "string",
                "description": "Gets or sets CellularCarrier"
              },
              "CellularTechnology": {
                "description": "Gets or sets CellularTechnology",
                "allOf": [
                  {
                    "$ref": "#/definitions/CellTechnologyType"
                  }
                ]
              },
              "CurrentMCC": {
                "type": "string",
                "description": "Gets or sets CurrentMCC"
              },
              "CurrentMNC": {
                "type": "string",
                "description": "Gets or sets CurrentMNC"
              },
              "DataRoamingEnabled": {
                "type": "boolean",
                "description": "Gets or sets DataRoamingEnabled"
              },
              "DeviceTerms": {
                "description": "Gets or sets DeviceTerms",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceTerms"
                  }
                ]
              },
              "DeviceUserInfo": {
                "description": "Gets or sets DeviceUserInfo",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceUser"
                  }
                ]
              },
              "MultiUserDeviceInfo": {
                "description": "Gets or sets MultiUserDeviceInfo",
                "allOf": [
                  {
                    "$ref": "#/definitions/MultiUserDeviceInfo"
                  }
                ]
              },
              "ExchangeBlocked": {
                "type": "boolean",
                "description": "Gets or sets ExchangeBlocked"
              },
              "ExchangeAccessRequest": {
                "description": "Gets or sets ExchangeOverridenAccess",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeAccessRequest"
                  }
                ]
              },
              "ExchangeStatus": {
                "description": "Gets or sets ExchangeStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeDeviceStatus"
                  }
                ]
              },
              "FirmwareVersion": {
                "type": "string",
                "description": "Gets or sets FirmwareVersion"
              },
              "HardwareEncryptionCaps": {
                "type": "integer",
                "description": "Gets or sets HardwareEncryptionCaps",
                "format": "int32"
              },
              "HardwareEncryption": {
                "description": "Gets or sets HardwareEncryption",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceEncryptionCap"
                  }
                ]
              },
              "ICCID": {
                "type": "string",
                "description": "Gets or sets ICCID"
              },
              "IMEI_MEID_ESN": {
                "type": "string",
                "description": "Gets or sets IMEI_MEID_ESN"
              },
              "InRoaming": {
                "type": "boolean",
                "description": "Gets or sets InRoaming"
              },
              "Ipv6": {
                "type": "string",
                "description": "Gets or sets Ipv6"
              },
              "IsActivationLockEnabled": {
                "type": "boolean",
                "description": "Gets or sets IsActivationLockEnabled"
              },
              "IsAgentCompatible": {
                "type": "boolean",
                "description": "Gets or sets IsAgentCompatible"
              },
              "IsAgentless": {
                "type": "boolean",
                "description": "Gets or sets IsAgentless"
              },
              "IsDeviceLocatorServiceEnabled": {
                "type": "boolean",
                "description": "Gets or sets IsDeviceLocatorServiceEnabled"
              },
              "IsDoNotDisturbInEffect": {
                "type": "boolean",
                "description": "Gets or sets IsDoNotDisturbInEffect"
              },
              "IsEncrypted": {
                "type": "boolean",
                "description": "Gets or sets IsEncrypted"
              },
              "IsEnrolled": {
                "type": "boolean",
                "description": "Gets or sets IsEnrolled"
              },
              "IsITunesStoreAccountActive": {
                "type": "boolean",
                "description": "Gets or sets IsITunesStoreAccountActive"
              },
              "IsMDMLostModeEnabled": {
                "type": "boolean",
                "description": "Gets or sets IsMDMLostModeEnabled"
              },
              "IsOSSecure": {
                "type": "boolean",
                "description": "Gets or sets IsOSSecure"
              },
              "IsPersonalHotspotEnabled": {
                "type": "boolean",
                "description": "Gets or sets IsPersonalHotspotEnabled"
              },
              "IsSupervised": {
                "type": "boolean",
                "description": "Gets or sets IsSupervised"
              },
              "ItunesIdHash": {
                "type": "string",
                "description": "Gets or sets ItunesIdHash"
              },
              "LastCheckInTime": {
                "type": "string",
                "description": "Gets or sets LastCheckInTime",
                "format": "date-time"
              },
              "LastAgentConnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentConnectTime",
                "format": "date-time"
              },
              "LastAgentDisconnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentDisconnectTime",
                "format": "date-time"
              },
              "LastLoggedOnUser": {
                "type": "string",
                "description": "Gets or sets LastLoggedOnUser"
              },
              "ManagedAppleId": {
                "type": "string",
                "description": "Email Address that is liked to apple business account and user can enroll using this id"
              },
              "LastStatusUpdate": {
                "type": "string",
                "description": "Gets or sets LastStatusUpdate",
                "format": "date-time"
              },
              "ManufacturerSerialNumber": {
                "type": "string",
                "description": "Gets or sets ManufacturerSerialNumber"
              },
              "ModelNumber": {
                "type": "string",
                "description": "Gets or sets ModelNumber"
              },
              "ModemFirmwareVersion": {
                "type": "string",
                "description": "Gets or sets ModemFirmwareVersion"
              },
              "NetworkConnectionType": {
                "description": "Gets or sets NetworkConnectionType",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceConnectionType"
                  }
                ]
              },
              "PasscodeEnabled": {
                "type": "boolean",
                "description": "Gets or sets PasscodeEnabled"
              },
              "PasscodeStatus": {
                "description": "Gets or sets PasscodeStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/DevicePasscodeStatus"
                  }
                ]
              },
              "PersonalizedName": {
                "type": "string",
                "description": "Gets or sets PersonalizedName"
              },
              "PhoneNumber": {
                "type": "string",
                "description": "Gets or sets PhoneNumber"
              },
              "ProductName": {
                "type": "string",
                "description": "Gets or sets ProductName"
              },
              "SIMCarrierNetwork": {
                "type": "string",
                "description": "Gets or sets SIMCarrierNetwork"
              },
              "SubscriberMCC": {
                "type": "string",
                "description": "Gets or sets SubscriberMCC"
              },
              "SubscriberMNC": {
                "type": "string",
                "description": "Gets or sets SubscriberMNC"
              },
              "SubscriberNumber": {
                "type": "string",
                "description": "Gets or sets SubscriberNumber"
              },
              "UserIdHash": {
                "type": "string",
                "description": "Gets or sets UserIdHash"
              },
              "VoiceRoamingEnabled": {
                "type": "boolean",
                "description": "Gets or sets VoiceRoamingEnabled"
              },
              "ManagementProfileUpdateTime": {
                "type": "string",
                "description": "Gets or sets ManagementProfileUpdateTime",
                "format": "date-time"
              },
              "ManagementProfileSigningCertificateExpiry": {
                "type": "string",
                "description": "Gets or sets ManagementProfileSigningCertificateExpiry",
                "format": "date-time"
              },
              "MDMClientCertificateHash": {
                "type": "string",
                "description": "Gets or sets MDMClientCertificateHash"
              },
              "AppleBusinessManagerUserId": {
                "type": "integer",
                "description": "Managed Apple Id",
                "format": "int32"
              },
              "ExchangeOnlineEmailAccess": {
                "type": "array",
                "description": "Gets or sets ExchangeOnlineEmailAccess",
                "items": {
                  "$ref": "#/definitions/DeviceExchangeOnlineEmailAccess"
                }
              },
              "Sims": {
                "type": "array",
                "description": "The DeviceSimInfo[]",
                "items": {
                  "$ref": "#/definitions/DeviceSimInfo"
                }
              },
              "TimeZone": {
                "type": "string",
                "description": "The current Internet Assigned Numbers Authority (IANA) time zone database name. This value requires the Device Information access right, and is available in iOS 14 and later, and tvOS 14 and later."
              },
              "IsMultiUser": {
                "type": "boolean",
                "description": "If true, the device is in ephemeral multiuser mode.\nThis value requires the Device Information access right, and is available in iOS 9.3 and later."
              },
              "MaximumResidentUsersCount": {
                "type": "integer",
                "description": "The maximum number of users that can use this shared iPad device. Starting with iOS 13.4, the value that returns is always 32.\nThis value requires the Device Information access right, and is available in iOS 9.3 and later.",
                "format": "int32"
              },
              "EstimatedResidentUsersCount": {
                "type": "integer",
                "description": "The estimated number of users that can use this shared iPad device, according to the space available on the device and each user’s quota.\nThis value requires the Device Information access right, and is available in iOS 14 and later.",
                "format": "int32"
              },
              "QuotaSizeInMB": {
                "type": "integer",
                "description": "The quota size in megabytes for each user on this shared iPad device.\n            This value requires the Device Information access right, and is available in iOS 13.4 and later.Gets or sets Is Apple Silicon. If true, the macOS device uses an AppleSilicon chip.\n            ",
                "format": "int32"
              },
              "ResidentUsersCount": {
                "type": "integer",
                "description": "The number of users currently on this shared iPad device.\nThis value requires the Device Information access right, and is available in iOS 13.4 and later.",
                "format": "int32"
              },
              "ManagedAppleIDDefaultDomains": {
                "type": "array",
                "description": "A list of domains that the Shared iPad login screen displays.",
                "items": {
                  "type": "string"
                }
              },
              "OnlineAuthenticationGracePeriod": {
                "type": "integer",
                "description": "Gets or sets a grace period (in days) for Shared iPad online authentication. Setting this value to 0 enforces online authentication every time.",
                "format": "int32"
              },
              "AppleDeviceLocalUsers": {
                "type": "array",
                "description": "A list of users that the Shared iPad contains.",
                "items": {
                  "$ref": "#/definitions/AppleDeviceLocalUser"
                }
              },
              "RapidSecurityResponseVersion": {
                "type": "string",
                "description": "Gets or sets the OS update rapid security response version letter."
              }
            }
          }
        ]
      },
      "ActivationLockBypassStatus": {
        "type": "string",
        "description": "ALB is either not applicable or code is to be retrieved",
        "x-enumNames": [
          "NotApplicable",
          "CodeValid",
          "CodeValidityUndefined",
          "CodeUnavailable",
          "BypassRequested"
        ],
        "enum": [
          "NotApplicable",
          "CodeValid",
          "CodeValidityUndefined",
          "CodeUnavailable",
          "BypassRequested"
        ],
        "x-enumType": "ActivationLockBypassStatus"
      },
      "AppleDeviceLocalUser": {
        "type": "object",
        "description": "Apple user",
        "required": [
          "IsLoggedIn"
        ],
        "properties": {
          "UserName": {
            "type": "string",
            "description": "User name"
          },
          "IsLoggedIn": {
            "type": "boolean",
            "description": "Is logged in"
          }
        }
      },
      "DeviceLinux": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceLinux contracts",
            "required": [
              "AgentUpgradeEnabled",
              "IsAgentCompatible",
              "NetworkConnectionType"
            ],
            "properties": {
              "AgentUpgradeEnabled": {
                "type": "boolean",
                "description": "Gets or sets AgentUpgradeEnabled"
              },
              "AgentVersion": {
                "type": "string",
                "description": "Gets or sets AgentVersion"
              },
              "Memory": {
                "description": "Gets or sets Memory",
                "allOf": [
                  {
                    "$ref": "#/definitions/Memory"
                  }
                ]
              },
              "DeviceUserInfo": {
                "description": "Gets or sets DeviceUserInfo",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceUser"
                  }
                ]
              },
              "BatteryStatus": {
                "type": "integer",
                "description": "Gets or sets BatteryStatus"
              },
              "CustomData": {
                "type": "array",
                "description": "Gets or sets CustomData",
                "items": {
                  "$ref": "#/definitions/CustomDataEntry"
                }
              },
              "HardwareSerialNumber": {
                "type": "string",
                "description": "Gets or sets HardwareSerialNumber"
              },
              "Ipv6": {
                "type": "string",
                "description": "Gets or sets Ipv6"
              },
              "IsAgentCompatible": {
                "type": "boolean",
                "description": "Gets or sets IsAgentCompatible"
              },
              "LastCheckInTime": {
                "type": "string",
                "description": "Gets or sets LastCheckInTime",
                "format": "date-time"
              },
              "LastAgentConnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentConnectTime",
                "format": "date-time"
              },
              "LastAgentDisconnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentDisconnectTime",
                "format": "date-time"
              },
              "NetworkConnectionType": {
                "description": "Gets or sets NetworkConnectionType",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceConnectionType"
                  }
                ]
              },
              "NetworkRSSI": {
                "type": "integer",
                "description": "Gets or sets NetworkRSSI",
                "format": "int32"
              },
              "NetworkSSID": {
                "type": "string",
                "description": "Gets or sets NetworkSSID"
              },
              "Processor": {
                "type": "string",
                "description": "Gets or sets Processor"
              },
              "DistributionType": {
                "type": "string",
                "description": "Gets or sets DistributionType"
              }
            }
          }
        ]
      },
      "DeviceLinuxXtHub": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceLinux"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceLinuxXtHub contracts",
            "required": [
              "IsXtHubEnabled"
            ],
            "properties": {
              "IsXtHubEnabled": {
                "type": "boolean",
                "description": "Gets or sets IsXtHubEnabled"
              }
            }
          }
        ]
      },
      "DeviceMac": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceMac contracts",
            "required": [
              "HardwareEncryptionCaps",
              "HardwareEncryption",
              "IsAgentCompatible",
              "IsAgentless",
              "IsEnrolled",
              "NetworkConnectionType",
              "UserProfileAssignedToAuthenticatingUser",
              "FDEEnabled",
              "IsChangePending",
              "IsPasswordExists",
              "IsPRKEscrowed",
              "ProcessorType"
            ],
            "properties": {
              "AgentVersion": {
                "type": "string",
                "description": "Gets or sets AgentVersion"
              },
              "Memory": {
                "description": "Gets or sets Memory",
                "allOf": [
                  {
                    "$ref": "#/definitions/Memory"
                  }
                ]
              },
              "BatteryStatus": {
                "type": "integer",
                "description": "Gets or sets BatteryStatus"
              },
              "BuildVersion": {
                "type": "string",
                "description": "Gets or sets BuildVersion"
              },
              "DeviceTerms": {
                "description": "Gets or sets DeviceTerms",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceTerms"
                  }
                ]
              },
              "DeviceUserInfo": {
                "description": "Gets or sets DeviceUserInfo",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceUser"
                  }
                ]
              },
              "HardwareEncryptionCaps": {
                "type": "integer",
                "description": "Gets or sets HardwareEncryptionCaps",
                "format": "int32"
              },
              "HardwareEncryption": {
                "description": "Gets or sets HardwareEncryption",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceEncryptionCap"
                  }
                ]
              },
              "IMEI_MEID_ESN": {
                "type": "string",
                "description": "Gets or sets IMEI_MEID_ESN"
              },
              "Ipv6": {
                "type": "string",
                "description": "Gets or sets Ipv6"
              },
              "IsAgentCompatible": {
                "type": "boolean",
                "description": "Gets or sets IsAgentCompatible"
              },
              "IsAgentless": {
                "type": "boolean",
                "description": "Gets or sets IsAgentless"
              },
              "IsEnrolled": {
                "type": "boolean",
                "description": "Gets or sets IsEnrolled"
              },
              "IsITunesStoreAccountActive": {
                "type": "boolean",
                "description": "Gets or sets IsITunesStoreAccountActive"
              },
              "IsPersonalHotspotEnabled": {
                "type": "boolean",
                "description": "Gets or sets IsPersonalHotspotEnabled"
              },
              "ItunesIdHash": {
                "type": "string",
                "description": "Gets or sets ItunesIdHash"
              },
              "LastCheckInTime": {
                "type": "string",
                "description": "Gets or sets LastCheckInTime",
                "format": "date-time"
              },
              "LastAgentConnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentConnectTime",
                "format": "date-time"
              },
              "LastAgentDisconnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentDisconnectTime",
                "format": "date-time"
              },
              "ManufacturerSerialNumber": {
                "type": "string",
                "description": "Gets or sets ManufacturerSerialNumber"
              },
              "NetworkConnectionType": {
                "description": "Gets or sets NetworkConnectionType",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceConnectionType"
                  }
                ]
              },
              "PersonalizedName": {
                "type": "string",
                "description": "Gets or sets PersonalizedName"
              },
              "ProductName": {
                "type": "string",
                "description": "Gets or sets ProductName"
              },
              "UserProfileAssignedToAuthenticatingUser": {
                "type": "boolean",
                "description": "Gets or sets whether User Profile will be assigned to authenticating LDAP user"
              },
              "UserProfileAssignee": {
                "type": "string",
                "description": "Gets or sets User Profile Assignee Name"
              },
              "ModelNumber": {
                "type": "string",
                "description": "Gets or sets Model Number"
              },
              "LastStatusUpdate": {
                "type": "string",
                "description": "Gets or sets LastStatusUpdate",
                "format": "date-time"
              },
              "FDEEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether FileVault Disk Encryption is enabled or not on the device."
              },
              "IsChangePending": {
                "type": "boolean",
                "description": "Gets or sets a value indicating current status of change pending."
              },
              "IsPasswordExists": {
                "type": "boolean",
                "description": "Gets or sets a value indicating current status of password i.e set or not."
              },
              "MDMClientCertificateHash": {
                "type": "string",
                "description": "Gets or sets MDMClientCertificateHash"
              },
              "ManagementProfileUpdateTime": {
                "type": "string",
                "description": "Gets or sets ManagementProfileUpdateTime",
                "format": "date-time"
              },
              "ManagementProfileSigningCertificateExpiry": {
                "type": "string",
                "description": "Gets or sets ManagementProfileSigningCertificateExpiry",
                "format": "date-time"
              },
              "BootstrapTokenStatus": {
                "description": "Gets or sets BootstrapTokenStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/BootstrapTokenStatus"
                  }
                ]
              },
              "RecoveryLockStatus": {
                "description": "Gets or sets RecoveryLockStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/RecoveryLockStatus"
                  }
                ]
              },
              "IsPRKEscrowed": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the PRK has been escrowed or not."
              },
              "PRKEscrowedDate": {
                "type": "string",
                "description": "Gets or sets PRKEscrowedDate.",
                "format": "date-time"
              },
              "ProcessorType": {
                "description": "Gets or sets the is apple silicon.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProcessorType"
                  }
                ]
              },
              "LocalUsers": {
                "type": "string",
                "description": "Gets or sets Local Users."
              },
              "ActiveUsers": {
                "type": "array",
                "description": "Gets or sets Active Users.",
                "items": {
                  "$ref": "#/definitions/AppleDeviceLocalUser"
                }
              },
              "FileVaultRecoveryKeyType": {
                "description": "Gets or sets FileVault Recovery Key Type",
                "allOf": [
                  {
                    "$ref": "#/definitions/FileVaultRecoveryKeyType"
                  }
                ]
              },
              "IsSupervised": {
                "type": "boolean",
                "description": "Gets or sets the value whether device is supervised or not."
              },
              "IsActivationLockSupported": {
                "type": "boolean",
                "description": "Gets or sets the value whether device supports Activation Lock or not."
              },
              "CustomData": {
                "type": "array",
                "description": "Gets or sets CustomData",
                "items": {
                  "$ref": "#/definitions/CustomDataEntry"
                }
              },
              "ActivationLockBypassStatus": {
                "description": "Gets or sets ActivationLockBypassStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/ActivationLockBypassStatus"
                  }
                ]
              },
              "IsActivationLockEnabled": {
                "type": "boolean",
                "description": "Gets or sets IsActivationLockEnabled"
              }
            }
          }
        ]
      },
      "BootstrapTokenStatus": {
        "type": "string",
        "description": "Enumerates Mac device BootstrapToken Status.",
        "x-enumNames": [
          "NotApplicable",
          "NotConfigured",
          "Configured"
        ],
        "enum": [
          "NotApplicable",
          "NotConfigured",
          "Configured"
        ],
        "x-enumType": "BootstrapTokenStatus"
      },
      "RecoveryLockStatus": {
        "type": "string",
        "description": "Mac device Recovery Lock Status.",
        "x-enumNames": [
          "NotApplicable",
          "NotConfigured",
          "Configured"
        ],
        "enum": [
          "NotApplicable",
          "NotConfigured",
          "Configured"
        ],
        "x-enumType": "RecoveryLockStatus"
      },
      "ProcessorType": {
        "type": "string",
        "description": "Apple ProcessorType",
        "x-enumNames": [
          "Unknown",
          "AppleSilicon",
          "Intel"
        ],
        "enum": [
          "Unknown",
          "AppleSilicon",
          "Intel"
        ],
        "x-enumType": "ProcessorType"
      },
      "FileVaultRecoveryKeyType": {
        "type": "string",
        "description": "FileVault Recovery Key Type",
        "x-enumNames": [
          "Institutional",
          "Personal",
          "Both"
        ],
        "enum": [
          "Institutional",
          "Personal",
          "Both"
        ],
        "x-enumType": "FileVaultRecoveryKeyType"
      },
      "DeviceWindowsCE": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceWindowsCE contracts",
            "required": [
              "AgentUpgradeEnabled",
              "CanResetPassword",
              "ExchangeBlocked",
              "ExchangeAccessRequest",
              "ExchangeStatus",
              "IsAgentCompatible",
              "IsAgentOSDeprecated",
              "IsAgentless",
              "IsDecryptionKeySet",
              "NetworkConnectionType",
              "PasscodeEnabled"
            ],
            "properties": {
              "AgentUpgradeEnabled": {
                "type": "boolean",
                "description": "Gets or sets AgentUpgradeEnabled"
              },
              "AgentVersion": {
                "type": "string",
                "description": "Gets or sets AgentVersion"
              },
              "Memory": {
                "description": "Gets or sets Memory",
                "allOf": [
                  {
                    "$ref": "#/definitions/Memory"
                  }
                ]
              },
              "BackupBatteryStatus": {
                "type": "integer",
                "description": "Gets or sets BackupBatteryStatus"
              },
              "BatteryStatus": {
                "type": "integer",
                "description": "Gets or sets BatteryStatus"
              },
              "CanResetPassword": {
                "type": "boolean",
                "description": "Gets or sets CanResetPassword"
              },
              "CellularCarrier": {
                "type": "string",
                "description": "Gets or sets CellularCarrier"
              },
              "CellularSignalStrength": {
                "type": "integer",
                "description": "Gets or sets CellularSignalStrength",
                "format": "int32"
              },
              "ConnectedPort": {
                "type": "integer",
                "description": "Gets or sets ConnectedPort",
                "format": "int32"
              },
              "CustomData": {
                "type": "array",
                "description": "Gets or sets CustomData",
                "items": {
                  "$ref": "#/definitions/CustomDataEntry"
                }
              },
              "DeviceTerms": {
                "description": "Gets or sets DeviceTerms",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceTerms"
                  }
                ]
              },
              "DeviceUserInfo": {
                "description": "Gets or sets DeviceUserInfo",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceUser"
                  }
                ]
              },
              "ExchangeBlocked": {
                "type": "boolean",
                "description": "Gets or sets ExchangeBlocked"
              },
              "ExchangeAccessRequest": {
                "description": "Gets or sets ExchangeOverridenAccess",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeAccessRequest"
                  }
                ]
              },
              "ExchangeStatus": {
                "description": "Gets or sets ExchangeStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeDeviceStatus"
                  }
                ]
              },
              "HardwareSerialNumber": {
                "type": "string",
                "description": "Gets or sets HardwareSerialNumber"
              },
              "IMEI_MEID_ESN": {
                "type": "string",
                "description": "Gets or sets IMEI_MEID_ESN"
              },
              "InRoaming": {
                "type": "boolean",
                "description": "Gets or sets InRoaming"
              },
              "Ipv6": {
                "type": "string",
                "description": "Gets or sets Ipv6"
              },
              "IsAgentCompatible": {
                "type": "boolean",
                "description": "Gets or sets IsAgentCompatible"
              },
              "IsAgentOSDeprecated": {
                "type": "boolean",
                "description": "Gets or sets IsAgentOSDeprecated"
              },
              "IsAgentless": {
                "type": "boolean",
                "description": "Gets or sets IsAgentless"
              },
              "IsLearning": {
                "type": "boolean",
                "description": "Gets or sets IsLearning"
              },
              "IsDecryptionKeySet": {
                "type": "boolean",
                "description": "Gets or sets IsDecryptionKeySet"
              },
              "LastCheckInTime": {
                "type": "string",
                "description": "Gets or sets LastCheckInTime",
                "format": "date-time"
              },
              "LastAgentConnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentConnectTime",
                "format": "date-time"
              },
              "LastAgentDisconnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentDisconnectTime",
                "format": "date-time"
              },
              "LastLoggedOnAt": {
                "type": "string",
                "description": "Gets or sets LastLoggedOnAt",
                "format": "date-time"
              },
              "LastLoggedOnUser": {
                "type": "string",
                "description": "Gets or sets LastLoggedOnUser"
              },
              "NetworkConnectionType": {
                "description": "Gets or sets NetworkConnectionType",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceConnectionType"
                  }
                ]
              },
              "NetworkRSSI": {
                "type": "integer",
                "description": "Gets or sets NetworkRSSI",
                "format": "int32"
              },
              "NetworkSSID": {
                "type": "string",
                "description": "Gets or sets NetworkSSID"
              },
              "PasscodeEnabled": {
                "type": "boolean",
                "description": "Gets or sets PasscodeEnabled"
              },
              "PhoneNumber": {
                "type": "string",
                "description": "Gets or sets PhoneNumber"
              },
              "Processor": {
                "type": "string",
                "description": "Gets or sets Processor"
              },
              "SubscriberNumber": {
                "type": "string",
                "description": "Gets or sets SubscriberNumber"
              }
            }
          }
        ]
      },
      "DeviceWindowsDesktop": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceWindowsDesktop contracts",
            "required": [
              "AgentUpgradeEnabled",
              "IsAgentCompatible",
              "IsAgentless",
              "CpuType",
              "HardwareEncryptionCaps",
              "HardwareEncryption",
              "OSBaseEdition",
              "PasscodeEnabled",
              "PasscodeStatus",
              "ExchangeBlocked",
              "ExchangeAccessRequest",
              "ExchangeStatus"
            ],
            "properties": {
              "AgentUpgradeEnabled": {
                "type": "boolean",
                "description": "Gets or sets AgentUpgradeEnabled"
              },
              "IsAgentCompatible": {
                "type": "boolean",
                "description": "Gets or sets IsAgentCompatible"
              },
              "IsAgentless": {
                "type": "boolean",
                "description": "Gets or sets IsAgentless"
              },
              "LastCheckInTime": {
                "type": "string",
                "description": "Gets or sets LastCheckInTime",
                "format": "date-time"
              },
              "LastAgentConnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentConnectTime",
                "format": "date-time"
              },
              "LastAgentDisconnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentDisconnectTime",
                "format": "date-time"
              },
              "AgentVersion": {
                "type": "string",
                "description": "Gets or sets AgentVersion"
              },
              "BatteryStatus": {
                "type": "integer",
                "description": "Gets or sets BatteryStatus"
              },
              "BiosVersion": {
                "type": "string",
                "description": "Gets or sets BiosVersion"
              },
              "CpuId": {
                "type": "string",
                "description": "Gets or sets CpuId"
              },
              "CpuType": {
                "description": "Gets or sets CpuType",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceCpuArchitectureType"
                  }
                ]
              },
              "CustomData": {
                "type": "array",
                "description": "Gets or sets CustomData",
                "items": {
                  "$ref": "#/definitions/CustomDataEntry"
                }
              },
              "DeviceUserInfo": {
                "description": "Gets or sets DeviceUserInfo",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceUser"
                  }
                ]
              },
              "DMRevision": {
                "type": "string",
                "description": "Gets or sets DMRevision"
              },
              "FirmwareVersion": {
                "type": "string",
                "description": "Gets or sets FirmwareVersion"
              },
              "HardwareEncryptionCaps": {
                "type": "integer",
                "description": "Gets or sets HardwareEncryptionCaps",
                "format": "int32"
              },
              "HardwareEncryption": {
                "description": "Gets or sets HardwareEncryption",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceEncryptionCap"
                  }
                ]
              },
              "HardwareVersion": {
                "type": "string",
                "description": "Gets or sets HardwareVersion"
              },
              "IMEI_MEID_ESN": {
                "type": "string",
                "description": "Gets or sets IMEI_MEID_ESN"
              },
              "InRoaming": {
                "type": "boolean",
                "description": "Gets or sets InRoaming"
              },
              "Language": {
                "type": "string",
                "description": "Gets or sets Language"
              },
              "Memory": {
                "description": "Gets or sets Memory",
                "allOf": [
                  {
                    "$ref": "#/definitions/Memory"
                  }
                ]
              },
              "OSEditionId": {
                "type": "integer",
                "description": "Gets or sets OSEditionId",
                "format": "int32"
              },
              "OSBaseEdition": {
                "description": "Gets or sets OSBaseEdition",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceBaseEdition"
                  }
                ]
              },
              "PasscodeEnabled": {
                "type": "boolean",
                "description": "Gets or sets PasscodeEnabled"
              },
              "PasscodeStatus": {
                "description": "Gets or sets PasscodeStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/DevicePasscodeStatus"
                  }
                ]
              },
              "PhoneNumber": {
                "type": "string",
                "description": "Gets or sets PhoneNumber"
              },
              "Processor": {
                "type": "string",
                "description": "Gets or sets Processor"
              },
              "ScreenResolution": {
                "type": "string",
                "description": "Gets or sets ScreenResolution"
              },
              "SubscriberNumber": {
                "type": "string",
                "description": "Gets or sets SubscriberNumber"
              },
              "TimeZone": {
                "type": "string",
                "description": "Gets or sets TimeZone"
              },
              "IsSMode": {
                "type": "boolean",
                "description": "Gets or sets IsSMode"
              },
              "ExchangeBlocked": {
                "type": "boolean",
                "description": "Gets or sets ExchangeBlocked"
              },
              "ExchangeAccessRequest": {
                "description": "Gets or sets ExchangeOverridenAccess",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeAccessRequest"
                  }
                ]
              },
              "ExchangeStatus": {
                "description": "Gets or sets ExchangeStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeDeviceStatus"
                  }
                ]
              },
              "HardwareSerialNumber": {
                "type": "string",
                "description": "Gets or sets HardwareSerialNumber"
              },
              "IsManageUpdates": {
                "type": "boolean",
                "description": "Gets or sets if Windows Updates is managed"
              },
              "IsUpdateApprovalRequired": {
                "type": "boolean",
                "description": "Gets or sets if Update Approval is required"
              },
              "AreBitLockerKeysAvailable": {
                "type": "boolean",
                "description": "Gets or sets the are BitLocker key(s) available."
              }
            }
          }
        ]
      },
      "DeviceCpuArchitectureType": {
        "type": "string",
        "description": "Enumerates the different supported device processor architecture type.",
        "x-enumNames": [
          "ArchitectureX86",
          "ArchitectureArm",
          "ArchitectureIA64",
          "ArchitectureX64",
          "ArchitectureArm64",
          "ArchitectureUnknown"
        ],
        "enum": [
          "ArchitectureX86",
          "ArchitectureArm",
          "ArchitectureIA64",
          "ArchitectureX64",
          "ArchitectureArm64",
          "ArchitectureUnknown"
        ],
        "x-enumType": "DeviceCpuArchitectureType"
      },
      "DeviceBaseEdition": {
        "type": "string",
        "description": "Enumerates the device Windows OS Base Editions.",
        "x-enumNames": [
          "Undefined",
          "Ultimate",
          "Starter",
          "Home",
          "Professional",
          "Business",
          "Enterprise",
          "Education",
          "Mobile",
          "MobileEnterprise",
          "Server",
          "HyperV",
          "IoT",
          "Holographic",
          "ProinSMode",
          "HolographicBusiness",
          "IoTEnterprise"
        ],
        "enum": [
          "Undefined",
          "Ultimate",
          "Starter",
          "Home",
          "Professional",
          "Business",
          "Enterprise",
          "Education",
          "Mobile",
          "MobileEnterprise",
          "Server",
          "HyperV",
          "IoT",
          "Holographic",
          "ProinSMode",
          "HolographicBusiness",
          "IoTEnterprise"
        ],
        "x-enumType": "DeviceBaseEdition"
      },
      "DeviceWindowsDesktopLegacy": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceWindowsDesktopLegacy contracts",
            "required": [
              "AgentUpgradeEnabled",
              "IsAgentCompatible",
              "IsAgentOSDeprecated",
              "IsAgentless",
              "NetworkConnectionType",
              "PasscodeEnabled"
            ],
            "properties": {
              "AgentUpgradeEnabled": {
                "type": "boolean",
                "description": "Gets or sets AgentUpgradeEnabled"
              },
              "AgentVersion": {
                "type": "string",
                "description": "Gets or sets AgentVersion"
              },
              "Memory": {
                "description": "Gets or sets Memory",
                "allOf": [
                  {
                    "$ref": "#/definitions/Memory"
                  }
                ]
              },
              "BatteryStatus": {
                "type": "integer",
                "description": "Gets or sets BatteryStatus"
              },
              "CustomData": {
                "type": "array",
                "description": "Gets or sets CustomData",
                "items": {
                  "$ref": "#/definitions/CustomDataEntry"
                }
              },
              "DeviceTerms": {
                "description": "Gets or sets DeviceTerms",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceTerms"
                  }
                ]
              },
              "DeviceUserInfo": {
                "description": "Gets or sets DeviceUserInfo",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceUser"
                  }
                ]
              },
              "Ipv6": {
                "type": "string",
                "description": "Gets or sets Ipv6"
              },
              "IsAgentCompatible": {
                "type": "boolean",
                "description": "Gets or sets IsAgentCompatible"
              },
              "IsAgentOSDeprecated": {
                "type": "boolean",
                "description": "Gets or sets IsAgentOSDeprecated"
              },
              "IsAgentless": {
                "type": "boolean",
                "description": "Gets or sets IsAgentless"
              },
              "LastCheckInTime": {
                "type": "string",
                "description": "Gets or sets LastCheckInTime",
                "format": "date-time"
              },
              "LastAgentConnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentConnectTime",
                "format": "date-time"
              },
              "LastAgentDisconnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentDisconnectTime",
                "format": "date-time"
              },
              "LastLoggedOnAt": {
                "type": "string",
                "description": "Gets or sets LastLoggedOnAt",
                "format": "date-time"
              },
              "LastLoggedOnUser": {
                "type": "string",
                "description": "Gets or sets LastLoggedOnUser"
              },
              "NetworkConnectionType": {
                "description": "Gets or sets NetworkConnectionType",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceConnectionType"
                  }
                ]
              },
              "NetworkRSSI": {
                "type": "integer",
                "description": "Gets or sets NetworkRSSI",
                "format": "int32"
              },
              "NetworkSSID": {
                "type": "string",
                "description": "Gets or sets NetworkSSID"
              },
              "PasscodeEnabled": {
                "type": "boolean",
                "description": "Gets or sets PasscodeEnabled"
              },
              "Processor": {
                "type": "string",
                "description": "Gets or sets Processor"
              }
            }
          }
        ]
      },
      "DeviceWindowsXtHub": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceWindowsDesktopLegacy"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceAndroidKnox contracts",
            "required": [
              "IsXtHubEnabled"
            ],
            "properties": {
              "IsXtHubEnabled": {
                "type": "boolean",
                "description": "Gets or sets IsXtHubEnabled"
              }
            }
          }
        ]
      },
      "DeviceWindowsHoloLens": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceWindowsHoloLens contracts",
            "required": [
              "CpuType",
              "HardwareEncryptionCaps",
              "HardwareEncryption",
              "OSBaseEdition"
            ],
            "properties": {
              "BiosVersion": {
                "type": "string",
                "description": "Gets or sets BiosVersion"
              },
              "CpuId": {
                "type": "string",
                "description": "Gets or sets CpuId"
              },
              "CpuType": {
                "description": "Gets or sets CpuType",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceCpuArchitectureType"
                  }
                ]
              },
              "DeviceUserInfo": {
                "description": "Gets or sets DeviceUserInfo",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceUser"
                  }
                ]
              },
              "DMRevision": {
                "type": "string",
                "description": "Gets or sets DMRevision"
              },
              "FirmwareVersion": {
                "type": "string",
                "description": "Gets or sets FirmwareVersion"
              },
              "HardwareEncryptionCaps": {
                "type": "integer",
                "description": "Gets or sets HardwareEncryptionCaps",
                "format": "int32"
              },
              "HardwareEncryption": {
                "description": "Gets or sets HardwareEncryption",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceEncryptionCap"
                  }
                ]
              },
              "HardwareVersion": {
                "type": "string",
                "description": "Gets or sets HardwareVersion"
              },
              "Language": {
                "type": "string",
                "description": "Gets or sets Language"
              },
              "Memory": {
                "description": "Gets or sets Memory",
                "allOf": [
                  {
                    "$ref": "#/definitions/Memory"
                  }
                ]
              },
              "OSEditionId": {
                "type": "integer",
                "description": "Gets or sets OSEditionId",
                "format": "int32"
              },
              "OSBaseEdition": {
                "description": "Gets or sets OSBaseEdition",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceBaseEdition"
                  }
                ]
              },
              "Processor": {
                "type": "string",
                "description": "Gets or sets Processor"
              },
              "ScreenResolution": {
                "type": "string",
                "description": "Gets or sets ScreenResolution"
              },
              "TimeZone": {
                "type": "string",
                "description": "Gets or sets TimeZone"
              },
              "HardwareSerialNumber": {
                "type": "string",
                "description": "Gets or sets HardwareSerialNumber"
              }
            }
          }
        ]
      },
      "DeviceWindowsPhone": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceWindowsPhone contracts",
            "required": [
              "CpuType",
              "HardwareEncryptionCaps",
              "HardwareEncryption",
              "OSBaseEdition",
              "PasscodeEnabled",
              "PasscodeStatus",
              "ExchangeBlocked",
              "ExchangeAccessRequest",
              "ExchangeStatus"
            ],
            "properties": {
              "BiosVersion": {
                "type": "string",
                "description": "Gets or sets BiosVersion"
              },
              "CellularCarrier": {
                "type": "string",
                "description": "Gets or sets CellularCarrier"
              },
              "CpuId": {
                "type": "string",
                "description": "Gets or sets CpuId"
              },
              "CpuType": {
                "description": "Gets or sets CpuType",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceCpuArchitectureType"
                  }
                ]
              },
              "DeviceUserInfo": {
                "description": "Gets or sets DeviceUserInfo",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceUser"
                  }
                ]
              },
              "DMRevision": {
                "type": "string",
                "description": "Gets or sets DMRevision"
              },
              "FirmwareVersion": {
                "type": "string",
                "description": "Gets or sets FirmwareVersion"
              },
              "HardwareEncryptionCaps": {
                "type": "integer",
                "description": "Gets or sets HardwareEncryptionCaps",
                "format": "int32"
              },
              "HardwareEncryption": {
                "description": "Gets or sets HardwareEncryption",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceEncryptionCap"
                  }
                ]
              },
              "HardwareVersion": {
                "type": "string",
                "description": "Gets or sets HardwareVersion"
              },
              "IMEI_MEID_ESN": {
                "type": "string",
                "description": "Gets or sets IMEI_MEID_ESN"
              },
              "IMEI_MEID_ESN_SIM2": {
                "type": "string",
                "description": "Gets or sets IMEI_MEID_ESN_SIM2"
              },
              "InRoaming": {
                "type": "boolean",
                "description": "Gets or sets InRoaming"
              },
              "InRoamingSIM2": {
                "type": "boolean",
                "description": "Gets or sets InRoamingSIM2"
              },
              "Language": {
                "type": "string",
                "description": "Gets or sets Language"
              },
              "OSEditionId": {
                "type": "integer",
                "description": "Gets or sets OSEditionId",
                "format": "int32"
              },
              "OSBaseEdition": {
                "description": "Gets or sets OSBaseEdition",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceBaseEdition"
                  }
                ]
              },
              "PasscodeEnabled": {
                "type": "boolean",
                "description": "Gets or sets PasscodeEnabled"
              },
              "PasscodeStatus": {
                "description": "Gets or sets PasscodeStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/DevicePasscodeStatus"
                  }
                ]
              },
              "PhoneNumber": {
                "type": "string",
                "description": "Gets or sets PhoneNumber"
              },
              "PhoneNumberSIM2": {
                "type": "string",
                "description": "Gets or sets PhoneNumberSIM2"
              },
              "RadioVersion": {
                "type": "string",
                "description": "Gets or sets RadioVersion"
              },
              "ScreenResolution": {
                "type": "string",
                "description": "Gets or sets ScreenResolution"
              },
              "SIMCarrierNetwork": {
                "type": "string",
                "description": "Gets or sets SIMCarrierNetwork"
              },
              "SubscriberNumber": {
                "type": "string",
                "description": "Gets or sets SubscriberNumber"
              },
              "SubscriberNumberSIM2": {
                "type": "string",
                "description": "Gets or sets SubscriberNumberSIM2"
              },
              "TimeZone": {
                "type": "string",
                "description": "Gets or sets TimeZone"
              },
              "ICCID": {
                "type": "string",
                "description": "Gets or sets ICCID"
              },
              "ICCIDSIM2": {
                "type": "string",
                "description": "Gets or sets ICCIDSIM2"
              },
              "ExchangeBlocked": {
                "type": "boolean",
                "description": "Gets or sets ExchangeBlocked"
              },
              "ExchangeAccessRequest": {
                "description": "Gets or sets ExchangeOverridenAccess",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeAccessRequest"
                  }
                ]
              },
              "ExchangeStatus": {
                "description": "Gets or sets ExchangeStatus",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExchangeDeviceStatus"
                  }
                ]
              }
            }
          }
        ]
      },
      "DeviceZebraPrinter": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceZebraPrinter contracts",
            "required": [
              "NetworkConnectionType"
            ],
            "properties": {
              "Memory": {
                "description": "Gets or sets Memory",
                "allOf": [
                  {
                    "$ref": "#/definitions/Memory"
                  }
                ]
              },
              "BatteryStatus": {
                "type": "integer",
                "description": "Gets or sets BatteryStatus"
              },
              "CustomData": {
                "type": "array",
                "description": "Gets or sets CustomData",
                "items": {
                  "$ref": "#/definitions/CustomDataEntry"
                }
              },
              "DeviceUserRole": {
                "type": "string",
                "description": "Gets or sets DeviceUserRole"
              },
              "FirmwareVersion": {
                "type": "string",
                "description": "Gets or sets FirmwareVersion"
              },
              "LastCheckInTime": {
                "type": "string",
                "description": "Gets or sets LastCheckInTime",
                "format": "date-time"
              },
              "LastAgentConnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentConnectTime",
                "format": "date-time"
              },
              "LastAgentDisconnectTime": {
                "type": "string",
                "description": "Gets or sets LastAgentDisconnectTime",
                "format": "date-time"
              },
              "NetworkConnectionType": {
                "description": "Gets or sets NetworkConnectionType",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceConnectionType"
                  }
                ]
              },
              "NetworkSSID": {
                "type": "string",
                "description": "Gets or sets NetworkSSID"
              },
              "Pas": {
                "type": "string",
                "description": "Gets or sets Pas"
              },
              "PrinterAdminServer": {
                "description": "Gets or sets PrinterAdminServer",
                "allOf": [
                  {
                    "$ref": "#/definitions/PrinterAdminServer"
                  }
                ]
              },
              "ProductIdentification": {
                "type": "string",
                "description": "Gets or sets ProductIdentification"
              },
              "HardwareSerialNumber": {
                "type": "string",
                "description": "Gets or sets HardwareSerialNumber"
              }
            }
          }
        ]
      },
      "PrinterAdminServer": {
        "type": "object",
        "description": "Represents printer administration server.",
        "required": [
          "Id",
          "PasType",
          "CertificateId",
          "Status"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets PAS Id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets PAS Name."
          },
          "PasType": {
            "description": "Gets or sets PAS Type.",
            "allOf": [
              {
                "$ref": "#/definitions/PrinterAdminServerType"
              }
            ],
            "x-enumType": "PrinterAdminServerType"
          },
          "CertificateId": {
            "type": "integer",
            "description": "Gets or sets PAS certificate Id.",
            "format": "int32"
          },
          "CertificateExpirationDate": {
            "type": "string",
            "description": "Gets or sets the certificate expiration date.",
            "format": "date-time"
          },
          "CertificateThumbprint": {
            "type": "string",
            "description": "Gets or sets the certificate thumbprint."
          },
          "DSEndpoint": {
            "type": "string",
            "description": "Gets or sets Deployment Server endpoint."
          },
          "EnableLogging": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether logging is enabled."
          },
          "Status": {
            "description": "Gets or sets PAS status.",
            "allOf": [
              {
                "$ref": "#/definitions/PrinterAdminServerStatus"
              }
            ],
            "x-enumType": "PrinterAdminServerStatus"
          },
          "LastConnectedTime": {
            "type": "string",
            "description": "Gets or sets the last connected time.\n            ",
            "format": "date-time"
          },
          "ClientVersion": {
            "type": "string",
            "description": "Gets or sets the client version.\n            "
          },
          "LastHeartbeatTime": {
            "type": "string",
            "description": "Gets or sets the last heartbeat time.\n            ",
            "format": "date-time"
          },
          "SubjectName": {
            "description": "Gets or sets certificate subject name.",
            "allOf": [
              {
                "$ref": "#/definitions/X500DistinguishedName"
              }
            ]
          },
          "CAName": {
            "description": "Gets or sets certificate issuing authority name.",
            "allOf": [
              {
                "$ref": "#/definitions/X500DistinguishedName"
              }
            ]
          }
        }
      },
      "PrinterAdminServerType": {
        "type": "string",
        "description": "Printer administration server type.",
        "x-enumNames": [
          "Zebra"
        ],
        "enum": [
          "Zebra"
        ],
        "x-enumType": "PrinterAdminServerType"
      },
      "PrinterAdminServerStatus": {
        "type": "string",
        "description": "Printer administration server status.",
        "x-enumNames": [
          "New",
          "Offline",
          "Online",
          "Deleted"
        ],
        "enum": [
          "New",
          "Offline",
          "Online",
          "Deleted"
        ],
        "x-enumType": "PrinterAdminServerStatus"
      },
      "X500DistinguishedName": {
        "allOf": [
          {
            "$ref": "#/definitions/AsnEncodedData"
          },
          {
            "type": "object",
            "properties": {
              "Name": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AsnEncodedData": {
        "type": "object",
        "properties": {
          "Oid": {
            "$ref": "#/definitions/Oid"
          },
          "RawData": {
            "type": "string",
            "format": "byte"
          }
        }
      },
      "Oid": {
        "type": "object",
        "properties": {
          "Value": {
            "type": "string"
          },
          "FriendlyName": {
            "type": "string"
          }
        }
      },
      "X509Extension": {
        "allOf": [
          {
            "$ref": "#/definitions/AsnEncodedData"
          },
          {
            "type": "object",
            "required": [
              "Critical"
            ],
            "properties": {
              "Critical": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "X509KeyUsageExtension": {
        "allOf": [
          {
            "$ref": "#/definitions/X509Extension"
          },
          {
            "type": "object",
            "required": [
              "KeyUsages"
            ],
            "properties": {
              "KeyUsages": {
                "$ref": "#/definitions/X509KeyUsageFlags"
              }
            }
          }
        ]
      },
      "X509KeyUsageFlags": {
        "type": "string",
        "description": "",
        "x-enumFlags": true,
        "x-enumNames": [
          "None",
          "EncipherOnly",
          "CrlSign",
          "KeyCertSign",
          "KeyAgreement",
          "DataEncipherment",
          "KeyEncipherment",
          "NonRepudiation",
          "DigitalSignature",
          "DecipherOnly"
        ],
        "enum": [
          "None",
          "EncipherOnly",
          "CrlSign",
          "KeyCertSign",
          "KeyAgreement",
          "DataEncipherment",
          "KeyEncipherment",
          "NonRepudiation",
          "DigitalSignature",
          "DecipherOnly"
        ],
        "x-enumType": "X509KeyUsageFlags"
      },
      "X509BasicConstraintsExtension": {
        "allOf": [
          {
            "$ref": "#/definitions/X509Extension"
          },
          {
            "type": "object",
            "required": [
              "CertificateAuthority",
              "HasPathLengthConstraint",
              "PathLengthConstraint"
            ],
            "properties": {
              "CertificateAuthority": {
                "type": "boolean"
              },
              "HasPathLengthConstraint": {
                "type": "boolean"
              },
              "PathLengthConstraint": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "X509EnhancedKeyUsageExtension": {
        "allOf": [
          {
            "$ref": "#/definitions/X509Extension"
          },
          {
            "type": "object",
            "properties": {
              "EnhancedKeyUsages": {
                "type": "array",
                "items": {
                  "additionalProperties": {}
                }
              }
            }
          }
        ]
      },
      "X509SubjectKeyIdentifierExtension": {
        "allOf": [
          {
            "$ref": "#/definitions/X509Extension"
          },
          {
            "type": "object",
            "properties": {
              "SubjectKeyIdentifier": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Pkcs9AttributeObject": {
        "allOf": [
          {
            "$ref": "#/definitions/AsnEncodedData"
          },
          {
            "type": "object",
            "properties": {
              "Oid": {
                "$ref": "#/definitions/Oid"
              }
            }
          }
        ]
      },
      "Pkcs9SigningTime": {
        "allOf": [
          {
            "$ref": "#/definitions/Pkcs9AttributeObject"
          },
          {
            "type": "object",
            "required": [
              "SigningTime"
            ],
            "properties": {
              "SigningTime": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "Pkcs9DocumentName": {
        "allOf": [
          {
            "$ref": "#/definitions/Pkcs9AttributeObject"
          },
          {
            "type": "object",
            "properties": {
              "DocumentName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Pkcs9DocumentDescription": {
        "allOf": [
          {
            "$ref": "#/definitions/Pkcs9AttributeObject"
          },
          {
            "type": "object",
            "properties": {
              "DocumentDescription": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Pkcs9ContentType": {
        "allOf": [
          {
            "$ref": "#/definitions/Pkcs9AttributeObject"
          },
          {
            "type": "object",
            "properties": {
              "ContentType": {
                "$ref": "#/definitions/Oid"
              }
            }
          }
        ]
      },
      "Pkcs9MessageDigest": {
        "allOf": [
          {
            "$ref": "#/definitions/Pkcs9AttributeObject"
          },
          {
            "type": "object",
            "properties": {
              "MessageDigest": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        ]
      },
      "DeviceChrome": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceBase"
          },
          {
            "type": "object",
            "description": "Declares a contract for DeviceChrome contracts",
            "required": [
              "IsAgentless"
            ],
            "properties": {
              "HardwareSerialNumber": {
                "type": "string",
                "description": "Gets or sets HardwareSerialNumber"
              },
              "FirmwareVersion": {
                "type": "string",
                "description": "Gets or sets FirmwareVersion"
              },
              "IsAgentless": {
                "type": "boolean",
                "description": "Gets or sets IsAgentless"
              },
              "IMEI_MEID_ESN": {
                "type": "string",
                "description": "Gets or sets IMEI_MEID_ESN"
              },
              "Memory": {
                "description": "Gets or sets Memory",
                "allOf": [
                  {
                    "$ref": "#/definitions/Memory"
                  }
                ]
              },
              "Users": {
                "type": "array",
                "description": "Gets or sets DeviceChromeUsers",
                "items": {
                  "$ref": "#/definitions/DeviceChromeUser"
                }
              },
              "AnnotatedAssetId": {
                "type": "string",
                "description": "Gets or sets AnnotatedAssetId"
              },
              "AnnotatedLocation": {
                "type": "string",
                "description": "Gets or sets AnnotatedLocation"
              },
              "AnnotatedUser": {
                "type": "string",
                "description": "Gets or sets AnnotatedUser"
              },
              "AutoUpdateExpiration": {
                "type": "string",
                "description": "Gets or sets AutoUpdateExpiration",
                "format": "date-time"
              },
              "DockMAC": {
                "type": "string",
                "description": "Gets or sets DockMAC"
              },
              "EthernetMAC": {
                "type": "string",
                "description": "Gets or sets EthernetMAC"
              },
              "LastKnownIpWAN": {
                "type": "string",
                "description": "Gets or sets LastKnownIpWAN"
              },
              "LastSyncTime": {
                "type": "string",
                "description": "Gets or sets LastSyncTime",
                "format": "date-time"
              },
              "ManufactureDate": {
                "type": "string",
                "description": "Gets or sets ManufactureDate"
              },
              "Notes": {
                "type": "string",
                "description": "Gets or sets Notes"
              },
              "PlatformVersion": {
                "type": "string",
                "description": "Gets or sets PlatformVersion"
              },
              "SupportedEndDate": {
                "type": "string",
                "description": "Gets or sets SupportedEndDate",
                "format": "date-time"
              },
              "WillAutoRenew": {
                "type": "boolean",
                "description": "Gets or sets WillAutoRenew"
              }
            }
          }
        ]
      },
      "DeviceChromeUser": {
        "type": "object",
        "description": "Represents a ChromeOS user",
        "properties": {
          "Email": {
            "type": "string",
            "description": "User's email"
          },
          "Type": {
            "type": "string",
            "description": "User's type (eg. managed or unmanaged)"
          }
        }
      },
      "AggregationResult": {
        "type": "object",
        "description": "The aggregation result",
        "required": [
          "OtherCount"
        ],
        "properties": {
          "AggregationName": {
            "type": "string",
            "description": "The aggregation name"
          },
          "OtherCount": {
            "type": "integer",
            "description": "The number of records that don't belong to any buckets",
            "format": "int32"
          },
          "Buckets": {
            "type": "array",
            "description": "The aggregation buckets",
            "items": {
              "$ref": "#/definitions/Bucket"
            }
          }
        }
      },
      "Bucket": {
        "type": "object",
        "description": "The aggregation bucket",
        "required": [
          "Count"
        ],
        "properties": {
          "Count": {
            "type": "integer",
            "description": "The number of records in a bucket",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "The value associated with the bucket. Not used when ranges are applied."
          },
          "DateRange": {
            "description": "The date range of the bucket",
            "allOf": [
              {
                "$ref": "#/definitions/DateRange"
              }
            ]
          },
          "NumericRange": {
            "description": "The numeric range of the bucket",
            "allOf": [
              {
                "$ref": "#/definitions/NumericRange"
              }
            ]
          },
          "ChildAggregationResults": {
            "type": "array",
            "description": "The child aggregation results.",
            "items": {
              "$ref": "#/definitions/AggregationResult"
            }
          }
        }
      },
      "DateRange": {
        "type": "object",
        "description": "The date range",
        "properties": {
          "From": {
            "type": "string",
            "description": "The lower end of the date range",
            "format": "date-time"
          },
          "To": {
            "type": "string",
            "description": "The upper end of the date range",
            "format": "date-time"
          }
        }
      },
      "NumericRange": {
        "type": "object",
        "description": "The numeric range",
        "properties": {
          "From": {
            "type": "number",
            "description": "The lower end of the numeric range",
            "format": "double"
          },
          "To": {
            "type": "number",
            "description": "The upper end of the numeric range",
            "format": "double"
          }
        }
      },
      "AggregationRequest": {
        "type": "object",
        "description": "Represents device summary aggregation request",
        "required": [
          "DevicePropertyName",
          "Size"
        ],
        "properties": {
          "DevicePropertyName": {
            "type": "string",
            "description": "The device property name",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "AggregationName": {
            "type": "string",
            "description": "Gets the aggregation name (optional)"
          },
          "DateRanges": {
            "type": "array",
            "description": "The date ranges for aggregation. Cannot be used with numeric ranges at the same time.",
            "items": {
              "$ref": "#/definitions/DateRange"
            }
          },
          "NumericRanges": {
            "type": "array",
            "description": "The numeric ranges for aggregation. Cannot be used with date ranges at the same time.",
            "items": {
              "$ref": "#/definitions/NumericRange"
            }
          },
          "Size": {
            "type": "integer",
            "description": "Determines how many top entries to return. Ignored when ranges are used.",
            "format": "int32"
          },
          "ChildAggregations": {
            "type": "array",
            "description": "The child aggregations.",
            "items": {
              "$ref": "#/definitions/AggregationRequest"
            }
          }
        }
      },
      "CollectedDataItem": {
        "type": "object",
        "description": "Describes a single data point collected from a device.",
        "x-abstract": true,
        "required": [
          "Timestamp"
        ],
        "properties": {
          "DeviceId": {
            "type": "string",
            "description": "The ID of the device the collected data is applicable to"
          },
          "Timestamp": {
            "type": "string",
            "description": "Specifies the date and time when the data was collected",
            "format": "date-time"
          },
          "StatTypeId": {
            "type": "string",
            "description": "Name of the Collected Data Item"
          }
        }
      },
      "CollectedInteger": {
        "allOf": [
          {
            "$ref": "#/definitions/CollectedDataItem"
          },
          {
            "type": "object",
            "description": "Collected integer data",
            "required": [
              "Kind",
              "Value"
            ],
            "properties": {
              "Kind": {
                "description": "Kind of collected data",
                "allOf": [
                  {
                    "$ref": "#/definitions/CollectedDataKind"
                  }
                ]
              },
              "Value": {
                "type": "integer",
                "description": "The collected data item value",
                "format": "int64"
              }
            }
          }
        ]
      },
      "CollectedDataKind": {
        "type": "string",
        "description": "Kind of collected data",
        "x-enumNames": [
          "Integer",
          "Location",
          "NetworkTraffic",
          "String",
          "CallLog",
          "Float"
        ],
        "enum": [
          "Integer",
          "Location",
          "NetworkTraffic",
          "String",
          "CallLog",
          "Float"
        ],
        "x-enumType": "CollectedDataKind"
      },
      "CollectedLocation": {
        "allOf": [
          {
            "$ref": "#/definitions/CollectedDataItem"
          },
          {
            "type": "object",
            "description": "Collected location data",
            "required": [
              "Latitude",
              "Longitude",
              "Altitude",
              "Speed",
              "Heading",
              "Kind"
            ],
            "properties": {
              "Latitude": {
                "type": "number",
                "description": "Location's latitude.",
                "format": "float"
              },
              "Longitude": {
                "type": "number",
                "description": "Location's longitude.",
                "format": "float"
              },
              "Altitude": {
                "type": "number",
                "description": "Location's altitude.",
                "format": "float"
              },
              "Speed": {
                "type": "number",
                "description": "The speed at this location.",
                "format": "float"
              },
              "Heading": {
                "type": "number",
                "description": "The heading at this location.",
                "format": "float"
              },
              "Kind": {
                "description": "Kind of collected data",
                "allOf": [
                  {
                    "$ref": "#/definitions/CollectedDataKind"
                  }
                ]
              }
            }
          }
        ]
      },
      "CollectedNetworkTraffic": {
        "allOf": [
          {
            "$ref": "#/definitions/CollectedDataItem"
          },
          {
            "type": "object",
            "description": "Collected network traffic data",
            "required": [
              "Kind",
              "BytesUploaded",
              "BytesDownloaded"
            ],
            "properties": {
              "Kind": {
                "description": "Kind of collected data",
                "allOf": [
                  {
                    "$ref": "#/definitions/CollectedDataKind"
                  }
                ]
              },
              "BytesUploaded": {
                "type": "integer",
                "description": "The number of bytes uploaded.",
                "format": "int64"
              },
              "BytesDownloaded": {
                "type": "integer",
                "description": "The number of bytes downloaded.",
                "format": "int64"
              }
            }
          }
        ]
      },
      "CollectedString": {
        "allOf": [
          {
            "$ref": "#/definitions/CollectedDataItem"
          },
          {
            "type": "object",
            "description": "Collected string data item",
            "required": [
              "Kind"
            ],
            "properties": {
              "Value": {
                "type": "string",
                "description": "Collected string value"
              },
              "Kind": {
                "description": "Kind of collected data",
                "allOf": [
                  {
                    "$ref": "#/definitions/CollectedDataKind"
                  }
                ]
              }
            }
          }
        ]
      },
      "CollectedCallLog": {
        "allOf": [
          {
            "$ref": "#/definitions/CollectedDataItem"
          },
          {
            "type": "object",
            "description": "Collected call log data",
            "required": [
              "Time",
              "Direction",
              "Status",
              "Duration",
              "IsRoaming",
              "Kind"
            ],
            "properties": {
              "Time": {
                "type": "string",
                "description": "Call time",
                "format": "date-time"
              },
              "PhoneNumber": {
                "type": "string",
                "description": "The caller phone number"
              },
              "Direction": {
                "description": "Call direction",
                "allOf": [
                  {
                    "$ref": "#/definitions/CallDirection"
                  }
                ]
              },
              "Status": {
                "description": "Call status",
                "allOf": [
                  {
                    "$ref": "#/definitions/CallStatus"
                  }
                ]
              },
              "Duration": {
                "type": "integer",
                "description": "Call duration",
                "format": "int32"
              },
              "CallPhoneNumber": {
                "type": "string",
                "description": "Phone number that received the call"
              },
              "ContactName": {
                "type": "string",
                "description": "The contact name"
              },
              "IsRoaming": {
                "type": "boolean",
                "description": "Flag indicating if roaming was enabled"
              },
              "Kind": {
                "description": "Kind of collected data",
                "allOf": [
                  {
                    "$ref": "#/definitions/CollectedDataKind"
                  }
                ]
              }
            }
          }
        ]
      },
      "CallDirection": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Incoming",
          "Outgoing"
        ],
        "enum": [
          "Incoming",
          "Outgoing"
        ],
        "x-enumType": "CallDirection"
      },
      "CallStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Missed",
          "NoAnswer",
          "Connected",
          "Voicemail",
          "Blocked"
        ],
        "enum": [
          "Missed",
          "NoAnswer",
          "Connected",
          "Voicemail",
          "Blocked"
        ],
        "x-enumType": "CallStatus"
      },
      "CollectedFloat": {
        "allOf": [
          {
            "$ref": "#/definitions/CollectedDataItem"
          },
          {
            "type": "object",
            "description": "Collected float data",
            "required": [
              "Kind",
              "Value"
            ],
            "properties": {
              "Kind": {
                "description": "Kind of collected data",
                "allOf": [
                  {
                    "$ref": "#/definitions/CollectedDataKind"
                  }
                ]
              },
              "Value": {
                "type": "number",
                "description": "The collected data item value",
                "format": "float"
              }
            }
          }
        ]
      },
      "DeviceCollectedDataType": {
        "type": "string",
        "description": "Represents build-in types of data collected by devices\nMust be synchronized with build-in types defined in C++ code (enum BUILDIN_TYPE)",
        "x-enumNames": [
          "BatterySerialNumber",
          "BatteryTemperature",
          "BatteryPartNumber",
          "BatteryManufacturerDate",
          "BatteryHealthPercentage",
          "BatteryChargeCycle",
          "TotalMemory",
          "TotalStorage",
          "MACAddress",
          "DeviceName",
          "DeviceID",
          "PrinterZbiBasicForcedRuntimeError",
          "PrinterRibbonOut",
          "PrinterRibbonLow",
          "PrinterRibboninWarning",
          "PrinterRfidError",
          "PrinterRewindFull",
          "PrinterReplaceHead",
          "PrinterPaused",
          "PrinterPqJobCompleted",
          "PrinterPowerSupplyOverTemp",
          "PrinterPowerOn",
          "PrinterPaperOut",
          "PrinterMediaLow",
          "PrinterLabelReady",
          "PrinterHeadTooHot",
          "PrinterHeadOpen",
          "PrinterHeadElementBad",
          "PrinterHeadCold",
          "PrinterCutterJammed",
          "PrinterAvailableSdCardStorage",
          "PrinterCleanPrinthead",
          "PrinterBatteryLow",
          "FailedPasswordAttempts",
          "ForegroundApp",
          "MissedCalls",
          "SuccessCalls",
          "DroppedCalls",
          "AvailableExternalStorage",
          "AvailableInternalStorage",
          "OperatingSystemVersion",
          "CallLog",
          "TrafficCellularTethered",
          "TrafficCellularRoaming",
          "TrafficCellular",
          "TrafficWifi",
          "TrafficUsb",
          "BSSID",
          "CellularSignalStrength",
          "CellularCarrier",
          "IPAddress",
          "RSSI",
          "SSID",
          "Location",
          "AvailableStorage",
          "AvailableMemory",
          "BatteryStatus"
        ],
        "enum": [
          "BatterySerialNumber",
          "BatteryTemperature",
          "BatteryPartNumber",
          "BatteryManufacturerDate",
          "BatteryHealthPercentage",
          "BatteryChargeCycle",
          "TotalMemory",
          "TotalStorage",
          "MACAddress",
          "DeviceName",
          "DeviceID",
          "PrinterZbiBasicForcedRuntimeError",
          "PrinterRibbonOut",
          "PrinterRibbonLow",
          "PrinterRibboninWarning",
          "PrinterRfidError",
          "PrinterRewindFull",
          "PrinterReplaceHead",
          "PrinterPaused",
          "PrinterPqJobCompleted",
          "PrinterPowerSupplyOverTemp",
          "PrinterPowerOn",
          "PrinterPaperOut",
          "PrinterMediaLow",
          "PrinterLabelReady",
          "PrinterHeadTooHot",
          "PrinterHeadOpen",
          "PrinterHeadElementBad",
          "PrinterHeadCold",
          "PrinterCutterJammed",
          "PrinterAvailableSdCardStorage",
          "PrinterCleanPrinthead",
          "PrinterBatteryLow",
          "FailedPasswordAttempts",
          "ForegroundApp",
          "MissedCalls",
          "SuccessCalls",
          "DroppedCalls",
          "AvailableExternalStorage",
          "AvailableInternalStorage",
          "OperatingSystemVersion",
          "CallLog",
          "TrafficCellularTethered",
          "TrafficCellularRoaming",
          "TrafficCellular",
          "TrafficWifi",
          "TrafficUsb",
          "BSSID",
          "CellularSignalStrength",
          "CellularCarrier",
          "IPAddress",
          "RSSI",
          "SSID",
          "Location",
          "AvailableStorage",
          "AvailableMemory",
          "BatteryStatus"
        ],
        "x-enumType": "DeviceCollectedDataType"
      },
      "InstalledApplication": {
        "type": "object",
        "description": "Contains information for an installed application for a device",
        "required": [
          "Status",
          "CanChangeManagementState"
        ],
        "properties": {
          "DeviceId": {
            "type": "string",
            "description": "Device Id"
          },
          "ApplicationId": {
            "type": "string",
            "description": "Application Id"
          },
          "Name": {
            "type": "string",
            "description": "Name of installed application"
          },
          "Version": {
            "type": "string",
            "description": "Gets or sets the program's version number."
          },
          "ShortVersion": {
            "type": "string",
            "description": "Gets or sets the program's short version number. Available in iOS 5.0 and later."
          },
          "SizeInBytes": {
            "type": "integer",
            "description": "Gets or sets the size of the program image.",
            "format": "int64"
          },
          "DataSizeInBytes": {
            "type": "integer",
            "description": "Gets or sets the size of the program's data.",
            "format": "int64"
          },
          "Status": {
            "description": "Gets or sets the installed program status.",
            "allOf": [
              {
                "$ref": "#/definitions/InstalledApplicationStatus"
              }
            ],
            "x-enumType": "InstalledApplicationStatus"
          },
          "LicenseInfo": {
            "description": "Gets or sets the license info that the app.",
            "allOf": [
              {
                "$ref": "#/definitions/VppToken"
              }
            ]
          },
          "CanChangeManagementState": {
            "type": "boolean",
            "description": "Gets or sets weather the installed program can be set to managed.\nApps can be managed using App Catalog rule "
          },
          "InstalledOn": {
            "type": "string",
            "description": "Date app was installed on the device",
            "format": "date-time"
          },
          "Build": {
            "type": "string",
            "description": "Gets or sets the program's build (short version) number. Available in iOS 5.0 and later.s"
          },
          "ExternalVersionIdentifier": {
            "type": "integer",
            "description": "Gets or sets The applicationʼs external version ID",
            "format": "int32"
          },
          "AppStoreVendable": {
            "type": "boolean",
            "description": "Gets or sets a value whether the app came from the store and can participate in store features\nIf true, the app came from the store and can participate in store features.\nHowever, for device-based VPP apps, this will always be false."
          },
          "DeviceBasedVpp": {
            "type": "boolean",
            "description": "Gets or sets a value whether the app is distributed to the device without requiring an Apple ID\nIf true, the app is distributed to the device without requiring an Apple ID"
          },
          "BetaApp": {
            "type": "boolean",
            "description": "Gets or sets a value whether the app is part of the Beta program\nIf true, the app is part of the Beta program"
          },
          "AdHocCodeSigned": {
            "type": "boolean",
            "description": "Gets or sets a value whether the app is ad-hoc code is signed\nIf true, the app is ad-hoc code signed"
          },
          "HasUpdateAvailable": {
            "type": "boolean",
            "description": "Gets or sets a value whether the app has an update available\nIf true, the app has an update available. This key will only be\npresent for App Store apps. On macOS, this key will only be\npresent for VPP apps"
          },
          "IsRedemptionCodeUsed": {
            "type": "boolean",
            "description": "Gets or sets the redemption code that the app."
          }
        }
      },
      "InstalledApplicationStatus": {
        "type": "string",
        "description": "Status for installed application. Copied from generated enum\n            ",
        "x-enumNames": [
          "Unknown",
          "Installed",
          "Failed",
          "Managed",
          "NeedsRedemption",
          "Redeeming",
          "Prompting",
          "Installing",
          "ManagedButUninstalled",
          "UserInstalledApp",
          "UserRejected",
          "PendingUninstallation",
          "Uninstalled",
          "Queued",
          "PromptingForUpdate",
          "UpdateRejected",
          "QueuedForUpdate",
          "PromptingForManagement",
          "Updating",
          "PromptingForLogin",
          "Provisioning",
          "Provisioned",
          "Unprovisioned",
          "Staged",
          "ManagementRejected",
          "RetryingInstallation"
        ],
        "enum": [
          "Unknown",
          "Installed",
          "Failed",
          "Managed",
          "NeedsRedemption",
          "Redeeming",
          "Prompting",
          "Installing",
          "ManagedButUninstalled",
          "UserInstalledApp",
          "UserRejected",
          "PendingUninstallation",
          "Uninstalled",
          "Queued",
          "PromptingForUpdate",
          "UpdateRejected",
          "QueuedForUpdate",
          "PromptingForManagement",
          "Updating",
          "PromptingForLogin",
          "Provisioning",
          "Provisioned",
          "Unprovisioned",
          "Staged",
          "ManagementRejected",
          "RetryingInstallation"
        ],
        "x-enumType": "InstalledApplicationStatus"
      },
      "VppToken": {
        "type": "object",
        "description": "VppToken information for an installed application",
        "required": [
          "IsRevocable"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Vpp Account Name"
          },
          "Id": {
            "type": "string",
            "description": "Vpp Account Id"
          },
          "IsRevocable": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether or not the license is revokable."
          },
          "AssignmentType": {
            "description": "Gets or sets the assignment type.",
            "allOf": [
              {
                "$ref": "#/definitions/VppTokenAssignmentType"
              }
            ],
            "x-enumType": "VppTokenAssignmentType"
          }
        }
      },
      "VppTokenAssignmentType": {
        "type": "string",
        "description": "Assignment type for the VPP token",
        "x-enumNames": [
          "AppleIdBased",
          "DeviceBased"
        ],
        "enum": [
          "AppleIdBased",
          "DeviceBased"
        ],
        "x-enumType": "VppTokenAssignmentType"
      },
      "ProvisioningProfile": {
        "type": "object",
        "description": "Contains information for an provision profile for a device",
        "required": [
          "Status"
        ],
        "properties": {
          "DeviceId": {
            "type": "string",
            "description": "Device Id"
          },
          "ApplicationId": {
            "type": "string",
            "description": "Application Id"
          },
          "ApplicationName": {
            "type": "string",
            "description": "Name of installed application"
          },
          "Status": {
            "description": "Gets or sets the installed program status.",
            "allOf": [
              {
                "$ref": "#/definitions/ProvisioningProfileStatus"
              }
            ],
            "x-enumType": "ProvisioningProfileStatus"
          },
          "ProfileName": {
            "type": "string",
            "description": "Name of provisioning profile"
          },
          "ExpirationDate": {
            "type": "string",
            "description": "Gets or sets the expiration date.",
            "format": "date-time"
          }
        }
      },
      "ProvisioningProfileStatus": {
        "type": "string",
        "description": "Status for provisioning profile",
        "x-enumNames": [
          "Unknown",
          "NotExpired",
          "Expired",
          "Expiring"
        ],
        "enum": [
          "Unknown",
          "NotExpired",
          "Expired",
          "Expiring"
        ],
        "x-enumType": "ProvisioningProfileStatus"
      },
      "InstalledApplicationAction": {
        "type": "object",
        "description": "Installed application action",
        "required": [
          "ActionKind"
        ],
        "properties": {
          "ActionKind": {
            "description": "The action type to be executed",
            "allOf": [
              {
                "$ref": "#/definitions/InstalledApplicationActionKind"
              }
            ],
            "x-enumType": "InstalledApplicationActionKind"
          }
        }
      },
      "InstalledApplicationActionKind": {
        "type": "string",
        "description": "Installed application action kind\n            ",
        "x-enumNames": [
          "RemoveProgram",
          "WipeProgramData",
          "SetAsManagedApplication",
          "UpdateProgram",
          "RetryInstallation"
        ],
        "enum": [
          "RemoveProgram",
          "WipeProgramData",
          "SetAsManagedApplication",
          "UpdateProgram",
          "RetryInstallation"
        ],
        "x-enumType": "InstalledApplicationActionKind"
      },
      "DeviceActionCompatibilityReport": {
        "type": "object",
        "description": "Response object to report compatibility statistics",
        "required": [
          "TotalIncompatibleOrNotPermitted"
        ],
        "properties": {
          "Incompatible": {
            "type": "array",
            "description": "List of device kinds that are not compatible with the specified action but were in the request",
            "items": {
              "$ref": "#/definitions/DeviceActionIncompatibilityItem"
            }
          },
          "ActionPermissionDenied": {
            "type": "array",
            "description": "List of devices, grouped by kind, that the user does not have permission to perform the action on, but were in the request",
            "items": {
              "type": "string"
            }
          },
          "CompatibleAccessibleDevices": {
            "type": "array",
            "description": "List of the devices id for which user has access to perform requested action. This list includes only devices that support the action.",
            "items": {
              "type": "string"
            }
          },
          "TotalIncompatibleOrNotPermitted": {
            "type": "integer",
            "description": "The total count of all devices that are either not compatible or for which the user does not have suitable permissions",
            "format": "int32"
          }
        }
      },
      "DeviceActionIncompatibilityItem": {
        "type": "object",
        "description": "Individual report item that details the number of incompatible devices, their identifiers,\nand the reason they are not compatible",
        "required": [
          "Count",
          "ErrorCode"
        ],
        "properties": {
          "Count": {
            "type": "integer",
            "description": "The number of incompatible devices",
            "format": "int32"
          },
          "Reason": {
            "type": "string",
            "description": "The detailed reason why these devices are not compatible with the action"
          },
          "Identifiers": {
            "type": "array",
            "description": "The identifiers of all devices that are not compatible for the specified reason",
            "items": {
              "type": "string"
            }
          },
          "ErrorCode": {
            "type": "integer",
            "description": "The error code related to the failure reason",
            "format": "int32"
          }
        }
      },
      "DeviceKindActionInfo": {
        "type": "object",
        "description": "Request entity to check for device action compatibility",
        "required": [
          "DesiredAction",
          "DeviceIds"
        ],
        "properties": {
          "DesiredAction": {
            "description": "The action to check compatibility for",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceAction"
              }
            ],
            "x-enumType": "DeviceAction",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "DeviceIds": {
            "type": "array",
            "description": "The devices to check compatibility against",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          }
        }
      },
      "DeviceKindActionContextInfo": {
        "type": "object",
        "description": "Request used to obtain compatibility information including the current\nstate of the device action.",
        "required": [
          "DesiredAction",
          "DeviceIds",
          "ActionState"
        ],
        "properties": {
          "DesiredAction": {
            "description": "The action to check compatibility for",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceAction"
              }
            ],
            "x-enumType": "DeviceAction",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "DeviceIds": {
            "type": "array",
            "description": "The devices to check compatibility against",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "ActionState": {
            "description": "The current state of the device action to test compatibility against",
            "allOf": [
              {
                "$ref": "#/definitions/ActionBase"
              }
            ],
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          }
        }
      },
      "BulkDeviceAction": {
        "type": "object",
        "required": [
          "ActionInfo"
        ],
        "properties": {
          "DeviceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ActionInfo": {
            "$ref": "#/definitions/ActionBase",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Filter": {
            "type": "string"
          }
        }
      },
      "CsvProcessingOperationStatus": {
        "type": "object",
        "description": "Indicates the result of assigning device users via a csv file\nupload",
        "required": [
          "TotalRecordsProcessed"
        ],
        "properties": {
          "ProcessingFailures": {
            "type": "array",
            "description": "A collection of all device identifiers from the file for which\na failure was encountered during assignment",
            "items": {
              "type": "string"
            }
          },
          "TotalRecordsProcessed": {
            "type": "integer",
            "description": "The total number of items that were processed from the uploaded\ncsv file, including failed",
            "format": "int32"
          }
        }
      },
      "DeviceProfile": {
        "type": "object",
        "description": "Profile information that should be available to device",
        "required": [
          "VersionNumber",
          "Status",
          "IsMandatory",
          "DeviceFamilyQualification"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Gets or sets Profile reference Id"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets Profile name"
          },
          "VersionNumber": {
            "type": "integer",
            "description": "Gets or sets Profile version number",
            "format": "int32"
          },
          "Status": {
            "description": "Gets or sets Profile status on a device",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceProfileStatus"
              }
            ],
            "x-enumType": "DeviceProfileStatus"
          },
          "IsMandatory": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this profile is mandatory"
          },
          "AssignmentDate": {
            "type": "string",
            "description": "Gets or sets Assignment Date",
            "format": "date-time"
          },
          "Configurations": {
            "type": "array",
            "description": "Gets or sets Profile payloads",
            "items": {
              "$ref": "#/definitions/DeviceConfiguration"
            }
          },
          "Packages": {
            "type": "array",
            "description": "The list of packages available with the profile",
            "items": {
              "$ref": "#/definitions/DevicePackage"
            }
          },
          "DeviceFamilyQualification": {
            "description": "Gets or sets the device family qualification",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamilyQualification"
              }
            ],
            "x-enumType": "DeviceFamilyQualification"
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the Username that the profile is linked to (SharedIPad)"
          }
        }
      },
      "DeviceProfileStatus": {
        "type": "string",
        "description": "Represents profile status as required for device",
        "x-enumNames": [
          "Unknown",
          "InstallPending",
          "InstallFailed",
          "Installed",
          "InstalledPartially",
          "RemovalPending",
          "RemovalFailed",
          "NotInstalled",
          "AdministrativelyRemoved",
          "InstallationDisabled"
        ],
        "enum": [
          "Unknown",
          "InstallPending",
          "InstallFailed",
          "Installed",
          "InstalledPartially",
          "RemovalPending",
          "RemovalFailed",
          "NotInstalled",
          "AdministrativelyRemoved",
          "InstallationDisabled"
        ],
        "x-enumType": "DeviceProfileStatus"
      },
      "DeviceConfiguration": {
        "type": "object",
        "description": "Model for new DeviceConfiguration",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets Payload name"
          },
          "DeviceConfigurationType": {
            "description": "Gets or sets Unique payload characteristics",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceConfigurationType"
              }
            ]
          },
          "Status": {
            "description": "Gets or sets payload's status",
            "allOf": [
              {
                "$ref": "#/definitions/DevicePayloadStatus"
              }
            ],
            "x-enumType": "DevicePayloadStatus"
          }
        }
      },
      "DeviceConfigurationType": {
        "type": "object",
        "description": "Represents valid device configuration types",
        "properties": {
          "ConfigurationType": {
            "description": "Information about device configuration type",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceConfigurationTypeInformation"
              }
            ]
          },
          "Subtype": {
            "description": "Information about device configuration subtype; used for multiaccount configurations",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceConfigurationTypeInformation"
              }
            ]
          },
          "PayloadTypeVersionReferenceId": {
            "type": "string",
            "description": "Uniquely identify payload type",
            "format": "guid"
          }
        }
      },
      "DeviceConfigurationTypeInformation": {
        "type": "object",
        "description": "Class to contain information related to device configurations",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of this configuration type"
          }
        }
      },
      "DevicePayloadStatus": {
        "type": "string",
        "description": "Represents payload status as required for device",
        "x-enumNames": [
          "Unspecified",
          "InstallPending",
          "Delivered",
          "Installed",
          "InstallFailed",
          "InstallFailing",
          "Diagnosing",
          "Disabled",
          "Ignored",
          "UninstallPending",
          "Uninstalled",
          "UninstallFailed"
        ],
        "enum": [
          "Unspecified",
          "InstallPending",
          "Delivered",
          "Installed",
          "InstallFailed",
          "InstallFailing",
          "Diagnosing",
          "Disabled",
          "Ignored",
          "UninstallPending",
          "Uninstalled",
          "UninstallFailed"
        ],
        "x-enumType": "DevicePayloadStatus"
      },
      "DevicePackage": {
        "type": "object",
        "description": "Profile package details",
        "required": [
          "Size"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets Package name"
          },
          "Version": {
            "type": "string",
            "description": "Gets or sets package version"
          },
          "Size": {
            "type": "integer",
            "description": "Gets or sets package file size",
            "format": "int64"
          },
          "Status": {
            "description": "Gets or sets package status",
            "allOf": [
              {
                "$ref": "#/definitions/DevicePackageStatus"
              }
            ],
            "x-enumType": "DevicePackageStatus"
          },
          "ReferenceId": {
            "type": "string",
            "description": "Gets or sets package referenceId"
          }
        }
      },
      "DevicePackageStatus": {
        "type": "string",
        "description": "Represents package status as required for device",
        "x-enumNames": [
          "Installed",
          "PendingInstall",
          "ForceInstall",
          "Downloaded",
          "Uninstalled",
          "PendingUninstall",
          "AnotherVersionAlreadyInstalled",
          "CircularDependency",
          "NotSupported",
          "PrescriptAbort",
          "MissingDependency",
          "UserAborted",
          "InvalidPackage",
          "IncompatiblePlatform",
          "InsufficientFreeSpace",
          "DuplicatedPackage",
          "LowerVersion",
          "FileIO",
          "CreateFile",
          "PackageFileNotFound",
          "CommunicationError",
          "FailedToInstall"
        ],
        "enum": [
          "Installed",
          "PendingInstall",
          "ForceInstall",
          "Downloaded",
          "Uninstalled",
          "PendingUninstall",
          "AnotherVersionAlreadyInstalled",
          "CircularDependency",
          "NotSupported",
          "PrescriptAbort",
          "MissingDependency",
          "UserAborted",
          "InvalidPackage",
          "IncompatiblePlatform",
          "InsufficientFreeSpace",
          "DuplicatedPackage",
          "LowerVersion",
          "FileIO",
          "CreateFile",
          "PackageFileNotFound",
          "CommunicationError",
          "FailedToInstall"
        ],
        "x-enumType": "DevicePackageStatus"
      },
      "DeviceFamilyQualification": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Regular",
          "Knox",
          "AndroidWork",
          "Windows10Phone",
          "Windows10Desktop",
          "AppleIOS",
          "AppleMACUser",
          "AppleMACDevice",
          "WindowsHoloLens",
          "AndroidWorkProfileOwner",
          "AndroidCope",
          "Chrome",
          "SharedIPadUser"
        ],
        "enum": [
          "Regular",
          "Knox",
          "AndroidWork",
          "Windows10Phone",
          "Windows10Desktop",
          "AppleIOS",
          "AppleMACUser",
          "AppleMACDevice",
          "WindowsHoloLens",
          "AndroidWorkProfileOwner",
          "AndroidCope",
          "Chrome",
          "SharedIPadUser"
        ],
        "x-enumType": "DeviceFamilyQualification"
      },
      "DevicePackageAndContainingProfile": {
        "type": "object",
        "required": [
          "Size",
          "InstallationOrder"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets Package name"
          },
          "Version": {
            "type": "string",
            "description": "Gets or sets package version"
          },
          "Size": {
            "type": "integer",
            "description": "Gets or sets package file size",
            "format": "int64"
          },
          "InstallationOrder": {
            "type": "integer",
            "description": "The order that a package is installed on a device",
            "format": "int32"
          },
          "Status": {
            "description": "Gets or sets package status",
            "allOf": [
              {
                "$ref": "#/definitions/DevicePackageStatus"
              }
            ],
            "x-enumType": "DevicePackageStatus"
          },
          "ReferenceId": {
            "type": "string",
            "description": "Gets or sets package referenceId"
          },
          "ContainingProfileName": {
            "type": "string",
            "description": "The profile containing the package"
          }
        }
      },
      "DeviceRule": {
        "type": "object",
        "description": "Contains information about a rule associated with a device.",
        "required": [
          "RuleType",
          "IsEnabled",
          "DeviceFamily",
          "StartDate"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the rule."
          },
          "RuleType": {
            "description": "The rule type",
            "allOf": [
              {
                "$ref": "#/definitions/RuleType"
              }
            ],
            "x-enumType": "RuleType"
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "Indicates whether the rule is enabled."
          },
          "DeviceFamily": {
            "description": "Device family the rule is linked with.",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamily2"
              }
            ],
            "x-enumType": "DeviceFamily"
          },
          "StartDate": {
            "type": "string",
            "description": "The time when the rule is active",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "The time when the rule is inactive",
            "format": "date-time"
          }
        }
      },
      "RuleType": {
        "type": "string",
        "description": "Rule type.",
        "x-enumNames": [
          "WindowsCEAddDevices",
          "FileSync",
          "WindowsCEDeviceRelocation",
          "DataCollection",
          "CommonAlert",
          "iOSAddDevices",
          "iOSApplicationCatalog",
          "AndroidAddDevices",
          "AndroidApplicationCatalog",
          "WindowsDesktopAddDevices",
          "WindowsDesktopDeviceRelocation",
          "AndroidSamsungAddDevices",
          "ScannersAddDevices",
          "TermsAndConditions",
          "TEM",
          "AndroidSamsungDeviceRelocation",
          "WindowsPhoneAddDevices",
          "WindowsPhoneApplicationCatalog",
          "WindowsPhoneDeviceRelocation",
          "PrinterAddDevices",
          "LinuxAddDevices",
          "LinuxDeviceRelocation",
          "ChromeAddDevices",
          "ContentManagement"
        ],
        "enum": [
          "WindowsCEAddDevices",
          "FileSync",
          "WindowsCEDeviceRelocation",
          "DataCollection",
          "CommonAlert",
          "iOSAddDevices",
          "iOSApplicationCatalog",
          "AndroidAddDevices",
          "AndroidApplicationCatalog",
          "WindowsDesktopAddDevices",
          "WindowsDesktopDeviceRelocation",
          "AndroidSamsungAddDevices",
          "ScannersAddDevices",
          "TermsAndConditions",
          "TEM",
          "AndroidSamsungDeviceRelocation",
          "WindowsPhoneAddDevices",
          "WindowsPhoneApplicationCatalog",
          "WindowsPhoneDeviceRelocation",
          "PrinterAddDevices",
          "LinuxAddDevices",
          "LinuxDeviceRelocation",
          "ChromeAddDevices",
          "ContentManagement"
        ],
        "x-enumType": "RuleType"
      },
      "DeviceAppPolicy": {
        "type": "object",
        "description": "App Catalog Rule summary",
        "required": [
          "Status",
          "Family",
          "AppCount"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Reference Id"
          },
          "Name": {
            "type": "string",
            "description": "Rule Name"
          },
          "Status": {
            "description": "Status",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceAppCatalogRuleStatus"
              }
            ],
            "x-enumType": "DeviceAppCatalogRuleStatus"
          },
          "Family": {
            "description": "Rule Family",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceAppCatalogRuleFamily"
              }
            ],
            "x-enumType": "DeviceAppCatalogRuleFamily"
          },
          "AssignedDate": {
            "type": "string",
            "description": "Assigned Date",
            "format": "date-time"
          },
          "AutoAssignDate": {
            "type": "string",
            "description": "Auto Assignment Date",
            "format": "date-time"
          },
          "DisabledDate": {
            "type": "string",
            "description": "Disabled Date",
            "format": "date-time"
          },
          "AppCount": {
            "type": "integer",
            "description": "Application Count",
            "format": "int32"
          }
        }
      },
      "DeviceAppCatalogRuleStatus": {
        "type": "string",
        "description": "App Catalog Rule status",
        "x-enumNames": [
          "Draft",
          "Assigned",
          "Disabled"
        ],
        "enum": [
          "Draft",
          "Assigned",
          "Disabled"
        ],
        "x-enumType": "DeviceAppCatalogRuleStatus"
      },
      "DeviceAppCatalogRuleFamily": {
        "type": "string",
        "description": "App Catalog Rule Family",
        "x-enumNames": [
          "Android",
          "Apple",
          "Windows"
        ],
        "enum": [
          "Android",
          "Apple",
          "Windows"
        ],
        "x-enumType": "DeviceAppCatalogRuleFamily"
      },
      "DeviceProfileAction": {
        "type": "string",
        "description": "These values specify the allowed actions relating to \ndevice profiles.",
        "x-enumNames": [
          "Install",
          "Revoke"
        ],
        "enum": [
          "Install",
          "Revoke"
        ],
        "x-enumType": "DeviceProfileAction"
      },
      "DevicePackageAction": {
        "type": "object",
        "description": "Package Action",
        "required": [
          "ActionKind"
        ],
        "properties": {
          "ActionKind": {
            "description": "Action type to be executed",
            "allOf": [
              {
                "$ref": "#/definitions/DevicePackageActionKind"
              }
            ],
            "x-enumType": "DevicePackageActionKind"
          }
        }
      },
      "DevicePackageActionKind": {
        "type": "string",
        "description": "Package action kind",
        "x-enumNames": [
          "ForceReinstall"
        ],
        "enum": [
          "ForceReinstall"
        ],
        "x-enumType": "DevicePackageActionKind"
      },
      "SupportContactInformation": {
        "type": "object",
        "description": "Support contact details for a given device or device group.",
        "properties": {
          "Email": {
            "type": "string",
            "description": "The email address of the specified device support contact"
          },
          "Phone": {
            "type": "string",
            "description": "The phone number for the device support contact"
          },
          "CompanyName": {
            "type": "string",
            "description": "The company name of the support contact"
          },
          "Address": {
            "type": "string",
            "description": "The physical address of the support contact"
          },
          "ServicesManaged": {
            "type": "string",
            "description": "The particular services this support contact manages"
          }
        }
      },
      "DeviceCertificate": {
        "type": "object",
        "description": "Device certificate",
        "required": [
          "NotBeforeDate",
          "NotAfterDate",
          "HasPrivateKey",
          "IsRevoked",
          "WasRenewed",
          "Status",
          "CanRevoke"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Reference identifier"
          },
          "SerialNumber": {
            "type": "string",
            "description": "The serial number."
          },
          "SubjectName": {
            "type": "string",
            "description": "Subject name"
          },
          "Subject": {
            "type": "string",
            "description": "The certificate subject (full)"
          },
          "IssuerName": {
            "type": "string",
            "description": "The certificate issuer name"
          },
          "Issuer": {
            "type": "string",
            "description": "The certificate issuer (full)"
          },
          "NotBeforeDate": {
            "type": "string",
            "description": "Not before date.",
            "format": "date-time"
          },
          "NotAfterDate": {
            "type": "string",
            "description": "Not after date.",
            "format": "date-time"
          },
          "HasPrivateKey": {
            "type": "boolean",
            "description": "Value indicating whether the certificate has private key."
          },
          "IsRevoked": {
            "type": "boolean",
            "description": "Value indicating whether the certificate is revoked."
          },
          "WasRenewed": {
            "type": "boolean",
            "description": "Value indicating whether the certificate was renewed."
          },
          "TemplateName": {
            "type": "string",
            "description": "Certificate template name"
          },
          "Usage": {
            "description": "Certificate usage",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateUsage"
              }
            ],
            "x-enumType": "CertificateUsage"
          },
          "Status": {
            "description": "Certificate deployment status",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateDeploymentStatus"
              }
            ],
            "x-enumType": "CertificateDeploymentStatus"
          },
          "Thumbprint": {
            "type": "string",
            "description": "Gets or sets certificate thumbprint"
          },
          "CanRevoke": {
            "type": "boolean",
            "description": "If this certificate is revokable"
          }
        }
      },
      "CertificateUsage": {
        "type": "string",
        "description": "Certificate usage",
        "x-enumNames": [
          "None",
          "Signing",
          "Encryption",
          "SigningAndEncryption"
        ],
        "enum": [
          "None",
          "Signing",
          "Encryption",
          "SigningAndEncryption"
        ],
        "x-enumType": "CertificateUsage"
      },
      "CertificateDeploymentStatus": {
        "type": "string",
        "description": "Certificate deployment status",
        "x-enumNames": [
          "Unknown",
          "Pushed",
          "Installed",
          "Deleted",
          "InstalledAndPreserved"
        ],
        "enum": [
          "Unknown",
          "Pushed",
          "Installed",
          "Deleted",
          "InstalledAndPreserved"
        ],
        "x-enumType": "CertificateDeploymentStatus"
      },
      "DeviceCertificateAction": {
        "type": "object",
        "description": "Device certificate action",
        "required": [
          "ActionKind"
        ],
        "properties": {
          "ActionKind": {
            "description": "The action type to be executed",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceCertificateActionKind"
              }
            ],
            "x-enumType": "DeviceCertificateActionKind"
          }
        }
      },
      "DeviceCertificateActionKind": {
        "type": "string",
        "description": "Certificate action kind for device",
        "x-enumNames": [
          "Renew",
          "Revoke"
        ],
        "enum": [
          "Renew",
          "Revoke"
        ],
        "x-enumType": "DeviceCertificateActionKind"
      },
      "QuarantineItem": {
        "type": "object",
        "description": "Quarantine item",
        "required": [
          "QuarantineItemType"
        ],
        "properties": {
          "QuarantineItemType": {
            "description": "Type of the quarantine item.",
            "allOf": [
              {
                "$ref": "#/definitions/QuarantineItemType"
              }
            ],
            "x-enumType": "QuarantineItemType"
          },
          "Name": {
            "type": "string",
            "description": "Name of the quarantine item"
          },
          "FileSize": {
            "type": "integer",
            "description": "File size, if applicable",
            "format": "int32"
          },
          "Checksum": {
            "type": "string",
            "description": "Checksum, if applicable"
          }
        }
      },
      "QuarantineItemType": {
        "type": "string",
        "description": "Quarantine item type",
        "x-enumNames": [
          "Application",
          "File"
        ],
        "enum": [
          "Application",
          "File"
        ],
        "x-enumType": "QuarantineItemType"
      },
      "DeviceUserConnectionType": {
        "type": "string",
        "description": "Connection type for device user.",
        "x-enumNames": [
          "Directory",
          "IdentityProvider"
        ],
        "enum": [
          "Directory",
          "IdentityProvider"
        ],
        "x-enumType": "DeviceUserConnectionType"
      },
      "DeviceHealthAttestationComplianceReport": {
        "type": "object",
        "description": "Windows Phone Device Health Attestation Report",
        "required": [
          "ComplianceType",
          "ComplianceStatus",
          "LastAttemptHealthAttestationStatus",
          "HealthAttestationComplianceStatus",
          "IsHealthAttestationCompliancePolicyApplied"
        ],
        "properties": {
          "ComplianceType": {
            "description": "Health Attestation Compliance Policy Compliance Type",
            "allOf": [
              {
                "$ref": "#/definitions/ComplianceType"
              }
            ],
            "x-enumType": "ComplianceType"
          },
          "ComplianceStatus": {
            "description": "The compliance status of the Windows Modern device with MobiControl",
            "allOf": [
              {
                "$ref": "#/definitions/ComplianceStatus"
              }
            ],
            "x-enumType": "ComplianceStatus"
          },
          "ReportDate": {
            "type": "string",
            "description": "The last date a report was created",
            "format": "date-time"
          },
          "ReportProperties": {
            "type": "array",
            "description": "Properties of the health attestation report",
            "items": {
              "$ref": "#/definitions/HealthReportProperty"
            }
          },
          "LastAttemptDate": {
            "type": "string",
            "description": "Last date a health attestation report was attempted",
            "format": "date-time"
          },
          "LastAttemptHealthAttestationStatus": {
            "description": "Status received when a report was requested last",
            "allOf": [
              {
                "$ref": "#/definitions/HealthAttestationStatus"
              }
            ],
            "x-enumType": "HealthAttestationStatus"
          },
          "HealthAttestationComplianceStatus": {
            "description": "Health Attestation Compliance Status",
            "allOf": [
              {
                "$ref": "#/definitions/ComplianceStatus"
              }
            ],
            "x-enumType": "ComplianceStatus"
          },
          "IsHealthAttestationCompliancePolicyApplied": {
            "type": "boolean",
            "description": "Whether the compliance policy is applied to the device"
          }
        }
      },
      "ComplianceType": {
        "type": "string",
        "description": "Health Attestation Compliance Policy Compliance Type",
        "x-enumNames": [
          "Any",
          "All"
        ],
        "enum": [
          "Any",
          "All"
        ],
        "x-enumType": "ComplianceType"
      },
      "ComplianceStatus": {
        "type": "string",
        "description": "Status of device compliance based on its health state",
        "x-enumNames": [
          "None",
          "Pass",
          "Warning",
          "Fail"
        ],
        "enum": [
          "None",
          "Pass",
          "Warning",
          "Fail"
        ],
        "x-enumType": "ComplianceStatus"
      },
      "HealthReportProperty": {
        "type": "object",
        "description": "Properties related to the final report returned",
        "required": [
          "PropertyType",
          "ComplianceStatus",
          "Status",
          "IsCompliancePolicyApplied"
        ],
        "properties": {
          "PropertyType": {
            "description": "Type of health property being reported on",
            "allOf": [
              {
                "$ref": "#/definitions/HealthReportPropertyType"
              }
            ],
            "x-enumType": "HealthReportPropertyType"
          },
          "PropertyName": {
            "type": "string",
            "description": "Name of the health property being reported on"
          },
          "Value": {
            "type": "string",
            "description": "Value of the health property being reported on"
          },
          "ComplianceStatus": {
            "description": "Compliance status of the health property being reported on",
            "allOf": [
              {
                "$ref": "#/definitions/ComplianceStatus"
              }
            ],
            "x-enumType": "ComplianceStatus"
          },
          "Status": {
            "description": "Actual status of the health property",
            "allOf": [
              {
                "$ref": "#/definitions/HealthPropertyStatus"
              }
            ],
            "x-enumType": "HealthPropertyStatus"
          },
          "IsCompliancePolicyApplied": {
            "type": "boolean",
            "description": "Whether there is a compliance policy on device or not"
          }
        }
      },
      "HealthReportPropertyType": {
        "type": "string",
        "description": "Reported property type for health attestation",
        "x-enumNames": [
          "Unknown",
          "Issued",
          "AikPresent",
          "ResetCount",
          "RestartCount",
          "DepPolicy",
          "BitLockerStatus",
          "BootManagerRevListVersion",
          "CodeIntegrityRevListVersion",
          "SecureBootEnabled",
          "BootDebuggingEnabled",
          "OsKernelDebuggingEnabled",
          "CodeIntegrityEnabled",
          "TestSigningEnabled",
          "SafeMode",
          "WinPreInstallationEnvironment",
          "ElamDriverLoaded",
          "VsmEnabled",
          "Pcr0",
          "CodeIntegrityPolicyHash",
          "SbcpPolicyHash",
          "SecureBootConfigurationHash",
          "BootRevListInfo",
          "OsRevListInfo",
          "BootAppSvn",
          "BootManagerSvn",
          "CIPolicy"
        ],
        "enum": [
          "Unknown",
          "Issued",
          "AikPresent",
          "ResetCount",
          "RestartCount",
          "DepPolicy",
          "BitLockerStatus",
          "BootManagerRevListVersion",
          "CodeIntegrityRevListVersion",
          "SecureBootEnabled",
          "BootDebuggingEnabled",
          "OsKernelDebuggingEnabled",
          "CodeIntegrityEnabled",
          "TestSigningEnabled",
          "SafeMode",
          "WinPreInstallationEnvironment",
          "ElamDriverLoaded",
          "VsmEnabled",
          "Pcr0",
          "CodeIntegrityPolicyHash",
          "SbcpPolicyHash",
          "SecureBootConfigurationHash",
          "BootRevListInfo",
          "OsRevListInfo",
          "BootAppSvn",
          "BootManagerSvn",
          "CIPolicy"
        ],
        "x-enumType": "HealthReportPropertyType"
      },
      "HealthPropertyStatus": {
        "type": "string",
        "description": "Status of specific health property for health attestation",
        "x-enumNames": [
          "NotReported",
          "NotPresent",
          "Detected",
          "Disabled",
          "Enabled",
          "DoesNotMatch",
          "Overdue",
          "OutOfDate"
        ],
        "enum": [
          "NotReported",
          "NotPresent",
          "Detected",
          "Disabled",
          "Enabled",
          "DoesNotMatch",
          "Overdue",
          "OutOfDate"
        ],
        "x-enumType": "HealthPropertyStatus"
      },
      "HealthAttestationStatus": {
        "type": "string",
        "description": "Specific health status of device",
        "x-enumNames": [
          "Unknown",
          "PreparingRequest",
          "WaitingForResponse",
          "DataReady",
          "TpmNotReady",
          "TpmKnownProblem",
          "TpmNotCompatible",
          "OldReportReceived",
          "CertificateReceived",
          "ReportReceived",
          "ServerRequestFailed",
          "VerifyRequestNotAnswered",
          "HealthStatusNotDetected",
          "CachedNonceNotFound"
        ],
        "enum": [
          "Unknown",
          "PreparingRequest",
          "WaitingForResponse",
          "DataReady",
          "TpmNotReady",
          "TpmKnownProblem",
          "TpmNotCompatible",
          "OldReportReceived",
          "CertificateReceived",
          "ReportReceived",
          "ServerRequestFailed",
          "VerifyRequestNotAnswered",
          "HealthStatusNotDetected",
          "CachedNonceNotFound"
        ],
        "x-enumType": "HealthAttestationStatus"
      },
      "TpmVersion": {
        "type": "object",
        "description": "Version of the TPM",
        "properties": {
          "TpmSpecVersion": {
            "type": "string",
            "description": "TPM spec version."
          },
          "TpmSpecLevel": {
            "type": "string",
            "description": "TPM spec level."
          },
          "TpmSpecRevision": {
            "type": "string",
            "description": "TPM spec revision."
          }
        }
      },
      "DeviceADEInfo": {
        "type": "object",
        "description": "Information pertaining to Apple device DEP profile enrollment",
        "required": [
          "ProfileStatus"
        ],
        "properties": {
          "ProfileName": {
            "type": "string",
            "description": "Automated Device Enrollment Profile name"
          },
          "AssetTag": {
            "type": "string",
            "description": "Automated Device Enrollment Profile asset tag"
          },
          "AssignDate": {
            "type": "string",
            "description": "Automated Device Enrollment Profile assignment date",
            "format": "date-time"
          },
          "AssignedBy": {
            "type": "string",
            "description": "Email/Username of person that assigned Automated Device Enrollment Profile"
          },
          "ProfileStatus": {
            "description": "Automated Device Enrollment Profile status",
            "allOf": [
              {
                "$ref": "#/definitions/ProfileStatus"
              }
            ],
            "x-enumType": "ProfileStatus"
          },
          "ProfileAssignTime": {
            "type": "string",
            "description": "When Automated Device Enrollment Profile was assigned to device",
            "format": "date-time"
          },
          "ProfilePushTime": {
            "type": "string",
            "description": "When Automated Device Enrollment Profile was pushed to device",
            "format": "date-time"
          }
        }
      },
      "ProfileStatus": {
        "type": "string",
        "description": "Apple DEP profile statuses",
        "x-enumNames": [
          "Unknown",
          "Empty",
          "Assigned",
          "Pushed",
          "Removed"
        ],
        "enum": [
          "Unknown",
          "Empty",
          "Assigned",
          "Pushed",
          "Removed"
        ],
        "x-enumType": "ProfileStatus"
      },
      "DeviceAppleVppInfo": {
        "type": "object",
        "description": "Returns information about the device's usage of App Store License accounts.",
        "properties": {
          "ItunesUserHash": {
            "type": "string",
            "description": "iTunes User Id Hash"
          },
          "MultipleDevicesHoldByUser": {
            "type": "boolean",
            "description": "Boolean value indicating whether the device user is holding multiple devices, \nwill be null when ItunesUserHash is null."
          },
          "AvailableAccounts": {
            "type": "array",
            "description": "Collection of App Store License account names and user status",
            "items": {
              "$ref": "#/definitions/AppleVppAccountInfo"
            }
          }
        }
      },
      "AppleVppAccountInfo": {
        "type": "object",
        "description": "Represents a class for device VPP account info",
        "required": [
          "UserStatus"
        ],
        "properties": {
          "AccountName": {
            "type": "string",
            "description": "App Store License account name"
          },
          "UserStatus": {
            "description": "App Store License account user status",
            "allOf": [
              {
                "$ref": "#/definitions/AppleVppUserStatus"
              }
            ],
            "x-enumType": "AppleVppUserStatus"
          }
        }
      },
      "AppleVppUserStatus": {
        "type": "string",
        "description": "Apple Vpp UserStatus enumeration",
        "x-enumNames": [
          "None",
          "Registered",
          "Associated",
          "Retired",
          "Deleted"
        ],
        "enum": [
          "None",
          "Registered",
          "Associated",
          "Retired",
          "Deleted"
        ],
        "x-enumType": "AppleVppUserStatus"
      },
      "ContentFile": {
        "type": "object",
        "description": "Content Library File",
        "required": [
          "Size",
          "Status"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Friendly Name"
          },
          "Extension": {
            "type": "string",
            "description": "Gets or sets the extension."
          },
          "Size": {
            "type": "integer",
            "description": "File Size",
            "format": "int64"
          },
          "Version": {
            "type": "string",
            "description": "File Version"
          },
          "Status": {
            "description": "Content deployment status",
            "allOf": [
              {
                "$ref": "#/definitions/ContentStatus"
              }
            ],
            "x-enumType": "ContentStatus"
          }
        }
      },
      "ContentStatus": {
        "type": "string",
        "description": "Defines the possible package installation statuses.",
        "x-enumNames": [
          "Downloaded",
          "OnDemand",
          "Downloading",
          "Viewed",
          "NotUntil",
          "Expired",
          "Removed",
          "PendingRemove",
          "DownloadFailInsufficientStorage",
          "DownloadFail",
          "Unknown"
        ],
        "enum": [
          "Downloaded",
          "OnDemand",
          "Downloading",
          "Viewed",
          "NotUntil",
          "Expired",
          "Removed",
          "PendingRemove",
          "DownloadFailInsufficientStorage",
          "DownloadFail",
          "Unknown"
        ],
        "x-enumType": "ContentStatus"
      },
      "GenerateUnlockCode": {
        "type": "object",
        "description": "Generate Unlock Code information for a windows CE device",
        "properties": {
          "UnlockCode": {
            "type": "string",
            "description": "Unlock Code"
          }
        }
      },
      "EncryptedFile": {
        "type": "object",
        "description": "Encrypted file",
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Gets ot sets a reference Id for the encrypted file"
          }
        }
      },
      "SoftwareUpdates": {
        "type": "object",
        "description": "Represents a class for device Software Updates",
        "properties": {
          "AvailableUpdates": {
            "type": "array",
            "description": "Gets collection of device Available Updates",
            "items": {
              "$ref": "#/definitions/AppleSoftwareUpdate"
            }
          },
          "LastAvailableScanTime": {
            "type": "string",
            "description": "Gets last Scan Time for available device software updates",
            "format": "date-time"
          },
          "DeviceId": {
            "type": "string",
            "description": "Gets collection of device Available Updates"
          }
        }
      },
      "AppleSoftwareUpdate": {
        "type": "object",
        "description": "Represents a class for device Apple Software Update",
        "properties": {
          "SoftwareVersion": {
            "description": "Gets Software Version value",
            "allOf": [
              {
                "$ref": "#/definitions/AppleSoftwareVersion"
              }
            ]
          },
          "UpdateStatus": {
            "description": "Gets Update Status value",
            "allOf": [
              {
                "$ref": "#/definitions/UpdateStatus"
              }
            ],
            "x-enumType": "UpdateStatus"
          },
          "LastUpdateStatusTime": {
            "type": "string",
            "description": "Gets Last Update Status Time value",
            "format": "date-time"
          },
          "DownloadPercentComplete": {
            "type": "number",
            "description": "Gets or sets a value indicating Percentage of download that is complete. Floating point\nnumber (0.0 to 1.0)",
            "format": "double"
          },
          "IsDownloaded": {
            "type": "boolean",
            "description": "Gets or sets a value indicating if the update is downloaded"
          }
        }
      },
      "AppleSoftwareVersion": {
        "type": "object",
        "description": "Represents a class Apple Software Version",
        "required": [
          "Id",
          "IsCritical",
          "IsRestartRequired",
          "IsAllowInstallLater",
          "IsMajorOSUpdate"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets version Id value",
            "format": "int32"
          },
          "ProductName": {
            "type": "string",
            "description": "Gets or sets Product Name value"
          },
          "ProductKey": {
            "type": "string",
            "description": "Gets or sets Product Key value"
          },
          "SoftwareVersion": {
            "type": "string",
            "description": "Gets or sets Version value"
          },
          "Build": {
            "type": "string",
            "description": "Gets or sets Build value"
          },
          "DownloadSize": {
            "type": "integer",
            "description": "Gets or sets Download Size value",
            "format": "int64"
          },
          "InstallSize": {
            "type": "integer",
            "description": "Gets or sets Install Size value",
            "format": "int64"
          },
          "IsCritical": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the update is critical"
          },
          "IsRestartRequired": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the restart is required after update installation"
          },
          "IsAllowInstallLater": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the update can be installed later"
          },
          "HumanReadableName": {
            "type": "string",
            "description": "Gets or sets humanReadableName"
          },
          "AppIdentifiersToClose": {
            "type": "array",
            "description": "Gets or sets App identifier to close",
            "items": {
              "type": "string"
            }
          },
          "IsMajorOSUpdate": {
            "type": "boolean",
            "description": "Gets or sets for Major OS Update"
          }
        }
      },
      "UpdateStatus": {
        "type": "string",
        "description": "Enumeration represents statuses for the available Apple software update",
        "x-enumNames": [
          "Idle",
          "Downloading",
          "DownloadFailed",
          "DownloadRequiresComputer",
          "DownloadInsufficientSpace",
          "DownloadInsufficientPower",
          "DownloadInsufficientNetwork",
          "Installing",
          "InstallInsufficientSpace",
          "InstallInsufficientPower",
          "InstallInsufficientNetwork",
          "InstallPhoneCallInProgress",
          "InstallFailed"
        ],
        "enum": [
          "Idle",
          "Downloading",
          "DownloadFailed",
          "DownloadRequiresComputer",
          "DownloadInsufficientSpace",
          "DownloadInsufficientPower",
          "DownloadInsufficientNetwork",
          "Installing",
          "InstallInsufficientSpace",
          "InstallInsufficientPower",
          "InstallInsufficientNetwork",
          "InstallPhoneCallInProgress",
          "InstallFailed"
        ],
        "x-enumType": "UpdateStatus"
      },
      "LinuxOSSoftwareUpdate": {
        "type": "object",
        "description": "Represents a class for Linux Device OS Software Update",
        "properties": {
          "AvailableOSVersion": {
            "type": "string",
            "description": "Gets Available OS Version for update "
          },
          "LastAvailableScanTime": {
            "type": "string",
            "description": "Gets last Scan Time for available OS update ",
            "format": "date-time"
          }
        }
      },
      "DeviceCompliancePolicy": {
        "type": "object",
        "description": "Compliance policy status on a specific device\n            ",
        "required": [
          "Status"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Reference ID of this compliance policy\n            "
          },
          "DeviceId": {
            "type": "string",
            "description": "Device Id\n            "
          },
          "Name": {
            "type": "string",
            "description": "Name of this compliance policy\n            "
          },
          "Status": {
            "description": "Status of the policy applied on the device\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceCompliancePolicyStatus"
              }
            ],
            "x-enumType": "DeviceCompliancePolicyStatus"
          },
          "Description": {
            "type": "string",
            "description": "Description of this compliance policy\n            "
          },
          "NonComplianceDate": {
            "type": "string",
            "description": "If Status = 'Non-compliant', the UTC date/time of when the device was first found to be non-compliant with this compliance policy\n            ",
            "format": "date-time"
          },
          "LastComplianceCheckDate": {
            "type": "string",
            "description": "The UTC date/time of the last time the compliance policy was evaluated for this device\n            ",
            "format": "date-time"
          }
        }
      },
      "ExecutedActionInfo": {
        "type": "object",
        "description": "Executable compliance action",
        "required": [
          "CreateDate",
          "ActionType",
          "Status",
          "ActionInfoDescriptor"
        ],
        "properties": {
          "CreateDate": {
            "type": "string",
            "description": "Created date",
            "format": "date-time"
          },
          "ActionType": {
            "description": "Executable action type\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/ExecutableActionTypeId"
              }
            ],
            "x-enumType": "ExecutableActionTypeId"
          },
          "Status": {
            "description": "Executable action status",
            "allOf": [
              {
                "$ref": "#/definitions/ExecutableActionStatus"
              }
            ],
            "x-enumType": "ExecutableActionStatus"
          },
          "UpdateDate": {
            "type": "string",
            "description": "Update time",
            "format": "date-time"
          },
          "ActionInfoDescriptor": {
            "description": "Action Info Descriptor",
            "allOf": [
              {
                "$ref": "#/definitions/ComplianceActionInfoDescriptor"
              }
            ],
            "x-enumType": "ComplianceActionInfoDescriptor"
          },
          "Details": {
            "type": "string",
            "description": "Executed action details"
          }
        }
      },
      "ExecutableActionTypeId": {
        "type": "string",
        "description": "Executable Action Type",
        "x-enumNames": [
          "Unknown",
          "ExchangeBlockAccess",
          "ExchangeAllowAccess",
          "ExchangeDefaultAccess",
          "EmailNotification",
          "AzureConditionalAccessDeviceCompliant",
          "AzureConditionalAccessDeviceNotCompliant",
          "AzureConditionalAccessDeviceReset"
        ],
        "enum": [
          "Unknown",
          "ExchangeBlockAccess",
          "ExchangeAllowAccess",
          "ExchangeDefaultAccess",
          "EmailNotification",
          "AzureConditionalAccessDeviceCompliant",
          "AzureConditionalAccessDeviceNotCompliant",
          "AzureConditionalAccessDeviceReset"
        ],
        "x-enumType": "ExecutableActionTypeId"
      },
      "ExecutableActionStatus": {
        "type": "string",
        "description": "Executable action status",
        "x-enumNames": [
          "Pending",
          "Success",
          "Failure",
          "Rejected"
        ],
        "enum": [
          "Pending",
          "Success",
          "Failure",
          "Rejected"
        ],
        "x-enumType": "ExecutableActionStatus"
      },
      "XtHubConfiguration": {
        "type": "object",
        "description": "XTreme Hub Advanced Configuration",
        "required": [
          "Port",
          "IsXtremeHubEnabled"
        ],
        "properties": {
          "FileStoragePath": {
            "type": "string",
            "description": "Gets or sets the server folder path."
          },
          "Port": {
            "type": "integer",
            "description": "Gets or sets the port.",
            "format": "int32"
          },
          "TargetGroupPath": {
            "type": "string",
            "description": "Device group path that XTreme Hub is targeting"
          },
          "IsXtremeHubEnabled": {
            "type": "boolean",
            "description": "Gets or sets flag indicating XtremeHub enabled."
          }
        }
      },
      "DeviceActionScript": {
        "type": "object",
        "description": "Represents an action script used in 'SendScript' device action.",
        "required": [
          "Id",
          "Name",
          "Content"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets the file id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets the name of the file.",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Content": {
            "type": "string",
            "description": "Gets or sets the file contents.",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "ScriptType": {
            "description": "Gets or sets the type of the script (Legacy/JavaScript).\nScriptType is nullable for compatibility with legacy UI.",
            "allOf": [
              {
                "$ref": "#/definitions/ScriptType"
              }
            ],
            "x-enumType": "ScriptType"
          }
        }
      },
      "DirectoryEntry": {
        "type": "object",
        "x-abstract": true,
        "required": [
          "Kind"
        ],
        "properties": {
          "Kind": {
            "$ref": "#/definitions/DirectoryEntryKind",
            "x-enumType": "DirectoryEntryKind"
          },
          "Name": {
            "type": "string"
          },
          "Server": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          },
          "Guid": {
            "type": "string"
          }
        }
      },
      "DirectoryEntryKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "User",
          "Group"
        ],
        "enum": [
          "User",
          "Group"
        ],
        "x-enumType": "DirectoryEntryKind"
      },
      "DirectoryGroup": {
        "allOf": [
          {
            "$ref": "#/definitions/DirectoryEntry"
          },
          {
            "type": "object"
          }
        ]
      },
      "DirectoryUser": {
        "allOf": [
          {
            "$ref": "#/definitions/DirectoryEntry"
          },
          {
            "type": "object",
            "properties": {
              "Upn": {
                "type": "string"
              },
              "EmailAddress": {
                "type": "string"
              },
              "FirstName": {
                "type": "string"
              },
              "LastName": {
                "type": "string"
              },
              "MiddleName": {
                "type": "string"
              },
              "PasswordExpiryDate": {
                "type": "string",
                "format": "date-time"
              },
              "PhoneNumber": {
                "type": "string"
              },
              "DomainName": {
                "type": "string"
              },
              "DisplayName": {
                "type": "string"
              },
              "CustomProperty1": {
                "type": "string"
              },
              "CustomProperty2": {
                "type": "string"
              },
              "CustomProperty3": {
                "type": "string"
              }
            }
          }
        ]
      },
      "DirectorySearchType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Both",
          "User",
          "Group"
        ],
        "enum": [
          "Both",
          "User",
          "Group"
        ],
        "x-enumType": "DirectorySearchType"
      },
      "LdapSyncInterval": {
        "type": "object",
        "properties": {
          "Period": {
            "type": "string",
            "format": "time-span"
          }
        }
      },
      "DirectoryEntryResponse": {
        "type": "object",
        "required": [
          "DirectoryKind",
          "Port"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "DirectoryKind": {
            "$ref": "#/definitions/ContextProviderType",
            "x-enumType": "ContextProviderType"
          },
          "Server": {
            "type": "string"
          },
          "Port": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ContextProviderType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Undefined",
          "ActiveDirectory",
          "OpenDirectory",
          "Domino",
          "AzureActiveDirectory"
        ],
        "enum": [
          "Undefined",
          "ActiveDirectory",
          "OpenDirectory",
          "Domino",
          "AzureActiveDirectory"
        ],
        "x-enumType": "ContextProviderType"
      },
      "DirectoryResponse": {
        "type": "object",
        "required": [
          "DirectoryKind"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "DirectoryKind": {
            "$ref": "#/definitions/ContextProviderType",
            "x-enumType": "ContextProviderType"
          }
        }
      },
      "AzureApplicationType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "AzureAdJoinCloudEnrollment",
          "MicrosoftSso"
        ],
        "enum": [
          "None",
          "AzureAdJoinCloudEnrollment",
          "MicrosoftSso"
        ],
        "x-enumType": "AzureApplicationType"
      },
      "LdapConnection": {
        "type": "object",
        "required": [
          "Port",
          "EncryptionType",
          "AuthenticationType",
          "AcceptUntrustedCertificate",
          "ProviderType",
          "FollowReferrals",
          "FollowStaticReferrals"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Server": {
            "type": "string"
          },
          "Port": {
            "type": "integer",
            "format": "int32"
          },
          "EncryptionType": {
            "$ref": "#/definitions/EncryptionType",
            "x-enumType": "EncryptionType"
          },
          "AuthenticationType": {
            "$ref": "#/definitions/AuthenticationType",
            "x-enumType": "AuthenticationType"
          },
          "AcceptUntrustedCertificate": {
            "type": "boolean"
          },
          "UserName": {
            "type": "string"
          },
          "UserPassword": {
            "type": "string"
          },
          "RootContainer": {
            "type": "string"
          },
          "ProviderType": {
            "$ref": "#/definitions/ContextProviderType",
            "x-enumType": "ContextProviderType"
          },
          "Schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LdapAttribute"
            }
          },
          "CloudLinkName": {
            "type": "string"
          },
          "FollowReferrals": {
            "type": "boolean"
          },
          "FollowStaticReferrals": {
            "type": "boolean"
          }
        }
      },
      "EncryptionType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Ssl"
        ],
        "enum": [
          "None",
          "Ssl"
        ],
        "x-enumType": "EncryptionType"
      },
      "AuthenticationType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Anonymous",
          "Basic",
          "Negotiate",
          "Kerberos"
        ],
        "enum": [
          "Anonymous",
          "Basic",
          "Negotiate",
          "Kerberos"
        ],
        "x-enumType": "AuthenticationType"
      },
      "LdapAttribute": {
        "type": "object",
        "required": [
          "IsRequired"
        ],
        "properties": {
          "AttributeName": {
            "type": "string"
          },
          "AttributeValue": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "AttributeGroup": {
            "type": "string"
          },
          "IsRequired": {
            "type": "boolean"
          }
        }
      },
      "TestConnectionResponse": {
        "type": "object",
        "required": [
          "ConnectionResult",
          "ErrorCode"
        ],
        "properties": {
          "ConnectionResult": {
            "type": "boolean"
          },
          "ErrorMessage": {
            "type": "string"
          },
          "ErrorCode": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AzureGroup": {
        "type": "object",
        "required": [
          "AzureApplicationType"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "AzureGraphApiAddress": {
            "type": "string"
          },
          "OpenIdConnectMetadataEndpointAddress": {
            "type": "string"
          },
          "AzureApplicationId": {
            "type": "string"
          },
          "AzureTenantId": {
            "type": "string"
          },
          "AzureApplicationName": {
            "type": "string"
          },
          "AzureTenantName": {
            "type": "string"
          },
          "AzureApplicationType": {
            "$ref": "#/definitions/AzureApplicationType",
            "x-enumType": "AzureApplicationType"
          }
        }
      },
      "AzureTenant": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "AzureTenantId": {
            "type": "string"
          },
          "AzureTenantName": {
            "type": "string"
          },
          "MetadataEndpointAddress": {
            "type": "string"
          },
          "OpenIdConnectMetadataEndpointAddress": {
            "type": "string"
          },
          "FederationMetadataId": {
            "type": "string"
          }
        }
      },
      "AzureApplication": {
        "type": "object",
        "required": [
          "AzureApplicationType"
        ],
        "properties": {
          "ApplicationReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ClientId": {
            "type": "string"
          },
          "ClientSecret": {
            "type": "string"
          },
          "TenantId": {
            "type": "string"
          },
          "AzureApplicationType": {
            "$ref": "#/definitions/AzureApplicationType",
            "x-enumType": "AzureApplicationType"
          }
        }
      },
      "EmailProfile": {
        "type": "object",
        "description": "The EmailProfile is used for sending Email messages and\nsetting up automatic email schedules\n            ",
        "required": [
          "Name",
          "PortNumber",
          "Priority",
          "Timeout",
          "UseSSL"
        ],
        "properties": {
          "Message": {
            "type": "string",
            "description": "The default message that is inserted when sending an Email using this Profile\n            "
          },
          "Name": {
            "type": "string",
            "description": "The name of the Email Profile\n            ",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "PortNumber": {
            "type": "integer",
            "description": "The target SMTP port\n            ",
            "format": "int32"
          },
          "Priority": {
            "type": "integer",
            "description": "The priority level assigned to Emails sent using this Profile\n            "
          },
          "Recipients": {
            "type": "array",
            "description": "A collection of all default EmailRecipient targets for this EmailProfile\n            ",
            "items": {
              "$ref": "#/definitions/EmailRecipient"
            }
          },
          "Schedules": {
            "type": "array",
            "description": "A collection of all EmailSchedule items that trigger an Email message via this\nEmailProfile\n            ",
            "items": {
              "$ref": "#/definitions/EmailScheduleSection"
            }
          },
          "ScheduleTimeZoneId": {
            "type": "string",
            "description": "The time zone identifier that all EmailSchedule items use\n            "
          },
          "SenderAddress": {
            "type": "string",
            "description": "The from: address used for Emails sent using this Profile\n            "
          },
          "SenderName": {
            "type": "string",
            "description": "The name for the outgoing sender on Email messages sent using this Profile\n            "
          },
          "SmtpHostName": {
            "type": "string",
            "description": "The hostname for the target SMTP server\n            "
          },
          "Subject": {
            "type": "string",
            "description": "The default subject used for Email messages sent with this Profile\n            "
          },
          "Timeout": {
            "type": "integer",
            "description": "The Email send timeout period (in seconds)\n            ",
            "format": "int32"
          },
          "UserId": {
            "type": "string",
            "description": "The user ID that is utilized when connecting to the target SMTP server\n            "
          },
          "UseSSL": {
            "type": "boolean",
            "description": "Whether the connection to the target SMTP server is done using SSL\n            "
          }
        }
      },
      "EmailRecipient": {
        "type": "object",
        "description": "The EmailRecipient is used to denote targets for the To, CC, and BCC fields\nwhen sending an Email message using an EmailProfile",
        "required": [
          "EmailType",
          "Enabled"
        ],
        "properties": {
          "EmailAddress": {
            "type": "string",
            "description": "The individual Email Address of this EmailRecipient"
          },
          "Name": {
            "type": "string",
            "description": "The name of this EmailRecipient"
          },
          "EmailType": {
            "description": "How this EmailRecipient receives a given email (To, CC, BCC)",
            "allOf": [
              {
                "$ref": "#/definitions/EmailRecipientType"
              }
            ],
            "x-enumType": "EmailRecipientType"
          },
          "Enabled": {
            "type": "boolean",
            "description": "Whether or not this EmailRecipient is currently enabled"
          }
        }
      },
      "EmailRecipientType": {
        "type": "string",
        "description": "An EmailRecipientType value indicates what type of target\na given EmailRecipient is in relation to an EmailProfile",
        "x-enumNames": [
          "Recipient",
          "CC",
          "Bcc"
        ],
        "enum": [
          "Recipient",
          "CC",
          "Bcc"
        ],
        "x-enumType": "EmailRecipientType"
      },
      "EmailScheduleSection": {
        "type": "object",
        "description": "An EmailSchedule indicates the frequency\na scheduled Email is send through an attached EmailProfile",
        "required": [
          "ScheduleType",
          "StartTimeHours",
          "StartTimeMinutes",
          "EndTimeHours",
          "EndTimeMinutes"
        ],
        "properties": {
          "ScheduleType": {
            "description": "Indicates the schedule that this EmailSchedule activates on",
            "allOf": [
              {
                "$ref": "#/definitions/EmailScheduleType"
              }
            ],
            "x-enumType": "EmailScheduleType"
          },
          "StartTimeHours": {
            "type": "integer",
            "description": "The hour that this EmailSchedule activates",
            "format": "int32"
          },
          "StartTimeMinutes": {
            "type": "integer",
            "description": "The minutes past StartTimeHours that this EmailSchedule activates",
            "format": "int32"
          },
          "EndTimeHours": {
            "type": "integer",
            "description": "The hours that this EmailSchedule deactivates",
            "format": "int32"
          },
          "EndTimeMinutes": {
            "type": "integer",
            "description": "The minutes past EndTimeHours that this EmailSchedule deactivates",
            "format": "int32"
          }
        }
      },
      "EmailScheduleType": {
        "type": "string",
        "description": "Indicates the type of schedule a given EmailSchedule uses for \nsend frequency",
        "x-enumNames": [
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday",
          "Daily",
          "Weekday",
          "Weekend"
        ],
        "enum": [
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday",
          "Daily",
          "Weekday",
          "Weekend"
        ],
        "x-enumType": "EmailScheduleType"
      },
      "UserUnenrollmentSettings": {
        "type": "object",
        "description": "These settings will be applicable only when device is unenrolled by device owner",
        "required": [
          "DeleteDeviceOnUnenroll",
          "RevokeCertificatesOnUnenroll"
        ],
        "properties": {
          "DeleteDeviceOnUnenroll": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether device should be deleted from the system when user unenrolls device."
          },
          "RevokeCertificatesOnUnenroll": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether certificates should be revoked from the system when user unenrolls device."
          }
        }
      },
      "ExternalServicesStatus": {
        "type": "object",
        "description": "Status of External Services",
        "required": [
          "Status"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Service Name"
          },
          "Status": {
            "description": "Status",
            "allOf": [
              {
                "$ref": "#/definitions/ServiceStatus"
              }
            ],
            "x-enumType": "ServiceStatus"
          }
        }
      },
      "ServiceStatus": {
        "type": "string",
        "description": "External Services Status Values",
        "x-enumNames": [
          "Unreachable",
          "Online"
        ],
        "enum": [
          "Unreachable",
          "Online"
        ],
        "x-enumType": "ServiceStatus"
      },
      "Geofence": {
        "type": "object",
        "description": "A geofence model",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets the geofence name."
          },
          "Vertices": {
            "type": "array",
            "description": "Gets or sets the collection of vertices in the geofence.",
            "items": {
              "$ref": "#/definitions/LatLong"
            }
          }
        }
      },
      "LatLong": {
        "type": "object",
        "description": "Represents a latitude/longitude coordinate.",
        "required": [
          "Latitude",
          "Longitude"
        ],
        "properties": {
          "Latitude": {
            "type": "number",
            "description": "Gets or sets the point's latitude.",
            "format": "double"
          },
          "Longitude": {
            "type": "number",
            "description": "Gets or sets the point's longitude.",
            "format": "double"
          }
        }
      },
      "GeofenceAdd": {
        "type": "object",
        "description": "Contract for adding a geofence",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets the geofence name."
          },
          "Vertices": {
            "type": "array",
            "description": "Gets or sets the collection of vertices in the geofence.",
            "items": {
              "$ref": "#/definitions/LatLong"
            }
          }
        }
      },
      "GeofenceSummary": {
        "type": "object",
        "description": "A geofence model",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets the geofence name."
          }
        }
      },
      "GeofenceRename": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          }
        }
      },
      "IdentityProvider": {
        "type": "object",
        "required": [
          "Kind"
        ],
        "properties": {
          "Kind": {
            "$ref": "#/definitions/IdentityProviderKind",
            "x-enumType": "IdentityProviderKind"
          },
          "Name": {
            "type": "string"
          },
          "ReferenceId": {
            "type": "string"
          }
        }
      },
      "IdentityProviderKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "SotiIdentityProvider",
          "ExternalIdentityProvider"
        ],
        "enum": [
          "SotiIdentityProvider",
          "ExternalIdentityProvider"
        ],
        "x-enumType": "IdentityProviderKind"
      },
      "ExternalIdentityProvider": {
        "allOf": [
          {
            "$ref": "#/definitions/IdentityProvider"
          },
          {
            "type": "object",
            "required": [
              "GroupLookupMethod"
            ],
            "properties": {
              "AttributeMappings": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AttributeMapping"
                }
              },
              "Certificates": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/IdentityProviderCertificate"
                }
              },
              "GroupListAttribute": {
                "type": "string"
              },
              "GroupListDelimiter": {
                "type": "string"
              },
              "GroupLookupMethod": {
                "$ref": "#/definitions/SsoGroupLookupMethod"
              },
              "LdapConnectionId": {
                "type": "integer",
                "format": "int32"
              },
              "LdapConnectionReferenceId": {
                "type": "string"
              },
              "LogOffUrl": {
                "type": "string"
              },
              "MetadataUrl": {
                "type": "string"
              },
              "MetadataEntityId": {
                "type": "string"
              },
              "SingleSignOnUrl": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AttributeMapping": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "IdentityProviderCertificate": {
        "type": "object",
        "properties": {
          "Issuer": {
            "type": "string"
          },
          "NotAfterDate": {
            "type": "string",
            "format": "date-time"
          },
          "NotBeforeDate": {
            "type": "string",
            "format": "date-time"
          },
          "Subject": {
            "type": "string"
          },
          "Thumbprint": {
            "type": "string"
          },
          "SerialNumber": {
            "type": "string"
          },
          "Base64Content": {
            "type": "string"
          }
        }
      },
      "SsoGroupLookupMethod": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Ldap",
          "GroupMapping"
        ],
        "enum": [
          "Ldap",
          "GroupMapping"
        ],
        "x-enumType": "SsoGroupLookupMethod"
      },
      "SotiIdentityProvider": {
        "allOf": [
          {
            "$ref": "#/definitions/IdentityProvider"
          },
          {
            "type": "object",
            "properties": {
              "BaseUri": {
                "type": "string",
                "format": "uri"
              },
              "ClientId": {
                "type": "string"
              },
              "ClientSecret": {
                "type": "string"
              }
            }
          }
        ]
      },
      "IdentityProviderUser": {
        "type": "object",
        "properties": {
          "SsoEntityReferenceId": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "Identifier": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "Upn": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "MiddleName": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "CustomProperty1": {
            "type": "string"
          },
          "CustomProperty2": {
            "type": "string"
          },
          "CustomProperty3": {
            "type": "string"
          }
        }
      },
      "IdentityProviderDirectoryEntry": {
        "type": "object",
        "x-abstract": true,
        "required": [
          "Kind"
        ],
        "properties": {
          "Kind": {
            "$ref": "#/definitions/DirectoryEntryKind2",
            "x-enumType": "DirectoryEntryKind"
          },
          "Name": {
            "type": "string"
          },
          "Server": {
            "type": "string"
          },
          "Sid": {
            "type": "string"
          },
          "Guid": {
            "type": "string"
          }
        }
      },
      "DirectoryEntryKind2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "User",
          "Group"
        ],
        "enum": [
          "User",
          "Group"
        ],
        "x-enumType": "DirectoryEntryKind"
      },
      "IdentityProviderDirectoryGroup": {
        "allOf": [
          {
            "$ref": "#/definitions/IdentityProviderDirectoryEntry"
          },
          {
            "type": "object"
          }
        ]
      },
      "IdentityProviderDirectoryUser": {
        "allOf": [
          {
            "$ref": "#/definitions/IdentityProviderDirectoryEntry"
          },
          {
            "type": "object",
            "properties": {
              "Upn": {
                "type": "string"
              },
              "EmailAddress": {
                "type": "string"
              },
              "FirstName": {
                "type": "string"
              },
              "LastName": {
                "type": "string"
              },
              "MiddleName": {
                "type": "string"
              },
              "PasswordExpiryDate": {
                "type": "string",
                "format": "date-time"
              },
              "PhoneNumber": {
                "type": "string"
              },
              "DomainName": {
                "type": "string"
              },
              "DisplayName": {
                "type": "string"
              },
              "CustomProperty1": {
                "type": "string"
              },
              "CustomProperty2": {
                "type": "string"
              },
              "CustomProperty3": {
                "type": "string"
              }
            }
          }
        ]
      },
      "DirectorySearchType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Both",
          "User",
          "Group"
        ],
        "enum": [
          "Both",
          "User",
          "Group"
        ],
        "x-enumType": "DirectorySearchType"
      },
      "UpdateSotiIdentityProvider": {
        "type": "object",
        "properties": {
          "ClientSecret": {
            "type": "string"
          }
        }
      },
      "BackgroundJob": {
        "type": "object",
        "description": "Contract for a ",
        "required": [
          "JobStatus",
          "StartDateTime"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Job reference identifier."
          },
          "JobStatus": {
            "description": "The job status.",
            "allOf": [
              {
                "$ref": "#/definitions/JobStatus"
              }
            ],
            "x-enumType": "JobStatus"
          },
          "StartDateTime": {
            "type": "string",
            "description": "Job start date time.",
            "format": "date-time"
          },
          "EndDateTime": {
            "type": "string",
            "description": "Job end date time.",
            "format": "date-time"
          },
          "Server": {
            "type": "string",
            "description": "Identifier of of a server where the job is running"
          },
          "JobType": {
            "type": "string",
            "description": "Type of the job."
          },
          "EntityType": {
            "type": "string",
            "description": "Type of the entity affected by the job."
          },
          "EntityReferenceId": {
            "type": "string",
            "description": "Entity reference identifier."
          },
          "EntityDisplayName": {
            "type": "string",
            "description": "Gets or sets the display name of the entity for example Virtual Group Name."
          }
        }
      },
      "JobStatus": {
        "type": "string",
        "description": "Job statuses",
        "x-enumNames": [
          "NotSpecified",
          "Pending",
          "InProgress",
          "Rejected",
          "Completed",
          "Cancelled",
          "Failed"
        ],
        "enum": [
          "NotSpecified",
          "Pending",
          "InProgress",
          "Rejected",
          "Completed",
          "Cancelled",
          "Failed"
        ],
        "x-enumType": "JobStatus"
      },
      "LocateTimeout": {
        "type": "object",
        "description": "Locate Timeout",
        "required": [
          "Timeout"
        ],
        "properties": {
          "Timeout": {
            "type": "integer",
            "description": "Gets or sets the timeout.",
            "format": "int32",
            "maximum": 120.0,
            "minimum": 5.0,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              },
              {
                "type": "rangeValidator",
                "min": 5,
                "max": 120,
                "errorMessage": null
              }
            ]
          }
        }
      },
      "LogEventDescriptor": {
        "type": "object",
        "required": [
          "EventId"
        ],
        "properties": {
          "EventId": {
            "type": "integer",
            "format": "int32"
          },
          "EventCode": {
            "type": "string"
          },
          "EventName": {
            "type": "string"
          },
          "EventAlertMessage": {
            "type": "string"
          }
        }
      },
      "LogEntry": {
        "type": "object",
        "required": [
          "Timestamp",
          "EventSeverity",
          "LogSource",
          "EventId"
        ],
        "properties": {
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "EventSeverity": {
            "$ref": "#/definitions/EventSeverity2",
            "x-enumType": "EventSeverity"
          },
          "Message": {
            "type": "string"
          },
          "LogSource": {
            "$ref": "#/definitions/EventOriginator2",
            "x-enumType": "EventOriginator"
          },
          "SourceName": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          },
          "DeviceName": {
            "type": "string"
          },
          "DeviceId": {
            "type": "string"
          },
          "EventId": {
            "type": "integer",
            "format": "int32"
          },
          "EventCode": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          }
        }
      },
      "ServerType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Deployment",
          "ManagementService",
          "MailServer",
          "Unknown"
        ],
        "enum": [
          "Deployment",
          "ManagementService",
          "MailServer",
          "Unknown"
        ],
        "x-enumType": "ServerType"
      },
      "AvailableAgentLogTypes": {
        "type": "object",
        "properties": {
          "AgentLogTypes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AgentLogType"
            },
            "x-enumType": "AgentLogType"
          }
        }
      },
      "AgentLogType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Debug",
          "Install",
          "FileEncryption",
          "Security",
          "PreRebootSecurity",
          "Adb"
        ],
        "enum": [
          "Debug",
          "Install",
          "FileEncryption",
          "Security",
          "PreRebootSecurity",
          "Adb"
        ],
        "x-enumType": "AgentLogType"
      },
      "Package": {
        "type": "object",
        "description": "Package",
        "required": [
          "DeviceFamily",
          "CreatedDate",
          "TotalVersions"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Gets or sets custom id of a package"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets the package name."
          },
          "DeviceFamily": {
            "description": "Gets or sets package's target device family",
            "allOf": [
              {
                "$ref": "#/definitions/PackageDeviceFamily"
              }
            ],
            "x-enumType": "PackageDeviceFamily"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Gets or sets created date",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "description": "Gets or sets created by"
          },
          "TotalVersions": {
            "type": "integer",
            "description": "Gets or sets the total number of versions of a package",
            "format": "int32"
          },
          "LastVersion": {
            "description": "Gets or sets the last version.",
            "allOf": [
              {
                "$ref": "#/definitions/PackageVersion"
              }
            ]
          }
        }
      },
      "PackageDeviceFamily": {
        "type": "string",
        "description": "Device Family",
        "x-enumNames": [
          "All",
          "WindowsCE",
          "WindowsDesktop",
          "AndroidPlus",
          "WindowsPhone",
          "Printer",
          "Linux"
        ],
        "enum": [
          "All",
          "WindowsCE",
          "WindowsDesktop",
          "AndroidPlus",
          "WindowsPhone",
          "Printer",
          "Linux"
        ],
        "x-enumType": "PackageDeviceFamily"
      },
      "PackageVersion": {
        "type": "object",
        "description": "Package Version",
        "required": [
          "Size",
          "ExtraSize",
          "InstallPrompt",
          "UploadDate"
        ],
        "properties": {
          "Version": {
            "type": "string",
            "description": "Gets or sets the package external version (visible to users)."
          },
          "BuildVersion": {
            "type": "string",
            "description": "Gets or sets the package internal version (generated by package studio)."
          },
          "OSVersion": {
            "type": "string",
            "description": "Gets or sets the OS version that the package targets."
          },
          "Processor": {
            "type": "string",
            "description": "Gets or sets the processor that the package targets."
          },
          "Vendor": {
            "type": "string",
            "description": "Gets or sets the vendor that created the package."
          },
          "Comment": {
            "type": "string",
            "description": "Gets or sets any comments associated with the package."
          },
          "Size": {
            "type": "integer",
            "description": "Gets or sets size of the package.",
            "format": "int32"
          },
          "ExtraSize": {
            "type": "integer",
            "description": "Gets or sets extra size of the package if required. otherwise has to be 0.",
            "format": "int32"
          },
          "InstallPrompt": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device should show an installation prompt."
          },
          "UploadDate": {
            "type": "string",
            "description": "Gets or sets date ou upload of the version",
            "format": "date-time"
          },
          "UploadedBy": {
            "type": "string",
            "description": "Gets or sets uploaded by"
          }
        }
      },
      "PackageGenerationJob": {
        "type": "object",
        "description": "Represents a Package Generation Job object",
        "required": [
          "StartDateTime"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Job reference identifier."
          },
          "JobStatus": {
            "type": "string",
            "description": "The job status."
          },
          "StartDateTime": {
            "type": "string",
            "description": "Job start date time.",
            "format": "date-time"
          },
          "EndDateTime": {
            "type": "string",
            "description": "Job end date time.",
            "format": "date-time"
          },
          "JobType": {
            "type": "string",
            "description": "Type of the job."
          }
        }
      },
      "PackageProfileStatus": {
        "type": "object",
        "description": "Represents package information contract\n            ",
        "required": [
          "Status"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Gets custom id"
          },
          "Name": {
            "type": "string",
            "description": "Gets profile name"
          },
          "Description": {
            "type": "string",
            "description": "Gets profile description"
          },
          "AssignedDate": {
            "type": "string",
            "description": "Gets or sets the date when the active profile was assigned.",
            "format": "date-time"
          },
          "AssignedBy": {
            "type": "string",
            "description": "Gets or sets the user who assigned the active (assigned) profile."
          },
          "Status": {
            "description": "Gets profile status",
            "allOf": [
              {
                "$ref": "#/definitions/ProfileVersionStatus"
              }
            ],
            "x-enumType": "ProfileVersionStatus"
          },
          "PackageVersion": {
            "type": "string",
            "description": "Gets or sets the associated PackageVersion."
          }
        }
      },
      "ProfileVersionStatus": {
        "type": "string",
        "description": "Represents valid states for profile versions",
        "x-enumNames": [
          "Draft",
          "Assigned",
          "Disabled",
          "Revoked",
          "Retired",
          "Scheduled",
          "Abandoned",
          "DraftIncomplete"
        ],
        "enum": [
          "Draft",
          "Assigned",
          "Disabled",
          "Revoked",
          "Retired",
          "Scheduled",
          "Abandoned",
          "DraftIncomplete"
        ],
        "x-enumType": "ProfileVersionStatus"
      },
      "PackageLogEntry": {
        "type": "object",
        "description": "Contains information for a package log entry",
        "required": [
          "Timestamp",
          "EventSeverity"
        ],
        "properties": {
          "Timestamp": {
            "type": "string",
            "description": "Log entry timestamp",
            "format": "date-time"
          },
          "EventSeverity": {
            "description": "Log entry severity",
            "allOf": [
              {
                "$ref": "#/definitions/EventSeverity"
              }
            ],
            "x-enumType": "EventSeverity"
          },
          "Message": {
            "type": "string",
            "description": "Log entry message"
          },
          "SourceName": {
            "type": "string",
            "description": "Log entry source name"
          }
        }
      },
      "PackageExecutionStatus": {
        "type": "object",
        "description": "Represents package execution status information contract\n            ",
        "required": [
          "Total",
          "Installed",
          "Failed",
          "Pending"
        ],
        "properties": {
          "Version": {
            "type": "string",
            "description": "Version"
          },
          "Total": {
            "type": "integer",
            "description": "Total",
            "format": "int32"
          },
          "Installed": {
            "type": "integer",
            "description": "Installed",
            "format": "int32"
          },
          "Failed": {
            "type": "integer",
            "description": "Failed",
            "format": "int32"
          },
          "Pending": {
            "type": "integer",
            "description": "Pending",
            "format": "int32"
          }
        }
      },
      "EmailDeviceReportParameters": {
        "type": "object",
        "required": [
          "FileHeaderFields",
          "IncludeSubgroups",
          "EmailProfileName",
          "AppendAddresses",
          "CompressEmailAttachment"
        ],
        "properties": {
          "FileHeaderFields": {
            "type": "array",
            "description": "Field names to be included in the report, these will be used as the header of the attached CSV file",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "GroupPath": {
            "type": "string",
            "description": "The reference ID or the path of the device group. When using reference ID, \"referenceId:\" must be prepended to the ID value"
          },
          "IncludeSubgroups": {
            "type": "boolean",
            "description": "Whether to include children of the specified group in the search"
          },
          "SearchFilter": {
            "type": "string",
            "description": "The search filter string"
          },
          "EmailProfileName": {
            "type": "string",
            "description": "The name of the profile to use when sending the email",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "ToAddresses": {
            "type": "array",
            "description": "The addresses to which the email will be sent. If specified, it will replace all 'To' addresses present in the email profile unless AppendAddresses is set to 'true'",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          },
          "AppendAddresses": {
            "type": "boolean",
            "description": "If set to 'true' then append the given list of recipients from ToAddresses, CcAddresses, and BccAddresses to those contained within the email profile; otherwise only send to the given addresses specified in ToAddresses"
          },
          "CcAddresses": {
            "type": "array",
            "description": "Any addresses to include in the CC field of the email. If specified, it will replace all CC addresses present in the email profile unless AppendAddresses is set to 'true'",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          },
          "BccAddresses": {
            "type": "array",
            "description": "Any addresses to include in the BCC field of the email. If specified, it will replace all BCC addresses present in the email profile unless AppendAddresses is set to 'true'",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          },
          "EmailSubject": {
            "type": "string",
            "description": "The subject of the email. If one is not given, the subject present in the specified email profile will be used. Should the profile not have one, the email will be sent without a subject"
          },
          "EmailBody": {
            "type": "string",
            "description": "The email message to send. If one is not given, any message present in the specified email profile will be used. If no message is found in the profile, the email will be sent with an empty message"
          },
          "TimeOffset": {
            "type": "integer",
            "description": "The local time zone offset from UTC.",
            "format": "int32"
          },
          "TimeZoneId": {
            "type": "string",
            "description": "The local time zone Id of the browser"
          },
          "CompressEmailAttachment": {
            "type": "boolean",
            "description": "Compress Email Attachment."
          }
        }
      },
      "AgentLogType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Debug",
          "Install",
          "FileEncryption",
          "Security",
          "PreRebootSecurity",
          "Adb"
        ],
        "enum": [
          "Debug",
          "Install",
          "FileEncryption",
          "Security",
          "PreRebootSecurity",
          "Adb"
        ],
        "x-enumType": "AgentLogType"
      },
      "EmailPackageReportParameters": {
        "type": "object",
        "required": [
          "ReportHeaderFields",
          "EmailProfileName",
          "AppendAddresses"
        ],
        "properties": {
          "ReportHeaderFields": {
            "type": "array",
            "description": "Field names to be included in the report, these will be used as the header of the attached CSV file",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "DeviceFamilies": {
            "type": "string",
            "description": "Report Filter Param, Only return packages that are targeting one of the families in this list. Provided as a comma-separated list of Device Family. To get list of All packages user needs to leave device families as blank or pass all device families as comma separated."
          },
          "PackageName": {
            "type": "string",
            "description": "Report Filter Param, Package Name search string"
          },
          "EmailProfileName": {
            "type": "string",
            "description": "The name of the profile to use when sending the email",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "ToAddresses": {
            "type": "array",
            "description": "The addresses to which the email will be sent. If specified, it will replace all 'To' addresses present in the email profile unless AppendAddresses is set to 'true'",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          },
          "AppendAddresses": {
            "type": "boolean",
            "description": "If set to 'true' then append the given list of recipients from ToAddresses, CcAddresses, and BccAddresses to those contained within the email profile; otherwise only send to the given addresses specified in ToAddresses"
          },
          "CcAddresses": {
            "type": "array",
            "description": "Any addresses to include in the CC field of the email. If specified, it will replace all CC addresses present in the email profile unless AppendAddresses is set to 'true'",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          },
          "BccAddresses": {
            "type": "array",
            "description": "Any addresses to include in the BCC field of the email. If specified, it will replace all BCC addresses present in the email profile unless AppendAddresses is set to 'true'",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          },
          "EmailSubject": {
            "type": "string",
            "description": "The subject of the email. If one is not given, the subject present in the specified email profile will be used. Should the profile not have one, the email will be sent without a subject"
          },
          "EmailBody": {
            "type": "string",
            "description": "The email message to send. If one is not given, any message present in the specified email profile will be used. If no message is found in the profile, the email will be sent with an empty message"
          },
          "TimeOffset": {
            "type": "integer",
            "description": "The local time zone offset from UTC.",
            "format": "int32"
          }
        }
      },
      "ProfileFilterParams": {
        "type": "object",
        "description": "Parameters used to search and filter profiles",
        "properties": {
          "NameContains": {
            "type": "string",
            "description": "Only return profiles whose name contains this value. Must\nbe URL-encoded when using special characters (e.g.\na/profilename - a%2fprofilename). When called from this\npage, it should not be encoded (a/profilename)."
          },
          "WithStatuses": {
            "type": "string",
            "description": "Only return profiles that have statuses that match one of the\nvalues in this list. Provided as a comma-separated list of\nProfileVersionStatus values."
          },
          "ForFamilies": {
            "type": "string",
            "description": "Only return profiles that are targeting one of the families\nin this list. Provided as a comma-separated list of\nDeviceFamily values."
          },
          "HasDraft": {
            "type": "boolean",
            "description": "Only return profiles that have a current draft. When false,\nonly return profiles that do not have a draft. If null, then\ndo not take draft status into account"
          },
          "HasSchedule": {
            "type": "boolean",
            "description": "Only return profiles that currently have a schedule. When false,\nonly return profiles that do not have a schedule. If null, then\ndo not take schedule status into account"
          },
          "AutoInstallOnly": {
            "type": "boolean",
            "description": "Only return profiles that are automatically installed.\nWhen false, this only returns profiles that are self-installed.\nIf null, then do not take install method into account."
          }
        }
      },
      "EmailProfileReportParameters": {
        "type": "object",
        "description": "Email Profile Report Parameters",
        "required": [
          "ReportHeaderFields",
          "EmailProfileName",
          "AppendAddresses"
        ],
        "properties": {
          "ReportHeaderFields": {
            "type": "array",
            "description": "Field names to be included in the report, these will be used as the header of the attached CSV file",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Filters": {
            "description": "Report Filter Parameters.",
            "allOf": [
              {
                "$ref": "#/definitions/ProfileFilterParams"
              }
            ]
          },
          "EmailProfileName": {
            "type": "string",
            "description": "The name of the profile to use when sending the email",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "ToAddresses": {
            "type": "array",
            "description": "The addresses to which the email will be sent. If specified, it will replace all 'To' addresses present in the email profile unless AppendAddresses is set to 'true'",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          },
          "AppendAddresses": {
            "type": "boolean",
            "description": "If set to 'true' then append the given list of recipients from ToAddresses, CcAddresses, and BccAddresses to those contained within the email profile; otherwise only send to the given addresses specified in ToAddresses"
          },
          "CcAddresses": {
            "type": "array",
            "description": "Any addresses to include in the CC field of the email. If specified, it will replace all CC addresses present in the email profile unless AppendAddresses is set to 'true'",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          },
          "BccAddresses": {
            "type": "array",
            "description": "Any addresses to include in the BCC field of the email. If specified, it will replace all BCC addresses present in the email profile unless AppendAddresses is set to 'true'",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          },
          "EmailSubject": {
            "type": "string",
            "description": "The subject of the email. If one is not given, the subject present in the specified email profile will be used. Should the profile not have one, the email will be sent without a subject"
          },
          "EmailBody": {
            "type": "string",
            "description": "The email message to send. If one is not given, any message present in the specified email profile will be used. If no message is found in the profile, the email will be sent with an empty message"
          },
          "TimeOffset": {
            "type": "integer",
            "description": "The local time zone offset from UTC.",
            "format": "int32"
          }
        }
      },
      "EmailCompliancePoliciesReportParameters": {
        "type": "object",
        "description": "Compliance policies report filter parameters\n            ",
        "required": [
          "AppendAddresses",
          "EmailProfileName",
          "ReportHeaderFields"
        ],
        "properties": {
          "AppendAddresses": {
            "type": "boolean",
            "description": "If set to 'true' then append the given list of recipients from ToAddresses,\nCcAddresses, and BccAddresses to those contained within the email profile; otherwise\nonly send to the given addresses specified in ToAddresses\n            "
          },
          "BccAddresses": {
            "type": "array",
            "description": "Any addresses to include in the BCC field of the email. If specified, it will replace all BCC addresses present in\nthe email profile unless AppendAddresses is set to 'true'\n            ",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          },
          "CcAddresses": {
            "type": "array",
            "description": "Any addresses to include in the CC field of the email. If specified, it will replace all CC addresses present in\nthe email profile unless AppendAddresses is set to 'true'\n            ",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          },
          "EmailBody": {
            "type": "string",
            "description": "The email message to send. If one is not given, any message present in the specified email profile will be used. If\nno message is found in the profile, the email will be sent with an empty message\n            "
          },
          "EmailProfileName": {
            "type": "string",
            "description": "The name of the profile to use when sending the email\n            ",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "EmailSubject": {
            "type": "string",
            "description": "The subject of the email. If one is not given, the subject present in the specified email profile will be used.\nShould the profile not have one, the email will be sent without a subject\n            "
          },
          "Families": {
            "type": "array",
            "description": "Device families by which it should be filtered\n            ",
            "items": {
              "$ref": "#/definitions/ComplianceDeviceFamily"
            },
            "x-enumType": "ComplianceDeviceFamily"
          },
          "IsAssigned": {
            "type": "boolean",
            "description": "Is Assigned policy filter\n            "
          },
          "NameContains": {
            "type": "string",
            "description": "Name contains\n            "
          },
          "ReportHeaderFields": {
            "type": "array",
            "description": "Field names to be included in the report, these will be used as the header of the attached CSV file\n            ",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Statuses": {
            "type": "array",
            "description": "Policy statuses\n            ",
            "items": {
              "$ref": "#/definitions/CompliancePolicyStatus"
            },
            "x-enumType": "CompliancePolicyStatus"
          },
          "TimeOffset": {
            "type": "integer",
            "description": "The local time zone offset from UTC.\n            ",
            "format": "int32"
          },
          "ToAddresses": {
            "type": "array",
            "description": "The addresses to which the email will be sent. If specified, it will replace all 'To' addresses present in the\nemail profile unless AppendAddresses is set to 'true'\n            ",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "collectionValidator",
                "inner": {
                  "type": "emailAddressValidator",
                  "pattern": "^(?(\")(\".+?(?<!\\\\)\"@)|(([0-9a-z]((\\.(?!\\.))|[-!#\\$%&'\\*\\+/=\\?\\^`\\{\\}\\|~\\w])*)(?<=[0-9a-z])@))(?(\\[)(\\[(\\d{1,3}\\.){3}\\d{1,3}\\])|(([0-9a-z][-\\w]*[0-9a-z]*\\.)+[a-z0-9][\\-a-z0-9]{0,22}[a-z0-9]))$",
                  "errorMessage": null
                }
              }
            ]
          }
        }
      },
      "SearchEngineStatus": {
        "type": "object",
        "description": "Elastic Search Synchronization Status",
        "required": [
          "Status",
          "StartDate",
          "TotalCount",
          "ProcessedCount",
          "OutOfSyncCount",
          "IndexIntegrity",
          "ProcessPercentage",
          "ElapsedSeconds"
        ],
        "properties": {
          "ServerName": {
            "type": "string",
            "description": "Server Name"
          },
          "Status": {
            "description": "Sync status",
            "allOf": [
              {
                "$ref": "#/definitions/SyncStatus"
              }
            ],
            "x-enumType": "SyncStatus"
          },
          "StartDate": {
            "type": "string",
            "description": "Start Date/Time",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "End Date/Time",
            "format": "date-time"
          },
          "TotalCount": {
            "type": "integer",
            "description": "Total count",
            "format": "int32"
          },
          "ProcessedCount": {
            "type": "integer",
            "description": "Processed count",
            "format": "int32"
          },
          "OutOfSyncCount": {
            "type": "integer",
            "description": "Out-of-sync count",
            "format": "int32"
          },
          "IndexIntegrity": {
            "type": "number",
            "description": "Synchronization percentage",
            "format": "double"
          },
          "ProcessPercentage": {
            "type": "number",
            "description": "Processed percentage",
            "format": "double"
          },
          "ElapsedSeconds": {
            "type": "number",
            "description": "Elapsed time in seconds",
            "format": "double"
          }
        }
      },
      "SyncStatus": {
        "type": "string",
        "description": "Synchronization status enumeration",
        "x-enumNames": [
          "Running",
          "Completed",
          "Failed",
          "Terminated",
          "Aborted"
        ],
        "enum": [
          "Running",
          "Completed",
          "Failed",
          "Terminated",
          "Aborted"
        ],
        "x-enumType": "SyncStatus"
      },
      "ElasticSearchRequest": {
        "type": "object",
        "description": "Raw ElasticSearch request",
        "required": [
          "HttpMethod"
        ],
        "properties": {
          "HttpMethod": {
            "description": "The HTTP method.",
            "allOf": [
              {
                "$ref": "#/definitions/HttpMethod"
              }
            ],
            "x-enumType": "HttpMethod"
          },
          "RelativePath": {
            "type": "string",
            "description": "The request relative path."
          },
          "Payload": {
            "type": "string",
            "description": "The request payload"
          }
        }
      },
      "HttpMethod": {
        "type": "string",
        "description": "HTTP Method",
        "x-enumNames": [
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "HEAD"
        ],
        "enum": [
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "HEAD"
        ],
        "x-enumType": "HttpMethod"
      },
      "SearchEngineHealthStatus": {
        "type": "object",
        "description": "Elastic Search Availability Status",
        "required": [
          "IsAvailable"
        ],
        "properties": {
          "IsAvailable": {
            "type": "boolean",
            "description": "Indicates if Elastic Search is available"
          }
        }
      },
      "SearchEngineConfiguration": {
        "type": "object",
        "description": "ElasticSearchSettingsConfiguration",
        "required": [
          "UseAsynchronousOperations",
          "EnableElasticSearchDataConsistency"
        ],
        "properties": {
          "DisableHttps": {
            "type": "boolean",
            "description": "Disable Https"
          },
          "SniffOnStartup": {
            "type": "boolean",
            "description": "Sniff on startup"
          },
          "MaxExternalSearchWindow": {
            "type": "integer",
            "description": "Max external search window",
            "format": "int32"
          },
          "SniffOnConnectionFault": {
            "type": "boolean",
            "description": "Sniff on connection fault"
          },
          "SniffLifeSpan": {
            "type": "string",
            "description": "Sniff life span",
            "format": "time-span"
          },
          "SyncInterval": {
            "type": "integer",
            "description": "Sync interval",
            "format": "int32"
          },
          "UseRawFieldsForStringAggregations": {
            "type": "boolean",
            "description": "Use raw fields for string aggregations"
          },
          "NodeUris": {
            "type": "array",
            "description": "NodeUris",
            "items": {
              "type": "string"
            }
          },
          "Port": {
            "type": "integer",
            "description": "Port",
            "format": "int32"
          },
          "UseAsynchronousOperations": {
            "type": "boolean",
            "description": "Determines whether ElasticSearch should do update/delete operations asynchronously"
          },
          "EnableElasticSearchDataConsistency": {
            "type": "boolean",
            "description": "Determines whether Elastic Search Data Consistency (MC-54771) is Enable."
          }
        }
      },
      "ElasticSearchStats": {
        "type": "object",
        "description": "ElasticSearch Health and Status",
        "required": [
          "Health"
        ],
        "properties": {
          "Version": {
            "type": "string",
            "description": "ElasticSearch Version"
          },
          "Name": {
            "type": "string",
            "description": "Cluster Name "
          },
          "Health": {
            "description": "Health (Color)",
            "allOf": [
              {
                "$ref": "#/definitions/ElasticSearchHealth"
              }
            ],
            "x-enumType": "ElasticSearchHealth"
          },
          "NodeHealth": {
            "type": "array",
            "description": "The cluster node stats",
            "items": {
              "$ref": "#/definitions/NodeHealth"
            }
          },
          "IndiceHealth": {
            "type": "array",
            "description": "The cluster indicies stats",
            "items": {
              "$ref": "#/definitions/IndiceHealth"
            }
          }
        }
      },
      "ElasticSearchHealth": {
        "type": "string",
        "description": "ElasticSearchHealth",
        "x-enumNames": [
          "Red",
          "Yellow",
          "Green"
        ],
        "enum": [
          "Red",
          "Yellow",
          "Green"
        ],
        "x-enumType": "ElasticSearchHealth"
      },
      "NodeHealth": {
        "type": "object",
        "description": "The Node Health",
        "required": [
          "Status",
          "FileSystemSizeBytes",
          "HeapUsedSizeBytes",
          "DocumentCount",
          "ServiceTimeMean",
          "ResponseTimeMean",
          "UpTime"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of Node"
          },
          "Status": {
            "description": "Node Status",
            "allOf": [
              {
                "$ref": "#/definitions/NodeStatus"
              }
            ],
            "x-enumType": "NodeStatus"
          },
          "FileSystemSizeBytes": {
            "type": "integer",
            "description": "Size of disk on node",
            "format": "int64"
          },
          "HeapUsedSizeBytes": {
            "type": "integer",
            "description": "Amount of Heap Used",
            "format": "int64"
          },
          "DocumentCount": {
            "type": "integer",
            "description": "Number of docs across all indices on node",
            "format": "int32"
          },
          "ServiceTimeMean": {
            "type": "string",
            "description": "Mean time to perform search (in milliseconds)",
            "format": "time-span"
          },
          "ResponseTimeMean": {
            "type": "string",
            "description": "Mean time for round trip (in milliseconds)",
            "format": "time-span"
          },
          "UpTime": {
            "type": "string",
            "description": "Node Uptime (in minutes)",
            "format": "time-span"
          }
        }
      },
      "NodeStatus": {
        "type": "string",
        "description": "Node Status Values",
        "x-enumNames": [
          "Offline",
          "Online"
        ],
        "enum": [
          "Offline",
          "Online"
        ],
        "x-enumType": "NodeStatus"
      },
      "IndiceHealth": {
        "type": "object",
        "description": "Indice Health",
        "required": [
          "DataSizeBytes",
          "DocumentCount",
          "Health"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Indice Name"
          },
          "DataSizeBytes": {
            "type": "integer",
            "description": "Size of the search data in indice",
            "format": "int64"
          },
          "DocumentCount": {
            "type": "integer",
            "description": "Number of docs in indice",
            "format": "int32"
          },
          "Health": {
            "description": "The health of the indice (Color)",
            "allOf": [
              {
                "$ref": "#/definitions/ElasticSearchHealth"
              }
            ],
            "x-enumType": "ElasticSearchHealth"
          }
        }
      },
      "PermissionTree": {
        "type": "object",
        "description": "Permission tree",
        "required": [
          "RoleType"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets the name."
          },
          "RootNode": {
            "description": "Gets the root node.",
            "allOf": [
              {
                "$ref": "#/definitions/PermissionTreeNode"
              }
            ]
          },
          "RoleType": {
            "description": "Gets the security role for the current tree.",
            "allOf": [
              {
                "$ref": "#/definitions/RoleType"
              }
            ],
            "x-enumType": "RoleType"
          },
          "AssetType": {
            "description": "Gets or sets the type of the asset for which this permission tree is built. Set to NULL if tree is asset-less.",
            "allOf": [
              {
                "$ref": "#/definitions/AssetType"
              }
            ],
            "x-enumType": "AssetType"
          }
        }
      },
      "PermissionTreeNode": {
        "type": "object",
        "description": "Permission tree node",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets the name."
          },
          "Permission": {
            "type": "string",
            "description": "Gets or sets the permission."
          },
          "ChildNodes": {
            "type": "array",
            "description": "Gets the parent node.",
            "items": {
              "$ref": "#/definitions/PermissionTreeNode"
            }
          }
        }
      },
      "RoleType": {
        "type": "string",
        "description": "Represents security roles under which the client can access the API ",
        "x-enumNames": [
          "Any",
          "SystemAdministrator",
          "DeviceOwner"
        ],
        "enum": [
          "Any",
          "SystemAdministrator",
          "DeviceOwner"
        ],
        "x-enumType": "RoleType"
      },
      "AssetType": {
        "type": "string",
        "description": "Represents valid types of assets protected by security",
        "x-enumNames": [
          "Device",
          "DeviceGroup",
          "CatalogueItem"
        ],
        "enum": [
          "Device",
          "DeviceGroup",
          "CatalogueItem"
        ],
        "x-enumType": "AssetType"
      },
      "CheckUserAccessResponse": {
        "type": "object",
        "description": "Response containing information which tells if current user has access or not a given feature/asset",
        "required": [
          "IsAllowed"
        ],
        "properties": {
          "IsAllowed": {
            "type": "boolean",
            "description": "Indicates if permission is allowed"
          }
        }
      },
      "UserRightDetails": {
        "type": "object",
        "description": "The user right details",
        "required": [
          "IsAllowed",
          "Role"
        ],
        "properties": {
          "Permission": {
            "type": "string",
            "description": "Gets or sets the permission."
          },
          "IsAllowed": {
            "type": "boolean",
            "description": "Indicates if permission is allowed"
          },
          "InheritsFrom": {
            "type": "array",
            "description": "Parent user groups that impacted the value of IsAllowed or NULL if it is not inherited (own right)",
            "items": {
              "$ref": "#/definitions/UserRightParentGroup"
            }
          },
          "Role": {
            "description": "Security role under which the right is given",
            "allOf": [
              {
                "$ref": "#/definitions/RoleType"
              }
            ],
            "x-enumType": "RoleType"
          },
          "Asset": {
            "description": "Optional asset for which right is given",
            "allOf": [
              {
                "$ref": "#/definitions/Asset"
              }
            ]
          }
        }
      },
      "UserRightParentGroup": {
        "type": "object",
        "description": "Parent user group info that impacted the security right.",
        "required": [
          "IsAllowed"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets the name."
          },
          "IsAllowed": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this instance is allowed."
          }
        }
      },
      "Asset": {
        "type": "object",
        "description": "Represent the security asset.",
        "required": [
          "Type"
        ],
        "properties": {
          "Type": {
            "description": "Gets or sets the type.",
            "allOf": [
              {
                "$ref": "#/definitions/AssetType"
              }
            ],
            "x-enumType": "AssetType"
          },
          "RefId": {
            "type": "string",
            "description": "Gets or sets the reference identifier."
          }
        }
      },
      "InputRightsGroupItem": {
        "type": "object",
        "description": "InputRightsGroupItem",
        "required": [
          "IsAllowed"
        ],
        "properties": {
          "Permission": {
            "type": "string",
            "description": "Gets or sets the permission."
          },
          "IsAllowed": {
            "type": "boolean",
            "description": "Indicates if permission is allowed"
          }
        }
      },
      "User": {
        "type": "object",
        "description": "Represents information about user, a person accessing MobiControl API",
        "x-abstract": true,
        "required": [
          "Kind",
          "IsAccountLocked",
          "NumberOfFailedLogins"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The unique name of the user (the user account name)"
          },
          "DisplayName": {
            "type": "string",
            "description": "The UI-friendly name of the user"
          },
          "Kind": {
            "description": "The kind of the user",
            "allOf": [
              {
                "$ref": "#/definitions/UserKind"
              }
            ],
            "x-enumType": "UserKind"
          },
          "IsEulaAccepted": {
            "type": "boolean",
            "description": "The value indicating whether the user has accepted End-User Licence Agreement (EULA)"
          },
          "EulaAcceptanceDate": {
            "type": "string",
            "description": "The date when the user accepted End-User Licence Agreement (EULA)",
            "format": "date-time"
          },
          "IsAccountLocked": {
            "type": "boolean",
            "description": "The value indicating whether the user account was locked"
          },
          "NumberOfFailedLogins": {
            "type": "integer",
            "description": "The number of times the user attempted to login with an invalid password since the last valid login attempt",
            "format": "int32"
          }
        }
      },
      "UserKind": {
        "type": "string",
        "description": "Valid kinds of users",
        "x-enumNames": [
          "MobiControlUser",
          "LdapUser",
          "SsoUser"
        ],
        "enum": [
          "MobiControlUser",
          "LdapUser",
          "SsoUser"
        ],
        "x-enumType": "UserKind"
      },
      "LdapUser": {
        "allOf": [
          {
            "$ref": "#/definitions/User"
          },
          {
            "type": "object",
            "description": "Represents an LDAP user",
            "required": [
              "IsHiddenUser"
            ],
            "properties": {
              "LdapConnectionName": {
                "type": "string",
                "description": "The name of the LDAP connection that this user comes from"
              },
              "DomainName": {
                "type": "string",
                "description": "The name of domain the user belongs to"
              },
              "Sid": {
                "type": "string",
                "description": "The security identifier of the user"
              },
              "EmailAddress": {
                "type": "string",
                "description": "The email address of the user"
              },
              "IsHiddenUser": {
                "type": "boolean",
                "description": "Whether this LDAP user is a hidden user"
              }
            }
          }
        ]
      },
      "MobiControlUser": {
        "allOf": [
          {
            "$ref": "#/definitions/User"
          },
          {
            "type": "object",
            "description": "Represents a MobiControl user",
            "properties": {
              "LastPasswordChangeDate": {
                "type": "string",
                "description": "The date when MobiControl User changed password last time",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "SsoUser": {
        "allOf": [
          {
            "$ref": "#/definitions/User"
          },
          {
            "type": "object",
            "description": "SSO user"
          }
        ]
      },
      "UserGroup": {
        "type": "object",
        "description": "Abstract base class for user groups",
        "x-abstract": true,
        "required": [
          "GroupKind"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of this group"
          },
          "GroupKind": {
            "description": "The kind of group this is",
            "allOf": [
              {
                "$ref": "#/definitions/UserGroupKind"
              }
            ],
            "x-enumType": "UserGroupKind"
          }
        }
      },
      "UserGroupKind": {
        "type": "string",
        "description": "Kinds of user groups",
        "x-enumNames": [
          "MobiControlGroup",
          "LdapGroup",
          "SsoGroup"
        ],
        "enum": [
          "MobiControlGroup",
          "LdapGroup",
          "SsoGroup"
        ],
        "x-enumType": "UserGroupKind"
      },
      "LdapUserGroup": {
        "allOf": [
          {
            "$ref": "#/definitions/UserGroup"
          },
          {
            "type": "object",
            "description": "A user group obtained from LDAP",
            "properties": {
              "Sid": {
                "type": "string",
                "description": "The SID of this group"
              },
              "LdapConnectionName": {
                "type": "string",
                "description": "The LDAP connection name this group comes from"
              }
            }
          }
        ]
      },
      "MobiControlUserGroup": {
        "allOf": [
          {
            "$ref": "#/definitions/UserGroup"
          },
          {
            "type": "object",
            "description": "A local MobiControl user group",
            "required": [
              "IsInherited"
            ],
            "properties": {
              "IsInherited": {
                "type": "boolean",
                "description": "Whether membership in this group is the result of inheritance\nin a"
              }
            }
          }
        ]
      },
      "SsoUserGroup": {
        "allOf": [
          {
            "$ref": "#/definitions/UserGroup"
          },
          {
            "type": "object",
            "description": "Represents an SSO User Group",
            "properties": {
              "SsoConnectionId": {
                "type": "string",
                "description": "Reference to SSO connection"
              }
            }
          }
        ]
      },
      "UserLogEntry": {
        "type": "object",
        "description": "Contains information for a user log entry",
        "required": [
          "Timestamp",
          "EventSeverity",
          "EventId"
        ],
        "properties": {
          "Timestamp": {
            "type": "string",
            "description": "Log entry timestamp",
            "format": "date-time"
          },
          "EventSeverity": {
            "description": "Log entry severity",
            "allOf": [
              {
                "$ref": "#/definitions/EventSeverity"
              }
            ],
            "x-enumType": "EventSeverity"
          },
          "Message": {
            "type": "string",
            "description": "Log entry message"
          },
          "UserName": {
            "type": "string",
            "description": "Log entry user name"
          },
          "EventId": {
            "type": "integer",
            "description": "Log entry event identifier",
            "format": "int32"
          },
          "EventCode": {
            "type": "string",
            "description": "Log entry event identifier"
          }
        }
      },
      "PasswordChange": {
        "type": "object",
        "description": "Password change parameters (for current user)",
        "properties": {
          "OldPassword": {
            "type": "string",
            "description": "Gets or sets old password"
          },
          "NewPassword": {
            "type": "string",
            "description": "Gets or sets new password (must meet all policy requirements which may have been set)"
          }
        }
      },
      "PasswordPolicy": {
        "type": "object",
        "description": "Stores the system's password policy for a particular user.",
        "required": [
          "CanChangePassword",
          "PasswordsMustIncludeLowercase",
          "PasswordsMustIncludeUppercase",
          "PasswordsMustIncludeDigits",
          "PasswordsMustIncludePunctuation",
          "CanResetPassword",
          "EnforcePasswordComplexity",
          "EnforcePasswordExpiration",
          "EnforcePasswordComplexityForAndroidAdmin"
        ],
        "properties": {
          "CanChangePassword": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the user can change his password."
          },
          "MinimumPasswordLength": {
            "type": "integer",
            "description": "Gets or sets the minimum length of the user's new password.  If there\nis no length restriction, then this value will be null.",
            "format": "int32"
          },
          "PasswordsMustIncludeLowercase": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the user's password must include\nat least one lowercase letter."
          },
          "PasswordsMustIncludeUppercase": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the user's password must include\nat least one uppercase letter."
          },
          "PasswordsMustIncludeDigits": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the user's password must include\nat least one digit."
          },
          "PasswordsMustIncludePunctuation": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the user's password must include\nat least one punctuation mark."
          },
          "CanResetPassword": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether users can reset forgotten passwords."
          },
          "EnforcePasswordComplexity": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether password complexity is enforced."
          },
          "EnforcePasswordExpiration": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether enforce user to change password or not.\n            "
          },
          "PasswordExpirationDays": {
            "type": "integer",
            "description": "Gets or sets password expiration days",
            "format": "int32"
          },
          "EnforcePasswordComplexityForAndroidAdmin": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the service enforces password complexity for the Android Device Admin."
          }
        }
      },
      "GetAccessControlPolicy": {
        "type": "object",
        "description": "Response data contract for get answer count requests.",
        "properties": {
          "AccessControlPolicy": {
            "description": "Gets or sets the Access Control Policy.",
            "allOf": [
              {
                "$ref": "#/definitions/AccessControlPolicy"
              }
            ]
          },
          "PasswordPolicy": {
            "description": "Gets or sets the Password Policy.",
            "allOf": [
              {
                "$ref": "#/definitions/PasswordPolicy"
              }
            ]
          }
        }
      },
      "AccessControlPolicy": {
        "type": "object",
        "description": "Represents the system access control policy.",
        "required": [
          "LimitUserToSingleConcurrentSession"
        ],
        "properties": {
          "MaximumFailedLogins": {
            "type": "integer",
            "description": "Gets or sets the maximum number of times a user can fail to log in.\nIf null, the user can try to log in an unlimited number of times.",
            "format": "int32"
          },
          "LimitUserToSingleConcurrentSession": {
            "type": "boolean",
            "description": "Limit the user to a single concurrent session."
          }
        }
      },
      "SetAccessControlPolicy": {
        "type": "object",
        "description": "Request data contract for get answer count requests.",
        "properties": {
          "AccessControlPolicy": {
            "description": "Gets or sets the Access Control Policy.",
            "allOf": [
              {
                "$ref": "#/definitions/AccessControlPolicy"
              }
            ]
          },
          "PasswordPolicy": {
            "description": "Gets or sets the Password Policy.",
            "allOf": [
              {
                "$ref": "#/definitions/PasswordPolicy"
              }
            ]
          }
        }
      },
      "EulaStatus": {
        "type": "string",
        "description": "The status of the EULA",
        "x-enumNames": [
          "Unknown",
          "Accepted",
          "Declined"
        ],
        "enum": [
          "Unknown",
          "Accepted",
          "Declined"
        ],
        "x-enumType": "EulaStatus"
      },
      "CatalogueItemUserRight": {
        "type": "object",
        "description": "Details an individula rights for a single catalogue item",
        "required": [
          "CanView",
          "CanEdit"
        ],
        "properties": {
          "CanView": {
            "type": "boolean",
            "description": "The user can view the catalogue item",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "CanEdit": {
            "type": "boolean",
            "description": "The user can edit the catalogue item",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          }
        }
      },
      "Right": {
        "type": "object",
        "description": "Right",
        "required": [
          "PrincipalType",
          "CanView",
          "CanManage"
        ],
        "properties": {
          "PrincipalName": {
            "type": "string",
            "description": "The name of the principal to which this Right belongs"
          },
          "PrincipalType": {
            "description": "Whether the principal for this right is a User or a Group",
            "allOf": [
              {
                "$ref": "#/definitions/RightPrincipalType"
              }
            ],
            "x-enumType": "RightPrincipalType"
          },
          "CanView": {
            "type": "boolean",
            "description": "View right"
          },
          "CanManage": {
            "type": "boolean",
            "description": "Manage right"
          }
        }
      },
      "RightPrincipalType": {
        "type": "string",
        "description": "Indicates the source (a User or a Group) for a given Right",
        "x-enumNames": [
          "User",
          "Group",
          "AdUser",
          "AdGroup",
          "IdpUser",
          "IdpGroup"
        ],
        "enum": [
          "User",
          "Group",
          "AdUser",
          "AdGroup",
          "IdpUser",
          "IdpGroup"
        ],
        "x-enumType": "RightPrincipalType"
      },
      "AssetRights": {
        "type": "object",
        "description": "Access rights for an asset\n            ",
        "x-abstract": true,
        "required": [
          "AssetRightsKind"
        ],
        "properties": {
          "AssetRightsKind": {
            "description": "The kind of the asset rights.",
            "allOf": [
              {
                "$ref": "#/definitions/AssetRightsKind"
              }
            ],
            "x-enumType": "AssetRightsKind"
          },
          "AccessRights": {
            "type": "array",
            "description": "Collection of access rights",
            "items": {
              "$ref": "#/definitions/AccessRight"
            }
          }
        }
      },
      "AssetRightsKind": {
        "type": "string",
        "description": "Asset right kinds",
        "x-enumNames": [
          "NotSpecified",
          "UserAssetRights",
          "GroupAssetRights"
        ],
        "enum": [
          "NotSpecified",
          "UserAssetRights",
          "GroupAssetRights"
        ],
        "x-enumType": "AssetRightsKind"
      },
      "AccessRight": {
        "type": "object",
        "description": "Access right",
        "required": [
          "IsAllowed"
        ],
        "properties": {
          "Permission": {
            "type": "string",
            "description": "Permission name"
          },
          "IsAllowed": {
            "type": "boolean",
            "description": "Indicates whether permission is allowed or not"
          }
        }
      },
      "GroupAssetRights": {
        "allOf": [
          {
            "$ref": "#/definitions/AssetRights"
          },
          {
            "type": "object",
            "description": "Asset access rights defined for a group",
            "required": [
              "GroupKind"
            ],
            "properties": {
              "GroupName": {
                "type": "string",
                "description": "The name of the group."
              },
              "DisplayName": {
                "type": "string",
                "description": "The display name of the group"
              },
              "GroupKind": {
                "description": "The kind of the group.",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserGroupKind"
                  }
                ]
              }
            }
          }
        ]
      },
      "UserAssetRights": {
        "allOf": [
          {
            "$ref": "#/definitions/AssetRights"
          },
          {
            "type": "object",
            "description": "Asset access rights defined for a user",
            "required": [
              "UserKind"
            ],
            "properties": {
              "UserName": {
                "type": "string",
                "description": "The name of the user"
              },
              "UserKind": {
                "description": "The kind of the user.",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserKind"
                  }
                ]
              }
            }
          }
        ]
      },
      "CatalogueItemReferenceId": {
        "type": "object",
        "description": "Contract for CatalogueItem ReferenceId to manage access rights",
        "properties": {
          "Id": {
            "type": "string",
            "description": "ReferenceId of CatalogueItem"
          }
        }
      },
      "EndpointSecuritySettings": {
        "type": "object",
        "description": "Endpoint Security Settings",
        "properties": {
          "ExternalAuthenticationType": {
            "description": "Gets or Sets the authentication type used for external authentication.",
            "allOf": [
              {
                "$ref": "#/definitions/ExternalAuthenticationType"
              }
            ],
            "x-enumType": "ExternalAuthenticationType"
          },
          "ReferenceId": {
            "type": "string",
            "description": "Gets or Sets the unique identifier for directory service or identity provider"
          }
        }
      },
      "ExternalAuthenticationType": {
        "type": "string",
        "description": "External Authentication Type",
        "x-enumNames": [
          "DirectoryService",
          "IdentityProvider"
        ],
        "enum": [
          "DirectoryService",
          "IdentityProvider"
        ],
        "x-enumType": "ExternalAuthenticationType"
      },
      "AuthenticationSettings": {
        "type": "object",
        "description": "Request data contract for set authorization connection.",
        "required": [
          "Mode"
        ],
        "properties": {
          "Mode": {
            "description": "Gets or sets id.",
            "allOf": [
              {
                "$ref": "#/definitions/SecurityAuthenticationMode"
              }
            ],
            "x-enumType": "SecurityAuthenticationMode"
          },
          "DirectoryServiceReferences": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "IdentityProviderReference": {
            "type": "string"
          }
        }
      },
      "SecurityAuthenticationMode": {
        "type": "string",
        "description": "Represents Authorization Mode",
        "x-enumNames": [
          "MobiControl",
          "IdentityProvider",
          "SotiIdentity"
        ],
        "enum": [
          "MobiControl",
          "IdentityProvider",
          "SotiIdentity"
        ],
        "x-enumType": "SecurityAuthenticationMode"
      },
      "DeviceGroupPermissionInfo": {
        "type": "object",
        "description": "Contains information about the permissions of a given Device Group.\n            ",
        "properties": {
          "GroupName": {
            "type": "string",
            "description": "Name of a Device Group.\n            "
          },
          "GroupReferenceId": {
            "type": "string",
            "description": "Reference ID of a Device Group.\n            "
          },
          "Permissions": {
            "type": "array",
            "description": "List of Permissions available for this Device Group.\n            ",
            "items": {
              "$ref": "#/definitions/PermissionStatus"
            }
          }
        }
      },
      "PermissionStatus": {
        "type": "object",
        "description": "Determines whether a given permission is allowed or not.\n            ",
        "required": [
          "IsAllowed"
        ],
        "properties": {
          "IsAllowed": {
            "type": "boolean",
            "description": "Whether the permission is allowed.\n            "
          },
          "PermissionName": {
            "type": "string",
            "description": "Name of the permission.\n            "
          }
        }
      },
      "DeviceGroupPermissionCriteria": {
        "type": "object",
        "description": "GetDeviceGroupPermissions parameters (for current user)\n            ",
        "properties": {
          "GroupReferenceIds": {
            "type": "array",
            "description": "List of Device Group Reference IDs.\n            ",
            "items": {
              "type": "string"
            }
          },
          "PermissionNames": {
            "type": "array",
            "description": "List of Permission Names.\n            ",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SotiAssistConfiguration": {
        "type": "object",
        "description": "SOTI Assist Configuration",
        "properties": {
          "URI": {
            "type": "string",
            "description": "SOTI Assist URI"
          }
        }
      },
      "SotiConnectConfiguration": {
        "type": "object",
        "description": "SOTI Connect Configuration",
        "properties": {
          "URI": {
            "type": "string",
            "description": "SOTI Conenct URI"
          }
        }
      },
      "SotiSnapConfiguration": {
        "type": "object",
        "description": "SOTI Snap Configuration",
        "properties": {
          "URI": {
            "type": "string",
            "description": "SOTI Snap URI"
          }
        }
      },
      "SyslogConfiguration": {
        "type": "object",
        "description": "Syslog configuration",
        "required": [
          "IsEnabled",
          "Host",
          "NetworkProtocol",
          "MessageFormat"
        ],
        "properties": {
          "IsEnabled": {
            "type": "boolean",
            "description": "Indicating whether the System Configuration is enabled"
          },
          "Host": {
            "type": "string",
            "description": "The host value (DNS name or IP address)",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "NetworkProtocol": {
            "description": "Network protocol (Udp or Tcp)",
            "allOf": [
              {
                "$ref": "#/definitions/NetworkProtocol"
              }
            ],
            "x-enumType": "NetworkProtocol"
          },
          "MessageFormat": {
            "description": "Syslog message format",
            "allOf": [
              {
                "$ref": "#/definitions/MessageFormat"
              }
            ],
            "x-enumType": "MessageFormat"
          },
          "Port": {
            "type": "integer",
            "description": "Port number",
            "format": "int32",
            "maximum": 65535.0,
            "minimum": 1.0,
            "x-validators": [
              {
                "type": "rangeValidator",
                "min": 1,
                "max": 65535,
                "errorMessage": null
              }
            ]
          },
          "MessageTemplate": {
            "type": "string",
            "description": "Message template format",
            "maxLength": 1024,
            "minLength": 0,
            "x-validators": [
              {
                "type": "stringLengthValidator",
                "min": 0,
                "max": 1024,
                "errorMessage": null
              }
            ]
          }
        }
      },
      "NetworkProtocol": {
        "type": "string",
        "description": "Represents a protocol used for Syslog configuration",
        "x-enumNames": [
          "Udp",
          "Tcp",
          "SecureTcp"
        ],
        "enum": [
          "Udp",
          "Tcp",
          "SecureTcp"
        ],
        "x-enumType": "NetworkProtocol"
      },
      "MessageFormat": {
        "type": "string",
        "description": "Represents Syslog Message Format",
        "x-enumNames": [
          "RFC3164",
          "RFC5424"
        ],
        "enum": [
          "RFC3164",
          "RFC5424"
        ],
        "x-enumType": "MessageFormat"
      },
      "SyslogConfigurationTest": {
        "type": "object",
        "description": "Syslog Configuration test contract",
        "properties": {
          "SyslogConfiguration": {
            "description": "Syslog Configuration",
            "allOf": [
              {
                "$ref": "#/definitions/SyslogConfiguration"
              }
            ]
          },
          "Message": {
            "type": "string",
            "description": "Test message"
          },
          "Success": {
            "type": "boolean",
            "description": "The test status"
          },
          "ExecutedOn": {
            "type": "string",
            "description": "The tested time",
            "format": "date-time"
          },
          "ErrorMessage": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "ProxySetting": {
        "type": "object",
        "description": "Represents global proxy configuration",
        "required": [
          "Address",
          "IsEnabled",
          "IsAuthenticationRequired"
        ],
        "properties": {
          "Address": {
            "type": "string",
            "description": "The global proxy address",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Port": {
            "type": "integer",
            "description": "The global proxy port",
            "format": "int32"
          },
          "Exceptions": {
            "type": "array",
            "description": "The global proxy exception list",
            "items": {
              "type": "string"
            }
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "The value indicating whether the global proxy is enabled",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "IsAuthenticationRequired": {
            "type": "boolean",
            "description": "The value indicating whether the global proxy requires authentication",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "UserName": {
            "type": "string",
            "description": "The user name"
          },
          "Password": {
            "type": "string",
            "description": "The password"
          }
        }
      },
      "CloudLinkAgentSetting": {
        "type": "object",
        "description": "Represents CloudLink settings ",
        "properties": {
          "CompatibleVersion": {
            "type": "string",
            "description": "The compatible CloudLink version "
          },
          "InstallerUri": {
            "type": "string",
            "description": "The URI for CloudLink installer",
            "format": "uri"
          }
        }
      },
      "SystemMaintenanceConfiguration": {
        "type": "object",
        "description": "Log Maintenance Configuration data contract.",
        "properties": {
          "Configuration": {
            "description": "Gets or sets configuration.",
            "allOf": [
              {
                "$ref": "#/definitions/Configuration"
              }
            ]
          },
          "Servers": {
            "type": "array",
            "description": "Gets or sets id/name pairs for servers.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Configuration": {
        "type": "object",
        "description": "Configuration data contract.",
        "required": [
          "PermanentlyDeleteDevices"
        ],
        "properties": {
          "LogTruncationSettings": {
            "type": "array",
            "description": "Gets or sets LogTruncationSettings.",
            "items": {
              "$ref": "#/definitions/EventCategory"
            }
          },
          "AlertsTruncationByAge": {
            "description": "Gets or sets AlertsTruncationByAge.",
            "allOf": [
              {
                "$ref": "#/definitions/ByAgeSettings"
              }
            ]
          },
          "AppTruncationByAge": {
            "description": "Gets or sets AppTruncationByAge.",
            "allOf": [
              {
                "$ref": "#/definitions/ByAgeSettings"
              }
            ]
          },
          "DevicesDeletionByAge": {
            "description": "Gets or sets DevicesDeletionByAge.",
            "allOf": [
              {
                "$ref": "#/definitions/ByAgeSettings"
              }
            ]
          },
          "ArchiveSettings": {
            "description": "Gets or sets ArchiveSettings.",
            "allOf": [
              {
                "$ref": "#/definitions/ArchiveSettings"
              }
            ]
          },
          "SelectedServer": {
            "type": "string",
            "description": "Gets or sets selected server."
          },
          "PermanentlyDeleteDevices": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the devices should be permanently deleted."
          },
          "SotiHubDeviceDocumentsDeleteByAge": {
            "description": "Gets or sets SotiHubDeviceDocumentsDeleteByAge.",
            "allOf": [
              {
                "$ref": "#/definitions/ByAgeSettings"
              }
            ]
          }
        }
      },
      "EventCategory": {
        "type": "object",
        "description": "Log Event Category",
        "required": [
          "EventOriginator",
          "Lifespan",
          "LastChangeTime",
          "RequireArchive"
        ],
        "properties": {
          "EventOriginator": {
            "description": "Gets or sets the EventOriginator of Category",
            "allOf": [
              {
                "$ref": "#/definitions/EventOriginator"
              }
            ],
            "x-enumType": "EventOriginator"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets the Name of Category"
          },
          "Description": {
            "type": "string",
            "description": "Gets or sets the Description of Category"
          },
          "Lifespan": {
            "type": "integer",
            "description": "Gets or sets the LifeSpan in Day",
            "format": "int32"
          },
          "LastChangeUser": {
            "type": "string",
            "description": "Gets or sets the Last Change User"
          },
          "LastChangeTime": {
            "type": "string",
            "description": "Gets or sets the Last Change Date",
            "format": "date-time"
          },
          "RequireArchive": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the category to be archive or not"
          }
        }
      },
      "ByAgeSettings": {
        "type": "object",
        "description": "Data contract.",
        "required": [
          "Period",
          "Value"
        ],
        "properties": {
          "Period": {
            "description": "Gets or sets period.",
            "allOf": [
              {
                "$ref": "#/definitions/Period"
              }
            ],
            "x-enumType": "Period"
          },
          "Value": {
            "type": "integer",
            "description": "Gets or sets period value.",
            "format": "int32"
          }
        }
      },
      "Period": {
        "type": "string",
        "description": "Period data contract.",
        "x-enumNames": [
          "Days",
          "Months"
        ],
        "enum": [
          "Days",
          "Months"
        ],
        "x-enumType": "Period"
      },
      "ArchiveSettings": {
        "type": "object",
        "description": "ArchiveSettings data contract",
        "required": [
          "ArchiveData",
          "ArchiveAlerts",
          "ArchiveAppGenLogs"
        ],
        "properties": {
          "Folder": {
            "type": "string",
            "description": "Gets or sets the folder."
          },
          "ArchiveDeletionByAge": {
            "description": "Gets or sets the archive deletion by age.",
            "allOf": [
              {
                "$ref": "#/definitions/ByAgeSettings"
              }
            ]
          },
          "ArchiveData": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [archive data]."
          },
          "ArchiveAlerts": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [archive data]."
          },
          "ArchiveAppGenLogs": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [archive app generated logs data]."
          }
        }
      },
      "TruncateLogsConfiguration": {
        "type": "object",
        "description": "TruncateLogsConfiguration contract.",
        "required": [
          "TruncateAction"
        ],
        "properties": {
          "TruncateAction": {
            "description": "Gets or sets TruncateAction.",
            "allOf": [
              {
                "$ref": "#/definitions/TruncateAction"
              }
            ],
            "x-enumType": "TruncateAction"
          }
        }
      },
      "TruncateAction": {
        "type": "string",
        "description": "Truncate action contract.",
        "x-enumNames": [
          "Logs",
          "AlertLogs",
          "AppGeneratedLogs"
        ],
        "enum": [
          "Logs",
          "AlertLogs",
          "AppGeneratedLogs"
        ],
        "x-enumType": "TruncateAction"
      },
      "AndroidEnrollmentPolicySummary": {
        "type": "object",
        "required": [
          "ActivationDate",
          "PlatformKind",
          "CreatedDate",
          "Status",
          "IsAmapiEnabled",
          "IsDefault",
          "IsDeviceNamePreserved",
          "IsDeviceRelocationPreserved",
          "IsPluginDeployedOnEnrollment",
          "IsPublished",
          "IsSafetyNetChecked",
          "LastModifiedDate",
          "EnrolledDeviceCount"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "AndroidAccountTypeId": {
            "$ref": "#/definitions/AndroidAccountType2",
            "x-enumType": "AndroidAccountType"
          },
          "PlatformKind": {
            "$ref": "#/definitions/AndroidEnrollmentPolicyKind",
            "x-enumType": "AndroidEnrollmentPolicyKind"
          },
          "AndroidWorkEnterpriseName": {
            "type": "string"
          },
          "AndroidWorkEnterpriseReferenceId": {
            "type": "string"
          },
          "AuthorizationPolicyReferenceId": {
            "type": "string"
          },
          "CertificateTemplateReferenceId": {
            "type": "string"
          },
          "CertificateTemplateName": {
            "type": "string"
          },
          "CreatedBy": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "EnrollmentCode": {
            "type": "string"
          },
          "EnrollmentPolicyTag": {
            "type": "string"
          },
          "EnrollmentUrl": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/definitions/EnrollmentPolicyStatus",
            "x-enumType": "EnrollmentPolicyStatus"
          },
          "IsAmapiEnabled": {
            "type": "boolean"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "IsDeviceRelocationPreserved": {
            "type": "boolean"
          },
          "IsPluginDeployedOnEnrollment": {
            "type": "boolean"
          },
          "IsPublished": {
            "type": "boolean"
          },
          "IsSafetyNetChecked": {
            "type": "boolean"
          },
          "LastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ManagementType": {
            "$ref": "#/definitions/ManagementType",
            "x-enumType": "ManagementType"
          },
          "LastModifiedBy": {
            "type": "string"
          },
          "AndroidOsPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OsPermission"
            }
          },
          "AvailableAgentReferenceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Name": {
            "type": "string"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "EnrolledDeviceCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AndroidAccountType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "SkipGoogleAccountAddition",
          "GoogleAccount",
          "ManagedGooglePlayAccount"
        ],
        "enum": [
          "SkipGoogleAccountAddition",
          "GoogleAccount",
          "ManagedGooglePlayAccount"
        ],
        "x-enumType": "AndroidAccountType"
      },
      "AndroidEnrollmentPolicyKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AndroidEnterprise",
          "AndroidClassic"
        ],
        "enum": [
          "AndroidEnterprise",
          "AndroidClassic"
        ],
        "x-enumType": "AndroidEnrollmentPolicyKind"
      },
      "EnrollmentPolicyStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Disable",
          "Enable"
        ],
        "enum": [
          "Disable",
          "Enable"
        ],
        "x-enumType": "EnrollmentPolicyStatus"
      },
      "ManagementType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "WorkManaged",
          "WorkProfile",
          "CorporatePersonal"
        ],
        "enum": [
          "WorkManaged",
          "WorkProfile",
          "CorporatePersonal"
        ],
        "x-enumType": "ManagementType"
      },
      "OsPermission": {
        "type": "object",
        "required": [
          "Enabled"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Enabled": {
            "type": "boolean"
          }
        }
      },
      "AndroidEnrollmentPolicy": {
        "type": "object",
        "required": [
          "IsAmapiEnabled",
          "IsDeviceNamePreserved",
          "IsDeviceRelocationPreserved",
          "IsPluginDeployedOnEnrollment",
          "IsSafetyNetChecked"
        ],
        "properties": {
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "AndroidAccountTypeId": {
            "$ref": "#/definitions/AndroidAccountType2",
            "x-enumType": "AndroidAccountType"
          },
          "AndroidEnrollmentPolicyApks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PlatformKind": {
            "$ref": "#/definitions/AndroidEnrollmentPolicyKind",
            "x-enumType": "AndroidEnrollmentPolicyKind"
          },
          "AndroidWorkEnterpriseReferenceId": {
            "type": "string"
          },
          "ApkType": {
            "$ref": "#/definitions/ApkType",
            "x-enumType": "ApkType"
          },
          "AuthorizationReferenceId": {
            "type": "string"
          },
          "CertificateTemplateReferenceId": {
            "type": "string"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "EnrollmentPolicyTag": {
            "type": "string"
          },
          "IsAmapiEnabled": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "IsDeviceRelocationPreserved": {
            "type": "boolean"
          },
          "IsPluginDeployedOnEnrollment": {
            "type": "boolean"
          },
          "IsSafetyNetChecked": {
            "type": "boolean"
          },
          "ManagementType": {
            "$ref": "#/definitions/ManagementType",
            "x-enumType": "ManagementType"
          },
          "AndroidOsPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OsPermission"
            }
          },
          "Name": {
            "type": "string"
          },
          "PolicyTag": {
            "type": "string"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApkType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "PlayStore",
          "Internal"
        ],
        "enum": [
          "PlayStore",
          "Internal"
        ],
        "x-enumType": "ApkType"
      },
      "EnrollmentPolicyEmailInfo": {
        "type": "object",
        "required": [
          "AppendAddresses"
        ],
        "properties": {
          "EmailProfileName": {
            "type": "string"
          },
          "ToAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AppendAddresses": {
            "type": "boolean"
          }
        }
      },
      "ConfigurationInfo": {
        "type": "object",
        "required": [
          "Status",
          "AddedDate",
          "ExpiryDate"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/definitions/ConfigurationStatus",
            "x-enumType": "ConfigurationStatus"
          },
          "AppleId": {
            "type": "string"
          },
          "Topic": {
            "type": "string"
          },
          "AddedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "SerialNumber": {
            "type": "string"
          }
        }
      },
      "ConfigurationStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Active",
          "Expired",
          "Invalid"
        ],
        "enum": [
          "Active",
          "Expired",
          "Invalid"
        ],
        "x-enumType": "ConfigurationStatus"
      },
      "UpdateConfigurationAppleId": {
        "type": "object",
        "properties": {
          "AppleId": {
            "type": "string"
          }
        }
      },
      "SigningCertificateInfo": {
        "type": "object",
        "required": [
          "ExpireTime"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "ExpireTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccountInfo": {
        "type": "object",
        "required": [
          "CertificateExpiryDate",
          "TokenExpiryDate",
          "AccountState"
        ],
        "properties": {
          "AccountReferenceId": {
            "type": "string"
          },
          "AccountName": {
            "type": "string"
          },
          "CertificateReferenceId": {
            "type": "string"
          },
          "CertificateExpiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastSyncTime": {
            "type": "string",
            "format": "date-time"
          },
          "TokenExpiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "AccountState": {
            "$ref": "#/definitions/DeviceAccountState",
            "x-enumType": "DeviceAccountState"
          },
          "MDMServerName": {
            "type": "string"
          },
          "MDMServerId": {
            "type": "string"
          },
          "AdminAppleId": {
            "type": "string"
          },
          "OrganizationName": {
            "type": "string"
          },
          "DefaultRuleReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "DefaultRuleName": {
            "type": "string"
          },
          "DefaultIosPolicyReferenceId": {
            "type": "string"
          },
          "DefaultIosPolicyName": {
            "type": "string"
          },
          "DefaultMacPolicyReferenceId": {
            "type": "string"
          },
          "DefaultMacPolicyName": {
            "type": "string"
          }
        }
      },
      "DeviceAccountState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Active",
          "PendingDelete",
          "Deleted",
          "Invalid"
        ],
        "enum": [
          "Active",
          "PendingDelete",
          "Deleted",
          "Invalid"
        ],
        "x-enumType": "DeviceAccountState"
      },
      "AccountName": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          }
        }
      },
      "AddDeviceRule": {
        "type": "object",
        "required": [
          "RuleReferenceId",
          "CreatedDate",
          "DefaultAccountRule"
        ],
        "properties": {
          "RuleReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "RuleName": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "DefaultAccountRule": {
            "type": "boolean"
          }
        }
      },
      "AssignAdeDevicesSummary": {
        "type": "object",
        "required": [
          "Result"
        ],
        "properties": {
          "Result": {
            "$ref": "#/definitions/AssignmentResult",
            "x-enumType": "AssignmentResult"
          },
          "FailedDeviceSerialNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AssignmentResult": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Success",
          "Failed"
        ],
        "enum": [
          "Success",
          "Failed"
        ],
        "x-enumType": "AssignmentResult"
      },
      "AssignAdeDevicesModel": {
        "type": "object",
        "properties": {
          "EnrollmentPolicyReferenceId": {
            "type": "string"
          },
          "SerialNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DefaultRuleModel": {
        "type": "object",
        "required": [
          "RuleReferenceId"
        ],
        "properties": {
          "RuleReferenceId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "AppleBusinessManagerEnrollmentPolicySummary": {
        "type": "object",
        "required": [
          "ReferenceId",
          "CreatedDate",
          "PlatformKind",
          "IsDefault"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "Name": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "PlatformKind": {
            "$ref": "#/definitions/AppleBusinessManagerEnrollmentPolicyPlatformKind",
            "x-enumType": "AppleBusinessManagerEnrollmentPolicyPlatformKind"
          },
          "IsDefault": {
            "type": "boolean"
          }
        }
      },
      "AppleBusinessManagerEnrollmentPolicyPlatformKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "iOS",
          "macOS"
        ],
        "enum": [
          "iOS",
          "macOS"
        ],
        "x-enumType": "AppleBusinessManagerEnrollmentPolicyPlatformKind"
      },
      "EnrollmentDevice": {
        "type": "object",
        "required": [
          "DeviceModel",
          "ProfileStatus",
          "EnrollmentStatus"
        ],
        "properties": {
          "SerialNumber": {
            "type": "string"
          },
          "DeviceModel": {
            "$ref": "#/definitions/DeviceModel",
            "x-enumType": "DeviceModel"
          },
          "DeviceColor": {
            "type": "string"
          },
          "AssetTag": {
            "type": "string"
          },
          "AssignDate": {
            "type": "string",
            "format": "date-time"
          },
          "AssignedBy": {
            "type": "string"
          },
          "ProfileStatus": {
            "$ref": "#/definitions/AppleDepProfileStatus",
            "x-enumType": "AppleDepProfileStatus"
          },
          "ProfileAssignTime": {
            "type": "string",
            "format": "date-time"
          },
          "ProfilePushTime": {
            "type": "string",
            "format": "date-time"
          },
          "DeviceName": {
            "type": "string"
          },
          "PolicyName": {
            "type": "string"
          },
          "EnrollmentStatus": {
            "$ref": "#/definitions/AppleDepEnrollmentStatus",
            "x-enumType": "AppleDepEnrollmentStatus"
          }
        }
      },
      "DeviceModel": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Iphone",
          "Ipad",
          "Imac"
        ],
        "enum": [
          "Unknown",
          "Iphone",
          "Ipad",
          "Imac"
        ],
        "x-enumType": "DeviceModel"
      },
      "AppleDepProfileStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Empty",
          "Assigned",
          "Pushed",
          "Removed"
        ],
        "enum": [
          "Unknown",
          "Empty",
          "Assigned",
          "Pushed",
          "Removed"
        ],
        "x-enumType": "AppleDepProfileStatus"
      },
      "AppleDepEnrollmentStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NotEnrolled",
          "Enrolled",
          "Unenrolled"
        ],
        "enum": [
          "NotEnrolled",
          "Enrolled",
          "Unenrolled"
        ],
        "x-enumType": "AppleDepEnrollmentStatus"
      },
      "FilterType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "ByEnrollmentStatus",
          "ByProfileStatus"
        ],
        "enum": [
          "Unspecified",
          "ByEnrollmentStatus",
          "ByProfileStatus"
        ],
        "x-enumType": "FilterType"
      },
      "DefaultPolicyModel": {
        "type": "object",
        "properties": {
          "PolicyReferenceId": {
            "type": "string"
          }
        }
      },
      "WindowsApplicationSummaryBase": {
        "type": "object",
        "required": [
          "AppKind",
          "PackageFormat",
          "Architectures"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "AppKind": {
            "$ref": "#/definitions/ApplicationKind",
            "x-enumType": "ApplicationKind"
          },
          "PackageFormat": {
            "$ref": "#/definitions/PackageFormatType",
            "x-enumType": "PackageFormatType"
          },
          "DisplayName": {
            "type": "string"
          },
          "Architectures": {
            "$ref": "#/definitions/ProcessorArchitectures",
            "x-enumType": "ProcessorArchitectures"
          },
          "Version": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "ApplicationKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "ModernEnterprise",
          "ClassicDesktop",
          "Enterprise"
        ],
        "enum": [
          "Unknown",
          "ModernEnterprise",
          "ClassicDesktop",
          "Enterprise"
        ],
        "x-enumType": "ApplicationKind"
      },
      "PackageFormatType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Appx",
          "AppxBundle",
          "Xap",
          "Msi"
        ],
        "enum": [
          "Appx",
          "AppxBundle",
          "Xap",
          "Msi"
        ],
        "x-enumType": "PackageFormatType"
      },
      "ProcessorArchitectures": {
        "type": "string",
        "description": "",
        "x-enumFlags": true,
        "x-enumNames": [
          "None",
          "ARM",
          "X86",
          "X64",
          "ARM64",
          "Neutral"
        ],
        "enum": [
          "None",
          "ARM",
          "X86",
          "X64",
          "ARM64",
          "Neutral"
        ],
        "x-enumType": "ProcessorArchitectures"
      },
      "WindowsClassicDesktopAppSummary": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsApplicationSummaryBase"
          },
          {
            "type": "object",
            "required": [
              "InstallContext"
            ],
            "properties": {
              "ProductId": {
                "type": "string"
              },
              "InstallContext": {
                "$ref": "#/definitions/InstallationContextFlags"
              }
            }
          }
        ]
      },
      "InstallationContextFlags": {
        "type": "string",
        "description": "",
        "x-enumFlags": true,
        "x-enumNames": [
          "CurrentUser",
          "Device",
          "DualInstallation"
        ],
        "enum": [
          "CurrentUser",
          "Device",
          "DualInstallation"
        ],
        "x-enumType": "InstallationContextFlags"
      },
      "WindowsModernAppSummary": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsApplicationSummaryBase"
          },
          {
            "type": "object",
            "required": [
              "Platforms"
            ],
            "properties": {
              "PackageFullName": {
                "type": "string"
              },
              "PackageUrl": {
                "type": "string"
              },
              "Platforms": {
                "$ref": "#/definitions/PlatformTypes"
              },
              "PackageIdentityName": {
                "type": "string"
              },
              "Dependencies": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EnterpriseAppDependency"
                }
              },
              "Author": {
                "type": "string"
              },
              "Publisher": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PlatformTypes": {
        "type": "string",
        "description": "",
        "x-enumFlags": true,
        "x-enumNames": [
          "None",
          "Windows8x",
          "WindowsPhone8x",
          "WindowsMobile",
          "WindowsDesktop",
          "WindowsTeam",
          "WindowsHolographic",
          "WindowsUniversal"
        ],
        "enum": [
          "None",
          "Windows8x",
          "WindowsPhone8x",
          "WindowsMobile",
          "WindowsDesktop",
          "WindowsTeam",
          "WindowsHolographic",
          "WindowsUniversal"
        ],
        "x-enumType": "PlatformTypes"
      },
      "EnterpriseAppDependency": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Publisher": {
            "type": "string"
          },
          "MinVersion": {
            "type": "string"
          }
        }
      },
      "AddExternalEnterpriseAppRequest": {
        "type": "object",
        "properties": {
          "PackageDownloadUrl": {
            "type": "string"
          }
        }
      },
      "EnterpriseAppQueryInfo": {
        "type": "object",
        "required": [
          "Architectures",
          "MatchHigherVersion"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "PublisherIdName": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "Architectures": {
            "$ref": "#/definitions/ProcessorArchitectures",
            "x-enumType": "ProcessorArchitectures"
          },
          "MatchHigherVersion": {
            "type": "boolean"
          }
        }
      },
      "WindowsAppCatalogRuleSummary": {
        "type": "object",
        "required": [
          "RuleStatus"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "RuleStatus": {
            "$ref": "#/definitions/RuleStatus",
            "x-enumType": "RuleStatus"
          },
          "AuditInfo": {
            "$ref": "#/definitions/AuditInfo"
          },
          "AssignmentInfo": {
            "$ref": "#/definitions/AssignmentInfo"
          },
          "CatalogueItemReferenceId": {
            "type": "string"
          }
        }
      },
      "RuleStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Draft",
          "Assigned",
          "Disabled"
        ],
        "enum": [
          "Draft",
          "Assigned",
          "Disabled"
        ],
        "x-enumType": "RuleStatus"
      },
      "AuditInfo": {
        "type": "object",
        "required": [
          "CreatedDate"
        ],
        "properties": {
          "ModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string"
          }
        }
      },
      "AssignmentInfo": {
        "type": "object",
        "properties": {
          "AuditInfo": {
            "$ref": "#/definitions/AuditInfoShort"
          },
          "AssignmentSchedule": {
            "$ref": "#/definitions/AssignmentSchedule"
          }
        }
      },
      "AuditInfoShort": {
        "type": "object",
        "properties": {
          "ModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string"
          }
        }
      },
      "AssignmentSchedule": {
        "type": "object",
        "properties": {
          "AssignDate": {
            "type": "string",
            "format": "date-time"
          },
          "DisableDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "WindowsAppCatalogRule": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "UpdateWindowsAppCatalogRuleAppsRequest": {
        "type": "object",
        "properties": {
          "RuleReferenceId": {
            "type": "string"
          },
          "WindowsApplicationConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppCatalogRuleWindowsAppConfiguration"
            }
          }
        }
      },
      "AppCatalogRuleWindowsAppConfiguration": {
        "type": "object",
        "x-abstract": true,
        "properties": {
          "AppReferenceId": {
            "type": "string"
          },
          "AppKind": {
            "type": "string"
          }
        }
      },
      "AppCatalogRuleWindowsClassicDesktopAppConfiguration": {
        "allOf": [
          {
            "$ref": "#/definitions/AppCatalogRuleWindowsAppConfiguration"
          },
          {
            "type": "object",
            "required": [
              "InstallForDevice"
            ],
            "properties": {
              "InstallForDevice": {
                "type": "boolean"
              },
              "CommandLine": {
                "type": "string"
              },
              "Timeout": {
                "type": "integer",
                "format": "int32"
              },
              "RetryCount": {
                "type": "integer",
                "format": "int32"
              },
              "RetryInterval": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AppCatalogRuleWindowsEnterpriseAppConfiguration": {
        "allOf": [
          {
            "$ref": "#/definitions/AppCatalogRuleWindowsAppConfiguration"
          },
          {
            "type": "object"
          }
        ]
      },
      "AppCatalogRuleWindowsModernAppConfiguration": {
        "allOf": [
          {
            "$ref": "#/definitions/AppCatalogRuleWindowsAppConfiguration"
          },
          {
            "type": "object",
            "required": [
              "ForceProvisionedSynchronization",
              "ProvisionForAllUsers"
            ],
            "properties": {
              "ForceProvisionedSynchronization": {
                "type": "boolean"
              },
              "ProvisionForAllUsers": {
                "type": "boolean"
              },
              "ProductSettings": {
                "type": "string"
              }
            }
          }
        ]
      },
      "WindowsAppCatalogRuleAppsSummary": {
        "type": "object",
        "properties": {
          "RuleReferenceId": {
            "type": "string"
          },
          "AppCatalogRuleWindowsApplications": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppCatalogRuleWindowsApplication"
            }
          }
        }
      },
      "AppCatalogRuleWindowsApplication": {
        "type": "object",
        "x-abstract": true
      },
      "AppCatalogRuleWindowsClassicDesktopApplication": {
        "allOf": [
          {
            "$ref": "#/definitions/AppCatalogRuleWindowsApplication"
          },
          {
            "type": "object",
            "properties": {
              "ClassicAppSummary": {
                "$ref": "#/definitions/WindowsClassicDesktopAppSummary"
              },
              "ClassicAppConfiguration": {
                "$ref": "#/definitions/AppCatalogRuleWindowsClassicDesktopAppConfiguration"
              }
            }
          }
        ]
      },
      "AppCatalogRuleWindowsEnterpriseApplication": {
        "allOf": [
          {
            "$ref": "#/definitions/AppCatalogRuleWindowsApplication"
          },
          {
            "type": "object",
            "properties": {
              "EnterpriseAppSummary": {
                "$ref": "#/definitions/WindowsModernAppSummary"
              },
              "EnterpriseAppConfiguration": {
                "$ref": "#/definitions/AppCatalogRuleWindowsEnterpriseAppConfiguration"
              }
            }
          }
        ]
      },
      "AppCatalogRuleWindowsModernApplication": {
        "allOf": [
          {
            "$ref": "#/definitions/AppCatalogRuleWindowsApplication"
          },
          {
            "type": "object",
            "properties": {
              "ModernAppSummary": {
                "$ref": "#/definitions/WindowsModernAppSummary"
              },
              "ModernAppConfiguration": {
                "$ref": "#/definitions/AppCatalogRuleWindowsModernAppConfiguration"
              }
            }
          }
        ]
      },
      "CustomAttribute": {
        "type": "object",
        "description": "Custom attribute type information",
        "required": [
          "Name",
          "CustomAttributeDataType",
          "PropagateToDevice"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Custom attribute type name",
            "maxLength": 80,
            "minLength": 0,
            "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              },
              {
                "type": "regexValidator",
                "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
                "errorMessage": "msg_invalidChar"
              },
              {
                "type": "stringLengthValidator",
                "min": 0,
                "max": 80,
                "errorMessage": "msg_max80Character_customAttributeName"
              }
            ]
          },
          "CustomAttributeDataType": {
            "description": "Custom attribute data type",
            "allOf": [
              {
                "$ref": "#/definitions/CustomAttributeDataType"
              }
            ],
            "x-enumType": "CustomAttributeDataType",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "EnumValues": {
            "type": "array",
            "description": "List of possible values, if the custom attribute type is enumeration",
            "items": {
              "type": "string"
            }
          },
          "PropagateToDevice": {
            "type": "boolean",
            "description": "Defines if the custom attribute is propagated to devices",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "ReferenceId": {
            "type": "string",
            "description": "Custom Attribute Reference Id."
          }
        }
      },
      "CustomData": {
        "type": "object",
        "description": "Custom data type information",
        "required": [
          "Name",
          "PhysicalType",
          "DeviceFamily"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Custom data name",
            "maxLength": 80,
            "minLength": 0,
            "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              },
              {
                "type": "regexValidator",
                "pattern": "^[^<>{};%*$,\\[\\]\\\\\\|\\?\"\\/]+$",
                "errorMessage": "msg_invalidChar"
              },
              {
                "type": "stringLengthValidator",
                "min": 0,
                "max": 80,
                "errorMessage": "msg_max80Character_customDataName"
              }
            ]
          },
          "BuiltinDataTypeName": {
            "description": "Builtin datatype name",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceCollectedDataType"
              }
            ],
            "x-enumType": "DeviceCollectedDataType"
          },
          "Expression": {
            "type": "string",
            "description": "Custom data expression"
          },
          "PhysicalType": {
            "description": "Custom data type",
            "allOf": [
              {
                "$ref": "#/definitions/PhysicalType"
              }
            ],
            "x-enumType": "PhysicalType",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Description": {
            "type": "string",
            "description": "Custom data description"
          },
          "DeviceFamily": {
            "description": "Applicable device family",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamily2"
              }
            ],
            "x-enumType": "DeviceFamily",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "DeviceKinds": {
            "type": "array",
            "description": "Applicable device families",
            "items": {
              "$ref": "#/definitions/DeviceKind"
            },
            "x-enumType": "DeviceKind"
          },
          "ReferenceId": {
            "type": "string",
            "description": "Custom Data Reference Id."
          }
        }
      },
      "PhysicalType": {
        "type": "string",
        "description": "PhysicalType",
        "x-enumNames": [
          "String",
          "Float",
          "Int",
          "Byte",
          "SmallInt",
          "BigInt",
          "Location",
          "NetworkTraffic",
          "UnsignedInt",
          "CallLog",
          "NetworkConnectionType",
          "None"
        ],
        "enum": [
          "String",
          "Float",
          "Int",
          "Byte",
          "SmallInt",
          "BigInt",
          "Location",
          "NetworkTraffic",
          "UnsignedInt",
          "CallLog",
          "NetworkConnectionType",
          "None"
        ],
        "x-enumType": "PhysicalType"
      },
      "DeviceAdvancedConfiguration": {
        "type": "object",
        "description": "Contains information for device advanced configurations",
        "required": [
          "IsEditable"
        ],
        "properties": {
          "Configuration": {
            "type": "string",
            "description": "Name of the configuration currently assigned"
          },
          "Origin": {
            "type": "string",
            "description": "The origin where this configuration is assigned"
          },
          "LastUpdate": {
            "type": "string",
            "description": "Gets or sets the time this configuration was last updated.",
            "format": "date-time"
          },
          "ConfiguredBy": {
            "type": "string",
            "description": "If the value is inherited, this will be the name of the User"
          },
          "IsEditable": {
            "type": "boolean",
            "description": "If the value is true, the device configuration is editable. "
          }
        }
      },
      "ProfileSummary": {
        "type": "object",
        "description": "Profile Web Api Model",
        "required": [
          "DeviceFamily",
          "DeviceFamilyQualification",
          "Status",
          "HasDraftVersion",
          "ActiveVersionPayloadCount",
          "ActiveVersionNumber",
          "ActiveVersionPackageCount",
          "CreatedDate",
          "HasError",
          "HasIncompleteVersion"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Gets custom id"
          },
          "Name": {
            "type": "string",
            "description": "Gets profile name"
          },
          "Description": {
            "type": "string",
            "description": "Gets profile description"
          },
          "DeviceFamily": {
            "description": "Gets profile device family",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamily2"
              }
            ],
            "x-enumType": "DeviceFamily"
          },
          "DeviceFamilyQualification": {
            "description": "Gets profile device family qualification",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamilyQualification"
              }
            ],
            "x-enumType": "DeviceFamilyQualification"
          },
          "LastModified": {
            "type": "string",
            "description": "Gets Last modified time",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "type": "string",
            "description": "Gets Last modified by information."
          },
          "IsInstalledSilently": {
            "type": "boolean",
            "description": "Gets Last modified by information."
          },
          "Status": {
            "description": "Gets profile status",
            "allOf": [
              {
                "$ref": "#/definitions/ProfileVersionStatus"
              }
            ],
            "x-enumType": "ProfileVersionStatus"
          },
          "HasDraftVersion": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the profile has draft version."
          },
          "Schedule": {
            "description": "Gets or sets a value indicating whether the profile has scheduled events.",
            "allOf": [
              {
                "$ref": "#/definitions/ProfileDeploymentSchedule"
              }
            ]
          },
          "ActiveVersionPayloadCount": {
            "type": "integer",
            "description": "Gets or sets a value indicating the number of payloads for the active version.",
            "format": "int32"
          },
          "ActiveVersionNumber": {
            "type": "integer",
            "description": "Gets or sets a value indicating the version number of the active version.",
            "format": "int32"
          },
          "DraftVersionNumber": {
            "type": "integer",
            "description": "Gets or sets the draft version number.",
            "format": "int32"
          },
          "ScheduledVersionNumber": {
            "type": "integer",
            "description": "Gets or sets the scheduled version number.",
            "format": "int32"
          },
          "ActiveVersionPackageCount": {
            "type": "integer",
            "description": "Gets or sets  a value indicating the number of packages for the active (assigned) version.",
            "format": "int32"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Gets or sets the date when the profile was created.",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "description": "Gets or sets the user who created the Profile."
          },
          "AssignedDate": {
            "type": "string",
            "description": "Gets or sets the date when the active profile was assigned.",
            "format": "date-time"
          },
          "AssignedBy": {
            "type": "string",
            "description": "Gets or sets the user who assigned the active (assigned) profile."
          },
          "HasError": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this instance has error."
          },
          "HasIncompleteVersion": {
            "type": "boolean",
            "description": "Get or sets a value indicating whether this instance has incomplete version."
          },
          "IncompleteVersionNumber": {
            "type": "integer",
            "description": "Gets or sets Incomplete Version Number",
            "format": "int32"
          }
        }
      },
      "ProfileDeploymentSchedule": {
        "type": "object",
        "description": "Scheduled events of profile assignment",
        "required": [
          "HasScheduledEvents"
        ],
        "properties": {
          "HasScheduledEvents": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the profile has scheduled assignments"
          },
          "AutoAssignDate": {
            "type": "string",
            "description": "Auto assign date",
            "format": "date-time"
          },
          "DisableDate": {
            "type": "string",
            "description": "Disabled date",
            "format": "date-time"
          },
          "RevokeDate": {
            "type": "string",
            "description": "Revoked date",
            "format": "date-time"
          },
          "InstallationDate": {
            "type": "string",
            "description": "Installation date",
            "format": "date-time"
          },
          "InstallationDateIsUtc": {
            "type": "boolean",
            "description": "Indicates whether installation date is in device time or UTC time"
          },
          "IsInstalledOnNextUpdate": {
            "type": "boolean",
            "description": "Delay to next update schedule"
          }
        }
      },
      "Profile": {
        "type": "object",
        "description": "Profile Base Web Api Model",
        "required": [
          "Name",
          "DeviceFamily",
          "DeviceFamilyQualification"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Profile name",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Description": {
            "type": "string",
            "description": "Profile description"
          },
          "ReferenceId": {
            "type": "string",
            "description": "Profile reference id"
          },
          "DeviceFamily": {
            "description": "Device family profile applicable to",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamily2"
              }
            ],
            "x-enumType": "DeviceFamily",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "DeviceFamilyQualification": {
            "description": "Device family qualification",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamilyQualification"
              }
            ],
            "x-enumType": "DeviceFamilyQualification"
          },
          "Packages": {
            "type": "array",
            "description": "Packages to be included in the profile",
            "items": {
              "$ref": "#/definitions/PackageInfo"
            }
          }
        }
      },
      "PackageInfo": {
        "type": "object",
        "description": "Represents package information contract\n            ",
        "required": [
          "ReferenceId",
          "Version"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Package reference id",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Version": {
            "type": "string",
            "description": "Package version",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "PackageDependencies": {
            "type": "array",
            "description": "Package dependencies",
            "items": {
              "$ref": "#/definitions/PackageDependency"
            }
          },
          "Name": {
            "type": "string",
            "description": "Package Name"
          },
          "Size": {
            "type": "integer",
            "description": "Size of the package",
            "format": "int32"
          },
          "InstallationOrder": {
            "type": "integer",
            "description": "Installation Order",
            "format": "int32"
          },
          "ActivePackageVersions": {
            "type": "array",
            "description": "Gets or Sets active (not deleted) package versions",
            "items": {
              "$ref": "#/definitions/PackageVersion"
            }
          }
        }
      },
      "PackageDependency": {
        "type": "object",
        "description": "Represents package dependency contract\n            ",
        "required": [
          "ReferenceId"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Package reference id",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Version": {
            "type": "string",
            "description": "Package version"
          },
          "Name": {
            "type": "string",
            "description": "Package name"
          }
        }
      },
      "ProfilePayload": {
        "allOf": [
          {
            "$ref": "#/definitions/Profile"
          },
          {
            "type": "object",
            "description": "Profile with Payload support for Web Api Model",
            "properties": {
              "Payloads": {
                "type": "array",
                "description": "Payloads to be included in the profile",
                "items": {
                  "$ref": "#/definitions/ProfileDeviceConfigurationSection"
                }
              }
            }
          }
        ]
      },
      "ProfileDeviceConfigurationSection": {
        "type": "object",
        "description": "Base class for data contracts describing a device configuration.",
        "x-abstract": true,
        "required": [
          "DeviceConfigurationType"
        ],
        "properties": {
          "DeviceConfigurationType": {
            "description": "Device Configuration type",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceConfigurationSectionType"
              }
            ],
            "x-enumType": "DeviceConfigurationSectionType"
          },
          "UniqueCharacteristic": {
            "type": "string",
            "description": "Gets or sets the unique characteristic."
          }
        }
      },
      "DeviceConfigurationSectionType": {
        "type": "string",
        "description": "The DeviceConfigurationSectionType",
        "x-enumNames": [
          "Unknown",
          "LockdownSection",
          "AppRunControlSection",
          "AuthenticationSection",
          "CertificateSection",
          "OutOfContactSection",
          "FeatureControlSection",
          "PhoneCallPolicySection",
          "FileEncryptionSection",
          "ExchangeActiveSyncSection",
          "WirelessSection",
          "BitLockerSection",
          "WindowsUpdatePoliciesSection",
          "WipSection",
          "AssignedAccessSection",
          "AssignedAccessKioskSection",
          "ApplicationLaunchRestrictionSection",
          "ClientCertificateSection",
          "EnterpriseAPNSection",
          "ModernVPNSection",
          "VPNSection",
          "IpSecVPNSection",
          "EmailSection",
          "ScepSection",
          "ScheduledScriptsSection",
          "CustomProfilesSection",
          "CustomConfigurationSection",
          "WebFilterSection",
          "AntivirusSection",
          "BrowserSection",
          "BrowserProxySection",
          "SecureBrowserAppSettingsSection",
          "ApplicationSettingsSection",
          "ManagedGooglePlaySection",
          "BookmarkSection",
          "WorkProfileComplianceSection",
          "PersonalPlayStoreSection",
          "LabelSection",
          "PowerSection",
          "PrinterAdministrationSection",
          "ProfileSection",
          "PrinterRunControlSection",
          "AccessPointNameSection",
          "SystemUpdatePolicySection",
          "FactoryResetProtectionSection",
          "SettingsManagerSettingsSection",
          "WallpaperSection",
          "Hotspot",
          "FirewallSection",
          "OEMSection",
          "SingleAppModeSection",
          "NetworkRestrictionsSection",
          "ExtensibleSingleSignOnSection",
          "NotificationsSection",
          "SsoSection",
          "AirPrintSection",
          "FontSection",
          "HomeScreenLayoutSection",
          "DomainsSection",
          "WebClipSection",
          "DNSProxySection",
          "GlobalHttpProxySection",
          "AirPlaySection",
          "EthernetSection",
          "ProxySettingSection",
          "MacOSAirPlay",
          "VPNPerAppSection",
          "CalendarSection",
          "ContactSection",
          "LDAPSection",
          "SubscribedCalendarSection",
          "MacExchangeActiveSyncSection",
          "ExtensionSection",
          "FinderSection",
          "LoginItemsSection",
          "MacAccessibilitySection",
          "MacDesktopWallpaperScreenSaverSection",
          "MacDockSection",
          "MacFeatureControlSection",
          "MacPrintingSection",
          "MacWebContentFilterSection",
          "ParentalControlsSection",
          "MacFileVaultSection",
          "LoginWindowSection",
          "MacDirectorySection",
          "MacEnergySaverSection",
          "MacFirewallSection",
          "MacKernelExtensionSection",
          "MacXsanSection",
          "SecurityPrivacySection",
          "SetupAssistantSection",
          "SoftwareUpdateSection",
          "TimeMachineSection",
          "LockScreenMessageSection",
          "MacEmailSection",
          "DeviceInActivitySection",
          "KerberosExtensibleSingleSignOnSection",
          "SharedIpadSettingsSection",
          "DatalogicOEMConfigSection",
          "PanasonicOEMConfigSection",
          "ZebraOEMConfigSection",
          "CellularAccessPointNameSection",
          "MacManagedLoginItemsSection",
          "SingleSignOnSection",
          "WindowsFirewallSettingsSection",
          "WindowsFirewallRuleSection",
          "MacExtensibleSingleSignOnSection",
          "SchemaBaseConfigSection",
          "EncryptedDnsSection"
        ],
        "enum": [
          "Unknown",
          "LockdownSection",
          "AppRunControlSection",
          "AuthenticationSection",
          "CertificateSection",
          "OutOfContactSection",
          "FeatureControlSection",
          "PhoneCallPolicySection",
          "FileEncryptionSection",
          "ExchangeActiveSyncSection",
          "WirelessSection",
          "BitLockerSection",
          "WindowsUpdatePoliciesSection",
          "WipSection",
          "AssignedAccessSection",
          "AssignedAccessKioskSection",
          "ApplicationLaunchRestrictionSection",
          "ClientCertificateSection",
          "EnterpriseAPNSection",
          "ModernVPNSection",
          "VPNSection",
          "IpSecVPNSection",
          "EmailSection",
          "ScepSection",
          "ScheduledScriptsSection",
          "CustomProfilesSection",
          "CustomConfigurationSection",
          "WebFilterSection",
          "AntivirusSection",
          "BrowserSection",
          "BrowserProxySection",
          "SecureBrowserAppSettingsSection",
          "ApplicationSettingsSection",
          "ManagedGooglePlaySection",
          "BookmarkSection",
          "WorkProfileComplianceSection",
          "PersonalPlayStoreSection",
          "LabelSection",
          "PowerSection",
          "PrinterAdministrationSection",
          "ProfileSection",
          "PrinterRunControlSection",
          "AccessPointNameSection",
          "SystemUpdatePolicySection",
          "FactoryResetProtectionSection",
          "SettingsManagerSettingsSection",
          "WallpaperSection",
          "Hotspot",
          "FirewallSection",
          "OEMSection",
          "SingleAppModeSection",
          "NetworkRestrictionsSection",
          "ExtensibleSingleSignOnSection",
          "NotificationsSection",
          "SsoSection",
          "AirPrintSection",
          "FontSection",
          "HomeScreenLayoutSection",
          "DomainsSection",
          "WebClipSection",
          "DNSProxySection",
          "GlobalHttpProxySection",
          "AirPlaySection",
          "EthernetSection",
          "ProxySettingSection",
          "MacOSAirPlay",
          "VPNPerAppSection",
          "CalendarSection",
          "ContactSection",
          "LDAPSection",
          "SubscribedCalendarSection",
          "MacExchangeActiveSyncSection",
          "ExtensionSection",
          "FinderSection",
          "LoginItemsSection",
          "MacAccessibilitySection",
          "MacDesktopWallpaperScreenSaverSection",
          "MacDockSection",
          "MacFeatureControlSection",
          "MacPrintingSection",
          "MacWebContentFilterSection",
          "ParentalControlsSection",
          "MacFileVaultSection",
          "LoginWindowSection",
          "MacDirectorySection",
          "MacEnergySaverSection",
          "MacFirewallSection",
          "MacKernelExtensionSection",
          "MacXsanSection",
          "SecurityPrivacySection",
          "SetupAssistantSection",
          "SoftwareUpdateSection",
          "TimeMachineSection",
          "LockScreenMessageSection",
          "MacEmailSection",
          "DeviceInActivitySection",
          "KerberosExtensibleSingleSignOnSection",
          "SharedIpadSettingsSection",
          "DatalogicOEMConfigSection",
          "PanasonicOEMConfigSection",
          "ZebraOEMConfigSection",
          "CellularAccessPointNameSection",
          "MacManagedLoginItemsSection",
          "SingleSignOnSection",
          "WindowsFirewallSettingsSection",
          "WindowsFirewallRuleSection",
          "MacExtensibleSingleSignOnSection",
          "SchemaBaseConfigSection",
          "EncryptedDnsSection"
        ],
        "x-enumType": "DeviceConfigurationSectionType"
      },
      "CertificateSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding device certificates to be displayed with\na device or group.",
            "properties": {
              "CertificateRefIds": {
                "type": "array",
                "description": "Gets or sets the collection of certificate reference identifiers.",
                "items": {
                  "type": "string"
                }
              },
              "CertificateTemplateRefIds": {
                "type": "array",
                "description": "Gets or sets the collection of certificate template reference identifiers.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "WindowsCECertificateSection": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificateSection"
          },
          {
            "type": "object",
            "description": "Represents the set of certificates configured for deployment to a Windows CE device."
          }
        ]
      },
      "PrinterCertificateSection": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificateSection"
          },
          {
            "type": "object",
            "description": "Represents the set of certificates configured for deployment to a printer device."
          }
        ]
      },
      "LinuxCertificateSection": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificateSection"
          },
          {
            "type": "object",
            "description": "Represents the set of certificates configured for deployment to a Linux device."
          }
        ]
      },
      "AndroidClassicCertificateSection": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificateSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding device certificates with\na device or group.",
            "required": [
              "SignatureId",
              "Notification",
              "GlobalOcsp",
              "GlobalCrl",
              "Silent"
            ],
            "properties": {
              "SignatureId": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether signature Id should be shown to user."
              },
              "Notification": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether notification about validation failure should be shown to user."
              },
              "GlobalOcsp": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether OCSP validation should be used for all applications."
              },
              "GlobalCrl": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether CRL validation should be used for all applications."
              },
              "Applications": {
                "type": "array",
                "description": "Gets or sets a list of application validation settings.",
                "items": {
                  "$ref": "#/definitions/AppRevocation"
                }
              },
              "Silent": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether certificates should be installed in silent mode.\nApplicable for early Samsung models."
              }
            }
          }
        ]
      },
      "AppRevocation": {
        "type": "object",
        "description": "Data contract for application revocation check configuration.",
        "required": [
          "Crl",
          "Ocsp"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets application name."
          },
          "BundleId": {
            "type": "string",
            "description": "Gets or sets application BundleId."
          },
          "Crl": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether CRL validation should be used."
          },
          "Ocsp": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether OCSP validation should be used."
          }
        }
      },
      "AndroidWorkProfileCertificateSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicCertificateSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding device certificates with\na device or group."
          }
        ]
      },
      "AndroidCorporateCertificateSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicCertificateSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding device certificates with\na device or group."
          }
        ]
      },
      "OutOfContactSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the out of contact configuration.",
            "properties": {
              "OutOfContactEventActions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should\ntake on out of contact event.",
                "items": {
                  "$ref": "#/definitions/DeviceEventAction"
                }
              }
            }
          }
        ]
      },
      "DeviceEventAction": {
        "type": "object",
        "description": "Represents a device-side event and related action.",
        "properties": {
          "Event": {
            "description": "Gets or sets the event that will trigger the action.",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceEvent"
              }
            ]
          },
          "Action": {
            "description": "Gets or sets the action to execute.",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceAction2"
              }
            ]
          }
        }
      },
      "DeviceEvent": {
        "type": "object",
        "description": "Represents an event that can occur on a device.",
        "x-abstract": true,
        "required": [
          "DeviceEventType"
        ],
        "properties": {
          "DeviceEventType": {
            "description": "Type of Device Event.",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceEventType"
              }
            ],
            "x-enumType": "DeviceEventType"
          }
        }
      },
      "DeviceEventType": {
        "type": "string",
        "description": "DeviceEventType",
        "x-enumNames": [
          "Authentication",
          "Geofence",
          "OutOfContact"
        ],
        "enum": [
          "Authentication",
          "Geofence",
          "OutOfContact"
        ],
        "x-enumType": "DeviceEventType"
      },
      "AuthenticationEvent": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceEvent"
          },
          {
            "type": "object",
            "description": "Represents an authentication event on a device.",
            "required": [
              "IsAdministrator",
              "IsSuccessful",
              "Count",
              "Repeat"
            ],
            "properties": {
              "IsAdministrator": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the event represents an\nadministrator log on (true) or a user log on (false)."
              },
              "IsSuccessful": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the event represent a\nsuccessful log on (true) or a failed log on (false)."
              },
              "Count": {
                "type": "integer",
                "description": "Gets or sets the number of log on attempts the event represents.",
                "format": "int32"
              },
              "Repeat": {
                "type": "integer",
                "description": "Gets or sets the number of the event fires.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "GeofenceEvent": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceEvent"
          },
          {
            "type": "object",
            "description": "Represents a device entering or leaving a geofence.",
            "required": [
              "IsEntered"
            ],
            "properties": {
              "Geofence": {
                "description": "Gets or sets the geofence.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Geofence2"
                  }
                ]
              },
              "IsEntered": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the event represents a device\nentering a geofence (true) or leaving a geofence (false)."
              }
            }
          }
        ]
      },
      "Geofence2": {
        "type": "object",
        "description": "Data contract.",
        "required": [
          "Id"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets entity identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets entity name."
          }
        }
      },
      "OutOfContactEvent": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceEvent"
          },
          {
            "type": "object",
            "description": "Represents a device failing to connect to a deployment server for\nthe given period of time.",
            "required": [
              "Period",
              "RepeatActionPeriod"
            ],
            "properties": {
              "Period": {
                "type": "string",
                "description": "Gets or sets period of time the device has been out-of-contact.",
                "format": "time-span"
              },
              "RepeatActionPeriod": {
                "type": "string",
                "description": "Gets or sets period of time to raise event repeatedly.",
                "format": "time-span"
              }
            }
          }
        ]
      },
      "DeviceAction2": {
        "type": "object",
        "description": "Represents an action to be taken on a device in response to a device\nevent.",
        "x-abstract": true,
        "required": [
          "DeviceActionType"
        ],
        "properties": {
          "DeviceActionType": {
            "description": "Type of DeviceAction.",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceActionType"
              }
            ],
            "x-enumType": "DeviceActionType"
          }
        }
      },
      "DeviceActionType": {
        "type": "string",
        "description": "DeviceActionType",
        "x-enumNames": [
          "RunScript",
          "ScheduledRunScript"
        ],
        "enum": [
          "RunScript",
          "ScheduledRunScript"
        ],
        "x-enumType": "DeviceActionType"
      },
      "RunScriptDeviceAction": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceAction2"
          },
          {
            "type": "object",
            "description": "Represents a device action that runs a MobiControl script.",
            "required": [
              "ReportScriptStatus"
            ],
            "properties": {
              "Script": {
                "description": "Gets or sets the name of the script to run.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Script"
                  }
                ]
              },
              "ReportScriptStatus": {
                "type": "boolean",
                "description": "Flag for capturing the script status."
              }
            }
          }
        ]
      },
      "Script": {
        "type": "object",
        "description": "Represents details of script to be run",
        "required": [
          "Id"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets entity identifier.",
            "format": "int32"
          },
          "ReferenceId": {
            "type": "string",
            "description": "Gets or sets reference ID."
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets entity name."
          },
          "LastModified": {
            "type": "string",
            "description": "Gets or sets entity last modified date",
            "format": "date-time"
          },
          "ContentHash": {
            "type": "string",
            "description": "Gets or sets Script Content's SHA256 hash"
          }
        }
      },
      "ScheduledRunScriptDeviceAction": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceAction2"
          },
          {
            "type": "object",
            "description": "Represents a device action that runs a MobiControl script with scheduling.",
            "required": [
              "ReportScriptStatus",
              "LogFlag",
              "IsUtc",
              "IsImmediate"
            ],
            "properties": {
              "Script": {
                "description": "Gets or sets the name of the script to run.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Script"
                  }
                ]
              },
              "Schedule": {
                "description": "The run schedule of this script",
                "allOf": [
                  {
                    "$ref": "#/definitions/Schedule"
                  }
                ]
              },
              "ReportScriptStatus": {
                "type": "boolean",
                "description": "Flag for capturing script status"
              },
              "LogFlag": {
                "type": "boolean",
                "description": "Log flag for scheduling"
              },
              "IsUtc": {
                "type": "boolean",
                "description": "The run schedule at Device or UTC time"
              },
              "IsImmediate": {
                "type": "boolean",
                "description": "Run the script immediately"
              }
            }
          }
        ]
      },
      "Schedule": {
        "type": "object",
        "description": "Schedule data contract.",
        "required": [
          "Id"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets the identifier of schedule.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets the schedule name."
          },
          "Period": {
            "type": "string",
            "description": "Gets or sets the interval (in TimeSpan).",
            "format": "time-span"
          },
          "DateTime": {
            "type": "string",
            "description": "Gets or sets the scheduled time.",
            "format": "date-time"
          }
        }
      },
      "WindowsModernOutOfContactSection": {
        "allOf": [
          {
            "$ref": "#/definitions/OutOfContactSection"
          },
          {
            "type": "object",
            "description": "Defines Modern Desktop out of contact configuration."
          }
        ]
      },
      "WindowsCEOutOfContactSection": {
        "allOf": [
          {
            "$ref": "#/definitions/OutOfContactSection"
          },
          {
            "type": "object",
            "description": "Defines the out of contact configuration."
          }
        ]
      },
      "LinuxOutOfContactSection": {
        "allOf": [
          {
            "$ref": "#/definitions/OutOfContactSection"
          },
          {
            "type": "object",
            "description": "Defines Linux out of contact configuration."
          }
        ]
      },
      "AndroidClassicOutOfContactSection": {
        "allOf": [
          {
            "$ref": "#/definitions/OutOfContactSection"
          },
          {
            "type": "object",
            "description": "Defines the out of contact configuration."
          }
        ]
      },
      "AndroidWorkProfileOutOfContactSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicOutOfContactSection"
          },
          {
            "type": "object",
            "description": "Defines the out of contact configuration."
          }
        ]
      },
      "AndroidCorporateOutOfContactSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicOutOfContactSection"
          },
          {
            "type": "object",
            "description": "Defines the out of contact configuration."
          }
        ]
      },
      "PhoneCallPolicySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a phone call configuration.",
            "required": [
              "NotifyServer",
              "NotifyUser"
            ],
            "properties": {
              "NotifyServer": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to notify server on call blocked."
              },
              "NotifyUser": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to notify user on call blocked."
              },
              "Policies": {
                "type": "array",
                "description": "Gets or sets the list of policies.",
                "items": {
                  "$ref": "#/definitions/PhoneCallPolicy"
                }
              }
            }
          }
        ]
      },
      "PhoneCallPolicy": {
        "type": "object",
        "description": "Defines a phone call policy.\nRepresents a list of phones to which is allowed/forbiden to call to",
        "required": [
          "IsAllow",
          "FileId",
          "Created",
          "Direction"
        ],
        "properties": {
          "IsAllow": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to allow or deny the target user."
          },
          "FileId": {
            "type": "integer",
            "description": "Gets or sets id of the related file.",
            "format": "int32"
          },
          "ReferenceId": {
            "type": "string",
            "description": "Gets or sets ReferenceId of the related file."
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets name of the user this policy is set for."
          },
          "Created": {
            "type": "string",
            "description": "Gets or sets the date this policy is created.",
            "format": "date-time"
          },
          "PhoneNumbers": {
            "type": "array",
            "description": "Gets or sets list of phone numbers related.",
            "items": {
              "type": "string"
            }
          },
          "Direction": {
            "description": "Gets or sets the direction of phone call.",
            "allOf": [
              {
                "$ref": "#/definitions/PhoneCallDirection"
              }
            ],
            "x-enumType": "PhoneCallDirection"
          }
        }
      },
      "PhoneCallDirection": {
        "type": "string",
        "description": "Defines phone call directions.",
        "x-enumNames": [
          "Incoming",
          "Outgoing",
          "Both"
        ],
        "enum": [
          "Incoming",
          "Outgoing",
          "Both"
        ],
        "x-enumType": "PhoneCallDirection"
      },
      "WindowsCEPhoneCallPolicySection": {
        "allOf": [
          {
            "$ref": "#/definitions/PhoneCallPolicySection"
          },
          {
            "type": "object",
            "description": "Data contract describing a phone call configuration."
          }
        ]
      },
      "AndroidClassicPhoneCallPolicySection": {
        "allOf": [
          {
            "$ref": "#/definitions/PhoneCallPolicySection"
          },
          {
            "type": "object",
            "description": "Data contract describing a phone call configuration."
          }
        ]
      },
      "ScheduledScriptsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the scheduled scripts configuration",
            "properties": {
              "ScheduledScriptEventActions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that should be run on the device",
                "items": {
                  "$ref": "#/definitions/DeviceEventAction"
                }
              }
            }
          }
        ]
      },
      "WindowsDesktopModernScheduledScripts": {
        "allOf": [
          {
            "$ref": "#/definitions/ScheduledScriptsSection"
          },
          {
            "type": "object",
            "description": "Defines the scheduled scripts configuration"
          }
        ]
      },
      "MacScheduledScriptsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ScheduledScriptsSection"
          },
          {
            "type": "object",
            "description": "Defines the scheduled scripts configuration"
          }
        ]
      },
      "LinuxScheduledScriptsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ScheduledScriptsSection"
          },
          {
            "type": "object",
            "description": "Defines the scheduled scripts configuration"
          }
        ]
      },
      "AndroidClassicScheduledScriptsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ScheduledScriptsSection"
          },
          {
            "type": "object",
            "description": "Defines the scheduled scripts configuration"
          }
        ]
      },
      "AndroidWorkProfileScheduledScriptsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicScheduledScriptsSection"
          },
          {
            "type": "object",
            "description": "Defines the scheduled scripts configuration"
          }
        ]
      },
      "AndroidCorporateScheduledScriptsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkProfileScheduledScriptsSection"
          },
          {
            "type": "object",
            "description": "Defines the scheduled scripts configuration"
          }
        ]
      },
      "SingleSignOnSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the Single Sign On configuration.",
            "properties": {
              "Applications": {
                "type": "array",
                "description": "list of application bundle id's.",
                "items": {
                  "$ref": "#/definitions/SingleSignOnSectionAppDetail"
                }
              },
              "SotiIdentityRefId": {
                "type": "string",
                "description": "Soti Identity reference id."
              },
              "CertificateRefId": {
                "type": "string",
                "description": "Identity Certificate ReferenceId."
              },
              "CertificateTemplateRefId": {
                "type": "string",
                "description": "Identity Certificate Template ReferenceId"
              }
            }
          }
        ]
      },
      "SingleSignOnSectionAppDetail": {
        "type": "object",
        "description": "Single Sign On App detail.",
        "properties": {
          "AppName": {
            "type": "string",
            "description": "Gets or sets value of app name."
          },
          "BundleIdentifier": {
            "type": "string",
            "description": "Gets or sets value of bundle identifier."
          }
        }
      },
      "AndroidWorkSingleSignOnSection": {
        "allOf": [
          {
            "$ref": "#/definitions/SingleSignOnSection"
          },
          {
            "type": "object",
            "description": "Defines the Single Sign On configuration."
          }
        ]
      },
      "AndroidClassicSingleSignOnSection": {
        "allOf": [
          {
            "$ref": "#/definitions/SingleSignOnSection"
          },
          {
            "type": "object",
            "description": "Defines the Single Sign On configuration."
          }
        ]
      },
      "AndroidEnterpriseWorkProfileSingleSignOnSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicSingleSignOnSection"
          },
          {
            "type": "object",
            "description": "Defines the Single Sign On configuration."
          }
        ]
      },
      "AndroidEnterpriseCopeSingleSignOnSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicSingleSignOnSection"
          },
          {
            "type": "object",
            "description": "Defines the Single Sign On configuration."
          }
        ]
      },
      "ModernDesktopAuthenticationDesktopSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an authentication configuration for Windows Desktop devices (10 and above).",
            "required": [
              "DevicePasswordEnabled",
              "AllowSimplePasscode",
              "RequireAlphanumericValue",
              "AllowWindowsHelloForBusiness",
              "UseSecurityKey"
            ],
            "properties": {
              "DevicePasswordEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users are required to enter a passcode before using the device. Otherwise, anyone who has the device can access all of its functions and data."
              },
              "MaximumFailedAttempts": {
                "type": "integer",
                "description": "Gets or sets the maximum number of failed unlock attempts.  Determines how many failed passcode attempts can be made before the device is wiped. If you don’t change this setting, after six failed passcode attempts, the device imposes a time delay before a passcode can be entered again. The time delay increases with each failed attempt. After the final failed attempt, all data and settings are securely erased from the device. The passcode time delay begins after the sixth attempt, so if you set this value to 6 or lower, no time delay is imposed and the device is erased when the attempt limit is exceeded.",
                "format": "int32"
              },
              "IdleTimeoutInMinutes": {
                "type": "integer",
                "description": "Gets or sets the device idle timeout.  If the device isn’t used for the period of time you specify, it automatically locks. Entering the passcode unlocks it.",
                "format": "int32"
              },
              "MinimumPasscodeLength": {
                "type": "integer",
                "description": "Gets or sets the minimum passcode length.  Specifies the minimum number of characters a passcode can contain.",
                "format": "int32"
              },
              "PasswordExpiration": {
                "type": "integer",
                "description": "Gets or sets the password expiration.  Specifies when the password expires (in days)..",
                "format": "int32"
              },
              "MinimumPasswordAge": {
                "type": "integer",
                "description": "Gets or sets the minimum days before password reset.  Specifies when the password must be in used before the user can change it (in days)..",
                "format": "int32"
              },
              "PasscodeHistory": {
                "type": "integer",
                "description": "Gets or sets the length of the passcode history.  A new passcode won’t be accepted if it matches a previously used passcode. You can specify how many previous passcodes are remembered and compared.",
                "format": "int32"
              },
              "AllowSimplePasscode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the user can use sequential or repeated characters in their passcodes. (For example, this would allow the passcodes “3333” or “DEFG.”)"
              },
              "RequireAlphanumericValue": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the passcode must contain at least one letter character."
              },
              "MinimumComplexCharacters": {
                "type": "integer",
                "description": "Gets or sets the minimum number of complex characters.  The number of non-alphanumeric characters (such as $, &amp;, and !) that the passcode must contain.",
                "format": "int32"
              },
              "AllowWindowsHelloForBusiness": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether Windows Hello for Business is enabled or not. Values are Enable (True) , Disable (False)"
              },
              "MinimumPinLength": {
                "type": "integer",
                "description": "Gets or sets the minimum PIN length for Windows Hello for Business.  Specifies the minimum number of characters a PIN can contain. Values are ",
                "format": "int32"
              },
              "MaximumPinLength": {
                "type": "integer",
                "description": "Gets or sets the maximum PIN length for Windows Hello for Business.  Specifies the maximum number of characters a PIN can contain.",
                "format": "int32"
              },
              "Digits": {
                "type": "integer",
                "description": "Gets or sets a value indicating whether Windows Hello PIN should have digit or not.",
                "format": "int32"
              },
              "LowercaseLetters": {
                "type": "integer",
                "description": "Gets or sets a value indicating whether Windows Hello PIN should have lowercase letters or not, 1 : .",
                "format": "int32"
              },
              "UppercaseLetters": {
                "type": "integer",
                "description": "Gets or sets a value indicating whether Windows Hello PIN should have uppercase letters or not.",
                "format": "int32"
              },
              "SpecialCharacters": {
                "type": "integer",
                "description": "Gets or sets a value indicating whether Windows Hello PIN should have special characters or not.",
                "format": "int32"
              },
              "PinExpirationDays": {
                "type": "integer",
                "description": "Gets of sets a value corresponding the number of previous PINs the user would not be able to reuse.",
                "format": "int32"
              },
              "RememberPinHistory": {
                "type": "integer",
                "description": "Gets or sets a value indicating whether Windows Hello PIN should have special characters or not.",
                "format": "int32"
              },
              "EnablePinRecovery": {
                "type": "boolean",
                "description": "Gets or sets a value indicating If PIN recovery secret will be stored on the device."
              },
              "UseSecurityDevice": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether only devices with a usable TPM provision Windows Hello for Business. Windows Hello PIN should have special characters or not."
              },
              "AllowBiometricAuthentication": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether Windows Hello for Business can authenticate using gestures, such as face and fingerprint."
              },
              "UseCertificateForOnPrem": {
                "type": "boolean",
                "description": "Gets or sets a value indicating if Windows Hello for Business should use certificates to authenticate to on-premise resources."
              },
              "UseSecurityKey": {
                "type": "boolean",
                "description": "Gets or sets a value indicating if Windows Hello security key should be used as logon credential for all PCs in the tenant."
              }
            }
          }
        ]
      },
      "HoloLensAuthenticationSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an authentication configuration for Windows HoloLens (RS1 and above).",
            "required": [
              "DevicePasswordEnabled",
              "AllowIdleReturnWithoutPassword"
            ],
            "properties": {
              "DevicePasswordEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users are required to enter a passcode before using the device. Otherwise, anyone who has the device can access all of its functions and data."
              },
              "AllowIdleReturnWithoutPassword": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users are required to enter a passcode after the device is idle. Otherwise, anyone who has the device can access all of its functions and data."
              }
            }
          }
        ]
      },
      "WindowsPhoneAuthenticationDesktopSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an authentication configuration for Android Samsung devices.",
            "required": [
              "EnforceUserPasswordPolicy",
              "RequirePasscode",
              "AllowSimplePasscode",
              "RequireAlphanumericValue"
            ],
            "properties": {
              "EnforceUserPasswordPolicy": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the user must set a password on the device"
              },
              "RequirePasscode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users are required to enter a passcode before using the device. Otherwise, anyone who has the device can access all of its functions and data."
              },
              "AllowSimplePasscode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the user can use sequential or repeated characters in their passcodes. (For example, this would allow the passcodes “3333” or “DEFG.”)"
              },
              "RequireAlphanumericValue": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the passcode must contain at least one letter character."
              },
              "MinimumPasscodeLength": {
                "type": "integer",
                "description": "Gets or sets the minimum passcode length.  Specifies the minimum number of characters a passcode can contain.",
                "format": "int32"
              },
              "MinimumComplexCharacters": {
                "type": "integer",
                "description": "Gets or sets the minimum number of complex characters.  The number of non-alphanumeric characters (such as $, &amp;, and !) that the passcode must contain.",
                "format": "int32"
              },
              "MaximumPasscodeAgeInDays": {
                "type": "integer",
                "description": "Gets or sets the maximum passcode age.  Requires users to change their passcode at the interval you specify.",
                "format": "int32"
              },
              "IdleTimeoutInMinutes": {
                "type": "integer",
                "description": "Gets or sets the device idle timeout.  If the device isn’t used for the period of time you specify, it automatically locks. Entering the passcode unlocks it.",
                "format": "int32"
              },
              "PasscodeHistory": {
                "type": "integer",
                "description": "Gets or sets the length of the passcode history.  A new passcode won’t be accepted if it matches a previously used passcode. You can specify how many previous passcodes are remembered and compared.",
                "format": "int32"
              },
              "UnlockGracePeriodInMinutes": {
                "type": "integer",
                "description": "Gets or sets the grace period for device unlock.  Specifies how soon the device can be unlocked again after use, without reprompting for the passcode.",
                "format": "int32"
              },
              "MaximumFailedAttempts": {
                "type": "integer",
                "description": "Gets or sets the maximum number of failed unlock attempts.  Determines how many failed passcode attempts can be made before the device is wiped. If you don’t change this setting, after six failed passcode attempts, the device imposes a time delay before a passcode can be entered again. The time delay increases with each failed attempt. After the final failed attempt, all data and settings are securely erased from the device. The passcode time delay begins after the sixth attempt, so if you set this value to 6 or lower, no time delay is imposed and the device is erased when the attempt limit is exceeded.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ModernDesktopCertificateSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract for an Windows Phone certificate (.cer) configuration.",
            "properties": {
              "Connection": {
                "description": "Gets or sets the certificate connection in this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateConnection"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "CertificateConnection": {
        "type": "object",
        "description": "Store configuration regarding device certificates with\na device or group.",
        "required": [
          "CertType",
          "CertificateAuthorityStoreType"
        ],
        "properties": {
          "CertificateRefId": {
            "type": "string",
            "description": "Gets or sets the Certificate Reference Id."
          },
          "CertType": {
            "description": "Gets or sets the cert type.",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          },
          "CertName": {
            "type": "string",
            "description": "Gets or sets the certificate name."
          },
          "CertificateLocalStoreType": {
            "description": "Gets or sets the Certificate Local Store Type.",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateLocalStoreType"
              }
            ],
            "x-enumType": "CertificateLocalStoreType"
          },
          "CertificateAuthorityStoreType": {
            "description": "Gets or sets the Certificate Authority Store Type.",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateAuthorityStoreType"
              }
            ],
            "x-enumType": "CertificateAuthorityStoreType"
          }
        }
      },
      "CertificateRetrievalMethod": {
        "type": "string",
        "description": "Declares valid retrieval methods for certificates",
        "x-enumNames": [
          "FileUpload",
          "PkiRequest",
          "ScepRequest",
          "WindowsScepRequest"
        ],
        "enum": [
          "FileUpload",
          "PkiRequest",
          "ScepRequest",
          "WindowsScepRequest"
        ],
        "x-enumType": "CertificateRetrievalMethod"
      },
      "CertificateLocalStoreType": {
        "type": "string",
        "description": "Certificate Local Store Type",
        "x-enumNames": [
          "Device",
          "User"
        ],
        "enum": [
          "Device",
          "User"
        ],
        "x-enumType": "CertificateLocalStoreType"
      },
      "CertificateAuthorityStoreType": {
        "type": "string",
        "description": "Certificate Authority Store Type",
        "x-enumNames": [
          "Automatic",
          "Root",
          "Intermediate",
          "TrustedPublisher",
          "TrustedPeople"
        ],
        "enum": [
          "Automatic",
          "Root",
          "Intermediate",
          "TrustedPublisher",
          "TrustedPeople"
        ],
        "x-enumType": "CertificateAuthorityStoreType"
      },
      "ModernDesktopClientCertificateSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Client Certificate (.pfx) Section for Windows Modern",
            "required": [
              "CertType",
              "KeyStoreType",
              "ExportablePrivateKey",
              "EncryptPassword"
            ],
            "properties": {
              "CertificateRefId": {
                "type": "string",
                "description": "Gets or sets the Certificate Reference Id."
              },
              "CertType": {
                "description": "Gets or sets the cert type.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "CertName": {
                "type": "string",
                "description": "Gets or sets the certificate name."
              },
              "CertificateLocalStoreType": {
                "description": "Gets or sets the Certificate Local Store Type.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateLocalStoreType"
                  }
                ]
              },
              "KeyStoreType": {
                "description": "Gets or sets the Certificate NGC Key Store Type",
                "allOf": [
                  {
                    "$ref": "#/definitions/KeyStoreType"
                  }
                ]
              },
              "ContainerName": {
                "type": "string",
                "description": "Gets or sets the the NGC container name"
              },
              "ExportablePrivateKey": {
                "type": "boolean",
                "description": "Gets or sets the value indicating whether of PFX certificate private key exportable or not"
              },
              "EncryptPassword": {
                "type": "boolean",
                "description": "Gets or sets the value indicating whether of PFX certificate password encryption applied or not"
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "KeyStoreType": {
        "type": "string",
        "description": "Defines Key Store Types ",
        "x-enumNames": [
          "None",
          "TpmIfPresentOrFailOtherwise",
          "TpmIfPresentOrSoftwareOtherwise",
          "Software",
          "KeyContainer"
        ],
        "enum": [
          "None",
          "TpmIfPresentOrFailOtherwise",
          "TpmIfPresentOrSoftwareOtherwise",
          "Software",
          "KeyContainer"
        ],
        "x-enumType": "KeyStoreType"
      },
      "ModernDesktopEmailSection": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailSection"
          },
          {
            "type": "object",
            "description": "Represents the Exchange ActiveSync configuration for an Windows Phone device."
          }
        ]
      },
      "EmailSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Exchange ActiveSync configuration for an iOS device.",
            "properties": {
              "Account": {
                "description": "Gets or sets the Exchange ActiveSync account.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EmailAccount"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "EmailAccount": {
        "type": "object",
        "description": "Represents a single email account for an email configuration.",
        "x-abstract": true,
        "required": [
          "AllowMove",
          "AllowThirdApplication",
          "AllowRecentSync",
          "EnableSMIME",
          "DeviceIfNotContainer",
          "SMIMEEnablePerMessageSwitch",
          "EmailAccountType"
        ],
        "properties": {
          "AccountName": {
            "type": "string",
            "description": "Gets or sets the Email account name."
          },
          "AllowMove": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device\nallow users from moving email between accounts,\nor forwarding or replying to emails from accounts\nother than the one they originated from."
          },
          "AllowThirdApplication": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device\nallow third party apps from using this account to send mail."
          },
          "AllowRecentSync": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device\nallow recent sync."
          },
          "EnableSMIME": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device\nenable S/MIME"
          },
          "SigningCertificateRefId": {
            "type": "string",
            "description": "Gets or sets the certificate ref id for signing."
          },
          "SigningCertificateRetrievalMethod": {
            "description": "Gets or sets the retrieval method for certificate for signing.",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          },
          "EncryptCertificateRefId": {
            "type": "string",
            "description": "Gets or sets the certificate ref id for encrypt."
          },
          "EncryptCertificateRetrievalMethod": {
            "description": "Gets or sets the retrieval method for certificate for signing.",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          },
          "Signature": {
            "type": "string",
            "description": "Gets or sets the string to be used as the signature of sender."
          },
          "ContainerIds": {
            "type": "array",
            "description": "Gets or sets container Ids if email account applied not to device only.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "DeviceIfNotContainer": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether account should be installed on device if installation in container failed."
          },
          "SMIMEEnablePerMessageSwitch": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device\nEnable Per Message Switch"
          },
          "EmailAccountType": {
            "description": "Gets or sets Email Account type\nEnable Per Message Switch",
            "allOf": [
              {
                "$ref": "#/definitions/EmailAccountType"
              }
            ],
            "x-enumType": "EmailAccountType"
          },
          "UniqueCharacteristic": {
            "type": "string",
            "description": "Gets or sets the UniqueCharacteristic."
          }
        }
      },
      "EmailAccountType": {
        "type": "string",
        "description": "The EmailAccountType",
        "x-enumNames": [
          "ImapAccount",
          "Pop3Account",
          "WindowsEasAccount",
          "GmailAccount",
          "SamsungEasAccount",
          "ExchangeActiveSyncAccount",
          "MacExchangeActiveSyncAccount"
        ],
        "enum": [
          "ImapAccount",
          "Pop3Account",
          "WindowsEasAccount",
          "GmailAccount",
          "SamsungEasAccount",
          "ExchangeActiveSyncAccount",
          "MacExchangeActiveSyncAccount"
        ],
        "x-enumType": "EmailAccountType"
      },
      "EmailGmailAccount": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailAccount"
          },
          {
            "type": "object",
            "description": "Represents the gmail account for android device.",
            "required": [
              "SslRequired",
              "AcceptAllCertificates",
              "SyncLookBack"
            ],
            "properties": {
              "User": {
                "type": "string",
                "description": "Gets or sets the user's id.  If null, the device will prompt\nfor this information."
              },
              "Server": {
                "type": "string",
                "description": "Gets or sets the host name of the Exchange server."
              },
              "UserCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the id of the user certificate."
              },
              "UserCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for user certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "Email": {
                "type": "string",
                "description": "Gets or sets the user's email address. If null, the device will prompt\nfor this information."
              },
              "SslRequired": {
                "type": "boolean",
                "description": "Gets or sets whether ssl is require for email."
              },
              "AcceptAllCertificates": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to accept all certificates sent by\nserver."
              },
              "SyncLookBack": {
                "description": "Gets or sets default sync window",
                "allOf": [
                  {
                    "$ref": "#/definitions/EmailSyncWindow"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "EmailSyncWindow": {
        "type": "string",
        "description": "The window for which the emails will be synced",
        "x-enumNames": [
          "Unlimited",
          "OneDay",
          "ThreeDays",
          "OneWeek",
          "TwoWeeks",
          "OneMonth"
        ],
        "enum": [
          "Unlimited",
          "OneDay",
          "ThreeDays",
          "OneWeek",
          "TwoWeeks",
          "OneMonth"
        ],
        "x-enumType": "EmailSyncWindow"
      },
      "EmailImapAccount": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailAccount"
          },
          {
            "type": "object",
            "description": "Represents the imap account for an iOS device.",
            "required": [
              "IncomingAuthenticationType",
              "IncomingPort",
              "IncomingUseSSL",
              "IncomingUseTLS",
              "OutgoingAuthenticationType",
              "OutgoingPort",
              "OutgoingUseSSL",
              "OutgoingUseTLS",
              "SamePassword",
              "UseSSL",
              "IsDefault",
              "SyncInterval",
              "EmailNotification",
              "IncomingAcceptAllCertificate",
              "OutgoingAcceptAllCertificate",
              "UseAlternativeSmtp",
              "SyncLookBack",
              "CacAuthentication",
              "AllowForwarding"
            ],
            "properties": {
              "Description": {
                "type": "string",
                "description": "Gets or sets the email account description."
              },
              "Address": {
                "type": "string",
                "description": "Gets or sets the email address"
              },
              "Domain": {
                "type": "string",
                "description": "Gets or sets the user's domain.  If null, the device will prompt\nfor this information."
              },
              "User": {
                "type": "string",
                "description": "Gets or sets the user's id.  If null, the device will prompt\nfor this information."
              },
              "Password": {
                "type": "string",
                "description": "Gets or sets the user's password. If null, the device will prompt\nfor this information."
              },
              "IncomingAuthenticationType": {
                "description": "Gets or sets the incoming account authentication type.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EmailAuthenticationType"
                  }
                ]
              },
              "IncomingHostName": {
                "type": "string",
                "description": "Gets or sets the incoming server host name."
              },
              "IncomingIMAPPrefix": {
                "type": "string",
                "description": "Gets or sets the incoming IMAP prefix."
              },
              "IncomingPort": {
                "type": "integer",
                "description": "Gets or sets the incoming port number.",
                "format": "int32"
              },
              "IncomingUseSSL": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the incoming connection uses SSL."
              },
              "IncomingUseTLS": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the incoming connection uses TLS."
              },
              "IncomingUserName": {
                "type": "string",
                "description": "Gets or sets the incoming user name."
              },
              "IncomingPassword": {
                "type": "string",
                "description": "Gets or sets the incoming password."
              },
              "OutgoingAuthenticationType": {
                "description": "Gets or sets the outgoing account authentication type.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EmailAuthenticationType"
                  }
                ]
              },
              "OutgoingHostName": {
                "type": "string",
                "description": "Gets or sets the outgoing server host name."
              },
              "OutgoingPort": {
                "type": "integer",
                "description": "Gets or sets the outgoing port number.",
                "format": "int32"
              },
              "OutgoingUseSSL": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the outgoing server uses SSL."
              },
              "OutgoingUseTLS": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the outgoing server uses TLS."
              },
              "OutgoingUserName": {
                "type": "string",
                "description": "Gets or sets the outgoing user name."
              },
              "OutgoingPassword": {
                "type": "string",
                "description": "Gets or sets the outgoing password."
              },
              "SamePassword": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the outgoing password is the same as the incoming password."
              },
              "UseSSL": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use SSL\nwhen connecting to the Exchange server."
              },
              "IsDefault": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not this is a default\naccount."
              },
              "SyncInterval": {
                "description": "Gets or sets the number of minutes between two successive synchronization.\n0 for never.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SyncInterval"
                  }
                ]
              },
              "EmailNotification": {
                "description": "Gets or sets the response for email notification.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EmailNotification"
                  }
                ]
              },
              "IncomingAcceptAllCertificate": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the incoming connection to accept all certificates."
              },
              "OutgoingAcceptAllCertificate": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the outgoing connection to accept all certificates."
              },
              "UseAlternativeSmtp": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not use alternative SMTP"
              },
              "AlternativeUserName": {
                "type": "string",
                "description": "Gets or sets a the alternative user\naccount."
              },
              "AlternativePassword": {
                "type": "string",
                "description": "Gets or sets a the alternative password\naccount."
              },
              "AlternativeDomain": {
                "type": "string",
                "description": "Gets or sets a the alternative domain\naccount."
              },
              "SyncLookBack": {
                "description": "Gets or sets the number of days worth of past calendar the device\nshould retrieve.  If null, the device will retrieve all available\ncalendar.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SyncLookBack"
                  }
                ]
              },
              "ReplyEmailAddress": {
                "type": "string",
                "description": "Gets or sets the Reply Email Address."
              },
              "SendDisplayName": {
                "type": "string",
                "description": "Gets or sets the Sender DisplayName."
              },
              "CacAuthentication": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether CAC authentication should be used."
              },
              "AllowForwarding": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not prevent email forwarding"
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "EmailAuthenticationType": {
        "type": "string",
        "description": "Enumerates the different email authentication types.",
        "x-enumNames": [
          "EmailAuthNone",
          "EmailAuthPassword",
          "EmailAuthCRAMMD5",
          "EmailAuthHTTPMD5",
          "EmailAuthNTLM"
        ],
        "enum": [
          "EmailAuthNone",
          "EmailAuthPassword",
          "EmailAuthCRAMMD5",
          "EmailAuthHTTPMD5",
          "EmailAuthNTLM"
        ],
        "x-enumType": "EmailAuthenticationType"
      },
      "SyncInterval": {
        "type": "string",
        "description": "Enumerators for synchronization interval.",
        "x-enumNames": [
          "Manually",
          "FiveMinutes",
          "TenMinutes",
          "FifteenMinutes",
          "ThirtyMinutes",
          "SixtyMinutes",
          "OneHundredTwentyMinutes",
          "TwoHundradFourtyMinutes",
          "SevenHundradFourtyMinutes",
          "AsReceived",
          "OnDemand",
          "AutoPush",
          "Never"
        ],
        "enum": [
          "Manually",
          "FiveMinutes",
          "TenMinutes",
          "FifteenMinutes",
          "ThirtyMinutes",
          "SixtyMinutes",
          "OneHundredTwentyMinutes",
          "TwoHundradFourtyMinutes",
          "SevenHundradFourtyMinutes",
          "AsReceived",
          "OnDemand",
          "AutoPush",
          "Never"
        ],
        "x-enumType": "SyncInterval"
      },
      "EmailNotification": {
        "type": "string",
        "description": "Enumerators defining how to react when an email arrives.\nThe description attributes are used in the serializer/deserialer as the\nkey in the keystring because the enum names are not the same as the keys used.",
        "x-enumNames": [
          "None",
          "VibrateAlways",
          "VibrateWhenSilent"
        ],
        "enum": [
          "None",
          "VibrateAlways",
          "VibrateWhenSilent"
        ],
        "x-enumType": "EmailNotification"
      },
      "SyncLookBack": {
        "type": "string",
        "description": "Enumerators defining the days for synchronizer to look back.",
        "x-enumNames": [
          "Unlimited",
          "OneDay",
          "ThreeDays",
          "OneWeek",
          "TwoWeeks",
          "OneMonth",
          "ThreeMonths",
          "SixMonths"
        ],
        "enum": [
          "Unlimited",
          "OneDay",
          "ThreeDays",
          "OneWeek",
          "TwoWeeks",
          "OneMonth",
          "ThreeMonths",
          "SixMonths"
        ],
        "x-enumType": "SyncLookBack"
      },
      "EmailPop3Account": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailAccount"
          },
          {
            "type": "object",
            "description": "Represents the pop3 account for an iOS device.",
            "required": [
              "IncomingAuthenticationType",
              "IncomingPort",
              "IncomingUseSSL",
              "IncomingUseTLS",
              "OutgoingAuthenticationType",
              "OutgoingPort",
              "OutgoingUseSSL",
              "OutgoingUseTLS",
              "SamePassword",
              "UseSSL",
              "IsDefault",
              "SyncInterval",
              "EmailNotification",
              "IncomingAcceptAllCertificate",
              "OutgoingAcceptAllCertificate",
              "UseAlternativeSmtp",
              "SyncLookBack",
              "CacAuthentication",
              "AllowForwarding"
            ],
            "properties": {
              "Description": {
                "type": "string",
                "description": "Gets or sets the email account description."
              },
              "Address": {
                "type": "string",
                "description": "Gets or sets the email address"
              },
              "Domain": {
                "type": "string",
                "description": "Gets or sets the user's domain.  If null, the device will prompt\nfor this information."
              },
              "User": {
                "type": "string",
                "description": "Gets or sets the user's id.  If null, the device will prompt\nfor this information."
              },
              "Password": {
                "type": "string",
                "description": "Gets or sets the user's password. If null, the device will prompt\nfor this information."
              },
              "IncomingAuthenticationType": {
                "description": "Gets or sets the incoming account authentication type.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EmailAuthenticationType"
                  }
                ]
              },
              "IncomingHostName": {
                "type": "string",
                "description": "Gets or sets the incoming server host name."
              },
              "IncomingPort": {
                "type": "integer",
                "description": "Gets or sets the incoming port number.",
                "format": "int32"
              },
              "IncomingUseSSL": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the incoming connection uses SSL."
              },
              "IncomingUseTLS": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the incoming connection uses TLS."
              },
              "IncomingUserName": {
                "type": "string",
                "description": "Gets or sets the incoming user name."
              },
              "IncomingPassword": {
                "type": "string",
                "description": "Gets or sets the incoming password."
              },
              "OutgoingAuthenticationType": {
                "description": "Gets or sets the outgoing account authentication type.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EmailAuthenticationType"
                  }
                ]
              },
              "OutgoingHostName": {
                "type": "string",
                "description": "Gets or sets the outgoing server host name."
              },
              "OutgoingPort": {
                "type": "integer",
                "description": "Gets or sets the outgoing port number.",
                "format": "int32"
              },
              "OutgoingUseSSL": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the outgoing server uses SSL."
              },
              "OutgoingUseTLS": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the outgoing server uses TLS."
              },
              "OutgoingUserName": {
                "type": "string",
                "description": "Gets or sets the outgoing user name."
              },
              "OutgoingPassword": {
                "type": "string",
                "description": "Gets or sets the outgoing password."
              },
              "SamePassword": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the outgoing password is the same as the incoming password."
              },
              "UseSSL": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use SSL\nwhen connecting to the Exchange server."
              },
              "IsDefault": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not this is a default\naccount."
              },
              "SyncInterval": {
                "description": "Gets or sets the number of minutes between two successive synchronization.\n0 for never.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SyncInterval"
                  }
                ]
              },
              "EmailNotification": {
                "description": "Gets or sets the response for email notification.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EmailNotification"
                  }
                ]
              },
              "IncomingAcceptAllCertificate": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the incoming connection to accept all certificates."
              },
              "OutgoingAcceptAllCertificate": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the outgoing connection to accept all certificates."
              },
              "UseAlternativeSmtp": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not use alternative SMTP"
              },
              "AlternativeUserName": {
                "type": "string",
                "description": "Gets or sets a the alternative user\naccount."
              },
              "AlternativePassword": {
                "type": "string",
                "description": "Gets or sets a the alternative password\naccount."
              },
              "AlternativeDomain": {
                "type": "string",
                "description": "Gets or sets a the alternative domain\naccount."
              },
              "SyncLookBack": {
                "description": "Gets or sets the number of days worth of past calendar the device\nshould retrieve.  If null, the device will retrieve all available\ncalendar.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SyncLookBack"
                  }
                ]
              },
              "ReplyEmailAddress": {
                "type": "string",
                "description": "Gets or sets the Reply Email Address."
              },
              "SendDisplayName": {
                "type": "string",
                "description": "Gets or sets the Sender DisplayName."
              },
              "CacAuthentication": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether CAC authentication should be used."
              },
              "AllowForwarding": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not prevent email forwarding"
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "ExchangeActiveSyncAccount": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailAccount"
          },
          {
            "type": "object",
            "description": "Represents the Exchange ActiveSync configuration for an iOS device.",
            "required": [
              "UserNameFormat",
              "UseSSL",
              "UseOath",
              "EnableSigning",
              "AllowUserOverrideSigning",
              "AllowUserOverrideSigningCertificate",
              "EnableEncryption",
              "AllowUserOverrideEncryption",
              "AllowUserOverrideEncryptionCertificate",
              "AllowMailDrop",
              "EnableCalendars",
              "EnableCalendarsUserOverridable",
              "EnableContacts",
              "EnableContactsUserOverridable",
              "EnableMail",
              "EnableMailUserOverridable",
              "EnableNotes",
              "EnableNotesUserOverridable",
              "EnableReminders",
              "EnableRemindersUserOverridable"
            ],
            "properties": {
              "ServerHostName": {
                "type": "string",
                "description": "Gets or sets the host name of the Exchange server."
              },
              "UserNameFormat": {
                "description": "Gets or sets the User Name Format used by connection.",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserNameFormat"
                  }
                ]
              },
              "UseSSL": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use SSL\nwhen connecting to the Exchange server."
              },
              "Domain": {
                "type": "string",
                "description": "Gets or sets the user's domain.  If null, the device will prompt\nfor this information."
              },
              "UserName": {
                "type": "string",
                "description": "Gets or sets the user's name.  If null, the device will prompt\nfor this information."
              },
              "Password": {
                "type": "string",
                "description": "Gets or sets the user's password.  If null, the device will prompt\nfor this information."
              },
              "DaysToSync": {
                "type": "integer",
                "description": "Gets or sets the number of days worth of past e-mails the device\nshould retrieve.  If null, the device will retrieve all available\ne-mails.",
                "format": "int32"
              },
              "Email": {
                "type": "string",
                "description": "Gets or sets the email for the specified client certificate."
              },
              "AuthenticationCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the certificate reference id for Authentication."
              },
              "AuthenticationCertificateRetrievalMethod": {
                "description": "Gets or sets the retrieval method for certificate for signing.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "UseOath": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the OAth authentication should be used"
              },
              "EnableSigning": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the S/MIME should be enabled"
              },
              "AllowUserOverrideSigning": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether user can override S/MIME signing"
              },
              "AllowUserOverrideSigningCertificate": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether user can override S/MIME signing certificate"
              },
              "EnableEncryption": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the S/MIME encryption should be used"
              },
              "AllowUserOverrideEncryption": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether user can override S/MIME encryption"
              },
              "AllowUserOverrideEncryptionCertificate": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether user can override S/MIME encryption certificate"
              },
              "OAuthSignInURL": {
                "type": "string",
                "description": "The URL that this account should use for signing in via OAuth. When this URL is specified, auto-discovery is not used for this account so you must also specify a host."
              },
              "OAuthTokenRequestURL": {
                "type": "string",
                "description": "The URL that this account should use for token requests via OAuth."
              },
              "AllowMailDrop": {
                "type": "boolean",
                "description": "If true, enables this account to use Mail Drop."
              },
              "EnableCalendars": {
                "type": "boolean",
                "description": "If false, disables the Calendars service for this account."
              },
              "EnableCalendarsUserOverridable": {
                "type": "boolean",
                "description": "If false, prevents the user from changing the state of the Calendars service for this account in Settings."
              },
              "EnableContacts": {
                "type": "boolean",
                "description": "If false, disables the Contacts service for this account. "
              },
              "EnableContactsUserOverridable": {
                "type": "boolean",
                "description": "If false, prevents the user from changing the state of the Contacts service for this account in Settings."
              },
              "EnableMail": {
                "type": "boolean",
                "description": "If false, disables the Mail service for this account."
              },
              "EnableMailUserOverridable": {
                "type": "boolean",
                "description": "If false, prevents the user from changing the state of the Mail service for this account in Settings."
              },
              "EnableNotes": {
                "type": "boolean",
                "description": "If false, disables the Notes service for this account. "
              },
              "EnableNotesUserOverridable": {
                "type": "boolean",
                "description": "If false, prevents the user from changing the state of the Notes service for this account in Settings."
              },
              "EnableReminders": {
                "type": "boolean",
                "description": "If false, disables the Reminders service for this account."
              },
              "EnableRemindersUserOverridable": {
                "type": "boolean",
                "description": "If false, prevents the user from changing the state of the Reminders service for this account in Settings."
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "UserNameFormat": {
        "type": "string",
        "description": "Enumerates the different user name format types available for Exchange/Wi-Fi configurations.",
        "x-enumNames": [
          "UPN",
          "DomainUserName",
          "UserName",
          "PromptUser",
          "FreeText"
        ],
        "enum": [
          "UPN",
          "DomainUserName",
          "UserName",
          "PromptUser",
          "FreeText"
        ],
        "x-enumType": "UserNameFormat"
      },
      "MacExchangeActiveSyncAccount": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailAccount"
          },
          {
            "type": "object",
            "description": "Represents the Exchange ActiveSync configuration for an macOS device.",
            "required": [
              "SSL",
              "UserNameFormat",
              "ExternalSSL"
            ],
            "properties": {
              "Domain": {
                "type": "string",
                "description": "Gets or sets the user's domain.  If null, the device will prompt\nfor this information."
              },
              "Host": {
                "type": "string",
                "description": "Gets or sets the host name of the Exchange server."
              },
              "SSL": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use SSL\nwhen connecting to the Exchange server."
              },
              "Path": {
                "type": "string",
                "description": "Gets or sets the path number."
              },
              "Port": {
                "type": "integer",
                "description": "Gets or sets the port number.",
                "format": "int32"
              },
              "UserNameFormat": {
                "description": "Gets or sets the User Name Format used by connection.",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserNameFormat"
                  }
                ]
              },
              "UserName": {
                "type": "string",
                "description": "Gets or sets the user's name.  If null, the device will prompt\nfor this information."
              },
              "Password": {
                "type": "string",
                "description": "Gets or sets the user's password.  If null, the device will prompt\nfor this information."
              },
              "EmailAddress": {
                "type": "string",
                "description": "Gets or sets the email for the specified client certificate."
              },
              "AuthenticationCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the certificate reference id for Authentication."
              },
              "AuthenticationCertificateRetrievalMethod": {
                "description": "Gets or sets the retrieval method for certificate for signing.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "ExternalHost": {
                "type": "string",
                "description": "Gets or sets the external host name of the Exchange server."
              },
              "ExternalSSL": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use external SSL\nwhen connecting to the Exchange server."
              },
              "ExternalPath": {
                "type": "string",
                "description": "Gets or sets the external path number."
              },
              "ExternalPort": {
                "type": "integer",
                "description": "Gets or sets the external port number.",
                "format": "int32"
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "SamsungEasAccount": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailAccount"
          },
          {
            "type": "object",
            "description": "Exchange ActiveSync Configuration of a specific user.",
            "required": [
              "UserNameFormat",
              "IsDefault",
              "EmailNotification",
              "EmailSecurity",
              "SyncLookBack",
              "SyncInterval",
              "AcceptAllCertificates",
              "EmailSize",
              "AllowHTML",
              "PeakStartTime",
              "PeakEndTime",
              "SyncDuringPeakTime",
              "SyncOffPeakTime",
              "PeakSunday",
              "PeakMonday",
              "PeakTuesday",
              "PeakWednesday",
              "PeakThursday",
              "PeakFriday",
              "PeakSaturday",
              "SyncRoaming",
              "UseSyncSchedule",
              "CalendarSyncThePast",
              "CalendarSyncEnabled",
              "CacAuthentication",
              "AllowForwarding",
              "MaximumAttachmentSize",
              "EnableTasks"
            ],
            "properties": {
              "Domain": {
                "type": "string",
                "description": "Gets or sets the user's domain.  If null, the device will prompt\nfor this information."
              },
              "UserNameFormat": {
                "description": "Gets or sets the User Name Format used by connection.",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserNameFormat"
                  }
                ]
              },
              "Server": {
                "type": "string",
                "description": "Gets or sets the host name of the Exchange server."
              },
              "User": {
                "type": "string",
                "description": "Gets or sets the user's id.  If null, the device will prompt\nfor this information."
              },
              "Password": {
                "type": "string",
                "description": "Gets or sets the user's password. If null, the device will prompt\nfor this information."
              },
              "UserCertificateId": {
                "type": "integer",
                "description": "Gets or sets the id of the user certificate.",
                "format": "int32"
              },
              "UserCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the ref id of the user certificate."
              },
              "UserCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for user certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "DisplayName": {
                "type": "string",
                "description": "Gets or sets string to be used for displaying purpose."
              },
              "IsDefault": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not this is a default\naccount."
              },
              "Email": {
                "type": "string",
                "description": "Gets or sets the user's email address. If null, the device will prompt\nfor this information."
              },
              "SenderName": {
                "type": "string",
                "description": "Gets or sets string to be used in email as the sender name."
              },
              "EmailNotification": {
                "description": "Gets or sets the response for email notification.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EmailNotification"
                  }
                ]
              },
              "EmailSecurity": {
                "description": "Gets or sets the security method for email.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EmailSecurity"
                  }
                ]
              },
              "SyncLookBack": {
                "description": "Gets or sets the number of days worth of past calendar the device\nshould retrieve.  If null, the device will retrieve all available\ncalendar.\n(MaxCalendarAgeFilter  for NitroDesk)",
                "allOf": [
                  {
                    "$ref": "#/definitions/SyncLookBack"
                  }
                ]
              },
              "SyncInterval": {
                "description": "Gets or sets the number of minutes between two successive synchronization.\n0 for never. -1 for Automatic Push.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SyncInterval"
                  }
                ]
              },
              "ProtocolVersion": {
                "type": "string",
                "description": "Gets or sets the protocol version."
              },
              "AcceptAllCertificates": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to accept all certificates sent by\nserver."
              },
              "ServerPathPrefix": {
                "type": "string",
                "description": "Gets or sets the string to be prepended onto server paths. Optional."
              },
              "EmailSize": {
                "type": "integer",
                "description": "Gets or sets the size of e-mails",
                "format": "int64"
              },
              "AllowHTML": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not support HTML email"
              },
              "PeakStartTime": {
                "type": "integer",
                "description": "Gets or sets PeakStartTime\nhigh bytes (first 16 bits) is hours; low bytes (last 16 bits) is minutes\nFor example 08:30 will be 8 [shift right] 16+30 = 524318",
                "format": "int64"
              },
              "PeakEndTime": {
                "type": "integer",
                "description": "Gets or sets endStartTime\nhigh bytes (first 16 bits) is hours; low bytes (last 16 bits) is minutes\nFor example 08:30 will be 8 [shift right] 16+30 = 524318",
                "format": "int64"
              },
              "SyncDuringPeakTime": {
                "type": "integer",
                "description": "Gets or sets SyncDuringPeakTime (in minutes)\n\n 0 - Manually\n-1 - As Arrived",
                "format": "int32"
              },
              "SyncOffPeakTime": {
                "type": "integer",
                "description": "Gets or sets SyncDuringPeakTime (in minutes)\n\n 0 - Manually\n-1 - As Arrived",
                "format": "int32"
              },
              "PeakSunday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Sunday."
              },
              "PeakMonday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Monday"
              },
              "PeakTuesday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Tuesday"
              },
              "PeakWednesday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Wednesday"
              },
              "PeakThursday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Thursday"
              },
              "PeakFriday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Friday"
              },
              "PeakSaturday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Saturday"
              },
              "SyncRoaming": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should allow sync when data Roaming"
              },
              "UseSyncSchedule": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not use peak/off peak sync schedule."
              },
              "CalendarSyncThePast": {
                "description": "Gets or sets the number of days worth of past calendar the device\nshould retrieve.  If null, the device will retrieve all available\ncalendar.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SyncLookBack"
                  }
                ]
              },
              "CalendarSyncEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether calendar sync is enabled"
              },
              "CacAuthentication": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether CAC authentication should be used."
              },
              "AllowForwarding": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not prevent email forwarding"
              },
              "MaximumAttachmentSize": {
                "type": "integer",
                "description": "Gets or sets the maximum size (in bytes) that attachments should be limited to",
                "format": "int32"
              },
              "EnableTasks": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or now to enable tasks"
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "EmailSecurity": {
        "type": "string",
        "description": "Enumerators defining the security method for email.",
        "x-enumNames": [
          "None",
          "UseSsl",
          "UseTls"
        ],
        "enum": [
          "None",
          "UseSsl",
          "UseTls"
        ],
        "x-enumType": "EmailSecurity"
      },
      "WindowsEasAccount": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailAccount"
          },
          {
            "type": "object",
            "description": "Exchange ActiveSync Configuration of a specific user.",
            "required": [
              "SyncLookBack",
              "SyncInterval",
              "UseSSL"
            ],
            "properties": {
              "Domain": {
                "type": "string",
                "description": "Gets or sets the user's domain.  If null, the device will prompt\nfor this information."
              },
              "Server": {
                "type": "string",
                "description": "Gets or sets the host name of the Exchange server."
              },
              "User": {
                "type": "string",
                "description": "Gets or sets the user's id.  If null, the device will prompt\nfor this information."
              },
              "Password": {
                "type": "string",
                "description": "Gets or sets the user's password. If null, the device will prompt\nfor this information."
              },
              "Email": {
                "type": "string",
                "description": "Gets or sets the user's email address. If null, the device will prompt\nfor this information."
              },
              "SyncLookBack": {
                "description": "Gets or sets the number of days worth of past calendar the device\nshould retrieve.  If null, the device will retrieve all available\ncalendar.\n(MaxCalendarAgeFilter  for NitroDesk)",
                "allOf": [
                  {
                    "$ref": "#/definitions/SyncLookBack"
                  }
                ]
              },
              "SyncInterval": {
                "description": "Gets or sets the number of minutes between two successive synchronization.\n0 for never.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SyncInterval"
                  }
                ]
              },
              "UseSSL": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device\nuse SSL"
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "MacEmailSection": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailSection"
          },
          {
            "type": "object",
            "description": "Represents the Exchange ActiveSync configuration for an macOS device."
          }
        ]
      },
      "IOSEmailSection": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailSection"
          },
          {
            "type": "object",
            "description": "Represents the Exchange ActiveSync configuration for an iOS device."
          }
        ]
      },
      "AndroidClassicEmailSection": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailSection"
          },
          {
            "type": "object",
            "description": "Represents the Exchange ActiveSync configuration for an iOS device."
          }
        ]
      },
      "AndroidWorkProfileEmailSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicEmailSection"
          },
          {
            "type": "object",
            "description": "Represents the Exchange ActiveSync configuration for an iOS device."
          }
        ]
      },
      "AndroidCorporateEmailSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkProfileEmailSection"
          },
          {
            "type": "object",
            "description": "Represents the Exchange ActiveSync configuration for an Android Cope device."
          }
        ]
      },
      "ModernDesktopFeatureControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Windows Phone devices.",
            "required": [
              "DisableSdCard",
              "AllowAddProvisioningPackage",
              "AllowRemoveProvisioningPackage",
              "RequireProvisioningPackageSignature",
              "ClearTpmIfNotReady",
              "ConfigureWindowsPasswords",
              "PreventAutomaticDeviceEncryptionForAzureAdJoinedDevices",
              "AllowInternetSharing",
              "AllowManualWifiConfiguration",
              "AllowWifiOffloading",
              "AllowWifiHotspotReporting",
              "AllowBluetooth",
              "AllowCellularDataRoaming",
              "AllowCamera",
              "AllowUSB",
              "AllowSerialConnection",
              "AllowBingVisionStoreContents",
              "AllowVirtualAssistant",
              "AllowManualMdmUnenrollment",
              "AllowDirectMemoryAccess",
              "AllowDeviceDiscovery",
              "AllowAutoUpdateConfig",
              "AllowNonMicrosoftSignedUpdate",
              "AllowUpdateService",
              "ScheduledInstallDay",
              "ScheduledInstallTime",
              "AllowApnUserControl",
              "EnableLocation",
              "LetAppsRunInBackground",
              "AllowMicrosoftAccountConnection",
              "AllowAddingNonMicrosoftAccountsManually",
              "AllowMicrosoftAccountSignInAssistant",
              "AllowAppStoreAutoUpdate",
              "AllowGameDVR",
              "AllowSharedUserAppData",
              "DisableStoreOriginatedApps",
              "AllowDeveloperUnlock",
              "MSIAllowUserControlOverInstall",
              "MSIAlwaysInstallWithElevatedPrivileges",
              "RequirePrivateStoreOnly",
              "RestrictAppDataToSystemVolume",
              "RestrictAppToSystemVolume",
              "AllowAadPasswordReset",
              "AllowFastReconnect",
              "EnableFidoSignon",
              "AllowSecondaryAuthenticationDevice",
              "AllowAdvertising",
              "AllowDiscoverableMode",
              "AllowPrepairing",
              "AllowCloudProtection",
              "AVGCPULoadFactor",
              "DaysToRetainCleanedMalware",
              "AllowArchiveScanning",
              "AllowBehaviorMonitoring",
              "AllowEmailScanning",
              "AllowFullScanOnMappedNetworkDrives",
              "AllowFullScanRemovableDriveScanning",
              "AllowIntrusionPreventionSystem",
              "AllowIOAVProtection",
              "AllowOnAccessProtection",
              "AllowRealtimeMonitoring",
              "AllowScanningNetworkFiles",
              "AllowScriptScanning",
              "AllowUserUIAccess",
              "RealTimeScanDirection",
              "ScanParameter",
              "ScheduleQuickScanTime",
              "ScheduleScanDay",
              "ScheduleScanTime",
              "SignatureUpdateInterval",
              "SubmitSamplesConsent",
              "AllowIMELogging",
              "AllowIMENetworkAccess",
              "AllowJapaneseIMESurrogatePairCharacters",
              "AllowJapaneseIVSCharacters",
              "AllowJapaneseNonPublishingStandardGlyph",
              "AllowJapaneseUserDictionary",
              "AllowKoreanExtendedHanja",
              "ExcludeJapaneseIMEExceptJIS0208",
              "ExcludeJapaneseIMEExceptJIS0208andEUDC",
              "ExcludeJapaneseIMEExceptShiftJIS",
              "HideChangeAccountSettings",
              "HideFrequentlyUsedApps",
              "HideHibernate",
              "HideLock",
              "HidePowerButton",
              "HideRecentJumplists",
              "HideRecentlyAddedApps",
              "HideRestart",
              "HideShutdown",
              "HideSignOut",
              "HideSleep",
              "HideUserTile",
              "NoPinningToTaskbar",
              "AllowBuildPreview",
              "AllowEmbeddedMode",
              "AllowExperimentation",
              "AllowFontProviders",
              "AllowLocation",
              "AllowTelemetry10",
              "AllowUserToResetPhone",
              "BootStartDriverInitialization",
              "DisableEnterpriseAuthProxy",
              "DisableOneDriveFileSync",
              "DisableSystemRestore",
              "FeedbackHubAlwaysSaveDiagnosticsLocally",
              "LimitEnhancedDiagnosticDataWindowsAnalytics",
              "EnableAppInstallControl",
              "EnableSmartScreenInShell",
              "PreventOverrideForFilesInShell",
              "AllowSearchUseLocation",
              "AllowWindowsIndexer",
              "AllowAutoPlay",
              "AllowDataSense",
              "AllowDateTime",
              "AllowEditDeviceName",
              "AllowLanguage",
              "AllowOnlineTips",
              "AllowPowerSleep",
              "AllowRegion",
              "AllowSignInOptions",
              "AllowVPN",
              "AllowWorkplace",
              "AllowYourAccount",
              "AllowCellularData",
              "AllowConnectedDevices",
              "AllowVPNRoamingOverCellular",
              "AllowVPNOverCellular",
              "DisablePrintingOverHTTP",
              "DisableDownloadingOfPrintDriversOverHTTP",
              "DisableInternetDownloadForWebPublishingAndOnlineOrderingWizards",
              "DisallowNetworkConnectivityActiveTests",
              "ProhibitInstallationAndConfigurationOfNetworkBridge",
              "AllowFindMyDevice",
              "AllowSyncMySettings",
              "AllowWindowsConsumerFeatures",
              "AllowWindowsTips",
              "DoNotShowFeedbackNotifications"
            ],
            "properties": {
              "DisableSdCard": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable SD Card Access."
              },
              "AllowAddProvisioningPackage": {
                "type": "boolean",
                "description": "Specifies whether to allow the runtime configuration agent to install provisioning packages."
              },
              "AllowRemoveProvisioningPackage": {
                "type": "boolean",
                "description": "Specifies whether to allow the runtime configuration agent to remove provisioning packages."
              },
              "RequireProvisioningPackageSignature": {
                "type": "boolean",
                "description": "Specifies whether provisioning packages must have a certificate signed by a device trusted authority."
              },
              "ClearTpmIfNotReady": {
                "type": "boolean",
                "description": "Specifies whether device will force to clear TPM when admin is logged in."
              },
              "ConfigureWindowsPasswords": {
                "description": "Gets or sets the Windows passwords configuration",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "PreventAutomaticDeviceEncryptionForAzureAdJoinedDevices": {
                "type": "boolean",
                "description": "Specifies whether to allow automatic device encryption during OOBE when the device is Azure AD joined."
              },
              "AllowInternetSharing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow or disallow Internet sharing\n(Configurable by Exchange as well - definition will be consistent with EAS definition.)\n0 - Do not allow the use of Internet Sharing. 1  (default) - Allow the use of Internet Sharing\nMost restricted value is 0"
              },
              "AllowManualWifiConfiguration": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow or disallow connecting to WiFi outside of MDM server-installed networks.\n0 - no WiFi connection outside of MDM provisioned is allowed, 1 (default) - adding new network SSIDs"
              },
              "AllowWifiOffloading": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow or disallow automatic\noffloading data traffic to WiFi hotshots and social network.\n0 - not allowed, 1 (default) - allowed"
              },
              "AllowWifiHotspotReporting": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow or disallow WiFi Hotspot information reporting to Microsoft.\nOnce disallowed, the user cannot turn it on.\n0 - HotSpot reporting is not allowed 1 (default) - HotSpot reporting is allowed"
              },
              "AllowBluetooth": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow to set Blue tooth mode.\n(Could be set by Exchange EAS policy as well, definition be the same as Exchange).\n0 - disallow Blue tooth\n1 (not supported in WPB) - Disable Blue tooth, but allow the configuration of hands-free profiles - NOTE: value 1 isn't supported in Blue for MDM and EAS.\n2 (default) - allow Blue tooth\nSecure order (Most restricted value is 0) 0 2"
              },
              "AllowCellularDataRoaming": {
                "description": "Gets or sets a value indicating whether to allow or disallow cellular data roaming\n0 - not allowed 1(default) - allowed\nMost restricted value is 0\nPolicy Manager area - Connectivity",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlled"
                  }
                ]
              },
              "AllowCamera": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable camera\n0 - Use camera is disallowed, 1 (default) - Use camera is allowed\nMost restricted value is 0"
              },
              "AllowUSB": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Usb\n0 - Use USB is disallowed, 1 (default) - Use USB is allowed\nMost restricted value is 0"
              },
              "AllowSerialConnection": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable serial connection\n0 - Use serial connection is disallowed, 1 (default) - Use serial connection is allowed\nMost restricted value is 0"
              },
              "AllowBingVisionStoreContents": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Bing Vision to store the contents of images in Bing Vision Search\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowVirtualAssistant": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Cortana\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowManualMdmUnenrollment": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Manual Mdm Unenrollment\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowDirectMemoryAccess": {
                "type": "boolean",
                "description": "Allows Direct Memory Access.\nSupported Values:\n    0 – Not allowed.\n    1 (default) – Allowed.\nMost restricted value is 0"
              },
              "AllowDeviceDiscovery": {
                "type": "boolean",
                "description": "Specify whether allow Cortana\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowAutoUpdateConfig": {
                "description": "Specifies whether the device could use Microsoft Update, Windows Server Update Services (WSUS), or Windows Store.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowAutoUpdate"
                  }
                ]
              },
              "AllowNonMicrosoftSignedUpdate": {
                "type": "boolean",
                "description": "Allows the IT admin to manage whether Automatic Updates accepts updates signed by entities other than Microsoft when the update is found at the UpdateServiceUrl location. This policy supports using WSUS for 3rd party software and patch distribution. Supported operations are Get and Replace."
              },
              "AllowUpdateService": {
                "type": "boolean",
                "description": "Specifies whether the device could use Microsoft Update, Windows Server Update Services (WSUS), or Windows Store."
              },
              "ScheduledInstallDay": {
                "description": "Enables the IT admin to schedule the day of the update installation.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ScheduleInstallDay"
                  }
                ]
              },
              "ScheduledInstallTime": {
                "type": "integer",
                "description": "Enables the IT admin to schedule the time of the update installation.",
                "format": "int32"
              },
              "UpdateServiceUrl": {
                "type": "string",
                "description": "Allows the device to check for updates from a WSUS server instead of Microsoft Update. This is useful for on-premise MDMs that need to update devices that cannot connect to the Internet."
              },
              "AllowApnUserControl": {
                "type": "boolean",
                "description": "Boolean value that specifies whether the cellular UX will allow users to connect with other APNs other than the Enterprise APN."
              },
              "EnableLocation": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not Location Service's Device Switch is enabled or disabled for the device.\n0 (default) – Disabled.\n1 – Enabled."
              },
              "LetAppsRunInBackground": {
                "description": "Specifies whether Windows apps can run in the background.\nSupported Values:\n0 – User in control(default), same as delete this policy\n1 – Force allow.\n2 - Force deny.\nMost restricted value is 2.",
                "allOf": [
                  {
                    "$ref": "#/definitions/LetAppsRunInBackgroundSetting"
                  }
                ]
              },
              "AllowMicrosoftAccountConnection": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow using MSA account for non email related connection authentication and services.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0"
              },
              "AllowAddingNonMicrosoftAccountsManually": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether user is allowed to add non MSA email accounts.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0"
              },
              "AllowMicrosoftAccountSignInAssistant": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether \"Microsoft Account Sign-In Assistant\" is enabled\n0 - disable assistant 1 (default) - Manual start\nMost restricted value is 0"
              },
              "DomainNamesForEmailSync": {
                "type": "string",
                "description": "Gets or sets a list of the domains that are allowed to sync email on the device\nString should contain a pipe-separated list of domains that are allowed to sync email on the device\nThe default value is an empty string, which allows all email accounts on the device to sync email"
              },
              "AllowAppStoreAutoUpdate": {
                "description": "Specifies whether automatic update of apps from Windows Store are allowed.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "AllowGameDVR": {
                "type": "boolean",
                "description": "Specifies whether DVR and broadcasting is allowed.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "AllowSharedUserAppData": {
                "type": "boolean",
                "description": "Specifies whether multiple users of the same app can share data.\nSupported Values:\n    0 (default) - Not allowed\n    1 - Allowed\n    Most restricted value is 0"
              },
              "DisableStoreOriginatedApps": {
                "type": "boolean",
                "description": "Specifies whether to disable the launch of all apps from Microsoft Store that came pre-installed or were downloaded\n    0 (default) – Enable launch of apps.\n    1 – Disable launch of apps.\n    Most restrictive value is 1"
              },
              "AllowDeveloperUnlock": {
                "description": "Gets or sets a value indicating whether developer unlock is allowed at the device.\n0 - disabled, 1 (default) - user controlled, 2 enabled\nMost restricted value is 0\narea - ApplicationManagement",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowDeveloperUnlock"
                  }
                ]
              },
              "MSIAllowUserControlOverInstall": {
                "type": "boolean",
                "description": "Specifies whether users can change installation options that typically are available only to system administrators\nMost restricted value is 0"
              },
              "MSIAlwaysInstallWithElevatedPrivileges": {
                "type": "boolean",
                "description": "Specifies whether to direct Windows Installer to use elevated permissions when it installs any program on the system\nMost restricted value is 0"
              },
              "RequirePrivateStoreOnly": {
                "type": "boolean",
                "description": "Specifies whether to disable the retail catalog and only enables the Private store\n    0 (default) – Allow both public and Private store.\n    1 – Only Private store is enabled.\nMost restricted value is 1"
              },
              "RestrictAppDataToSystemVolume": {
                "type": "boolean",
                "description": "Specifies whether application data is restricted to the system drive.\nSupported Values:\n    0 (default) - Not restricted\n    1 - Restricted\n    Most restricted value is 1"
              },
              "RestrictAppToSystemVolume": {
                "type": "boolean",
                "description": "Specifies whether the installation of applications is restricted to the system drive.\nSupported Values:\n    0 (default) - Not restricted\n    1 - Restricted\n    Most restricted value is 1"
              },
              "AllowAadPasswordReset": {
                "type": "boolean",
                "description": "Specifies whether password reset is enabled for Azure Active Directory accounts.\nThis policy allows the Azure AD tenant administrators to enable self service password reset feature on the windows logon screen.\nSupported Values:\n    0 - (default) Not allowed\n    1 - Allowed\n    Most restricted value is 0"
              },
              "AllowFastReconnect": {
                "type": "boolean",
                "description": "Allows EAP Fast Reconnect from being attempted for EAP Method TLS.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "EnableFidoSignon": {
                "type": "boolean",
                "description": "Specifies whether Fast Identity Online (FIDO) device can be used to sign on. This policy enables the Windows logon credential provider for FIDO 2.0\nSupported Values:\n    0 - (default) Do not allow. The FIDO device credential provider disabled.\n    1 - Allow. The FIDO device credential provider is enabled and allows usage of FIDO devices to sign into an Windows.\n    Most restricted value is 0"
              },
              "AllowSecondaryAuthenticationDevice": {
                "type": "boolean",
                "description": "Allows secondary authentication devices to work with Windows.\nThe default for this policy must be\non for consumer devices (defined as local or Microsoft account connected device)\nand off for enterprise devices (such as cloud domain-joined, cloud domain-joined in an on-premise only environment, cloud domain-joined in a hybrid environment, and BYOD).\n    Supported Values:\n    0 - (default) Not allowed\n    1 - Allowed\n    Most restricted value is 0"
              },
              "AllowAdvertising": {
                "type": "boolean",
                "description": "Specifies whether the device can act as a source for advertisements.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "AllowDiscoverableMode": {
                "type": "boolean",
                "description": "Specifies whether the discoverable mode is allowed.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "AllowPrepairing": {
                "type": "boolean",
                "description": "Specifies whether to allow specific bundled Bluetooth peripherals to automatically pair with the host device.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "LocalDeviceName": {
                "type": "string",
                "description": "A string that specifies the local Bluetooth device name."
              },
              "AllowCloudProtection": {
                "description": "To best protect your PC, Windows Defender will send information to Microsoft about any problems it finds. We’ll analyze that information in our cloud, and learn more about problems affecting you and other customers. Then we’ll respond with the best possible solution.\nSupported Values:\n    0 – Not allowed.\n    1 (default) – Allowed.\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "AVGCPULoadFactor": {
                "type": "integer",
                "description": "Represents the average CPU load factor for the scan (in percent).\nValid values: 0–100\nThe default value is 50.",
                "format": "int32"
              },
              "DaysToRetainCleanedMalware": {
                "type": "integer",
                "description": "Time period (in days) that quarantine items will be stored on the system.\nValid values: 0–90\nThe default value is 0, which keeps items in quarantine, and does not automatically remove them.",
                "format": "int32"
              },
              "AllowArchiveScanning": {
                "type": "boolean",
                "description": "Allows or disallows scanning of archives.\nSupported Values:\n    0 – Not allowed.\n    1 (default) – Allowed.\nMost restricted value is 0"
              },
              "AllowBehaviorMonitoring": {
                "type": "boolean",
                "description": "Allows or disallows Defender’s Behavior Monitoring functionality.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "AllowEmailScanning": {
                "type": "boolean",
                "description": "Allows or disallows scanning of email.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "AllowFullScanOnMappedNetworkDrives": {
                "type": "boolean",
                "description": "Allows or disallows a full scan of mapped network drives.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "AllowFullScanRemovableDriveScanning": {
                "type": "boolean",
                "description": "Allows or disallows a full scan of removable drives.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "AllowIntrusionPreventionSystem": {
                "type": "boolean",
                "description": "Allows or disallows Defender’s Intrusion Prevention functionality.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "AllowIOAVProtection": {
                "type": "boolean",
                "description": "Allows or disallows Defender’s IOAVProtection functionality.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "AllowOnAccessProtection": {
                "type": "boolean",
                "description": "Allows or disallows Defender’s On Access Protection functionality.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "AllowRealtimeMonitoring": {
                "description": "Allows or disallows Defender’s Realtime Monitoring functionality.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "AllowScanningNetworkFiles": {
                "type": "boolean",
                "description": "Allows or disallows a scanning of network files.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "AllowScriptScanning": {
                "type": "boolean",
                "description": "Allows or disallows Defender’s Script Scanning functionality.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "AllowUserUIAccess": {
                "type": "boolean",
                "description": "Allows or disallows user access to the Defender UI. If disallowed, all Defender notifications will also be suppressed.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "ExcludedExtensions": {
                "type": "string",
                "description": "Allows or disallows user access to the Defender UI. If disallowed, all Defender notifications will also be suppressed.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "ExcludedPaths": {
                "type": "string",
                "description": "Allows or disallows user access to the Defender UI. If disallowed, all Defender notifications will also be suppressed.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "ExcludedProcesses": {
                "type": "string",
                "description": "Allows or disallows user access to the Defender UI. If disallowed, all Defender notifications will also be suppressed.\nSupported Values:\n    0 (default) – Allowed.\n    1 – Not allowed.\nMost restricted value is 1"
              },
              "RealTimeScanDirection": {
                "description": "Controls which sets of files should be monitored.\nNote  If AllowOnAccessProtection is not allowed, then this configuration can be used to monitor specific files.\nSupported Values:\n    0 (default) – Monitor all files (bi-directional).\n    1 – Monitor incoming files.\n    2 – Monitor outgoing files.",
                "allOf": [
                  {
                    "$ref": "#/definitions/DefenderRealTimeScanDirection"
                  }
                ]
              },
              "ScanParameter": {
                "description": "Selects whether to perform a quick scan or full scan.\nSupported Values:\n    1 (default) – Quick scan\n    2 – Full scan",
                "allOf": [
                  {
                    "$ref": "#/definitions/DefenderScanParameter"
                  }
                ]
              },
              "ScheduleQuickScanTime": {
                "type": "integer",
                "description": "Selects the time of day that the Defender quick scan should run.\nValid values: 0–1380\n    For example, a value of 0=12:00AM, a value of 60=1:00AM, a value of 120=2:00, and so on, up to a value of 1380=11:00PM.\n    The default value is 120",
                "format": "int32"
              },
              "ScheduleScanDay": {
                "description": "Selects the day that the Defender scan should run.\n0 (default) – Every day\n1 – Monday\n2 – Tuesday\n3 – Wednesday\n4 – Thursday\n5 – Friday\n6 – Saturday\n7 – Sunday\n8 – No scheduled scan",
                "allOf": [
                  {
                    "$ref": "#/definitions/DefenderScheduledScanDay"
                  }
                ]
              },
              "ScheduleScanTime": {
                "type": "integer",
                "description": "Selects the time of day that the Defender scan should run.\nValid values: 0–1380.\nFor example, a value of 0=12:00AM, a value of 60=1:00AM, a value of 120=2:00, and so on, up to a value of 1380=11:00PM.\nThe default value is 120.",
                "format": "int32"
              },
              "SignatureUpdateInterval": {
                "type": "integer",
                "description": "Specifies the interval (in hours) that will be used to check for signatures, so instead of using the ScheduleDay and ScheduleTime we will just check for new signatures as set per the interval. Interval is set in hours, so at most we will check for signature every hour.\nValid values: 0–24.\nA value of 0 means no check for new signatures, a value of 1 means to check every hour, a value of 2 means to check every two hours, and so on, up to a value of 24, which means to check every day.\nThe default value is 8.",
                "format": "int32"
              },
              "SubmitSamplesConsent": {
                "description": "Checks for the user consent level in Defender to send data. If the required consent has already been granted, Defender submits them. If not, (and if the user has specified never to ask), the UI is launched to ask for user consent when opt-in for when Defender/AllowCloudProtection is allowed) before sending data.\nThe following list shows the supported values:\n    0 – Always prompt.\n    1 (default) – Send safe samples automatically.\n    2 – Never send.\n    3 – Send all samples automatically.",
                "allOf": [
                  {
                    "$ref": "#/definitions/DefenderSubmitSamplesConsent"
                  }
                ]
              },
              "AllowIMELogging": {
                "type": "boolean",
                "description": "Allows the user to turn on and off the logging for incorrect conversion and saving auto-tuning result to a file and history-based predictive input.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowIMENetworkAccess": {
                "type": "boolean",
                "description": "Allows the user to turn on Open Extended Dictionary, Internet Search Integration, online service to provide input suggestions that does not exist in a PC's local dictionary.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowJapaneseIMESurrogatePairCharacters": {
                "type": "boolean",
                "description": "Allow the Japanese IME surrogate pair characters.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowJapaneseIVSCharacters": {
                "type": "boolean",
                "description": "Allow Japanese Ideographic Variation Sequence (IVS) characters.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowJapaneseNonPublishingStandardGlyph": {
                "type": "boolean",
                "description": "Allow the Japanese non-publishing standard glyph.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowJapaneseUserDictionary": {
                "type": "boolean",
                "description": "Allow the Japanese user dictionary.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowKoreanExtendedHanja": {
                "type": "boolean",
                "description": "AllowKoreanExtendedHanja\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "ExcludeJapaneseIMEExceptJIS0208": {
                "type": "boolean",
                "description": "Allows the users to restrict character code range of conversion by setting the character filter."
              },
              "ExcludeJapaneseIMEExceptJIS0208andEUDC": {
                "type": "boolean",
                "description": "Allows the users to restrict character code range of conversion by setting the character filter."
              },
              "ExcludeJapaneseIMEExceptShiftJIS": {
                "type": "boolean",
                "description": "Allows the users to restrict character code range of conversion by setting the character filter."
              },
              "HideChangeAccountSettings": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding \"Change account settings\" from appearing in the user tile.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "HideFrequentlyUsedApps": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding most used apps.\nNote:  This policy requires reboot to take effect.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "HideHibernate": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding \"Hibernate\" from appearing in the Power button.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "HideLock": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding \"Lock\" from appearing in the user tile.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "HidePowerButton": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding the Power button from appearing.\nNote:  This policy requires reboot to take effect.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "HideRecentJumplists": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding recently opened items in the jumplists from appearing.\nNote:  This policy requires reboot to take effect.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "HideRecentlyAddedApps": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding recently added apps.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "HideRestart": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding \"Restart\" and \"Update and restart\" from appearing in the Power button.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "HideShutdown": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding \"Shut down\" and \"Update and shut down\" from appearing in the Power button.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "HideSignOut": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding \"Sign out\" from appearing in the user tile.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "HideSleep": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding \"Sleep\" from appearing in the Power button.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "HideUserTile": {
                "type": "boolean",
                "description": "Allows administrator to configure Start by hiding the user tile.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "NoPinningToTaskbar": {
                "type": "boolean",
                "description": "Allows administrator to configure the taskbar by disabling pinning and unpinning apps on the taskbar.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "AllowBuildPreview": {
                "type": "boolean",
                "description": "This policy setting determines whether users can access the Insider build controls in the Advanced Options for Windows Update. These controls are located under \"Get Insider builds,\" and enable users to make their devices available for downloading and installing Windows preview software.\n    0 – Not allowed. The item “Get Insider builds” is unavailable, users are unable to make their devices available for preview software.\n    1 (default) – Allowed. Users can make their devices available for downloading and installing preview software."
              },
              "AllowEmbeddedMode": {
                "type": "boolean",
                "description": "Specifies whether set general purpose device to be in embedded mode.\n    0 (default) – Not allowed.\n    1 – Allowed."
              },
              "AllowExperimentation": {
                "description": "This policy setting determines the level that Microsoft can experiment with the product to study user preferences or device behavior.\n    0 – Disabled.\n    1 (default) – Permits Microsoft to configure device settings only.\n    2 – Allows Microsoft to conduct full experimentation.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowExperimentation"
                  }
                ]
              },
              "AllowFontProviders": {
                "type": "boolean",
                "description": "This policy determines whether Windows is allowed to download fonts and font catalog data from an online font provider\n    0 - false - No traffic to fs.microsoft.com and only locally-installed fonts are available.\n    1 - true (default) - There may be network traffic to fs.microsoft.com and downloadable fonts are available to apps that support them.\n\nMost restricted value is 0"
              },
              "AllowLocation": {
                "description": "Gets or sets a value indicating whether to allow/Disallow location service.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlled"
                  }
                ]
              },
              "AllowTelemetry10": {
                "description": "Gets or sets a value indicating whether to allow the device to send telemetry information (such as SQM, Watson).\n0 - not allowed, 1 - allowed, except for Secondary Data Requests 2 (default) - allowed\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowTelemetry"
                  }
                ]
              },
              "AllowUserToResetPhone": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable User To Reset Phone\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "BootStartDriverInitialization": {
                "description": "This policy setting allows you to specify which boot-start drivers are initialized based on a\nclassification determined by an Early Launch Antimalware boot-start driver\n\nGood: The driver has been signed and has not been tampered with.\nBad: The driver has been identified as malware.It is recommended that you do not allow known bad drivers to be initialized.\nBad, but required for boot (critical): The driver has been identified as malware, but the computer cannot successfully boot without loading this driver.\nUnknown: This driver has not been attested to by your malware detection application and has not been classified by the Early Launch Antimalware boot-start driver.\n\nADMX backed: SelectDriverLoadPolicy values:\n    1 - Good and unknown\n    3 - Good and unknown and bad (but critical) (default)\n    7 - All\n    8 - Good only\n            \nMost restricted is as follows: 8, 1, 3, 7",
                "allOf": [
                  {
                    "$ref": "#/definitions/BootStartDriverInitialization"
                  }
                ]
              },
              "DisableEnterpriseAuthProxy": {
                "type": "boolean",
                "description": "This policy setting blocks the Connected User Experience and Telemetry service from automatically\nusing an authenticated proxy to send data back to Microsoft on Windows 10\n    0 - Do not block (default)\n    1 - Block the Connected User Experience and Telemetry service from automatically using an authenticated proxy\n            \nMost restricted value is 1"
              },
              "DisableOneDriveFileSync": {
                "type": "boolean",
                "description": "Allows administrator to prevent apps and features from working with files on OneDrive.\n0 (default) – False (do not hide).\n1 - True(hide)."
              },
              "DisableSystemRestore": {
                "type": "boolean",
                "description": "ADMX backed\nThis policy setting allows you to turn off System Restore.\n    0 - Allow users to perform System Restore and configure System Restore settings through System Protection (default)\n    1 - System Restore is turned off, and the System Restore Wizard cannot be accessed\n            \nMost restricted value is 1"
              },
              "FeedbackHubAlwaysSaveDiagnosticsLocally": {
                "type": "boolean",
                "description": "This policy will allow enterprises to mandate that all diagnostics are saved locally for use in internal investigations.\n            \n    0 (default) - False. The Feedback Hub will not always save a local copy of diagnostics that may be created when a feedback is submitted. The user will have the option to do so\n    1 - True.The Feedback Hub should always save a local copy of diagnostics that may be created when a feedback is submitted\n            \nMost restricted value is 1"
              },
              "LimitEnhancedDiagnosticDataWindowsAnalytics": {
                "type": "boolean",
                "description": "This policy enables organizations to send Microsoft a specific set of diagnostic data for IT insights via Windows Analytics services.\n\n    0 - The level of diagnostic data sent to Microsoft is determined by the System/AllowTelemetry policy (default)\n    1 - A basic level of diagnostic data plus additional events that are required for Windows Analytics are sent to Microsoft"
              },
              "TelemetryProxy": {
                "type": "string",
                "description": "Allows you to specify the fully qualified domain name (FQDN) or IP address of a proxy server to forward Connected User Experiences and Telemetry requests.\nThe format for this setting is server:port"
              },
              "EnableAppInstallControl": {
                "description": "Allows administrator to control whether users are allowed to install apps from places other than the Store.\nSupported Values:\n0 – Turns off Application Installation Control, allowing users to download and install files from anywhere on the web.\n1 – Turns on Application Installation Control, allowing users to only install apps from the Store.\n2 - User control (default)",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "EnableSmartScreenInShell": {
                "description": "Allows administrator to configure SmartScreen for Windows.\nSupported Values:\n0 – Turns off SmartScreen in Windows.\n1 – Turns on SmartScreen in Windows\n404 - User control(default) is to delete the policy",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "PreventOverrideForFilesInShell": {
                "type": "boolean",
                "description": "Allows administrator to control whether users can can ignore SmartScreen warnings and run malicious files. Need to enable SmartScreen In Shell to take effect.\nSupported Values:\n    0(default) – Employees can ignore SmartScreen warnings and run malicious files.\n    1 – Employees cannot ignore SmartScreen warnings and run malicious files."
              },
              "AllowSearchUseLocation": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Search to use location\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowWindowsIndexer": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Windows indexer\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowAutoPlay": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Auto Play Setting\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowDataSense": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Data Sense Setting\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowDateTime": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Date Time Setting\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowEditDeviceName": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Edit Device Name\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowLanguage": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Language Setting\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowOnlineTips": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Online Tips\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowPowerSleep": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Power Sleep Setting\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowRegion": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Region Setting\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowSignInOptions": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Sign In Options\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowVPN": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable VPN Setting\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowWorkplace": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Workplace Setting\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowYourAccount": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Date Time Setting\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowCellularData": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow or disallow cellular data\n0 - not allowed\n1(default) - allowed\n2 - force allow\nMost restricted value is 0"
              },
              "AllowConnectedDevices": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Connected Device\n0 - is disallowed\n1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowVPNRoamingOverCellular": {
                "description": "Gets or sets a value indicating whether to allow this policy when enforced,\nwill prevent the device from connecting VPN when the device roams over cellular networks.\n0 - not allowed\n1 (default) allowed\n2 - force allow\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "AllowVPNOverCellular": {
                "description": "Gets or sets a value indicating whether to allow this policy\nspecifies what type of underline connections VPN is allowed to use\n0 - VPN is not allowed over cellular\n1 (default) - VPN could use any connection including cellular.\n2 - force allow\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "DisablePrintingOverHTTP": {
                "type": "boolean",
                "description": "ADMX backed\nThis policy setting specifies whether to allow printing over HTTP from this client.\n    0 - Users can choose to print to Internet printers over HTTP.\n    1 - Prevents this client from printing to Internet printers over HTTP.\n            \nMost restricted value is 1\nMicrosoft CSP document do show the csp as DisablePrintingOverHTTP and it does get send successfully to the device."
              },
              "DisableDownloadingOfPrintDriversOverHTTP": {
                "type": "boolean",
                "description": "ADMX backed\nThis policy setting specifies whether to allow this client to download print driver packages over HTTP.\n    0 - Users can download print drivers over HTTP.\n    1 - Print drivers cannot be downloaded over HTTP.\n            \nMost restricted value is 1"
              },
              "DisableInternetDownloadForWebPublishingAndOnlineOrderingWizards": {
                "type": "boolean",
                "description": "ADMX backed\nThis policy setting specifies whether Windows should download a list of providers for the web publishing and online ordering wizards.\n    0 - A list of providers are downloaded when the user uses the web publishing or online ordering wizards.\n    1 - Windows does not download providers, and only the service providers that are cached in the local registry are displayed.\n            \nMost restricted value is 1"
              },
              "DisallowNetworkConnectivityActiveTests": {
                "type": "boolean",
                "description": "This policy disables the NCSI active probe, preventing network connectivity to www.msftconnecttest.com.\n    0 - Enables NCSI active probe\n    1 - Disables NCSI active probe\n            \nMost restricted value is 1"
              },
              "ProhibitInstallationAndConfigurationOfNetworkBridge": {
                "type": "boolean",
                "description": "ADMX backed\nDetermines whether a user can install and configure the Network Bridge.\n    0 - The user will be able to create and modify the configuration of a Network Bridge.\n    1 - Prohibit Installation and Configuration of Network Bridge.\n            \nMost restricted value is 1"
              },
              "AllowFindMyDevice": {
                "description": "Gets or sets a value indicating whether to Disable/Enable Find My Device\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "AllowSyncMySettings": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Sync My Setting\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowWindowsConsumerFeatures": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Windows Consumer Features\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowWindowsTips": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Windows Tips\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "DoNotShowFeedbackNotifications": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Feedback Notifications\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              }
            }
          }
        ]
      },
      "UserControlledSetting": {
        "type": "string",
        "description": "Defender User Controlled Settings",
        "x-enumNames": [
          "Disabled",
          "Enabled",
          "UserControlled"
        ],
        "enum": [
          "Disabled",
          "Enabled",
          "UserControlled"
        ],
        "x-enumType": "UserControlledSetting"
      },
      "UserControlled": {
        "type": "string",
        "description": "Enum for the different values that can be set to the UserControlled node",
        "x-enumNames": [
          "ForceDisable",
          "UserControlled",
          "ForceEnable"
        ],
        "enum": [
          "ForceDisable",
          "UserControlled",
          "ForceEnable"
        ],
        "x-enumType": "UserControlled"
      },
      "AllowAutoUpdate": {
        "type": "string",
        "description": "Different settings for auto update",
        "x-enumNames": [
          "NotifyUser",
          "AutoInstallAndNotify",
          "AutoInstallAndRestart",
          "AutoInstallAndRestartAtSpecificTime",
          "AutoInstallAndRestartNoUserControl",
          "NoAutoUpdates"
        ],
        "enum": [
          "NotifyUser",
          "AutoInstallAndNotify",
          "AutoInstallAndRestart",
          "AutoInstallAndRestartAtSpecificTime",
          "AutoInstallAndRestartNoUserControl",
          "NoAutoUpdates"
        ],
        "x-enumType": "AllowAutoUpdate"
      },
      "ScheduleInstallDay": {
        "type": "string",
        "description": "Different days on which the updates should be installed",
        "x-enumNames": [
          "Everyday",
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "enum": [
          "Everyday",
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "x-enumType": "ScheduleInstallDay"
      },
      "LetAppsRunInBackgroundSetting": {
        "type": "string",
        "description": "Defender User Controlled Settings",
        "x-enumNames": [
          "UserControlled",
          "ForceAllow",
          "ForceDeny"
        ],
        "enum": [
          "UserControlled",
          "ForceAllow",
          "ForceDeny"
        ],
        "x-enumType": "LetAppsRunInBackgroundSetting"
      },
      "AllowDeveloperUnlock": {
        "type": "string",
        "description": "Enum for the different values that can be set to the AllowDeveloperUnlock node",
        "x-enumNames": [
          "ForceDisable",
          "UserControlled",
          "ForceEnable"
        ],
        "enum": [
          "ForceDisable",
          "UserControlled",
          "ForceEnable"
        ],
        "x-enumType": "AllowDeveloperUnlock"
      },
      "DefenderRealTimeScanDirection": {
        "type": "string",
        "description": "Defender scan direction",
        "x-enumNames": [
          "Bidirectional",
          "Incoming",
          "Outgoing"
        ],
        "enum": [
          "Bidirectional",
          "Incoming",
          "Outgoing"
        ],
        "x-enumType": "DefenderRealTimeScanDirection"
      },
      "DefenderScanParameter": {
        "type": "string",
        "description": "Scan type parameter",
        "x-enumNames": [
          "QuickScan",
          "FullScan"
        ],
        "enum": [
          "QuickScan",
          "FullScan"
        ],
        "x-enumType": "DefenderScanParameter"
      },
      "DefenderScheduledScanDay": {
        "type": "string",
        "description": "Scan type parameter",
        "x-enumNames": [
          "Everyday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday",
          "Never"
        ],
        "enum": [
          "Everyday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday",
          "Never"
        ],
        "x-enumType": "DefenderScheduledScanDay"
      },
      "DefenderSubmitSamplesConsent": {
        "type": "string",
        "description": "Scan type parameter",
        "x-enumNames": [
          "AlwaysPrompt",
          "SendSafeSamplesAutomatically",
          "NeverSend",
          "SendAllSamplesAutomatically",
          "UserControlled"
        ],
        "enum": [
          "AlwaysPrompt",
          "SendSafeSamplesAutomatically",
          "NeverSend",
          "SendAllSamplesAutomatically",
          "UserControlled"
        ],
        "x-enumType": "DefenderSubmitSamplesConsent"
      },
      "AllowExperimentation": {
        "type": "string",
        "description": "Enum for the different values that can be set to the AllowExperimentation node",
        "x-enumNames": [
          "Disabled",
          "ConfigureDeviceSettingsOnly",
          "FullExperimentations"
        ],
        "enum": [
          "Disabled",
          "ConfigureDeviceSettingsOnly",
          "FullExperimentations"
        ],
        "x-enumType": "AllowExperimentation"
      },
      "AllowTelemetry": {
        "type": "string",
        "description": "Defines the different levels of telemetry the device is allowed to send.",
        "x-enumNames": [
          "Security",
          "Basic",
          "Enhanced",
          "Full"
        ],
        "enum": [
          "Security",
          "Basic",
          "Enhanced",
          "Full"
        ],
        "x-enumType": "AllowTelemetry"
      },
      "BootStartDriverInitialization": {
        "type": "string",
        "description": "Enum for the different values that can be set to the BootStartDriverInitialization node",
        "x-enumNames": [
          "GoodAndUnknown",
          "GoodAndUnknownAndBadButCritical",
          "All",
          "GoodOnly"
        ],
        "enum": [
          "GoodAndUnknown",
          "GoodAndUnknownAndBadButCritical",
          "All",
          "GoodOnly"
        ],
        "x-enumType": "BootStartDriverInitialization"
      },
      "HoloLensFeatureControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Windows Desktop devices.",
            "required": [
              "AllowMicrosoftAccountConnection",
              "AllowAppStoreAutoUpdate",
              "AllowDeveloperUnlock",
              "AllowFastReconnect",
              "EnableDeviceEncryption",
              "AllowLocation",
              "AllowTelemetry10",
              "AllowSearchUseLocation",
              "AllowAdvertising",
              "AllowDiscoverableMode",
              "AllowBluetooth",
              "AllowDateTime",
              "AllowVPN",
              "AllowVirtualAssistant"
            ],
            "properties": {
              "AllowMicrosoftAccountConnection": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow using MSA account for non email related connection authentication and services.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0"
              },
              "AllowAppStoreAutoUpdate": {
                "description": "Specifies whether automatic update of apps from Windows Store are allowed.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "AllowDeveloperUnlock": {
                "description": "Gets or sets a value indicating whether developer unlock is allowed at the device.\n0 - disabled, 1 (default) - user controlled, 2 enabled\nMost restricted value is 0\narea - ApplicationManagement",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowDeveloperUnlock"
                  }
                ]
              },
              "AllowFastReconnect": {
                "type": "boolean",
                "description": "Allows EAP Fast Reconnect from being attempted for EAP Method TLS.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "EnableDeviceEncryption": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enable device encryption."
              },
              "AllowLocation": {
                "description": "Gets or sets a value indicating whether to allow/Disallow location service.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlled"
                  }
                ]
              },
              "AllowTelemetry10": {
                "description": "Gets or sets a value indicating whether to allow the device to send telemetry information (such as SQM, Watson).\n0 - not allowed, 1 - allowed, except for Secondary Data Requests 2 (default) - allowed\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowTelemetry"
                  }
                ]
              },
              "AllowSearchUseLocation": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Search to use location\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowAdvertising": {
                "type": "boolean",
                "description": "Specifies whether the device can act as a source for advertisements.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "AllowDiscoverableMode": {
                "type": "boolean",
                "description": "Specifies whether the discoverable mode is allowed.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "LocalDeviceName": {
                "type": "string",
                "description": "A string that specifies the local Bluetooth device name."
              },
              "AllowBluetooth": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow to set Blue tooth mode.\n(Could be set by Exchange EAS policy as well, definition be the same as Exchange).\n0 - disallow Blue tooth\n1 (not supported in WPB) - Disable Blue tooth, but allow the configuration of hands-free profiles - NOTE: value 1 isn't supported in Blue for MDM and EAS.\n2 (default) - allow Blue tooth\nSecure order (Most restricted value is 0) 0 2"
              },
              "AllowDateTime": {
                "type": "boolean",
                "description": "Allows the user to change date and time settings.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowVPN": {
                "type": "boolean",
                "description": "Allows the user to change VPN settings.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowVirtualAssistant": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Cortana\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              }
            }
          }
        ]
      },
      "WindowsPhoneFeatureControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Windows Desktop devices.",
            "required": [
              "DisableSdCard",
              "AllowAddProvisioningPackage",
              "AllowRemoveProvisioningPackage",
              "RequireProvisioningPackageSignature",
              "AntiTheftMode",
              "AllowInternetSharing",
              "AllowWifiOffloading",
              "AllowWifiHotspotReporting",
              "AllowBluetooth",
              "AllowCellularDataRoaming",
              "AllowCamera",
              "AllowVirtualAssistant",
              "AllowManualMdmUnenrollment",
              "AllowDirectMemoryAccess",
              "AllowDeviceDiscovery",
              "AllowAutoUpdateConfig",
              "AllowNonMicrosoftSignedUpdate",
              "AllowUpdateService",
              "ScheduledInstallDay",
              "ScheduledInstallTime",
              "AllowApnUserControl",
              "EnableLocation",
              "LetAppsRunInBackground",
              "EnableDeviceEncryption",
              "AllowActionCenterNotifications",
              "AllowWifi",
              "AllowManualWifiConfiguration",
              "AllowNFC",
              "AllowVPNRoamingOverCellular",
              "AllowVPNOverCellular",
              "AllowUSBConnection",
              "AllowCopyPaste",
              "AllowScreenCapture",
              "AllowManualRootCertificateInstallation",
              "AllowBrowser",
              "AllowIdleReturnWithoutPassword",
              "AllowVoiceRecording",
              "AllowSaveAsOfOfficeFiles",
              "AllowSyncMySettings",
              "AllowDataSense",
              "AllowDateTime",
              "AllowVPN",
              "AllowYourAccount",
              "AllowEditDeviceName",
              "AllowBuildPreview",
              "AllowEmbeddedMode",
              "AllowExperimentation",
              "AllowFontProviders",
              "AllowLocation",
              "AllowTelemetry",
              "AllowTelemetry10",
              "AllowUserToResetPhone",
              "AllowMicrosoftAccountConnection",
              "AllowAddingNonMicrosoftAccountsManually",
              "AllowMicrosoftAccountSignInAssistant",
              "AllowDeveloperUnlock",
              "AllowAppStoreAutoUpdate",
              "AllowStore",
              "AllowSharedUserAppData",
              "RestrictAppDataToSystemVolume",
              "RestrictAppToSystemVolume",
              "AllowFastReconnect",
              "AllowSecondaryAuthenticationDevice",
              "AllowBingVisionStoreContents",
              "AllowSearchUseLocation",
              "EnableSafeSearch",
              "AllowWindowsIndexer",
              "AllowAdvertising",
              "AllowDiscoverableMode",
              "AllowPrepairing",
              "AllowCellularData",
              "AllowConnectedDevices",
              "AllowFindMyDevice",
              "AllowSIMErrorDialogPromptWhenNoSIM",
              "AllowTaskSwitcher",
              "DoNotShowFeedbackNotifications",
              "PhoneUpdateRestrictions"
            ],
            "properties": {
              "DisableSdCard": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable SD Card Access."
              },
              "AllowAddProvisioningPackage": {
                "type": "boolean",
                "description": "Specifies whether to allow the runtime configuration agent to install provisioning packages."
              },
              "AllowRemoveProvisioningPackage": {
                "type": "boolean",
                "description": "Specifies whether to allow the runtime configuration agent to remove provisioning packages."
              },
              "RequireProvisioningPackageSignature": {
                "type": "boolean",
                "description": "Specifies whether provisioning packages must have a certificate signed by a device trusted authority."
              },
              "AntiTheftMode": {
                "type": "boolean",
                "description": "Specifies whether anti theft mode is allowed or disallowed."
              },
              "AllowInternetSharing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow or disallow Internet sharing\n(Configurable by Exchange as well - definition will be consistent with EAS definition.)\n0 - Do not allow the use of Internet Sharing. 1  (default) - Allow the use of Internet Sharing\nMost restricted value is 0"
              },
              "AllowWifiOffloading": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow or disallow automatic\noffloading data traffic to WiFi hotshots and social network.\n0 - not allowed, 1 (default) - allowed"
              },
              "AllowWifiHotspotReporting": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow or disallow WiFi Hotspot information reporting to Microsoft.\nOnce disallowed, the user cannot turn it on.\n0 - HotSpot reporting is not allowed 1 (default) - HotSpot reporting is allowed"
              },
              "AllowBluetooth": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow to set Blue tooth mode.\n(Could be set by Exchange EAS policy as well, definition be the same as Exchange).\n0 - disallow Blue tooth\n1 (not supported in WPB) - Disable Blue tooth, but allow the configuration of hands-free profiles - NOTE: value 1 isn't supported in Blue for MDM and EAS.\n2 (default) - allow Blue tooth\nSecure order (Most restricted value is 0) 0 2"
              },
              "AllowCellularDataRoaming": {
                "description": "Gets or sets a value indicating whether to allow or disallow cellular data roaming\n0 - not allowed 1(default) - allowed\nMost restricted value is 0\nPolicy Manager area - Connectivity",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlled"
                  }
                ]
              },
              "AllowCamera": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable camera\n0 - Use camera is disallowed, 1 (default) - Use camera is allowed\nMost restricted value is 0"
              },
              "AllowVirtualAssistant": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Cortana\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowManualMdmUnenrollment": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Manual Mdm Unenrollment\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowDirectMemoryAccess": {
                "type": "boolean",
                "description": "Allows Direct Memory Access.\nSupported Values:\n    0 – Not allowed.\n    1 (default) – Allowed.\nMost restricted value is 0"
              },
              "AllowDeviceDiscovery": {
                "type": "boolean",
                "description": "Specify whether allow Cortana\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowAutoUpdateConfig": {
                "description": "Specifies whether the device could use Microsoft Update, Windows Server Update Services (WSUS), or Windows Store.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowAutoUpdate"
                  }
                ]
              },
              "AllowNonMicrosoftSignedUpdate": {
                "type": "boolean",
                "description": "Allows the IT admin to manage whether Automatic Updates accepts updates signed by entities other than Microsoft when the update is found at the UpdateServiceUrl location. This policy supports using WSUS for 3rd party software and patch distribution. Supported operations are Get and Replace."
              },
              "AllowUpdateService": {
                "type": "boolean",
                "description": "Specifies whether the device could use Microsoft Update, Windows Server Update Services (WSUS), or Windows Store."
              },
              "ScheduledInstallDay": {
                "description": "Enables the IT admin to schedule the day of the update installation.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ScheduleInstallDay"
                  }
                ]
              },
              "ScheduledInstallTime": {
                "type": "integer",
                "description": "Enables the IT admin to schedule the time of the update installation.",
                "format": "int32"
              },
              "UpdateServiceUrl": {
                "type": "string",
                "description": "Allows the device to check for updates from a WSUS server instead of Microsoft Update. This is useful for on-premise MDMs that need to update devices that cannot connect to the Internet."
              },
              "AllowApnUserControl": {
                "type": "boolean",
                "description": "Boolean value that specifies whether the cellular UX will allow users to connect with other APNs other than the Enterprise APN."
              },
              "EnableLocation": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not Location Service's Device Switch is enabled or disabled for the device.\n0 (default) – Disabled.\n1 – Enabled."
              },
              "LetAppsRunInBackground": {
                "description": "Specifies whether Windows apps can run in the background.\nSupported Values:\n0 – User in control(default), same as delete this policy\n1 – Force allow.\n2 - Force deny.\nMost restricted value is 2.",
                "allOf": [
                  {
                    "$ref": "#/definitions/LetAppsRunInBackgroundSetting"
                  }
                ]
              },
              "EnableDeviceEncryption": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enable device encryption."
              },
              "AllowActionCenterNotifications": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Action Center Notifications\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowWifi": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow or disallow WiFi connection.\n(Configurable by Exchange as well - definition will be consistent with EAS definition.)\n0 - use WiFi connection is disallowed\n1 (default) - use WiFi connection is allowed. Most restricted value is 0"
              },
              "AllowManualWifiConfiguration": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow or disallow connecting to WiFi outside of MDM server-installed networks.\n0 - no WiFi connection outside of MDM provisioned is allowed, 1 (default) - adding new network SSIDs"
              },
              "AllowNFC": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow or disallow NFC. Only MDM server can set it.\n0 - not allowed 1 (default) - allowed\nMost restricted value is 0"
              },
              "AllowVPNRoamingOverCellular": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow this policy when enforced,\nwill prevent the device from connecting VPN when the device roams over cellular networks.\n0 - not allowed 1 (default) allowed\nMost restricted value is 0"
              },
              "AllowVPNOverCellular": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow this policy\nspecifies what type of underline connections VPN is allowed to use\n0 - VPN is not allowed over cellular\n1 (default) - VPN could use any connection including cellular.\nMost restricted value is 0"
              },
              "AllowUSBConnection": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow/Disallow desktop to access phone storage via USB.\n(Both MTP and IPoUSB) are disabled when policy enforced.\n0 - not allowed 1(default) - allowed\nMost restricted value is 0"
              },
              "AllowCopyPaste": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether copy and paste is allowed.\n0 - not allowed 1 (default) - allowed\nMost restricted value is 0"
              },
              "AllowScreenCapture": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether a screen capture is allowed.\n0 - not allowed 1 (default) - allowed\nMost restricted value is 0"
              },
              "AllowManualRootCertificateInstallation": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the user is allowed to manually install root and intermediate CAP certificates.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0"
              },
              "ApplicationRestrictions": {
                "type": "string",
                "description": "Gets or sets a value indicating whether xml blob specified\nA xml blob specify the application restrictions company want to put to the device.\nIt could be app allow list, app disallow list, allowed publisher IDs, etc.\nThe information for PolicyManager is opaque. PolicyManager doesn't do most restricted value evaluation. Whenever there is a\nchange to the value, the device parses the node value and enforce the restriction policies specified in the policy"
              },
              "AllowBrowser": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether IE is allowed in the device.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0"
              },
              "AllowIdleReturnWithoutPassword": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Idle Return Without Password\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowVoiceRecording": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Voice Recording\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowSaveAsOfOfficeFiles": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Save As Of Office Files\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowSyncMySettings": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Sync My Setting\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowDataSense": {
                "type": "boolean",
                "description": "Allows the user to change Data Sense settings.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowDateTime": {
                "type": "boolean",
                "description": "Allows the user to change date and time settings.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowVPN": {
                "type": "boolean",
                "description": "Allows the user to change VPN settings.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowYourAccount": {
                "type": "boolean",
                "description": "Allows user to change account settings.\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowEditDeviceName": {
                "type": "boolean",
                "description": "Allows user to edit device name\nSupported Values:\n    0 – Not allowed\n    1 (default) – Allowed\nMost restricted value is 0"
              },
              "AllowBuildPreview": {
                "type": "boolean",
                "description": "This policy setting determines whether users can access the Insider build controls in the Advanced Options for Windows Update. These controls are located under \"Get Insider builds,\" and enable users to make their devices available for downloading and installing Windows preview software.\n    0 – Not allowed. The item “Get Insider builds” is unavailable, users are unable to make their devices available for preview software.\n    1 (default) – Allowed. Users can make their devices available for downloading and installing preview software."
              },
              "AllowEmbeddedMode": {
                "type": "boolean",
                "description": "Specifies whether set general purpose device to be in embedded mode.\n    0 (default) – Not allowed.\n    1 – Allowed."
              },
              "AllowExperimentation": {
                "description": "This policy setting determines the level that Microsoft can experiment with the product to study user preferences or device behavior.\n    0 – Disabled.\n    1 (default) – Permits Microsoft to configure device settings only.\n    2 – Allows Microsoft to conduct full experimentation.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowExperimentation"
                  }
                ]
              },
              "AllowFontProviders": {
                "type": "boolean",
                "description": "This policy determines whether Windows is allowed to download fonts and font catalog data from an online font provider\n    0 - false - No traffic to fs.microsoft.com and only locally-installed fonts are available.\n    1 - true (default) - There may be network traffic to fs.microsoft.com and downloadable fonts are available to apps that support them.\n\nMost restricted value is 0"
              },
              "AllowLocation": {
                "description": "Gets or sets a value indicating whether to allow/Disallow location service.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlled"
                  }
                ]
              },
              "AllowTelemetry": {
                "description": "Gets or sets a value indicating whether to allow the device to send telemetry information (such as SQM, Watson).\n0 - not allowed, 1 - allowed, except for Secondary Data Requests 2 (default) - allowed\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowTelemetry81"
                  }
                ]
              },
              "AllowTelemetry10": {
                "description": "Gets or sets a value specifying the level of telemetry information (such as SQM, Watson) the device is allowed to send.\nRanges from 0 (Security) to 3 (Full)\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowTelemetry"
                  }
                ]
              },
              "AllowUserToResetPhone": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable User To Reset Phone\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "TelemetryProxy": {
                "type": "string",
                "description": "Allows you to specify the fully qualified domain name (FQDN) or IP address of a proxy server to forward Connected User Experiences and Telemetry requests.\nThe format for this setting is server:port"
              },
              "AllowMicrosoftAccountConnection": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow using MSA account for non email related connection authentication and services.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0"
              },
              "AllowAddingNonMicrosoftAccountsManually": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether user is allowed to add non MSA email accounts.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0"
              },
              "AllowMicrosoftAccountSignInAssistant": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether \"Microsoft Account Sign-In Assistant\" is enabled\n0 - disable assistant 1 (default) - Manual start\nMost restricted value is 0"
              },
              "DomainNamesForEmailSync": {
                "type": "string",
                "description": "Gets or sets a list of the domains that are allowed to sync email on the device\nString should contain a pipe-separated list of domains that are allowed to sync email on the device\nThe default value is an empty string, which allows all email accounts on the device to sync email"
              },
              "AllowDeveloperUnlock": {
                "description": "Gets or sets a value indicating whether developer unlock is allowed at the device.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0\narea - ApplicationManagement",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowDeveloperUnlock"
                  }
                ]
              },
              "AllowAppStoreAutoUpdate": {
                "description": "Specifies whether automatic update of apps from Windows Store are allowed.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "AllowStore": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to app store is allowed at the device.\n0 - not allowed, 1 (default) - allowed\nMost restricted value is 0"
              },
              "AllowSharedUserAppData": {
                "type": "boolean",
                "description": "Specifies whether multiple users of the same app can share data.\nSupported Values:\n    0 (default) - Not allowed\n    1 - Allowed\n    Most restricted value is 0"
              },
              "RestrictAppDataToSystemVolume": {
                "type": "boolean",
                "description": "Specifies whether application data is restricted to the system drive.\nSupported Values:\n    0 (default) - Not restricted\n    1 - Restricted\n    Most restricted value is 1"
              },
              "RestrictAppToSystemVolume": {
                "type": "boolean",
                "description": "Specifies whether the installation of applications is restricted to the system drive.\nSupported Values:\n    0 (default) - Not restricted\n    1 - Restricted\n    Most restricted value is 1"
              },
              "AllowFastReconnect": {
                "type": "boolean",
                "description": "Allows EAP Fast Reconnect from being attempted for EAP Method TLS.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "AllowSecondaryAuthenticationDevice": {
                "type": "boolean",
                "description": "Allows secondary authentication devices to work with Windows.\nThe default for this policy must be\non for consumer devices (defined as local or Microsoft account connected device)\nand off for enterprise devices (such as cloud domain-joined, cloud domain-joined in an on-premise only environment, cloud domain-joined in a hybrid environment, and BYOD).\n    Supported Values:\n    0 - (default) Not allowed\n    1 - Allowed\n    Most restricted value is 0"
              },
              "AllowBingVisionStoreContents": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Bing Vision to store the contents of images in Bing Vision Search\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowSearchUseLocation": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Search to use location\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "EnableSafeSearch": {
                "description": "Gets or sets a value indicating whether to Disable/Enable Safe Search\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowSafeSearch"
                  }
                ]
              },
              "AllowWindowsIndexer": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Windows indexer\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowAdvertising": {
                "type": "boolean",
                "description": "Specifies whether the device can act as a source for advertisements.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "AllowDiscoverableMode": {
                "type": "boolean",
                "description": "Specifies whether the discoverable mode is allowed.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "AllowPrepairing": {
                "type": "boolean",
                "description": "Specifies whether to allow specific bundled Bluetooth peripherals to automatically pair with the host device.\nSupported Values:\n    0 - Not allowed\n    1 (default) - Allowed\n    Most restricted value is 0"
              },
              "LocalDeviceName": {
                "type": "string",
                "description": "A string that specifies the local Bluetooth device name."
              },
              "AllowCellularData": {
                "description": "Gets or sets a value indicating whether to allow or disallow cellular data\n0 - not allowed\n1(default) - allowed\n2 - force allow\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlled"
                  }
                ]
              },
              "AllowConnectedDevices": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Connected Device\n0 - is disallowed\n1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowFindMyDevice": {
                "description": "Gets or sets a value indicating whether to Disable/Enable Find My Device\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserControlledSetting"
                  }
                ]
              },
              "AllowSIMErrorDialogPromptWhenNoSIM": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable SIM Error Dialog Prompt When No SIM\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "AllowTaskSwitcher": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Task Switcher\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "DoNotShowFeedbackNotifications": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable/Enable Feedback Notifications\n0 - is disallowed, 1 (default) - is allowed\nMost restricted value is 0"
              },
              "PhoneUpdateRestrictions": {
                "description": "Gets or sets a value indicating how updates should work\n0 - Never check for updates,\n1 - Install updates automatically\n2 - Check for updates but let me choose when to download and install them\n3 - Download updates but let me choose when to install them\nMost restricted value is 0",
                "allOf": [
                  {
                    "$ref": "#/definitions/PhoneUpdateRestrictions"
                  }
                ]
              }
            }
          }
        ]
      },
      "AllowTelemetry81": {
        "type": "string",
        "description": "Defines the different levels of allow App content on iOS devices.",
        "x-enumNames": [
          "Disallow",
          "AllowExceptSecondaryRequests",
          "Allow"
        ],
        "enum": [
          "Disallow",
          "AllowExceptSecondaryRequests",
          "Allow"
        ],
        "x-enumType": "AllowTelemetry81"
      },
      "AllowSafeSearch": {
        "type": "string",
        "description": "Specifies SafeSearch status for a Windows Phone device",
        "x-enumNames": [
          "Strict",
          "Moderate",
          "UserControlled"
        ],
        "enum": [
          "Strict",
          "Moderate",
          "UserControlled"
        ],
        "x-enumType": "AllowSafeSearch"
      },
      "PhoneUpdateRestrictions": {
        "type": "string",
        "description": "Different settings for auto update",
        "x-enumNames": [
          "NeverCheckForUpdates",
          "AutomaticInstall",
          "CheckForUpdates",
          "DownloadUpdates",
          "UserControlled"
        ],
        "enum": [
          "NeverCheckForUpdates",
          "AutomaticInstall",
          "CheckForUpdates",
          "DownloadUpdates",
          "UserControlled"
        ],
        "x-enumType": "PhoneUpdateRestrictions"
      },
      "ModernDesktopLockdownSection": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsDesktopLockdownSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable lockdown menu for windows devices."
          }
        ]
      },
      "WindowsDesktopLockdownSection": {
        "allOf": [
          {
            "$ref": "#/definitions/LockdownSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable lockdown menu for windows devices.",
            "required": [
              "EnableAutoLogOn",
              "HidePreviousButton",
              "HideNextButton",
              "HideHomeButton",
              "HideRefreshButton",
              "HideBattery",
              "HideWirelessNetwork",
              "HideAgentStatus",
              "ShowKeyboard"
            ],
            "properties": {
              "EnableAutoLogOn": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the automatic login is enabled"
              },
              "DefaultDomain": {
                "type": "string",
                "description": "Gets or sets the default domain."
              },
              "DefaultUserName": {
                "type": "string",
                "description": "Gets or sets the default user name."
              },
              "DefaultPassword": {
                "type": "string",
                "description": "Gets or sets the default password."
              },
              "HidePreviousButton": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the ui should not display\nthe previous button."
              },
              "HideNextButton": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the ui should not display\nthe next button."
              },
              "HideHomeButton": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the ui should not display\nthe home button."
              },
              "HideRefreshButton": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the ui should not display\nthe home button."
              },
              "HideBattery": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the ui should not display\nthe battery gage."
              },
              "HideWirelessNetwork": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the ui should not display\nthe wireless network control."
              },
              "HideAgentStatus": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the ui should not display\nthe agent status ."
              },
              "ShowKeyboard": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the ui should show keyboard button on Win8 taskbar"
              },
              "SpeedControls": {
                "description": "Gets or sets the SpeedControls.",
                "allOf": [
                  {
                    "$ref": "#/definitions/LockdownSpeedControls"
                  }
                ]
              }
            }
          }
        ]
      },
      "LockdownSpeedControls": {
        "type": "object",
        "description": "Class to handle Lockdown Speed controls.",
        "required": [
          "Enabled",
          "Threshold",
          "Engage",
          "Disengage",
          "EngageScriptReferenceId",
          "SpeedUnit",
          "DisengageScriptReferenceId"
        ],
        "properties": {
          "Enabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the speed controls are enabled."
          },
          "Start": {
            "type": "string",
            "description": "Gets or sets the Starting time."
          },
          "End": {
            "type": "string",
            "description": "Gets or sets the Ending time."
          },
          "Threshold": {
            "type": "number",
            "description": "Gets or sets the Speed Threshold in Nautical Miles.",
            "format": "double"
          },
          "Engage": {
            "type": "integer",
            "description": "Gets or sets the Engage timer in Seconds.",
            "format": "int32"
          },
          "Disengage": {
            "type": "integer",
            "description": "Gets or sets the Disengage timer in Seconds.",
            "format": "int32"
          },
          "EngageScriptReferenceId": {
            "type": "string",
            "description": "Gets or sets the Engage Script Reference Id for Speed Lockdown.",
            "format": "guid"
          },
          "SpeedUnit": {
            "type": "integer",
            "description": "Gets or sets the System Speed (0-kM/h, 1-Mph) .",
            "format": "int32"
          },
          "DisengageScriptReferenceId": {
            "type": "string",
            "description": "Gets or sets the Disengage Script Reference Id for Speed Lockdown.",
            "format": "guid"
          },
          "TaskbarSettings": {
            "description": "Gets or sets the .",
            "allOf": [
              {
                "$ref": "#/definitions/LockdownTaskbarSettings"
              }
            ]
          }
        }
      },
      "LockdownTaskbarSettings": {
        "type": "object",
        "description": "Defines the configurable lockdown taskbar for windows devices.",
        "required": [
          "TaskbarOptions",
          "ShowStartMenu",
          "TaskbarShowDateTime",
          "TaskbarShowVolume",
          "TaskbarShowBattery",
          "TaskbarShowPhone",
          "TaskbarShowWirelessNetwork",
          "TaskbarShowNotifications",
          "TaskbarShowStartMenu",
          "TaskbarShowEthernet",
          "TaskbarShowBluetooth"
        ],
        "properties": {
          "TaskbarOptions": {
            "description": "Gets or sets a value of Taskbar options when lockdown",
            "allOf": [
              {
                "$ref": "#/definitions/TaskbarOption"
              }
            ],
            "x-enumType": "TaskbarOption"
          },
          "ShowStartMenu": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the kiosk should show the start menu."
          },
          "TaskbarShowDateTime": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the custom taskbar should display\nthe date and time."
          },
          "TaskbarShowVolume": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the custom taskbar should display\nthe volume control."
          },
          "TaskbarShowBattery": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the custom taskbar should display\nthe battery gage."
          },
          "TaskbarShowPhone": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the custom taskbar should display\nthe phone control."
          },
          "TaskbarShowWirelessNetwork": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the custom taskbar should display\nthe wireless network control."
          },
          "TaskbarShowNotifications": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the custom taskbar should display\nthe notification control."
          },
          "TaskbarShowStartMenu": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the custom taskbar should display\nthe start menu control."
          },
          "TaskbarShowEthernet": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the custom taskbar should display\nthe ethernet control."
          },
          "TaskbarShowBluetooth": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the custom taskbar should display\nthe Bluetooth menu control."
          }
        }
      },
      "TaskbarOption": {
        "type": "string",
        "description": "Options for Lockdown taskbar",
        "x-enumNames": [
          "NoTaskbar",
          "StandardTaskbar",
          "CustomTaskbar"
        ],
        "enum": [
          "NoTaskbar",
          "StandardTaskbar",
          "CustomTaskbar"
        ],
        "x-enumType": "TaskbarOption"
      },
      "LockdownSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable lockdown menu for windows devices.",
            "required": [
              "Enabled"
            ],
            "properties": {
              "Enabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the lockdown menu is enabled."
              },
              "Controls": {
                "type": "array",
                "description": "Gets or sets the collection of Controls.",
                "items": {
                  "$ref": "#/definitions/LockdownControl"
                }
              },
              "RevertTimeout": {
                "type": "number",
                "description": "Gets or sets the Admin mode timeout.",
                "format": "double"
              }
            }
          }
        ]
      },
      "LockdownControl": {
        "type": "object",
        "description": "Class to handle Lockdown controls (User, Administrator, Speed, etc).",
        "properties": {
          "MenuItems": {
            "type": "array",
            "description": "Gets or sets a value indicating whether the lockdown menu is enabled.",
            "items": {
              "$ref": "#/definitions/LockdownMenuItem"
            }
          },
          "ImageItems": {
            "type": "array",
            "description": "Gets or sets the collection of images.",
            "items": {
              "type": "string"
            }
          },
          "TemplateName": {
            "type": "string",
            "description": "Gets or sets the HTML template name."
          },
          "TemplateFileReferenceId": {
            "type": "string",
            "description": "Gets or sets the HTML template file reference id."
          },
          "ControlIdPrefix": {
            "type": "string",
            "description": "Gets or sets the Control Id Prefix (D,S,U or A - Device, Speed, User, Admin)."
          }
        }
      },
      "LockdownMenuItem": {
        "type": "object",
        "description": "Data entity describing a single lockdown menu item.",
        "required": [
          "UseApplicationIcon",
          "LaunchOnStartup",
          "EnableSingleAppMode"
        ],
        "properties": {
          "DisplayName": {
            "type": "string",
            "description": "Gets or sets item display name."
          },
          "ProgramPath": {
            "type": "string",
            "description": "Gets or sets item program path."
          },
          "ProgramImage": {
            "type": "string",
            "description": "Gets or sets image."
          },
          "UseApplicationIcon": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the program should use\napplication icon."
          },
          "LaunchOnStartup": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the program should launch\nwhen the device starts."
          },
          "EnableSingleAppMode": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the Single App Mode should be enabled\nwhen the device starts."
          }
        }
      },
      "WindowsCELockdownSection": {
        "allOf": [
          {
            "$ref": "#/definitions/LockdownSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable lockdown menu for windows devices.",
            "required": [
              "LaunchViaKB",
              "NoMenu",
              "NoBackButton"
            ],
            "properties": {
              "LaunchViaKB": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the kiosk should use keyboard shortcuts."
              },
              "NoMenu": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether no menu should be displayed."
              },
              "NoBackButton": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether no back button should be displayed."
              },
              "TaskbarSettings": {
                "description": "Gets or sets the .",
                "allOf": [
                  {
                    "$ref": "#/definitions/LockdownTaskbarSettings"
                  }
                ]
              },
              "SpeedControls": {
                "description": "Gets or sets the SpeedControls.",
                "allOf": [
                  {
                    "$ref": "#/definitions/LockdownSpeedControls"
                  }
                ]
              }
            }
          }
        ]
      },
      "AndroidWorkLockdownSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicLockdownSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable lockdown menu for windows devices.",
            "required": [
              "ActivitySuppression",
              "HideFloatingHomeButton",
              "EnableSystemInformation",
              "EnableNativeNotifications",
              "EnableNotificationSound",
              "EnableRecentsButton",
              "EnableKeyguard",
              "EnablePowerMenu",
              "EnableFullDeviceLockdown"
            ],
            "properties": {
              "ActivitySuppression": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the lockdown is using soft disable for Android Enterprise."
              },
              "HideFloatingHomeButton": {
                "type": "boolean",
                "description": "Gets or sets the visibility of Floating Home Button."
              },
              "EnableSystemInformation": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users to have visibility into the system vitals while in lockdown mode."
              },
              "EnableNativeNotifications": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users to have access to notifications and the notification shade."
              },
              "EnableNotificationSound": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users can hear notification sounds even when notifications are off."
              },
              "EnableRecentsButton": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users to have recents button is enabled or not."
              },
              "EnableKeyguard": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the Keyguard is enabled"
              },
              "EnablePowerMenu": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the PowerMenu is enabled"
              },
              "EnableFullDeviceLockdown": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the Full lockdown is enabled"
              }
            }
          }
        ]
      },
      "AndroidClassicLockdownSection": {
        "allOf": [
          {
            "$ref": "#/definitions/LockdownSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable lockdown menu for windows devices.",
            "required": [
              "UseApplicationIcon",
              "DisableStatusBarExpansion",
              "HideSystemBar",
              "DisableSettingsChanges",
              "HardBlocking",
              "SamsungSoftBlocking"
            ],
            "properties": {
              "UseApplicationIcon": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the application icon should be used."
              },
              "SpeedControls": {
                "description": "Gets or sets the SpeedControls.",
                "allOf": [
                  {
                    "$ref": "#/definitions/LockdownSpeedControls"
                  }
                ]
              },
              "DisableStatusBarExpansion": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether status bar expansion is disabled."
              },
              "HideSystemBar": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether system bar is hidden."
              },
              "DisableSettingsChanges": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether settings changes are disabled."
              },
              "HardBlocking": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the lockdown is using blacklist or not"
              },
              "SamsungSoftBlocking": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the lockdown is using soft disable for Samsung"
              }
            }
          }
        ]
      },
      "HoloLensSCEPSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents a configuration section for SCEP servers",
            "properties": {
              "Name": {
                "type": "string",
                "description": "Gets or sets the SCEP section name."
              },
              "CertificateLocalStoreType": {
                "description": "Gets or sets the Certificate Local Store Type",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateLocalStoreType"
                  }
                ]
              },
              "Configurations": {
                "type": "array",
                "description": "Gets or sets the collection of SCEP server settings.",
                "items": {
                  "$ref": "#/definitions/SCEPConfiguration"
                }
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "SCEPConfiguration": {
        "type": "object",
        "description": "Represents configuration settings for SCEP server",
        "required": [
          "Id"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets unique identifier",
            "format": "guid"
          },
          "TemplateRefId": {
            "type": "string",
            "description": "Gets or sets certificate template reference id"
          }
        }
      },
      "SchemaBasedConfigurationSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "schema based payload configuration",
            "required": [
              "PayloadTypeVersionReferenceId"
            ],
            "properties": {
              "Configuration": {
                "description": "This is raw configuration arrived from frontend"
              },
              "Name": {
                "type": "string",
                "description": "Name"
              },
              "PayloadTypeVersionReferenceId": {
                "type": "string",
                "description": "PayloadTypeVersionReferenceId",
                "format": "guid"
              }
            }
          }
        ]
      },
      "WindowsModernWebContentFilterSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an WindowsModern Web Content Filter configuration.",
            "required": [
              "IsBlackList"
            ],
            "properties": {
              "IsBlackList": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether this instance is black list."
              },
              "WebFilterUrls": {
                "type": "array",
                "description": "Gets or sets the web filter urls.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "WindowsPhoneWindowsVpnSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an Windows Phone Blue VPN configuration.",
            "properties": {
              "Connection": {
                "description": "Gets or sets the VPN connection in this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WindowsVpnConnection"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "WindowsVpnConnection": {
        "type": "object",
        "description": "Base class for all Windows Phone VPN connection types.",
        "required": [
          "UniqueId",
          "Polices",
          "VPNConnectionType",
          "WindowsVpnConnectionType"
        ],
        "properties": {
          "UniqueId": {
            "type": "string",
            "description": "Gets or sets the unique id for the connection",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets the friendly name for this VPN connection."
          },
          "ServerAddress": {
            "type": "string",
            "description": "Gets or sets the IP address or host name for the VPN server."
          },
          "Authentication": {
            "description": "Gets or sets the authentication data for this connection.",
            "allOf": [
              {
                "$ref": "#/definitions/WindowsVpnAuthentication"
              }
            ]
          },
          "ProxySettings": {
            "description": "Gets or sets VPN Proxy settings",
            "allOf": [
              {
                "$ref": "#/definitions/VPNProxySettings"
              }
            ]
          },
          "DNSSuffix": {
            "type": "string",
            "description": "Gets or sets the primary connection specific DNS suffix.\nOptional node. Required setting to push down the primary connection specific DNS suffix."
          },
          "Polices": {
            "description": "Gets or sets VPN connection polices flags for\n1. RememberCredentials\n2. SplitTunnel\n3. BypassForLocal\n4. TrustedNetworkDetection",
            "allOf": [
              {
                "$ref": "#/definitions/VpnConnectionPolices"
              }
            ],
            "x-enumType": "VpnConnectionPolices"
          },
          "VPNConnectionType": {
            "description": "Gets or sets a value indicating whether the connection type manual or automatic\nOptional node. Valid values are:\nAutomatic: VPN automatically connects as applications require connectivity to protected resource.\nLife cycle of VPN is based on applications using the VPN.\nRecommended setting for optimizing usage of power resources.\nManual: User must manually connect / disconnect VPN.\nDefault setting is Automatic",
            "allOf": [
              {
                "$ref": "#/definitions/VpnConnectionType"
              }
            ],
            "x-enumType": "VpnConnectionType"
          },
          "FilterLists": {
            "type": "array",
            "description": "Gets or sets the collection of allowed or excluded items in\n1. ProductIDs for Enterprise LoB applications list (GUID string).\n2. Network IP ranges list\n3. Namespaces list",
            "items": {
              "$ref": "#/definitions/VpnFilterListItem"
            }
          },
          "DNSSuffixSearchList": {
            "type": "array",
            "description": "Gets or sets the collection of DNS suffixes.\nOptional. This will be one or many DNS suffixes that will be appended to short name URLs for DNS resolution and connectivity.",
            "items": {
              "type": "string"
            }
          },
          "WindowsVpnConnectionType": {
            "description": "Gets or sets the type of VPN Connection.",
            "allOf": [
              {
                "$ref": "#/definitions/WindowsVpnConnectionType"
              }
            ],
            "x-enumType": "WindowsVpnConnectionType"
          }
        }
      },
      "WindowsVpnAuthentication": {
        "type": "object",
        "description": "Represents a vpn authentication for an windows phone bule configuration.",
        "required": [
          "AuthenticationMode",
          "HostScheme"
        ],
        "properties": {
          "AuthenticationMode": {
            "description": "Gets or sets authentication mode available for Windows Phone VPN connections",
            "allOf": [
              {
                "$ref": "#/definitions/VPNAuthenticationMode"
              }
            ],
            "x-enumType": "VPNAuthenticationMode"
          },
          "HostScheme": {
            "description": "Gets or sets Extensible Authentication Protocol serialized data",
            "allOf": [
              {
                "$ref": "#/definitions/EapHostScheme"
              }
            ],
            "x-enumType": "EapHostScheme"
          },
          "RetrievalMethod": {
            "description": "Gets or sets retrieval method for identity certificate",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          },
          "CertificateRefId": {
            "type": "string",
            "description": "Gets or sets the file reference id of the connection's identity certificate.\nThis value should be null when using the Password authentication\nmode."
          },
          "EnterpriseSettings": {
            "description": "Gets or sets the advanced wireless security settings for one of\nthe enterprise security modes.",
            "allOf": [
              {
                "$ref": "#/definitions/WindowsPhoneEnterpriseWirelessSettings"
              }
            ]
          }
        }
      },
      "VPNAuthenticationMode": {
        "type": "string",
        "description": "Enumerates the different authentication modes available for VPN connections.",
        "x-enumNames": [
          "Password",
          "RSASecureId",
          "Certificate",
          "SharedSecret",
          "Hybrid",
          "Eap",
          "MsChapV2"
        ],
        "enum": [
          "Password",
          "RSASecureId",
          "Certificate",
          "SharedSecret",
          "Hybrid",
          "Eap",
          "MsChapV2"
        ],
        "x-enumType": "VPNAuthenticationMode"
      },
      "EapHostScheme": {
        "type": "string",
        "description": "EAP Host Legacy schemes",
        "x-enumNames": [
          "TlsConnection",
          "TlsUser",
          "ChapV2Connection",
          "ChapV2User",
          "PeapConnection"
        ],
        "enum": [
          "TlsConnection",
          "TlsUser",
          "ChapV2Connection",
          "ChapV2User",
          "PeapConnection"
        ],
        "x-enumType": "EapHostScheme"
      },
      "WindowsPhoneEnterpriseWirelessSettings": {
        "type": "object",
        "description": "Data contract for Enterprise wireless authentication settings.",
        "required": [
          "Protocols",
          "UserNameFormat"
        ],
        "properties": {
          "Protocols": {
            "description": "Gets or sets the collection of supported authentication protocols.",
            "allOf": [
              {
                "$ref": "#/definitions/WirelessAuthenticationProtocols"
              }
            ],
            "x-enumType": "WirelessAuthenticationProtocols"
          },
          "UserNameFormat": {
            "description": "Gets or sets the User Name Format used by connection.",
            "allOf": [
              {
                "$ref": "#/definitions/UserNameFormat"
              }
            ],
            "x-enumType": "UserNameFormat"
          },
          "InnerIdentityMode": {
            "description": "Gets or sets the inner identity mode.  This value is null if the TTLS protocol is unavailable.",
            "allOf": [
              {
                "$ref": "#/definitions/InnerIdentityMode"
              }
            ],
            "x-enumType": "InnerIdentityMode"
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the user name for the connection."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password for the connection.  This can be null."
          },
          "RootCertificateRefIds": {
            "type": "array",
            "description": "Gets or sets the ref ids of the CA certificates.",
            "items": {
              "type": "string"
            }
          },
          "OuterIdentity": {
            "type": "string",
            "description": "Gets or sets the device's outidentity (for TTLS, PEAP, and EAP-FAST)."
          },
          "ScepCertificateRefId": {
            "type": "string",
            "description": "Gets or sets the SCEP certificate reference ID for the device."
          },
          "TrustedServerNames": {
            "type": "array",
            "description": "Gets or sets the collection of trusted server certificate names.",
            "items": {
              "type": "string"
            }
          },
          "AllowTrustExceptions": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device\nuser will be able to explicitly trust untrusted certificates."
          },
          "EnableServerValidation": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the server validation is enabled"
          }
        }
      },
      "WirelessAuthenticationProtocols": {
        "type": "string",
        "description": "Enumerates the different available wireless authentication protocols.",
        "x-enumNames": [
          "TLS",
          "TTLS",
          "LEAP",
          "PEAP",
          "EAPFAST",
          "EAPSIM",
          "PSK"
        ],
        "enum": [
          "TLS",
          "TTLS",
          "LEAP",
          "PEAP",
          "EAPFAST",
          "EAPSIM",
          "PSK"
        ],
        "x-enumType": "WirelessAuthenticationProtocols"
      },
      "InnerIdentityMode": {
        "type": "string",
        "description": "Enumerates the different available inner identity modes when using\nTTLS wireless authentication.",
        "x-enumNames": [
          "PAP",
          "CHAP",
          "MSCHAP",
          "MSCHAPVersion2",
          "GTC",
          "None",
          "EAP"
        ],
        "enum": [
          "PAP",
          "CHAP",
          "MSCHAP",
          "MSCHAPVersion2",
          "GTC",
          "None",
          "EAP"
        ],
        "x-enumType": "InnerIdentityMode"
      },
      "EapAuthentication": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsVpnAuthentication"
          },
          {
            "type": "object",
            "description": "Class for VPN user authentication with Extensible Authentication Protocol"
          }
        ]
      },
      "IdentityCertificateAuthentication": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsVpnAuthentication"
          },
          {
            "type": "object",
            "description": "Class for VPN user certificate authentication data"
          }
        ]
      },
      "VPNProxySettings": {
        "type": "object",
        "description": "Class for Windows Phone VPN Proxy settings",
        "required": [
          "ServerMode",
          "Port",
          "BypassForLocal"
        ],
        "properties": {
          "ServerMode": {
            "description": "Gets or sets the proxy server mode.",
            "allOf": [
              {
                "$ref": "#/definitions/ProxyServerMode"
              }
            ],
            "x-enumType": "ProxyServerMode"
          },
          "Address": {
            "type": "string",
            "description": "Gets or sets the IP address or host name of a server for automatic proxy configuration."
          },
          "Port": {
            "type": "integer",
            "description": "Gets or sets the port number of a server for manual proxy configuration.",
            "format": "int32"
          },
          "BypassForLocal": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether any web requests to resources in the \"intranet\" zone will not be sent to the proxy"
          }
        }
      },
      "ProxyServerMode": {
        "type": "string",
        "description": "Enumerates the different ways to specify proxy server settings.",
        "x-enumNames": [
          "None",
          "Automatic",
          "Manual"
        ],
        "enum": [
          "None",
          "Automatic",
          "Manual"
        ],
        "x-enumType": "ProxyServerMode"
      },
      "VpnConnectionPolices": {
        "type": "string",
        "description": "Defines VPN connection polices flags for Windows Phone",
        "x-enumNames": [
          "None",
          "RememberCredentials",
          "SplitTunnel",
          "BypassForLocal",
          "TrustedNetworkDetection"
        ],
        "enum": [
          "None",
          "RememberCredentials",
          "SplitTunnel",
          "BypassForLocal",
          "TrustedNetworkDetection"
        ],
        "x-enumType": "VpnConnectionPolices"
      },
      "VpnConnectionType": {
        "type": "string",
        "description": "Enumerates different types of Windows Phone VPN connections",
        "x-enumNames": [
          "Manual",
          "Automatic"
        ],
        "enum": [
          "Manual",
          "Automatic"
        ],
        "x-enumType": "VpnConnectionType"
      },
      "VpnFilterListItem": {
        "type": "object",
        "description": "Holds information about allowed or excluded item in VPN connection filter list for Windows Phone",
        "required": [
          "ListType",
          "Status"
        ],
        "properties": {
          "ListType": {
            "description": "Gets or sets list item type",
            "allOf": [
              {
                "$ref": "#/definitions/VpnFilterListItemType"
              }
            ],
            "x-enumType": "VpnFilterListItemType"
          },
          "Content": {
            "type": "string",
            "description": "Gets or sets item content"
          },
          "AppName": {
            "type": "string",
            "description": "Gets or sets Application Name, only for Applications"
          },
          "Status": {
            "description": "Gets or sets Allow/Deny status",
            "allOf": [
              {
                "$ref": "#/definitions/AllowDenyStatus"
              }
            ],
            "x-enumType": "AllowDenyStatus"
          }
        }
      },
      "VpnFilterListItemType": {
        "type": "string",
        "description": "Defines VPN connection filter list item type for Windows Phone",
        "x-enumNames": [
          "App",
          "Network",
          "Namespace"
        ],
        "enum": [
          "App",
          "Network",
          "Namespace"
        ],
        "x-enumType": "VpnFilterListItemType"
      },
      "AllowDenyStatus": {
        "type": "string",
        "description": "Specifies item status for allow/exclude list",
        "x-enumNames": [
          "Allow",
          "Deny"
        ],
        "enum": [
          "Allow",
          "Deny"
        ],
        "x-enumType": "AllowDenyStatus"
      },
      "WindowsVpnConnectionType": {
        "type": "string",
        "description": "Enumerators for Windows VPN Connection Type.",
        "x-enumNames": [
          "IKEv2",
          "Junos",
          "PulseSecure"
        ],
        "enum": [
          "IKEv2",
          "Junos",
          "PulseSecure"
        ],
        "x-enumType": "WindowsVpnConnectionType"
      },
      "WindowsPhoneIkev2Connection": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsVpnConnection"
          },
          {
            "type": "object",
            "description": "Represents Ikev2 VPN connection for Windows Phone"
          }
        ]
      },
      "WindowsPhoneJunosPulseConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsPhoneThirdPartyVpnConnection"
          },
          {
            "type": "object",
            "description": "Represents Junos VPN connection for Windows Phone",
            "properties": {
              "Realm": {
                "type": "string",
                "description": "Gets or sets the realm for this connection."
              },
              "Role": {
                "type": "string",
                "description": "Gets or sets the role for this connection."
              }
            }
          }
        ]
      },
      "WindowsPhoneThirdPartyVpnConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsVpnConnection"
          },
          {
            "type": "object",
            "description": "Base class for all Windows Phone 3rd-party VPN connection types.",
            "x-abstract": true,
            "properties": {
              "PlugInName": {
                "type": "string",
                "description": "Gets or sets a value indicating whether the 3rd-party VPN plug-in name.\nRequired node if THIRDPARTY is defined for SSL-VPN profile provisioning.\nValid values are:\n - JunOSPulse\n - PulseSecure\n - SonicWall Mobile Connect\n - F5 Big-IP Edge Client\n - Checkpoint Mobile VPN"
              },
              "AppId": {
                "type": "string",
                "description": "Gets or sets a value indicating whether 3rd party SSL-VPN plug-in app ID.\nOptional node, but required if enterprise is pushing 3rd party SSL-VPN plug-in app from the private enterprise storefront.\nThis would be a ProductID associated with the store application.\nThe client will use this ProductID to ensure that only the \"enterprise approved\" plug-in is initialized."
              },
              "ProductUrl": {
                "type": "string",
                "description": "Gets or sets a value indicating whether 3rd party SSL-VPN plug-in product url.\nOptional node, but required if enterprise is pushing 3rd party SSL-VPN plug-in app from the private enterprise storefront.\nThis would be a ProductID associated with the store application.\nThe client will use this ProductID to ensure that only the \"enterprise approved\" plug-in is initialized."
              },
              "CustomConfiguration": {
                "type": "string",
                "description": "Gets or sets the XML blob for SSL-VPN plug-in specific configuration.\nOptional node. This is an XML blob for SSL-VPN plug-in specific configuration that's pushed to the device to make available for SSL-VPN plug-ins.\nThis is XML format of type CHAR."
              }
            }
          }
        ]
      },
      "WindowsPhonePulseSecureConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsPhoneThirdPartyVpnConnection"
          },
          {
            "type": "object",
            "description": "Represents Pulse Secure VPN connection for Windows Phone",
            "properties": {
              "Realm": {
                "type": "string",
                "description": "Gets or sets the realm for this connection."
              },
              "Role": {
                "type": "string",
                "description": "Gets or sets the role for this connection."
              }
            }
          }
        ]
      },
      "ModernDesktopWirelessSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract for an Windows Phone wi-fi configuration.",
            "properties": {
              "Connection": {
                "description": "Gets or sets the wireless connection in this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WindowsPhoneWirelessConnection"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "WindowsPhoneWirelessConnection": {
        "type": "object",
        "description": "Represents a single wireless connection in an Windows Phone wireless configuration.",
        "required": [
          "PrivateNetwork",
          "SecurityMode",
          "AutoJoin",
          "PmkCacheMode",
          "PreAuthMode"
        ],
        "properties": {
          "SSID": {
            "type": "string",
            "description": "Gets or sets the SSID of the wireless network."
          },
          "ConnectionType": {
            "type": "string",
            "description": "Gets or sets the ConnectionType of the wireless network."
          },
          "PhysicalNetworkType": {
            "type": "string",
            "description": "Gets or sets the Physical Network Type of the wireless network."
          },
          "PrivateNetwork": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the network\nbroadcasts its SSID."
          },
          "SecurityMode": {
            "description": "Gets or sets the security mode used by the network.",
            "allOf": [
              {
                "$ref": "#/definitions/WirelessSecurityMode"
              }
            ],
            "x-enumType": "WirelessSecurityMode"
          },
          "PrivateSharedKey": {
            "type": "string",
            "description": "Gets or sets private shared key for the network.  This should\nbe null if the network is using a PSK."
          },
          "KeyIndex": {
            "type": "string",
            "description": "Gets or sets the Key index for WEP"
          },
          "EnterpriseSettings": {
            "description": "Gets or sets the advanced wireless security settings for one of\nthe enterprise security modes.",
            "allOf": [
              {
                "$ref": "#/definitions/WindowsPhoneEnterpriseWirelessSettings"
              }
            ]
          },
          "AutoJoin": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to Automatically join the WiFi Connection\nor not"
          },
          "Authentication": {
            "type": "string",
            "description": "Gets or sets the authentication type used by the network."
          },
          "Encryption": {
            "type": "string",
            "description": "Gets or sets the encryption type used by the network."
          },
          "PmkCacheMode": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to use the Wlan Pmk Cache Mode"
          },
          "PmkCacheTtl": {
            "type": "string",
            "description": "Gets or sets the Wlan PMK Cache TTL"
          },
          "PmkCacheSize": {
            "type": "string",
            "description": "Gets or sets the Wlan PMK Cache Size"
          },
          "PreAuthMode": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to use the Wlan pre Auth Mode"
          },
          "PreAuthThrottle": {
            "type": "string",
            "description": "Gets or sets the Wlan pre Auth Throttle"
          },
          "ConnectionMode": {
            "type": "string",
            "description": "Gets or sets the connection mode used by the network."
          },
          "Proxy": {
            "type": "string",
            "description": "Gets or sets proxy if there is any, the format is URL:port."
          }
        }
      },
      "WirelessSecurityMode": {
        "type": "string",
        "description": "Enumerates the different possible wireless security modes.",
        "x-enumNames": [
          "None",
          "WEP",
          "WPA",
          "Any",
          "WEPEnterprise",
          "WPAEnterprise",
          "AnyEnterprise",
          "WPA2Enterprise",
          "WPA2",
          "Wep40B",
          "Wep128Bit",
          "EapTls",
          "EapTtls",
          "EapFast",
          "Peap",
          "Leap",
          "WpaPsk",
          "WpaEapTls",
          "WpaEapTtls",
          "WpaEapFast",
          "WpaPeap",
          "WpaLeap",
          "Kerberos",
          "WPA3",
          "WPA3Enterprise"
        ],
        "enum": [
          "None",
          "WEP",
          "WPA",
          "Any",
          "WEPEnterprise",
          "WPAEnterprise",
          "AnyEnterprise",
          "WPA2Enterprise",
          "WPA2",
          "Wep40B",
          "Wep128Bit",
          "EapTls",
          "EapTtls",
          "EapFast",
          "Peap",
          "Leap",
          "WpaPsk",
          "WpaEapTls",
          "WpaEapTtls",
          "WpaEapFast",
          "WpaPeap",
          "WpaLeap",
          "Kerberos",
          "WPA3",
          "WPA3Enterprise"
        ],
        "x-enumType": "WirelessSecurityMode"
      },
      "ModernDesktopWipSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an Windows EDP configuration.\n            ",
            "properties": {
              "AppLockerSettings": {
                "description": "Gets or sets AppLocker Settings\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/AppLockerSettings"
                  }
                ]
              },
              "NetworkIsolationSettings": {
                "description": "Gets or sets Network Isolation Settings\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/NetworkIsolationSettings"
                  }
                ]
              },
              "WipSettings": {
                "description": "Gets or sets Edp Settings\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/WipSettings"
                  }
                ]
              }
            }
          }
        ]
      },
      "AppLockerSettings": {
        "type": "object",
        "description": "Represents an Windows App Locker configuration.\n            ",
        "required": [
          "EnforcementMode"
        ],
        "properties": {
          "GroupGuid": {
            "type": "string",
            "description": "Gets or sets the value of the group guid.\n            "
          },
          "EnforcementMode": {
            "description": "Gets or sets the value of the Enforcement Mode.\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/EnforcementModeType"
              }
            ],
            "x-enumType": "EnforcementModeType"
          },
          "PolicyRules": {
            "type": "array",
            "description": "Gets or sets the collection of Policy Rules in this configuration.\n            ",
            "items": {
              "$ref": "#/definitions/AppLockerRules"
            }
          },
          "ExemptPolicyRules": {
            "type": "array",
            "description": "Gets or sets the collection of Exempt Policy Rules in this configuration.\n            ",
            "items": {
              "$ref": "#/definitions/AppLockerRules"
            }
          }
        }
      },
      "EnforcementModeType": {
        "type": "string",
        "description": "Enforcement Mode Types",
        "x-enumNames": [
          "Enabled",
          "AuditOnly"
        ],
        "enum": [
          "Enabled",
          "AuditOnly"
        ],
        "x-enumType": "EnforcementModeType"
      },
      "AppLockerRules": {
        "type": "object",
        "description": "Represents an Windows App Locker Rule Collection.",
        "required": [
          "PackageType"
        ],
        "properties": {
          "PackageType": {
            "description": "Gets or sets the value of the Target Package Type.",
            "allOf": [
              {
                "$ref": "#/definitions/TargetPackageType"
              }
            ],
            "x-enumType": "TargetPackageType"
          },
          "FilePublisherRules": {
            "type": "array",
            "description": "Gets or sets the collection of the File Publisher Rules.",
            "items": {
              "$ref": "#/definitions/FilePublisherRule"
            }
          },
          "FilePathRules": {
            "type": "array",
            "description": "Gets or sets the collection of the File path Rules.",
            "items": {
              "$ref": "#/definitions/FilePathRule"
            }
          },
          "FileHashRules": {
            "type": "array",
            "description": "Gets or sets the collection of the File Hash Rules.",
            "items": {
              "$ref": "#/definitions/FileHashRule"
            }
          }
        }
      },
      "TargetPackageType": {
        "type": "string",
        "description": "Defines Target Package Types ",
        "x-enumNames": [
          "Exe",
          "Msi",
          "Script",
          "StoreApps",
          "Dll",
          "CodeIntegrity"
        ],
        "enum": [
          "Exe",
          "Msi",
          "Script",
          "StoreApps",
          "Dll",
          "CodeIntegrity"
        ],
        "x-enumType": "TargetPackageType"
      },
      "FilePublisherRule": {
        "allOf": [
          {
            "$ref": "#/definitions/FileRule"
          },
          {
            "type": "object",
            "description": "Represents an Windows App Locker File Publisher Rule.",
            "properties": {
              "Conditions": {
                "type": "array",
                "description": "Gets or sets the collection of the File Publisher Conditions.",
                "items": {
                  "$ref": "#/definitions/FilePublisherCondition"
                }
              },
              "PublisherExceptions": {
                "type": "array",
                "description": "Gets or sets the collection of the File Path Publisher Exceptions.",
                "items": {
                  "$ref": "#/definitions/FilePublisherCondition"
                }
              },
              "PathExceptions": {
                "type": "array",
                "description": "Gets or sets the collection of the File Path Exceptions.",
                "items": {
                  "$ref": "#/definitions/FilePathCondition"
                }
              },
              "HashExceptions": {
                "type": "array",
                "description": "Gets or sets the collection of the File Path Hash Exceptions.",
                "items": {
                  "$ref": "#/definitions/FileHashCondition"
                }
              }
            }
          }
        ]
      },
      "FilePublisherCondition": {
        "type": "object",
        "description": "Represents an Windows App Locker File Publisher Condition.",
        "properties": {
          "PublisherName": {
            "type": "string",
            "description": "Gets or sets the value of the Publisher Name."
          },
          "ProductName": {
            "type": "string",
            "description": "Gets or sets the value of the Product Name."
          },
          "BinaryName": {
            "type": "string",
            "description": "Gets or sets the value of the Binary Name."
          },
          "BinaryVersionRange": {
            "description": "Gets or sets the value of the Binary Version Range.",
            "allOf": [
              {
                "$ref": "#/definitions/FileVersionRange"
              }
            ]
          }
        }
      },
      "FileVersionRange": {
        "type": "object",
        "description": "Represents an Windows App Locker File Version Range.",
        "properties": {
          "LowSection": {
            "type": "string",
            "description": "Gets or sets the value of the Low Section of File Version Range."
          },
          "HighSection": {
            "type": "string",
            "description": "Gets or sets the value of the High Section of File Version Range."
          }
        }
      },
      "FilePathCondition": {
        "type": "object",
        "description": "Represents an Windows App Locker File Path Condition.",
        "properties": {
          "Path": {
            "type": "string",
            "description": "Gets or sets the value of the File Path."
          }
        }
      },
      "FileHashCondition": {
        "type": "object",
        "description": "Represents an Windows App Locker File Hash Condition.",
        "required": [
          "HashType"
        ],
        "properties": {
          "HashType": {
            "description": "Gets or sets the value of the File Hash Type.",
            "allOf": [
              {
                "$ref": "#/definitions/HashType"
              }
            ],
            "x-enumType": "HashType"
          },
          "Data": {
            "type": "string",
            "description": "Gets or sets the value of the File Data."
          }
        }
      },
      "HashType": {
        "type": "string",
        "description": "Defines Hash Types",
        "x-enumNames": [
          "Sha256",
          "Sha256Flat",
          "Sha1"
        ],
        "enum": [
          "Sha256",
          "Sha256Flat",
          "Sha1"
        ],
        "x-enumType": "HashType"
      },
      "FileRule": {
        "type": "object",
        "description": "Represents an Windows App Locker File Rule.",
        "required": [
          "Id",
          "Action"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets the value of the object Id.",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets the value of the Name."
          },
          "Description": {
            "type": "string",
            "description": "Gets or sets the value of the Description."
          },
          "UserOrGroupSid": {
            "type": "string",
            "description": "Gets or sets the value of the User Or Group Sid."
          },
          "Action": {
            "description": "Gets or sets the value of Action",
            "allOf": [
              {
                "$ref": "#/definitions/RuleActionType"
              }
            ],
            "x-enumType": "RuleActionType"
          }
        }
      },
      "RuleActionType": {
        "type": "string",
        "description": "Defines Rule Action Types ",
        "x-enumNames": [
          "None",
          "Allow",
          "Deny"
        ],
        "enum": [
          "None",
          "Allow",
          "Deny"
        ],
        "x-enumType": "RuleActionType"
      },
      "FileHashRule": {
        "allOf": [
          {
            "$ref": "#/definitions/FileRule"
          },
          {
            "type": "object",
            "description": "Represents an Windows App Locker File Hash Rule.",
            "properties": {
              "Conditions": {
                "type": "array",
                "description": "Gets or sets the collection of File Hash Conditions.",
                "items": {
                  "$ref": "#/definitions/FileHashCondition"
                }
              }
            }
          }
        ]
      },
      "FilePathRule": {
        "allOf": [
          {
            "$ref": "#/definitions/FileRule"
          },
          {
            "type": "object",
            "description": "Represents an Windows App Locker File Path Rule.",
            "properties": {
              "Conditions": {
                "type": "array",
                "description": "Gets or sets the collection of the File Path Conditions.",
                "items": {
                  "$ref": "#/definitions/FilePathCondition"
                }
              },
              "PublisherExceptions": {
                "type": "array",
                "description": "Gets or sets the collection of the File Path Publisher Exceptions.",
                "items": {
                  "$ref": "#/definitions/FilePublisherCondition"
                }
              },
              "PathExceptions": {
                "type": "array",
                "description": "Gets or sets the collection of the File Path Exceptions.",
                "items": {
                  "$ref": "#/definitions/FilePathCondition"
                }
              },
              "HashExceptions": {
                "type": "array",
                "description": "Gets or sets the collection of the File Path Hash Exceptions.",
                "items": {
                  "$ref": "#/definitions/FileHashCondition"
                }
              }
            }
          }
        ]
      },
      "NetworkIsolationSettings": {
        "type": "object",
        "description": "Represents an Windows App Locker configuration.\n            ",
        "required": [
          "EnterpriseCloudResourcesAppCompat",
          "EnterpriseIpRangesAreAuthoritative",
          "EnterpriseProxyServersAreAuthoritative"
        ],
        "properties": {
          "EnterpriseCloudResources": {
            "type": "array",
            "description": "Gets or sets the collection of Enterprise Cloud Resources\n            ",
            "items": {
              "type": "string"
            }
          },
          "EnterpriseCloudResourcesAppCompat": {
            "type": "boolean",
            "description": "Gets or sets the AppCompat indicator for Enterprise Cloud Resources\n            "
          },
          "EnterpriseInternalProxyServers": {
            "type": "array",
            "description": "Gets or sets the collection of Enterprise Internal Proxy Servers\n            ",
            "items": {
              "type": "string"
            }
          },
          "EnterpriseIpRange": {
            "type": "array",
            "description": "Gets or sets the collection of\n            ",
            "items": {
              "type": "string"
            }
          },
          "EnterpriseIpRangesAreAuthoritative": {
            "type": "boolean",
            "description": "Gets or sets the value indicating whether Enterprise IP Ranges Are Authoritative\n            "
          },
          "EnterpriseNetworkDomainNames": {
            "type": "array",
            "description": "Gets or sets the collection of Enterprise Network Domain Names\n            ",
            "items": {
              "type": "string"
            }
          },
          "EnterpriseProxyServers": {
            "type": "array",
            "description": "Gets or sets the collection of Enterprise ProxyServers\n            ",
            "items": {
              "type": "string"
            }
          },
          "EnterpriseProxyServersAreAuthoritative": {
            "type": "boolean",
            "description": "Gets or sets the value indicating whether Enterprise Proxy Servers Are Authoritative\n            "
          },
          "NeutralResources": {
            "type": "array",
            "description": "Gets or sets the collection of Neutral Resources\n            ",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WipSettings": {
        "type": "object",
        "description": "Represents an Windows WIP configuration.\n            ",
        "required": [
          "WipEnforcementLevel",
          "AllowAzureRmsForEdp",
          "AllowUserDecryption",
          "RevokeOnUnenroll",
          "AllowIndexingEncryptedStoresOrItems"
        ],
        "properties": {
          "DataRecoveryCertificateRefId": {
            "type": "string",
            "description": "Gets or sets the value of Data Recovery Certificate Reference Identifier\n            "
          },
          "WipEnforcementLevel": {
            "description": "Gets or sets the value of WIP Enforcement Level\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/WipEnforcementLevels"
              }
            ],
            "x-enumType": "WipEnforcementLevels"
          },
          "AllowAzureRmsForEdp": {
            "type": "boolean",
            "description": "Gets or sets the value of Allow Azure Rms For Edp\n            "
          },
          "RmsTemplateIdForEdp": {
            "type": "string",
            "description": "Gets or sets the value of Rms Template Id For Edp\n            "
          },
          "AllowUserDecryption": {
            "type": "boolean",
            "description": "Gets or sets the value of Allow User Decryption\n            "
          },
          "RevokeOnUnenroll": {
            "type": "boolean",
            "description": "Gets or sets the value of Revoke On Unenroll\n            "
          },
          "AllowIndexingEncryptedStoresOrItems": {
            "type": "boolean",
            "description": "Gets or sets the value of Allow Indexing Encrypted Stores Or Items\n            "
          },
          "EnterpriseProtectedDomainNames": {
            "type": "array",
            "description": "Gets or sets the list of Enterprise Protected Domain Names\n            ",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WipEnforcementLevels": {
        "type": "string",
        "description": "Enum for WipEnforcementLevels\n            ",
        "x-enumNames": [
          "NoProtection",
          "Silent",
          "Override",
          "Block"
        ],
        "enum": [
          "NoProtection",
          "Silent",
          "Override",
          "Block"
        ],
        "x-enumType": "WipEnforcementLevels"
      },
      "ModernDesktopWindowsUpdatePoliciesDesktopSection": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsUpdatePoliciesSection"
          },
          {
            "type": "object",
            "description": "Windows Modern Desktop Update Policies device configuration section",
            "required": [
              "AutoRestartDeadlinePeriodInDaysForFeatureUpdates",
              "ConfigureDeadlineForFeatureUpdates",
              "ConfigureFeatureUpdateUninstallPeriod",
              "DeferFeatureUpdatesPeriodInDays",
              "EngagedRestartDeadlineForFeatureUpdates",
              "EngagedRestartSnoozeScheduleForFeatureUpdates",
              "EngagedRestartTransitionScheduleForFeatureUpdates",
              "PauseFeatureUpdates",
              "AutoRestartDeadlinePeriodInDaysForQualityUpdates",
              "ConfigureDeadlineForQualityUpdates",
              "DeferQualityUpdatesPeriodInDays",
              "EngagedRestartDeadlineForQualityUpdates",
              "EngagedRestartSnoozeScheduleForQualityUpdates",
              "EngagedRestartTransitionScheduleForQualityUpdates",
              "ExcludeWuDriversInQualityUpdate",
              "PauseQualityUpdates",
              "AllowUpdateService",
              "DetectionFrequency",
              "SetProxyBehaviorForUpdateDetection",
              "BranchReadinessLevel",
              "ManagePreviewBuilds",
              "AllowMuUpdateService",
              "AllowNonMicrosoftSignedUpdate",
              "AllowDualScan",
              "AllowWufbSafeguards",
              "AllowPauseUxAccess",
              "AllowUxwuAccess",
              "RequireUpdateApproval",
              "ScheduledInstallDay",
              "ScheduledInstallTime",
              "ScheduledInstallEveryWeek",
              "ScheduledInstallFirstWeek",
              "ScheduledInstallSecondWeek",
              "ScheduledInstallThirdWeek",
              "ScheduledInstallFourthWeek",
              "AutoRestartNotificationSchedule",
              "AutoRestartRequiredNotificationDismissal",
              "ScheduleImminentRestartWarning",
              "ScheduleRestartWarning",
              "TurnOffAutoRestartNotification",
              "UpdateNotificationLevel",
              "AllowAutoUpdateConfig",
              "ActiveHoursMaxRange",
              "ActiveHoursStart",
              "ActiveHoursEnd",
              "AutomaticMaintenanceWakeUp",
              "ConfigureDeadlineGracePeriod",
              "ConfigureDeadlineNoAutoReboot",
              "AllowAutoWindowsUpdateDownloadOverMeteredNetwork",
              "IgnoreMoAppDownloadLimit",
              "IgnoreMoUpdateDownloadLimit",
              "AutoApproveApplication",
              "AutoApproveConnectors",
              "AutoApproveCriticalUpdates",
              "AutoApproveDefinitionUpdates",
              "AutoApproveDeveloperKits",
              "AutoApproveFeaturePacks",
              "AutoApproveGuidance",
              "AutoApproveSecurityUpdates",
              "AutoApproveServicePacks",
              "AutoApproveTools",
              "AutoApproveUpdateRollups",
              "AutoApproveUpdates"
            ],
            "properties": {
              "AutoRestartDeadlinePeriodInDaysForFeatureUpdates": {
                "type": "integer",
                "description": "For Feature Updates, this policy specifies the deadline in days before automatically executing a scheduled restart outside of active hours.\nThe deadline can be set between 2 and 30 days from the time the restart is scheduled.\nDefault is 7 days.\n            ",
                "format": "int32"
              },
              "ConfigureDeadlineForFeatureUpdates": {
                "type": "integer",
                "description": "Allows IT admins to specify the number of days a user has before feature updates are installed on their devices automatically.\nUpdates and restarts will occur regardless of active hours and the user will not be able to reschedule.\nSupports a numeric value from 2 - 30, which indicates the number of days a device will wait until performing an aggressive installation of a required feature update.\nDefault value is 7.\n            ",
                "format": "int32"
              },
              "ConfigureFeatureUpdateUninstallPeriod": {
                "type": "integer",
                "description": "Enable IT admin to configure feature update uninstall period.\nValues range 2 - 60 days.\nDefault is 10 days.\n            ",
                "format": "int32"
              },
              "DeferFeatureUpdatesPeriodInDays": {
                "type": "integer",
                "description": "Defers Feature Updates for the specified number of days.\nSupported values are 0-365 days.\nThe default maximum number of days to defer an update has been increased from 180 (Windows 10, version 1607) to 365 in Windows 10, version 1703.\n            ",
                "format": "int32"
              },
              "EngagedRestartDeadlineForFeatureUpdates": {
                "type": "integer",
                "description": "For Feature Updates, this policy specifies the deadline in days before automatically scheduling and executing a pending restart outside of active hours.\nSupported value range: 2 - 30.\nDefault is 14.\nRS5 and above\n            ",
                "format": "int32"
              },
              "EngagedRestartSnoozeScheduleForFeatureUpdates": {
                "type": "integer",
                "description": "For Feature Updates, this policy specifies the number of days a user can snooze Engaged restart reminder notifications.\nSupported value range: 1 - 3.\nDefault is 3 days.\n            ",
                "format": "int32"
              },
              "EngagedRestartTransitionScheduleForFeatureUpdates": {
                "type": "integer",
                "description": "For Feature Updates, this policy specifies the timing before transitioning from Auto restarts scheduled_outside of active hours to Engaged restart,\nwhich requires the user to schedule.\nSupported value range: 2 - 30.\nDefault value is 7 days.\n            ",
                "format": "int32"
              },
              "PauseFeatureUpdates": {
                "type": "boolean",
                "description": "Allows IT Admins to pause feature updates for up to 35 days.\n0 (default) – Feature Updates are not paused.\n1 – Feature Updates are paused for 35 days or until value set to back to 0, whichever is sooner.\n            \nSupported by RS1 and above\n             "
              },
              "PauseFeatureUpdatesStartTime": {
                "type": "string",
                "description": "Specifies the date and time when the IT admin wants to start pausing the Feature  Updates.\nValue type is string (yyyy-mm-dd, ex. 2018-10-28), Feature Updates will be paused for 35 days from the specified start date\n            \nSupported by RS1 and above\n             "
              },
              "AutoRestartDeadlinePeriodInDaysForQualityUpdates": {
                "type": "integer",
                "description": "For Quality Updates, this policy specifies the deadline in days before automatically executing a scheduled restart outside of active hours.\nThe deadline can be set between 2 and 30 days from the time the restart is scheduled.\nDefault is 7 days.\n            ",
                "format": "int32"
              },
              "ConfigureDeadlineForQualityUpdates": {
                "type": "integer",
                "description": "Allows IT admins to specify the number of days a user has before quality  updates are installed on their devices automatically.\nUpdates and restarts will occur regardless of active hours and the user will not be able to reschedule.\nSupports a numeric value from 2 - 30, which indicates the number of days a device will wait until performing an aggressive installation of a required feature update.\nDefault value is 7.\n            ",
                "format": "int32"
              },
              "DeferQualityUpdatesPeriodInDays": {
                "type": "integer",
                "description": "Defers Quality Updates for the specified number of days.\nSupported values are 0-30.\n            ",
                "format": "int32"
              },
              "EngagedRestartDeadlineForQualityUpdates": {
                "type": "integer",
                "description": "For Quality Updates, this policy specifies the deadline in days before automatically scheduling and executing a pending restart outside of active hours.\nSupported value range: 2 - 30.\nDefault is 14.\nSupported by RS2 and above\n            ",
                "format": "int32"
              },
              "EngagedRestartSnoozeScheduleForQualityUpdates": {
                "type": "integer",
                "description": "For Quality Updates, this policy specifies the number of days a user can snooze Engaged restart reminder notifications.\nSupported value range: 1 - 3.\nDefault is 3 days.\n            ",
                "format": "int32"
              },
              "EngagedRestartTransitionScheduleForQualityUpdates": {
                "type": "integer",
                "description": "For Quality Updates, this policy specifies the timing before transitioning from Auto restarts scheduled outside of active hours to Engaged restart,\nwhich requires the user to schedule.\nSupported value range: 2 - 30.\nDefault value is 7 days.\n            ",
                "format": "int32"
              },
              "ExcludeWuDriversInQualityUpdate": {
                "type": "boolean",
                "description": "Allows IT Admins to exclude Windows Update (WU) drivers during updates.\n0 (default) – Allow Windows Update drivers.\n1 – Exclude Windows Update drivers.\n            "
              },
              "PauseQualityUpdates": {
                "type": "boolean",
                "description": "Allows IT Admins to pause quality updates. For those running Windows 10, version 1703 or later, we recommend that you use Update/PauseQualityUpdatesStartTime instead.\n0 (default) – Quality Updates are not paused.\n1 – Quality Updates are paused for 35 days or until value set back to 0, whichever is sooner.\n            "
              },
              "PauseQualityUpdatesStartTime": {
                "type": "string",
                "description": "Specifies the date and time when the IT admin wants to start pausing the Quality Updates.\nValue type is string (yyyy-mm-dd, ex. 2018-10-28).\n            "
              },
              "AllowUpdateService": {
                "type": "boolean",
                "description": "Specifies whether the device could use Microsoft Update, Windows Server Update Services (WSUS), or Microsoft Store.\n0 – Update service is not allowed.\n1 (default) – Update service is allowed.\n            \nNote: Migrated from Feature Control section\n             "
              },
              "UpdateServiceUrl": {
                "type": "string",
                "description": "Allows the device to check for updates from a WSUS server instead of Microsoft Update.\nThis is useful for on-premises MDMs that need to update devices that cannot connect to the Internet.\nNot configured. The device checks for updates from Microsoft Update.\nSet to a URL, such as http://abcd-srv:8530. The device checks for updates from the WSUS server at the specified URL.\n            \nNote: Migrated from Feature Control section\n             "
              },
              "UpdateServiceUrlAlternate": {
                "type": "string",
                "description": "Specifies an alternate intranet server to host updates from Microsoft Update.\ndefault value is an empty string, \"\"\n            "
              },
              "DetectionFrequency": {
                "type": "integer",
                "description": "Specifies the scan frequency from every 1 - 22 hours with a random variant of 0 - 4 hours.\nThis policy should only be enabled when Update/UpdateServiceUrl is configured to point the device at a WSUS server rather than Microsoft Update.\n Default is 22 hours.\n            ",
                "format": "int32"
              },
              "SetProxyBehaviorForUpdateDetection": {
                "type": "boolean",
                "description": "This policy setting allows you to configure user proxy as a fallback for detecting updates while using an HTTP based intranet server despite the vulnerabilities it presents.\n0 (default) - Allow system proxy only for HTTP scans.\n1 - Allow user proxy to be used as a fallback if detection using system proxy fails.\n            "
              },
              "BranchReadinessLevel": {
                "description": "Added in Windows 10, version 1607. Allows the IT admin to set which branch a device receives their updates from.\nAs of 1903, the branch readiness levels of Semi-Annual Channel (Targeted) and Semi-Annual Channel have been combined into one Semi-Annual Channel set with a value of 16.\nFor devices on 1903 and later releases, the value of 32 is not a supported value.\n2 {0x2} - Windows Insider build - Fast (added in Windows 10, version 1709)\n4 {0x4} - Windows Insider build - Slow (added in Windows 10, version 1709)\n8 {0x8} - Release Windows Insider build (added in Windows 10, version 1709)\n16 {0x10} - (default) Semi-annual Channel (Targeted). Device gets all applicable feature updates from Semi-annual Channel (Targeted).\n32 {0x20} - Semi-annual Channel. Device gets feature updates from Semi-annual Channel. (*Only applicable to releases prior to 1903,\n            for all releases 1903 and after the Semi-annual Channel and Semi-annual Channel (Targeted) into a single Semi-annual Channel with a value of 16)\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BranchReadinessLevels"
                  }
                ]
              },
              "ManagePreviewBuilds": {
                "description": "Used to manage Windows 10 Insider Preview builds. Value type is integer.\n0 - Disable Preview builds\n1 - Disable Preview builds once the next release is public\n2 - Enable Preview builds\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/ManagePreviewBuildsOptions"
                  }
                ]
              },
              "AllowMuUpdateService": {
                "type": "boolean",
                "description": "Allows the IT admin to manage whether to scan for app updates from Microsoft Update.\nNote: it is to update Other Microsoft Products\n            "
              },
              "AllowNonMicrosoftSignedUpdate": {
                "type": "boolean",
                "description": "Allows the IT admin to manage whether Automatic Updates accepts updates signed by entities other than Microsoft.\nThis policy is specific to desktop and local publishing via WSUS for 3rd party updates (binaries and updates not hosted on Microsoft Update)\n0 – Not allowed or not configured. Updates from an intranet Microsoft update service location must be signed by Microsoft.\n1 – Allowed. Accepts updates received through an intranet Microsoft update service location, if they are signed by a certificate found in the \"Trusted Publishers\" certificate store of the local computer.\n            \nNote: Migrated from Feature Control section\n             "
              },
              "TargetReleaseVersion": {
                "type": "string",
                "description": "Enables IT administrators to specify which version they would like their device(s) to move to and/or stay on until they reach end of service or reconfigure the policy.\nValue type is a string containing Windows 10 version number. For example, 1809, 1903.\n            "
              },
              "AllowDualScan": {
                "type": "boolean",
                "description": "Allow update deferral policies to cause scans against Windows Update.\n0 - do not allow scan against Windows Update\n1 - allow update deferral policies to cause scans against Windows Update\n            \nNote: In Policy CSP, it is a disable option\n             "
              },
              "AllowWufbSafeguards": {
                "type": "boolean",
                "description": "This policy setting specifies that a WUfB device should skip safeguards.\nAvailable in Windows Update for Business (WUfB) devices running Windows 10, version 1809 and above and installed with October 2020 security update.\ntrue (default) - Safeguards are enabled and devices may be blocked for upgrades until the safeguard is cleared.\nfalse - Safeguards are not enabled and upgrades will be deployed without blocking on safeguards.\n            \nNote: It is a disable policy in CSP\n             "
              },
              "AllowPauseUxAccess": {
                "type": "boolean",
                "description": "This policy allows the IT admin to disable the \"Pause Updates\" feature. When this policy is enabled, the user cannot access the \"Pause updates\" feature.\nValue type is integer. Default is 0. Supported values 0, 1.\n            \n Note: CSP policy is a disable policy, reverted in UI/Contract\n Default: true\n             "
              },
              "AllowUxwuAccess": {
                "type": "boolean",
                "description": "This policy allows the IT admin to remove access to scan Windows Update.\nDefault is 0. Supported values 0, 1.\n            \n Note: CSP policy is a disable policy, reverted in UI/Contract\n Default: true\n             "
              },
              "RequireUpdateApproval": {
                "type": "boolean",
                "description": "This policy is only recommended for managing mobile devices.\nAllows the IT admin to restrict the updates that are installed on a device to only those on an update approval list.\n0 – Not configured. The device installs all applicable updates.\n1 – The device only installs updates that are both applicable and on the Approved Updates list.\n            "
              },
              "ScheduledInstallDay": {
                "description": "Enables the IT admin to schedule the day of the update installation.\n0 (default) – Every day\n1 – Sunday\n2 – Monday\n3 – Tuesday\n4 – Wednesday\n5 – Thursday\n6 – Friday\n7 – Saturday\n            \nNote: Migrated from Feature Control Section\n             ",
                "allOf": [
                  {
                    "$ref": "#/definitions/ScheduleInstallDay"
                  }
                ]
              },
              "ScheduledInstallTime": {
                "type": "integer",
                "description": "Enables the IT admin to schedule the time of the update installation.\nSupported values are 0-23, where 0 = 12 AM and 23 = 11 PM.\nThe default value is 3.\n            \nNote: Migrated from Feature Control Section\n             ",
                "format": "int32"
              },
              "ScheduledInstallEveryWeek": {
                "type": "boolean",
                "description": "Enables the IT admin to schedule the update installation on the every week. Value type is integer.\n0 - no update in the schedule\n1 - update is scheduled every week\n            "
              },
              "ScheduledInstallFirstWeek": {
                "type": "boolean",
                "description": "Enables the IT admin to schedule the update installation on the first week of the month.\n0 - no update in the schedule\n1 - update is scheduled every first week of the month\n            "
              },
              "ScheduledInstallSecondWeek": {
                "type": "boolean",
                "description": "Enables the IT admin to schedule the update installation on the second week of the month.\n0 - no update in the schedule\n1 - update is scheduled every second week of the month\n            "
              },
              "ScheduledInstallThirdWeek": {
                "type": "boolean",
                "description": "Enables the IT admin to schedule the update installation on the third week of the month.\n0 - no update in the schedule\n1 - update is scheduled every third week of the month\n            "
              },
              "ScheduledInstallFourthWeek": {
                "type": "boolean",
                "description": "Enables the IT admin to schedule the update installation on the fourth week of the month.\n0 - no update in the schedule\n1 - update is scheduled every fourth week of the month\n            "
              },
              "AutoRestartNotificationSchedule": {
                "description": "Allows the IT Admin to specify the period for auto-restart reminder notifications.\nThe default value is 15 (minutes).\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/AutoRestartNotificationConfig"
                  }
                ]
              },
              "AutoRestartRequiredNotificationDismissal": {
                "description": "Allows the IT Admin to specify the method by which the auto-restart required notification is dismissed.\n1 (default) – Auto Dismissal.\n2 – User Dismissal.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/AutoRestartRequiredNotificationDismissalOptions"
                  }
                ]
              },
              "ScheduleImminentRestartWarning": {
                "description": "Allows the IT Admin to specify the period for auto-restart imminent warning notifications.\nSupported values are 15, 30, or 60 (minutes).\nThe default value is 15 (minutes).\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/ScheduleImminentRestartWarningOptions"
                  }
                ]
              },
              "ScheduleRestartWarning": {
                "description": "Allows the IT Admin to specify the period for auto-restart warning reminder notifications.\nSupported values are 2, 4, 8, 12, or 24 (hours).\nThe default value is 4 (hours).\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/ScheduleRestartWarningOptions"
                  }
                ]
              },
              "TurnOffAutoRestartNotification": {
                "type": "boolean",
                "description": "Allows the IT Admin to turn off auto-restart notifications for update installations.\n0 (default) – Enabled (Not to turn off)\n1 – Disabled (Turn off)\n            "
              },
              "UpdateNotificationLevel": {
                "description": "Display options for update notifications. This policy allows you to define what Windows Update notifications users see.\nThis policy doesn't control how and when updates are downloaded and installed.\n0 (default) – Use the default Windows Update notifications\n1 – Turn off all notifications, excluding restart warnings\n2 – Turn off all notifications, including restart warnings\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/UpdateNotificationOptions"
                  }
                ]
              },
              "AllowAutoUpdateConfig": {
                "description": "Enables the IT admin to manage automatic update behavior to scan, download, and install updates.\n0 – Notify the user before downloading the update.\n1 – Auto install the update and then notify the user to schedule a device restart.\n2 (default) – Auto install and restart.\n3 – Auto install and restart at a specified time.\n4 - Auto install and restart without end-user control.\n5 – Turn off automatic updates.5 – Turn off automatic updates.\nNote: Migrated from Feature Control section\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowAutoUpdate"
                  }
                ]
              },
              "ActiveHoursMaxRange": {
                "type": "integer",
                "description": "Allows the IT admin to specify the max active hours range. This value sets max number of active hours from start time.\nSupported values are 8-18.\nThe default value is 18 (hours).\n            ",
                "format": "int32"
              },
              "ActiveHoursStart": {
                "type": "integer",
                "description": "Allows the IT admin (when used with Update/ActiveHoursEnd) to manage a range of hours where update reboots are not scheduled.\nThis value sets the start time. There is a 12 hour maximum from end time.\nSupported values are 0-23, where 0 is 12 AM, 1 is 1 AM, etc.\nThe default value is 8 (8 AM).\n            ",
                "format": "int32"
              },
              "ActiveHoursEnd": {
                "type": "integer",
                "description": "Allows the IT admin (when used with Update/ActiveHoursStart) to manage a range of active hours where update reboots are not scheduled.\nThis value sets the end time. There is a 12 hour maximum from start time.\nSupported values are 0-23, where 0 is 12 AM, 1 is 1 AM, etc.\nThe default is 17 (5 PM).\n            ",
                "format": "int32"
              },
              "AutomaticMaintenanceWakeUp": {
                "type": "boolean",
                "description": "This policy setting allows you to configure if Automatic Maintenance should make a wake request to the OS for the daily scheduled maintenance.\nIf the OS power wake policy is explicitly disabled, then this setting has no effect.\n0 - Disable (Default)\n1 - Enable\n            "
              },
              "ConfigureDeadlineGracePeriod": {
                "type": "integer",
                "description": "Allows the IT admin (when used with Update/ConfigureDeadlineForFeatureUpdates or Update/ConfigureDeadlineForQualityUpdates) to specify a minimum number of days until restarts occur automatically.\nSetting the grace period may extend the effective deadline set by the deadline policies.\nSupports a numeric value from 0 - 7, which indicates the minimum number of days a device will wait until performing an aggressive installation of a required update once deadline has been reached.\nDefault value is 2 Days.\n            ",
                "format": "int32"
              },
              "ConfigureDeadlineNoAutoReboot": {
                "type": "boolean",
                "description": "Configures a deadline whether the device can restart outside of active hours.\n            "
              },
              "AllowAutoWindowsUpdateDownloadOverMeteredNetwork": {
                "type": "boolean",
                "description": "Option to download updates automatically over metered connections (off by default).\n0 (default) - Not allowed\n1 - Allowed\n            "
              },
              "IgnoreMoAppDownloadLimit": {
                "type": "boolean",
                "description": "Specifies whether to ignore the Mobile Operator download limit\n0 (default) – Do not ignore Mobile Operator download limit for apps and their updates.\n1 – Ignore MO download limit (allow unlimited downloading) for apps and their updates.\n            "
              },
              "IgnoreMoUpdateDownloadLimit": {
                "type": "boolean",
                "description": "Specifies whether to ignore the Mobile Operator download limit (allow unlimited downloading) over a cellular network for OS updates.\n0 (default) – Do not ignore Mobile Operator download limit for OS updates.\n1 – Ignore MO download limit (allow unlimited downloading) for OS updates.\n            "
              },
              "AutoApproveApplication": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of Application\nDefault is 0. Supported values 0, 1.\n            "
              },
              "AutoApproveConnectors": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of Connectors\nDefault is 0. Supported values 0, 1.\n            "
              },
              "AutoApproveCriticalUpdates": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of CriticalUpdates\nDefault is 0. Supported values 0, 1.\n            "
              },
              "AutoApproveDefinitionUpdates": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of DefinitionUpdates\nDefault is 0. Supported values 0, 1.\n            "
              },
              "AutoApproveDeveloperKits": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of DeveloperKits\nDefault is 0. Supported values 0, 1.\n            "
              },
              "AutoApproveFeaturePacks": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of FeaturePacks\nDefault is 0. Supported values 0, 1.\n            "
              },
              "AutoApproveGuidance": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of Guidance\nDefault is 0. Supported values 0, 1.\n            "
              },
              "AutoApproveSecurityUpdates": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of SecurityUpdates\nDefault is 0. Supported values 0, 1.\n            "
              },
              "AutoApproveServicePacks": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of ServicePacks\nDefault is 0. Supported values 0, 1.\n            "
              },
              "AutoApproveTools": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of Tools\nDefault is 0. Supported values 0, 1.\n            "
              },
              "AutoApproveUpdateRollups": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of UpdateRollups\nDefault is 0. Supported values 0, 1.\n            "
              },
              "AutoApproveUpdates": {
                "type": "boolean",
                "description": "This option is to enable auto approve Updates of Updates\nDefault is 0. Supported values 0, 1.\n            "
              }
            }
          }
        ]
      },
      "BranchReadinessLevels": {
        "type": "string",
        "description": "Enum for BranchReadinessLevels",
        "x-enumNames": [
          "WindowsInsiderBuildFast",
          "WindowsInsiderBuildSlow",
          "WindowsInsiderBuildRelease",
          "SemiAnnualChannelTargeted",
          "SemiAnnualChannel"
        ],
        "enum": [
          "WindowsInsiderBuildFast",
          "WindowsInsiderBuildSlow",
          "WindowsInsiderBuildRelease",
          "SemiAnnualChannelTargeted",
          "SemiAnnualChannel"
        ],
        "x-enumType": "BranchReadinessLevels"
      },
      "ManagePreviewBuildsOptions": {
        "type": "string",
        "description": "Enum for ManagePreviewBuildsOptions",
        "x-enumNames": [
          "DisablePreviewBuilds",
          "DisablePreviewBuildsOncePublicRelease",
          "EnablePreviewBuilds"
        ],
        "enum": [
          "DisablePreviewBuilds",
          "DisablePreviewBuildsOncePublicRelease",
          "EnablePreviewBuilds"
        ],
        "x-enumType": "ManagePreviewBuildsOptions"
      },
      "AutoRestartNotificationConfig": {
        "type": "string",
        "description": "Enum for AutoRestartNotificationConfig",
        "x-enumNames": [
          "FifteenMinutes",
          "HalfHour",
          "OneHour",
          "TwoHours",
          "FourHours"
        ],
        "enum": [
          "FifteenMinutes",
          "HalfHour",
          "OneHour",
          "TwoHours",
          "FourHours"
        ],
        "x-enumType": "AutoRestartNotificationConfig"
      },
      "AutoRestartRequiredNotificationDismissalOptions": {
        "type": "string",
        "description": "Enum for AutoRestartRequiredNotificationDismissalOptions",
        "x-enumNames": [
          "NonConfigure",
          "AutoDismissal",
          "UserDismissal"
        ],
        "enum": [
          "NonConfigure",
          "AutoDismissal",
          "UserDismissal"
        ],
        "x-enumType": "AutoRestartRequiredNotificationDismissalOptions"
      },
      "ScheduleImminentRestartWarningOptions": {
        "type": "string",
        "description": "Enum for ScheduleImminentRestartWarningOptions",
        "x-enumNames": [
          "FifteenMinutes",
          "HalfHour",
          "OneHour"
        ],
        "enum": [
          "FifteenMinutes",
          "HalfHour",
          "OneHour"
        ],
        "x-enumType": "ScheduleImminentRestartWarningOptions"
      },
      "ScheduleRestartWarningOptions": {
        "type": "string",
        "description": "Enum for ScheduleRestartWarningOptions",
        "x-enumNames": [
          "TwoHours",
          "FourHours",
          "EightHours",
          "TwelveHours",
          "TwentyFourHours"
        ],
        "enum": [
          "TwoHours",
          "FourHours",
          "EightHours",
          "TwelveHours",
          "TwentyFourHours"
        ],
        "x-enumType": "ScheduleRestartWarningOptions"
      },
      "UpdateNotificationOptions": {
        "type": "string",
        "description": "Enum for UpdateNotificationOptions",
        "x-enumNames": [
          "DefaultNotifications",
          "TurnOffAllExceptRestart",
          "TurnOffAll"
        ],
        "enum": [
          "DefaultNotifications",
          "TurnOffAllExceptRestart",
          "TurnOffAll"
        ],
        "x-enumType": "UpdateNotificationOptions"
      },
      "WindowsUpdatePoliciesSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Windows Modern Update Policies device configuration section",
            "x-abstract": true
          }
        ]
      },
      "ModernDesktopWindowsVpn2Section": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents a Windows VPN2 Configuration.",
            "properties": {
              "Connection": {
                "description": "Gets or sets the VPN connection in this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WindowsVpn2Connection"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "WindowsVpn2Connection": {
        "type": "object",
        "description": "Base class for all Windows VPN2 connection types.",
        "x-abstract": true,
        "required": [
          "RememberCredentials",
          "BypassForLocal",
          "LockDown",
          "AlwaysOn",
          "WindowsVpn2ConnectionType"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets the friendly name for this VPN connection."
          },
          "Filters": {
            "description": "Gets or sets the collections of the various filters:\n1. List of applications set to trigger the VPN\n2. List of routes to be added to the routing table for the VPN interface\n3. Name Resolution Policy Table (NRPT) rules for the VPN profile.\n4. List of Device Traffic rules.\n5. List of App Traffic rules.\n6. List of Claims Traffic rules.",
            "allOf": [
              {
                "$ref": "#/definitions/Filters"
              }
            ]
          },
          "EdpModeId": {
            "type": "string",
            "description": "Gets or sets the Enterprise ID, which is required for connecting this VPN profile with an EDP Policy.\nWhen this is set, the networking stack looks for this Enterprise ID in the app token to determine if the traffic is allowed to go over the VPN.\nIf the profile is active, it also automatically triggers the VPN to connect.\nWe recommend having only one such profile per device.\nAdditionally when connecting with EDP,\nthe admin does not have to specify AppTriggerList and TrafficFilterList rules separately in this profile (unless more advanced config is needed)\nbecause the EDP policies and App lists automatically takes effect."
          },
          "RememberCredentials": {
            "type": "boolean",
            "description": "Gets or sets the VPN connection policy for RememberCredentials"
          },
          "BypassForLocal": {
            "type": "boolean",
            "description": "Gets or sets the VPN connection policy for BypassForLocal"
          },
          "LockDown": {
            "type": "boolean",
            "description": "Gets or sets the VPN connection policy for LockDown (default - false)"
          },
          "AlwaysOn": {
            "type": "boolean",
            "description": "Gets or sets the VPN connection policy for AlwaysOn (default - false)"
          },
          "TrustedNetworkDetection": {
            "type": "string",
            "description": "Gets or sets the Comma separated string to identify the trusted network.\nVPN will not connect automatically when the user is on their corporate wireless network where protected resources are directly accessible to the device."
          },
          "DNSSuffix": {
            "type": "string",
            "description": "Gets or sets the Specifies one or more comma separated DNS suffixes.\nThe first in the list is also used as the primary connection specific DNS suffix for the VPN Interface.\nThe entire list will also be added into the SuffixSearchList."
          },
          "ProxySettings": {
            "description": "Gets or sets the collection of configuration objects to enable a post-connect proxy support for VPN.\nThe proxy defined for VPNv2 profile is applied when VPNv2 profile is active and connected.",
            "allOf": [
              {
                "$ref": "#/definitions/ProxySettings"
              }
            ]
          },
          "Authentication": {
            "description": "Gets or sets the authentication data for this connection.",
            "allOf": [
              {
                "$ref": "#/definitions/WindowsVpnAuthentication"
              }
            ]
          },
          "WindowsVpn2ConnectionType": {
            "description": "Gets or sets WindowsVpn2Connection type.",
            "allOf": [
              {
                "$ref": "#/definitions/WindowsVpn2ConnectionType"
              }
            ],
            "x-enumType": "WindowsVpn2ConnectionType"
          }
        }
      },
      "Filters": {
        "type": "object",
        "description": "Class container for the collections of the various filters",
        "properties": {
          "AppTriggerList": {
            "type": "array",
            "description": "Gets or sets the collection of the applications set to trigger the VPN.\nIf any of these apps are launched and the VPN profile is currently the active profile,\nthis VPN profile will be triggered to connect.",
            "items": {
              "$ref": "#/definitions/AppTriggerListEntry"
            }
          },
          "RouteList": {
            "type": "array",
            "description": "Gets or sets the collection of the routes to be added to the routing table for the VPN interface.\nThis is required for split tunneling case where the VPN server site has more subnets that the default subnet based on the IP assigned to the interface.\nEvery computer that runs TCP/IP makes routing decisions.\nThese decisions are controlled by the IP routing table.\nAdding values under this node updates the routing table with routes for the VPN interface post connection.\nThe values under this node represent the destination prefix of IP routes.\nA destination prefix consists of an IP address prefix and a prefix length.\nAdding a route here allows the networking stack to identify the traffic that needs to go over the VPN interface for split tunnel VPN.\nSome VPN servers can configure this during connect negotiation and do not need this information in the VPN Profile.\nPlease check with your VPN server administrator to determine whether you need this information in the VPN profile.",
            "items": {
              "$ref": "#/definitions/RouteListEntry"
            }
          },
          "DomainNameInformationList": {
            "type": "array",
            "description": "Gets or sets the collection of the Name Resolution Policy Table (NRPT) rules for the VPN profile.\nThe Name Resolution Policy Table (NRPT) is a table of namespaces and corresponding settings\nstored in the Windows registry that determines the DNS client behavior when issuing queries and processing responses.\nEach row in the NRPT represents a rule for a portion of the namespace for which the DNS client issues queries.\nBefore issuing name resolution queries, the DNS client consults the NRPT to determine if any additional flags must be set in the query.\nAfter receiving the response, the client again consults the NRPT to check for any special processing or policy requirements.\nIn the absence of the NRPT, the client operates based on the DNS servers and suffixes set on the interface.",
            "items": {
              "$ref": "#/definitions/DomainNameInformationListEntry"
            }
          },
          "TrafficFilterDeviceList": {
            "type": "array",
            "description": "Gets or sets the collection that specifies a list of Device rules. Only traffic that matches these rules can be sent via the VPN Interface.\nOnce a TrafficFilterList is added, all traffic are blocked other than the ones matching the rules.\nWhen adding multiple rules, each rule operates based on an OR with the other rules.\nWithin each rule, each property operates based on an AND with each other.",
            "items": {
              "$ref": "#/definitions/TrafficFilterDeviceRule"
            }
          },
          "TrafficFilterAppList": {
            "type": "array",
            "description": "Gets or sets the collection that specifies a list of App rules. Only traffic that matches these rules can be sent via the VPN Interface.",
            "items": {
              "$ref": "#/definitions/TrafficFilterAppRule"
            }
          },
          "TrafficFilterClaimsList": {
            "type": "array",
            "description": "Gets or sets the collection that specifies a list of Claims rules. Only traffic that matches these rules can be sent via the VPN Interface.",
            "items": {
              "$ref": "#/definitions/TrafficFilterClaimsRule"
            }
          }
        }
      },
      "AppTriggerListEntry": {
        "type": "object",
        "description": "Class represents data contract for Windows VPN2 Route list entry",
        "properties": {
          "AppIdPfn": {
            "type": "string",
            "description": "Gets or sets the Application Id Pnf"
          }
        }
      },
      "RouteListEntry": {
        "type": "object",
        "description": "Class represents data contract for Windows VPN2 Route list entry",
        "required": [
          "PrefixSize"
        ],
        "properties": {
          "Address": {
            "type": "string",
            "description": "Gets or sets the Subnet address in IPv4/v6 address format which,\nalong with the prefix will be used to determine the destination prefix to send via the VPN Interface.\nThis is the IP address part of the destination prefix.\nExample, 192.168.0.0"
          },
          "PrefixSize": {
            "type": "integer",
            "description": "Gets or sets the subnet prefix size part of the destination prefix for the route entry.\nThis, along with the address will be used to determine the destination prefix to route through the VPN Interface.",
            "format": "int32"
          }
        }
      },
      "DomainNameInformationListEntry": {
        "type": "object",
        "description": "Class represents Windows VPN2 Domain Name Information List Entry",
        "properties": {
          "DomainName": {
            "type": "string",
            "description": "Gets or sets the domain name. Used to indicate the namespace to which the policy applies.\nWhen a query is issued, the DNS client compares the name in the query to all of the namespaces in this column to find a match."
          },
          "DnsServers": {
            "type": "string",
            "description": "Gets or sets the list of comma separated DNS Server IP addresses to use for the namespace."
          },
          "WebProxyServers": {
            "type": "string",
            "description": "Gets or sets the Web Proxy Server IP address if you are redirecting traffic through your intranet."
          }
        }
      },
      "TrafficFilterDeviceRule": {
        "allOf": [
          {
            "$ref": "#/definitions/TrafficFilterProtocolRule"
          },
          {
            "type": "object",
            "description": "Class represents Traffic Filter Device Rule for Windows VPN2"
          }
        ]
      },
      "TrafficFilterProtocolRule": {
        "allOf": [
          {
            "$ref": "#/definitions/TrafficFilterRule"
          },
          {
            "type": "object",
            "description": "Class represents Traffic Filter Protocol Rule for Windows VPN2",
            "x-abstract": true,
            "required": [
              "Protocol"
            ],
            "properties": {
              "Protocol": {
                "description": "Gets or sets the Numeric value from 0-255 representing the IP protocol to allow. For example, TCP = 6 and UDP = 17.",
                "allOf": [
                  {
                    "$ref": "#/definitions/InternetProtocol"
                  }
                ]
              },
              "LocalPortRanges": {
                "type": "string",
                "description": "Gets or sets the list of comma separated values specifying local port ranges to allow. For example, 100-120, 200, 300-320."
              },
              "RemotePortRanges": {
                "type": "string",
                "description": "Gets or sets the list of comma separated values specifying remote port ranges to allow. For example, 100-120, 200, 300-320."
              },
              "LocalAddressRanges": {
                "type": "string",
                "description": "Gets or sets the list of comma separated values specifying remote IP address ranges to allow."
              },
              "RemoteAddressRanges": {
                "type": "string",
                "description": "Gets or sets the list of comma separated values specifying remote IP address ranges to allow."
              }
            }
          }
        ]
      },
      "InternetProtocol": {
        "type": "string",
        "description": "Defines Internet Protocol Types for Windows VPN2",
        "x-enumNames": [
          "Unknown",
          "Tcp",
          "Udp"
        ],
        "enum": [
          "Unknown",
          "Tcp",
          "Udp"
        ],
        "x-enumType": "InternetProtocol"
      },
      "TrafficFilterRule": {
        "type": "object",
        "description": "Base Class for Windows VPN2 Traffic Filter list Rule.",
        "x-abstract": true
      },
      "TrafficFilterAppRule": {
        "allOf": [
          {
            "$ref": "#/definitions/TrafficFilterProtocolRule"
          },
          {
            "type": "object",
            "description": "Class represents Traffic Filter App Rule for Windows VPN2",
            "required": [
              "RoutingPolicyType"
            ],
            "properties": {
              "RoutingPolicyType": {
                "description": "Gets or sets the routing policy if an App or Claims type is used in the traffic filter.\nThe scope of this property is for this traffic filter rule alone.\nThe value can be one of the following:\n - SplitTunnel - For this traffic filter rule, only the traffic meant for the VPN interface (as determined by the networking stack) goes over the interface. Internet traffic can continue to go over the other interfaces.\n - ForceTunnel - For this traffic rule all IP traffic must go through the VPN Interface only.",
                "allOf": [
                  {
                    "$ref": "#/definitions/RoutingPolicyType"
                  }
                ]
              },
              "AppId": {
                "type": "string",
                "description": "Gets or sets the App identity, which is specified based on the Type.\nIn SyncMl the value type is chr. Supported operations include Get, Add, Replace, and Delete."
              }
            }
          }
        ]
      },
      "RoutingPolicyType": {
        "type": "string",
        "description": "Defines Routing Policy Types ",
        "x-enumNames": [
          "SplitTunnel",
          "ForceTunnel"
        ],
        "enum": [
          "SplitTunnel",
          "ForceTunnel"
        ],
        "x-enumType": "RoutingPolicyType"
      },
      "TrafficFilterClaimsRule": {
        "allOf": [
          {
            "$ref": "#/definitions/TrafficFilterRule"
          },
          {
            "type": "object",
            "description": "Class represents Traffic Filter Claims Rule for Windows VPN2",
            "required": [
              "RoutingPolicyType"
            ],
            "properties": {
              "RoutingPolicyType": {
                "description": "Gets or sets the routing policy if an App or Claims type is used in the traffic filter.\nThe scope of this property is for this traffic filter rule alone.\nThe value can be one of the following:\n - SplitTunnel - For this traffic filter rule, only the traffic meant for the VPN interface (as determined by the networking stack) goes over the interface. Internet traffic can continue to go over the other interfaces.\n - ForceTunnel - For this traffic rule all IP traffic must go through the VPN Interface only.",
                "allOf": [
                  {
                    "$ref": "#/definitions/RoutingPolicyType"
                  }
                ]
              },
              "Claims": {
                "type": "string",
                "description": "Gets or sets the rule in the Security Descriptor Definition Language (SDDL) format to check against a local user token."
              }
            }
          }
        ]
      },
      "ProxySettings": {
        "type": "object",
        "description": "Class represents the collection of configuration objects to enable a post-connect proxy support for VPN.\nThe proxy defined for VPNv2 profile is applied when VPNv2 profile is active and connected.",
        "required": [
          "ServerMode",
          "Port"
        ],
        "properties": {
          "ServerMode": {
            "description": "Gets or sets the manual server settings.\nOptional node",
            "allOf": [
              {
                "$ref": "#/definitions/ProxyServerMode"
              }
            ],
            "x-enumType": "ProxyServerMode"
          },
          "Server": {
            "type": "string",
            "description": "Gets or sets the Proxy server address as a fully qualified hostname or an IP address.\nYou should set this element together with Port.\nExample, proxy.contoso.com.\nOptional node"
          },
          "Port": {
            "type": "integer",
            "description": "Gets or sets the Proxy server port number in the range of 1-65535.\nYou should set this element together with Server.\nExample, 8080.\nOptional node",
            "format": "int32"
          },
          "AutoConfigUrl": {
            "type": "string",
            "description": "Gets or sets the URL to automatically retrieve the proxy settings.\nOptional node"
          }
        }
      },
      "WindowsVpn2ConnectionType": {
        "type": "string",
        "description": "Enumerators for Windows VPN2 Connection Type.",
        "x-enumNames": [
          "NativeProfileConnection",
          "PluginProfileConnection"
        ],
        "enum": [
          "NativeProfileConnection",
          "PluginProfileConnection"
        ],
        "x-enumType": "WindowsVpn2ConnectionType"
      },
      "NativeProfileConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsVpn2Connection"
          },
          {
            "type": "object",
            "description": "Class for all Windows native profile VPN2 connection types (IKEV2, PPTP, L2TP).",
            "required": [
              "NativeProtocolType",
              "RoutingPolicyType"
            ],
            "properties": {
              "Servers": {
                "type": "string",
                "description": "Gets or sets the  Public or routable IP address or DNS name for the VPN gateway.\nIt can point to the external IP of a gateway or a virtual IP for a server farm.\nExamples, 208.147.66.130 or vpn.contoso.com."
              },
              "NativeProtocolType": {
                "description": "Gets or sets the Type of tunneling protocol used. This value can be one of the following:\n- PPTP\n- L2TP\n- IKEv2\n- Automatic\nOnly L2TP and IKEv2 are supported on phones.",
                "allOf": [
                  {
                    "$ref": "#/definitions/NativeProtocolType"
                  }
                ]
              },
              "RoutingPolicyType": {
                "description": "Gets or sets the routing policy if an App or Claims type is used in the traffic filter.\nThe scope of this property is for this traffic filter rule alone.\nThe value can be one of the following:\n - SplitTunnel - For this traffic filter rule, only the traffic meant for the VPN interface (as determined by the networking stack) goes over the interface. Internet traffic can continue to go over the other interfaces.\n - ForceTunnel - For this traffic rule all IP traffic must go through the VPN Interface only.",
                "allOf": [
                  {
                    "$ref": "#/definitions/RoutingPolicyType"
                  }
                ]
              }
            }
          }
        ]
      },
      "NativeProtocolType": {
        "type": "string",
        "description": "For VPN2 CSP native profile the Type of tunneling protocol used",
        "x-enumNames": [
          "Automatic",
          "PPTP",
          "L2TP",
          "Ikev2"
        ],
        "enum": [
          "Automatic",
          "PPTP",
          "L2TP",
          "Ikev2"
        ],
        "x-enumType": "NativeProtocolType"
      },
      "ThirdPartyConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/WindowsVpn2Connection"
          },
          {
            "type": "object",
            "description": "Class for all Windows 3rd-party plugin VPN2 connection types.",
            "required": [
              "PluginType"
            ],
            "properties": {
              "PluginType": {
                "description": "Gets or sets the value of Plugin Type",
                "allOf": [
                  {
                    "$ref": "#/definitions/PluginType"
                  }
                ]
              },
              "ServerUrlList": {
                "type": "string",
                "description": "Gets or sets the Comma separated list of servers in URL, hostname, or IP format.\nRequired for plug-in profiles."
              },
              "CustomConfiguration": {
                "type": "string",
                "description": "Gets or sets the XML blob for SSL-VPN plug-in specific configuration.\nOptional node. This is an XML blob for SSL-VPN plug-in specific configuration that's pushed to the device to make available for SSL-VPN plug-ins.\nIn SyncMl item the this is XML format of type CHAR."
              },
              "PluginPackageFamilyName": {
                "type": "string",
                "description": "Gets or sets the Package family name for the SSL-VPN plug-in.\nRequired for plug-in profiles."
              }
            }
          }
        ]
      },
      "PluginType": {
        "type": "string",
        "description": "Defines Plugin Types ",
        "x-enumNames": [
          "AdminDefined",
          "Junos",
          "SonicWall",
          "CheckPoint"
        ],
        "enum": [
          "AdminDefined",
          "Junos",
          "SonicWall",
          "CheckPoint"
        ],
        "x-enumType": "PluginType"
      },
      "ModernDesktopAssignedAccessKioskSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a device lock-down configuration.",
            "properties": {
              "UserName": {
                "type": "string",
                "description": "Gets or sets the user name string"
              },
              "PackageFamilyName": {
                "type": "string",
                "description": "Gets or sets the package family name string"
              },
              "ApplicationId": {
                "type": "string",
                "description": "Gets or sets the application ID string"
              }
            }
          }
        ]
      },
      "WindowsPhoneAssignedAccessSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a device lock-down configuration.",
            "required": [
              "ActionCenterEnabled",
              "MenuItemsEnabled",
              "StartScreenSize"
            ],
            "properties": {
              "ActionCenterEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether Action Center enabled"
              },
              "MenuItemsEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether Menu items enabled"
              },
              "StartScreenSize": {
                "description": "Gets or sets a value indicating whether of StartScreenSize",
                "allOf": [
                  {
                    "$ref": "#/definitions/StartScreenSize"
                  }
                ]
              },
              "Applications": {
                "type": "array",
                "description": "Gets or sets allowed 1st party application list",
                "items": {
                  "$ref": "#/definitions/ApplicationLockdownInfo"
                }
              },
              "ButtonLockdownList": {
                "type": "array",
                "description": "Gets or sets Button Lock-down list",
                "items": {
                  "$ref": "#/definitions/ButtonLockdownListItem"
                }
              },
              "ButtonRemapList": {
                "type": "array",
                "description": "Gets or sets Button Remap list",
                "items": {
                  "$ref": "#/definitions/ButtonLockdownListItem"
                }
              },
              "Settings": {
                "type": "array",
                "description": "Gets or sets",
                "items": {
                  "$ref": "#/definitions/LockdownSetting"
                }
              }
            }
          }
        ]
      },
      "StartScreenSize": {
        "type": "string",
        "description": "Declares valid values for Start Screen Size ",
        "x-enumNames": [
          "Small",
          "Medium",
          "Large"
        ],
        "enum": [
          "Small",
          "Medium",
          "Large"
        ],
        "x-enumType": "StartScreenSize"
      },
      "ApplicationLockdownInfo": {
        "type": "object",
        "description": "Class for application lock-down data",
        "required": [
          "FirstPartyAppType",
          "AutoRun",
          "FirstPartyApp"
        ],
        "properties": {
          "ApplicationName": {
            "type": "string",
            "description": "Gets or sets App product Id"
          },
          "ProductId": {
            "type": "string",
            "description": "Gets or sets App product Id"
          },
          "FirstPartyAppType": {
            "description": "Gets or sets FirstPartyAppType",
            "allOf": [
              {
                "$ref": "#/definitions/FirstPartyAppType"
              }
            ],
            "x-enumType": "FirstPartyAppType"
          },
          "PinToStartInfo": {
            "description": "Gets or sets App Pin-To-Start info",
            "allOf": [
              {
                "$ref": "#/definitions/PinToStartInfo"
              }
            ]
          },
          "Parameters": {
            "type": "string",
            "description": "Gets or sets App parameters"
          },
          "AutoRun": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether Auto Run is enabled"
          },
          "FirstPartyApp": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether is a first party app"
          }
        }
      },
      "FirstPartyAppType": {
        "type": "string",
        "description": "Defines First Party Types ",
        "x-enumNames": [
          "Undefined",
          "Alarms",
          "BatterySaver",
          "BingFinance",
          "BingFood",
          "BingHealth",
          "BingNews",
          "BingSports",
          "BingTravel",
          "BingWeather",
          "Calculator",
          "Calendar",
          "Camera",
          "Cortana",
          "DataSense",
          "Email",
          "Facebook",
          "Games",
          "InternetExplorer",
          "Maps",
          "Messaging",
          "Music",
          "OfficeHub",
          "OneDrive",
          "OneNote",
          "People",
          "Phone",
          "Photos",
          "Podcasts",
          "Settings",
          "StorageSense",
          "Store",
          "Video",
          "Wallet"
        ],
        "enum": [
          "Undefined",
          "Alarms",
          "BatterySaver",
          "BingFinance",
          "BingFood",
          "BingHealth",
          "BingNews",
          "BingSports",
          "BingTravel",
          "BingWeather",
          "Calculator",
          "Calendar",
          "Camera",
          "Cortana",
          "DataSense",
          "Email",
          "Facebook",
          "Games",
          "InternetExplorer",
          "Maps",
          "Messaging",
          "Music",
          "OfficeHub",
          "OneDrive",
          "OneNote",
          "People",
          "Phone",
          "Photos",
          "Podcasts",
          "Settings",
          "StorageSense",
          "Store",
          "Video",
          "Wallet"
        ],
        "x-enumType": "FirstPartyAppType"
      },
      "PinToStartInfo": {
        "type": "object",
        "description": "Class for Application pin to start info",
        "required": [
          "Enabled",
          "TileSize"
        ],
        "properties": {
          "Enabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether PinToStart is enabled"
          },
          "TileSize": {
            "description": "Gets or sets app tile size value",
            "allOf": [
              {
                "$ref": "#/definitions/TileSize"
              }
            ],
            "x-enumType": "TileSize"
          },
          "Location": {
            "description": "Gets or sets app location on the screen",
            "allOf": [
              {
                "$ref": "#/definitions/Location"
              }
            ]
          }
        }
      },
      "TileSize": {
        "type": "string",
        "description": "Declares valid values for App tile size ",
        "x-enumNames": [
          "Small",
          "Medium",
          "Large"
        ],
        "enum": [
          "Small",
          "Medium",
          "Large"
        ],
        "x-enumType": "TileSize"
      },
      "Location": {
        "type": "object",
        "description": "Screen coordinate location",
        "required": [
          "X",
          "Y"
        ],
        "properties": {
          "X": {
            "type": "integer",
            "description": "Gets or sets X-coordinate",
            "format": "int64"
          },
          "Y": {
            "type": "integer",
            "description": "Gets or sets Y-coordinate",
            "format": "int64"
          }
        }
      },
      "ButtonLockdownListItem": {
        "type": "object",
        "description": "Class for Button Lock- down List Item",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets button name"
          },
          "ButtonEvents": {
            "type": "array",
            "description": "Gets or sets list of LockdownButtonEvent",
            "items": {
              "$ref": "#/definitions/LockdownButtonEvent"
            }
          }
        }
      },
      "LockdownButtonEvent": {
        "type": "object",
        "description": "Class for Button Lock-down Button event",
        "required": [
          "ButtonEvent"
        ],
        "properties": {
          "ButtonEvent": {
            "description": "Gets or sets ButtonEvent",
            "allOf": [
              {
                "$ref": "#/definitions/ButtonEvent"
              }
            ],
            "x-enumType": "ButtonEvent"
          },
          "Application": {
            "description": "Gets or sets the App info associated with button event",
            "allOf": [
              {
                "$ref": "#/definitions/ApplicationLockdownInfo"
              }
            ]
          }
        }
      },
      "ButtonEvent": {
        "type": "string",
        "description": "Defines Lock-down Button events",
        "x-enumNames": [
          "Press",
          "PressAndHold"
        ],
        "enum": [
          "Press",
          "PressAndHold"
        ],
        "x-enumType": "ButtonEvent"
      },
      "LockdownSetting": {
        "type": "object",
        "description": "Class for lock-down setting",
        "required": [
          "SettingType"
        ],
        "properties": {
          "SettingType": {
            "description": "Gets or sets lock-down setting type",
            "allOf": [
              {
                "$ref": "#/definitions/LockdownSettingType"
              }
            ],
            "x-enumType": "LockdownSettingType"
          },
          "SettingName": {
            "type": "string",
            "description": "Gets or sets lock-down setting name"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets lock-down name"
          }
        }
      },
      "LockdownSettingType": {
        "type": "string",
        "description": "Declares Lock-down Setting Type",
        "x-enumNames": [
          "System",
          "Application"
        ],
        "enum": [
          "System",
          "Application"
        ],
        "x-enumType": "LockdownSettingType"
      },
      "FirewallRuleSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Windows Modern Firewall Rules device configuration section",
            "properties": {
              "FirewallRule": {
                "description": "A list of rules controlling traffic through the Windows Firewall. Each Rule ID is ORed. Within each rule ID each Filter type is AND'ed.",
                "allOf": [
                  {
                    "$ref": "#/definitions/FirewallRule"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Unique characteristic"
              }
            }
          }
        ]
      },
      "FirewallRule": {
        "type": "object",
        "description": " ",
        "properties": {
          "FirewallRuleName": {
            "type": "string",
            "description": "Unique alpha numeric identifier for the rule. The rule name must not include a forward slash (/)."
          },
          "ActionType": {
            "description": "Specifies the action for the rule. Specifies the action the rule enforces: 0 - Block 1 - Allow.\nThis is a combination of two CSP nodes: /Action and /Action/Type",
            "allOf": [
              {
                "$ref": "#/definitions/FirewallRuleActionValues"
              }
            ],
            "x-enumType": "FirewallRuleActionValues"
          },
          "App": {
            "description": "Rules that control connections for an app, program or service. Specified based on the intersection of the following nodes. PackageFamilyName FilePath FQBN ServiceName.",
            "allOf": [
              {
                "$ref": "#/definitions/FirewallApp"
              }
            ]
          },
          "Description": {
            "type": "string",
            "description": "Specifies the description of the rule."
          },
          "Direction": {
            "description": "The rule is enabled based on the traffic direction as following. IN - the rule applies to inbound traffic.\nOUT - the rule applies to outbound traffic. If not specified the default is OUT.",
            "allOf": [
              {
                "$ref": "#/definitions/FirewallRuleDirection"
              }
            ],
            "x-enumType": "FirewallRuleDirection"
          },
          "EdgeTraversal": {
            "type": "boolean",
            "description": "Indicates whether edge traversal is enabled or disabled for this rule. The EdgeTraversal property indicates that specific inbound traffic is allowed to tunnel\nthrough NATs and other edge devices using the Teredo tunneling technology. In order for this setting to work correctly,\nthe application or service with the inbound firewall rule needs to support IPv6.\nThe primary application of this setting allows listeners on the host to be globally addressable through a Teredo IPv6 address.\nNew rules have the EdgeTraversal property disabled by default."
          },
          "Enabled": {
            "type": "boolean",
            "description": "Indicates whether the rule is enabled or disabled. If the rule must be enabled, this value must be set to true.\nIf not specified - a new rule is disabled by default."
          },
          "InterfaceTypes": {
            "type": "array",
            "description": "String value. Multiple interface types can be included in the string by separating each value with a \",\".\nAcceptable values are \"RemoteAccess\", \"Wireless\", \"Lan\", \"MBB\", and \"All\". If more than one interface type is specified, the strings must be separated by a comma.",
            "items": {
              "$ref": "#/definitions/FirewallInterfaceType"
            },
            "x-enumType": "FirewallInterfaceType"
          },
          "LocalAddressRanges": {
            "type": "array",
            "description": "Consists of one or more comma-delimited tokens specifying the local addresses covered by the rule. \"\" is the default value.\nValid tokens include: \"\" indicates any local address. If present, this must be the only token included.\nA subnet can be specified using either the subnet mask or network prefix notation. If neither a subnet mask not a network prefix is specified,\nthe subnet mask defaults to 255.255.255.255. A valid IPv6 address. An IPv4 address range in the format of \"start address - end address\" with no spaces included.\nAn IPv6 address range in the format of \"start address - end address\" with no spaces included. If not specified the default is All.",
            "items": {
              "type": "string"
            }
          },
          "LocalPortRanges": {
            "type": "array",
            "description": "Comma Separated list of ranges for eg. 100-120,200,300-320. If not specified the default is All.",
            "items": {
              "type": "string"
            }
          },
          "LocalUserAuthorizedList": {
            "type": "string",
            "description": "Specifies the list of authorized local users for the app container. This is a string in Security Descriptor Definition Language (SDDL) format."
          },
          "Name": {
            "type": "string",
            "description": "Rule name."
          },
          "Profiles": {
            "type": "array",
            "description": "Specifies the profiles to which the rule belongs: Domain, Private, Public. See FW_PROFILE_TYPE for the bitmasks that are used to identify profile types.\nIf not specified, the default is All.",
            "items": {
              "$ref": "#/definitions/FirewallProfileType"
            },
            "x-enumType": "FirewallProfileType"
          },
          "Protocol": {
            "type": "integer",
            "description": "0-255 number representing the ip protocol (TCP = 6, UDP = 17). If not specified the default is All.",
            "format": "int32"
          },
          "RemoteAddressRanges": {
            "type": "array",
            "description": "Consists of one or more comma-delimited tokens specifying the remote addresses covered by the rule. The default value is \"\".\nValid tokens include: \"\" indicates any remote address. If present, this must be the only token included.\n\"Defaultgateway\" \"DHCP\" \"DNS\" \"WINS\" \"Intranet\" \"RemoteCorpNetwork\" \"Internet\" \"PlayToRenderers\" \"LocalSubnet\" indicates any local address on the local subnet.\nThis token is not case-sensitive. A subnet can be specified using either the subnet mask or network prefix notation.\nIf neither a subnet mask not a network prefix is specified, the subnet mask defaults to 255.255.255.255. A valid IPv6 address.\nAn IPv4 address range in the format of \"start address - end address\" with no spaces included.\nAn IPv6 address range in the format of \"start address - end address\" with no spaces included. If not specified the default is All.",
            "items": {
              "type": "string"
            }
          },
          "RemotePortRanges": {
            "type": "array",
            "description": "Comma Separated list of ranges for eg. 100-120,200,300-320. If not specified the default is All.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FirewallRuleActionValues": {
        "type": "string",
        "description": "Firewall Connections Actions.",
        "x-enumNames": [
          "Block",
          "Allow"
        ],
        "enum": [
          "Block",
          "Allow"
        ],
        "x-enumType": "FirewallRuleActionValues"
      },
      "FirewallApp": {
        "type": "object",
        "description": "Rules that control connections for an app, program or service. Specified based on the intersection of the following nodes. PackageFamilyName FilePath FQBN ServiceName.",
        "properties": {
          "FilePath": {
            "type": "string",
            "description": "FilePath - This App/Id value represents the full file path of the app. For example, C:\\Windows\\System\\Notepad.exe."
          },
          "PackageFamilyName": {
            "type": "string",
            "description": "PackageFamilyName - This App/Id value represents the PackageFamilyName of the app. The PackageFamilyName is the unique name of a Microsoft Store application."
          },
          "ServiceName": {
            "type": "string",
            "description": "This is a service name, and is used in cases when a service, not an application, must be sending or receiving traffic."
          }
        }
      },
      "FirewallRuleDirection": {
        "type": "string",
        "description": "The rule is enabled based on the traffic direction as following. IN - the rule applies to inbound traffic. OUT - the rule applies to outbound traffic.",
        "x-enumNames": [
          "IN",
          "OUT"
        ],
        "enum": [
          "IN",
          "OUT"
        ],
        "x-enumType": "FirewallRuleDirection"
      },
      "FirewallInterfaceType": {
        "type": "string",
        "description": "Firewall Rule Interface Type",
        "x-enumNames": [
          "RemoteAccess",
          "Wireless",
          "Lan",
          "MBB",
          "All"
        ],
        "enum": [
          "RemoteAccess",
          "Wireless",
          "Lan",
          "MBB",
          "All"
        ],
        "x-enumType": "FirewallInterfaceType"
      },
      "FirewallProfileType": {
        "type": "string",
        "description": "This data type defines the enumerations that are used to identify profile types.",
        "x-enumFlags": true,
        "x-enumNames": [
          "FwProfileTypeDomain",
          "FwProfileTypePrivate",
          "FwProfileTypePublic"
        ],
        "enum": [
          "FwProfileTypeDomain",
          "FwProfileTypePrivate",
          "FwProfileTypePublic"
        ],
        "x-enumType": "FirewallProfileType"
      },
      "FirewallSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Windows Modern Firewall Settings device configuration section",
            "properties": {
              "DisableStatefulFtp": {
                "type": "boolean",
                "description": "This value is an on/off switch. If off, the firewall performs stateful File Transfer Protocol (FTP) filtering to allow secondary connections.\nFALSE means off; TRUE means on, so the stateful FTP is disabled. The merge law for this option is to let \"on\" values win."
              },
              "SaIdleTime": {
                "type": "integer",
                "description": "This value configures the security association idle time, in seconds. Security associations are deleted after network traffic is not seen for this specified period of time.\nThe value MUST be in the range of 300 to 3,600 inclusive. The merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured;\notherwise, use the local store value.",
                "format": "int32"
              },
              "PresharedKeyEncoding": {
                "description": "Specifies the preshared key encoding that is used. MUST be a valid value from the PRESHARED_KEY_ENCODING_VALUES enumeration. Default is 1 [UTF-8].\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured; otherwise, use the local store value.",
                "allOf": [
                  {
                    "$ref": "#/definitions/PresharedKeyEncodingValues"
                  }
                ]
              },
              "IpsecExempt": {
                "type": "array",
                "description": "his value configures IPsec exceptions and MUST be a combination of the valid flags that are defined in IPSEC_EXEMPT_VALUES;\ntherefore, the maximum value MUST always be IPSEC_EXEMPT_MAX-1 for servers supporting a schema version of 0x0201 and IPSEC_EXEMPT_MAX_V2_0-1 for servers supporting a schema version of 0x0200.\nIf the maximum value is exceeded when the method RRPC_FWSetGlobalConfig (Opnum 4) is called, the method returns ERROR_INVALID_PARAMETER.\nThis error code is returned if no other preceding error is discovered.\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured; otherwise, use the local store value.",
                "items": {
                  "$ref": "#/definitions/IpsecExemptValues"
                }
              },
              "CrlCheck": {
                "description": "This value specifies how certificate revocation list (CRL) verification is enforced. The value MUST be 0, 1, or 2. A value of 0 disables CRL checking.\nA value of 1 specifies that CRL checking is attempted and that certificate validation fails only if the certificate is revoked.\nOther failures that are encountered during CRL checking (such as the revocation URL being unreachable) do not cause certificate validation to fail.\nA value of 2 means that checking is required and that certificate validation fails if any error is encountered during CRL processing.\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured; otherwise, use the local store value.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CrlCheckValues"
                  }
                ]
              },
              "OpportunisticallyMatchAuthSetPerKm": {
                "type": "boolean",
                "description": "This value is used as an on/off switch. When this option is false, keying modules MUST ignore the entire authentication set if they do not support all of the authentication suites specified in the set.\nWhen this option is true, keying modules MUST ignore only the authentication suites that they don't support.\nFor schema versions 0x0200, 0x0201, and 0x020A, this value is invalid and MUST NOT be used."
              },
              "EnablePacketQueue": {
                "type": "array",
                "description": "This value specifies how scaling for the software on the receive side is enabled for both the encrypted receive and clear text forward path for the IPsec tunnel gateway scenario.\nUse of this option also ensures that the packet order is preserved. The data type for this option value is a integer and is a combination of flags.\nA value of 0x00 indicates that all queuing is to be disabled. A value of 0x01 specifies that inbound encrypted packets are to be queued.\nA value of 0x02 specifies that packets are to be queued after decryption is performed for forwarding.",
                "items": {
                  "$ref": "#/definitions/PacketQueueValues"
                }
              },
              "DomainProfile": {
                "description": "Firewall Domain Profile.",
                "allOf": [
                  {
                    "$ref": "#/definitions/FirewallProfile"
                  }
                ]
              },
              "PrivateProfile": {
                "description": "FirewallPrivate Profile.",
                "allOf": [
                  {
                    "$ref": "#/definitions/FirewallProfile"
                  }
                ]
              },
              "PublicProfile": {
                "description": "Firewall Public Profile.",
                "allOf": [
                  {
                    "$ref": "#/definitions/FirewallProfile"
                  }
                ]
              }
            }
          }
        ]
      },
      "PresharedKeyEncodingValues": {
        "type": "string",
        "description": "MdmStore/Global/PresharedKeyEncoding values",
        "x-enumNames": [
          "FwGlobalConfigPresharedKeyEncodingNone",
          "FwGlobalConfigPresharedKeyEncodingUtf8"
        ],
        "enum": [
          "FwGlobalConfigPresharedKeyEncodingNone",
          "FwGlobalConfigPresharedKeyEncodingUtf8"
        ],
        "x-enumType": "PresharedKeyEncodingValues"
      },
      "IpsecExemptValues": {
        "type": "string",
        "description": "This enumeration identifies specific traffic to be exempted from performing IPsec.",
        "x-enumFlags": true,
        "x-enumNames": [
          "FwGlobalConfigIpsecExemptNeighborDisc",
          "FwGlobalConfigIpsecExemptIcmp",
          "FwGlobalConfigIpsecExemptRouterDisc",
          "FwGlobalConfigIpsecExemptDHCP"
        ],
        "enum": [
          "FwGlobalConfigIpsecExemptNeighborDisc",
          "FwGlobalConfigIpsecExemptIcmp",
          "FwGlobalConfigIpsecExemptRouterDisc",
          "FwGlobalConfigIpsecExemptDHCP"
        ],
        "x-enumType": "IpsecExemptValues"
      },
      "CrlCheckValues": {
        "type": "string",
        "description": "MdmStore/Global/CRLcheck values.",
        "x-enumNames": [
          "DisableCrlChecking",
          "FailsOnlyIfCertificateRevoked",
          "FailsOnAnyCrlError"
        ],
        "enum": [
          "DisableCrlChecking",
          "FailsOnlyIfCertificateRevoked",
          "FailsOnAnyCrlError"
        ],
        "x-enumType": "CrlCheckValues"
      },
      "PacketQueueValues": {
        "type": "string",
        "description": "MdmStore/Global/EnablePacketQueue packet queue values",
        "x-enumFlags": true,
        "x-enumNames": [
          "Disabled",
          "InboundMustBeQueued",
          "MustBeQueuedAfterDecryption"
        ],
        "enum": [
          "Disabled",
          "InboundMustBeQueued",
          "MustBeQueuedAfterDecryption"
        ],
        "x-enumType": "PacketQueueValues"
      },
      "FirewallProfile": {
        "type": "object",
        "description": "Firewall Profile",
        "properties": {
          "AllowLocalIpsecPolicyMerge": {
            "type": "boolean",
            "description": "This value is an on/off switch. If this value is false, connection security rules from the local store are ignored and not enforced,\nregardless of the schema version and connection security rule version.\nThe merge law for this option is to always use the value of the GroupPolicyRSoPStore."
          },
          "AllowLocalPolicyMerge": {
            "type": "boolean",
            "description": "This value is used as an on/off switch. If this value is false, firewall rules from the local store are ignored and not enforced.\nThe merge law for this option is to always use the value of the GroupPolicyRSoPStore. This value is valid for all schema versions."
          },
          "AuthAppsAllowUserPrefMerge": {
            "type": "boolean",
            "description": "This value is used as an on/off switch. If this value is false, authorized application firewall rules in the local store are ignored and not enforced. The merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured; otherwise, the local store value is used."
          },
          "DefaultInboundAction": {
            "description": "This value is the action that the firewall does by default (and evaluates at the very end) on inbound connections.\nThe allow action is represented by 0x00000000; 0x00000001 represents a block action. Default value is 1 [Block].\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore.win if it is configured; otherwise, the local store value is used.",
            "allOf": [
              {
                "$ref": "#/definitions/ActionValues"
              }
            ],
            "x-enumType": "ActionValues"
          },
          "DefaultOutboundAction": {
            "description": "This value is the action that the firewall does by default (and evaluates at the very end) on outbound connections.\nThe allow action is represented by 0x00000000; 0x00000001 represents a block action. Default value is 0 [Allow].\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured; otherwise, the local store value is used.",
            "allOf": [
              {
                "$ref": "#/definitions/ActionValues"
              }
            ],
            "x-enumType": "ActionValues"
          },
          "DisableInboundNotifications": {
            "type": "boolean",
            "description": "This value is an on/off switch. If this value is false, the firewall MAY display a notification to the user when an application is blocked\nfrom listening on a port. If this value is on, the firewall MUST NOT display such a notification.\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured; otherwise, the local store value is used."
          },
          "DisableStealthMode": {
            "type": "boolean",
            "description": "This value is an on/off switch. When this option is false, the server operates in stealth mode.\nThe firewall rules used to enforce stealth mode are implementation-specific.\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured; otherwise, the local store value is used."
          },
          "DisableStealthModeIpsecSecuredPacketExemption": {
            "type": "boolean",
            "description": "This value is an on/off switch. This option is ignored if DisableStealthMode is on.\nOtherwise, when this option is true, the firewall's stealth mode rules MUST NOT prevent the host computer from responding to unsolicited network\ntraffic if that traffic is secured by IPsec.\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured; otherwise, the local store value is used.\nFor schema versions 0x0200, 0x0201, and 0x020A, this value is invalid and MUST NOT be used."
          },
          "DisableUnicastResponsesToMulticastBroadcast": {
            "type": "boolean",
            "description": "This value is used as an on/off switch. If it is true, unicast responses to multicast broadcast traffic is blocked.\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured; otherwise, the local store value is used."
          },
          "EnableFirewall": {
            "type": "boolean",
            "description": "This value is an on/off switch for the firewall and advanced security enforcement.\nIf this value is false, the server MUST NOT block any network traffic, regardless of other policy settings.\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured; otherwise, the local store value is used."
          },
          "EnableLogDroppedPackets": {
            "type": "boolean",
            "description": "This value is used as an on/off switch. If this value is on, the firewall logs all the dropped packets.\nThe merge law for this option is to let \"on\" values win."
          },
          "EnableLogIgnoredRules": {
            "type": "boolean",
            "description": "This value is used as an on/off switch. The server MAY use this value in an implementation-specific way to control logging of events\nif a rule is not enforced for any reason. The merge law for this option is to let \"on\" values win."
          },
          "EnableLogSuccessConnections": {
            "type": "boolean",
            "description": "This value is used as an on/off switch. If this value is on, the firewall logs all successful inbound connections.\nThe merge law for this option is to let \"on\" values win."
          },
          "GlobalPortsAllowUserPrefMerge": {
            "type": "boolean",
            "description": "This value is used as an on/off switch. If this value is false, global port firewall rules in the local store are ignored and not enforced.\nThe setting only has meaning if it is set or enumerated in the Group Policy store or if it is enumerated from the GroupPolicyRSoPStore.\nThe merge law for this option is to let the value GroupPolicyRSoPStore win if it is configured; otherwise, the local store value is used."
          },
          "LogFilePath": {
            "type": "string",
            "description": "This value is a string that represents a file path to the log where the firewall logs dropped packets and successful connections.\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured,\notherwise the MdmStore value wins if it is configured, otherwise the local store value is used."
          },
          "LogMaxFileSize": {
            "type": "integer",
            "description": "This value specifies the size, in kilobytes, of the log file where dropped packets and successful connections are logged.\nThe merge law for this option is to let the value of the GroupPolicyRSoPStore win if it is configured,\notherwise the MdmStore value wins if it is configured, otherwise the local store value is used.",
            "format": "int64"
          },
          "Shielded": {
            "type": "boolean",
            "description": "This value is used as an on/off switch. If this value is on and EnableFirewall is on,\nthe server MUST block all incoming traffic regardless of other policy settings. The merge law for this option is to let \"on\" values win."
          }
        }
      },
      "ActionValues": {
        "type": "string",
        "description": "Firewall Connections Actions.",
        "x-enumNames": [
          "Allow",
          "Block"
        ],
        "enum": [
          "Allow",
          "Block"
        ],
        "x-enumType": "ActionValues"
      },
      "ModernDesktopBitLockerDesktopSection": {
        "allOf": [
          {
            "$ref": "#/definitions/BitLockerSection"
          },
          {
            "type": "object",
            "description": "BitLocker device configuration Desktop Section",
            "required": [
              "FixedDrivesRequireEncryption",
              "AllowWarningForOtherDiskEncryption"
            ],
            "properties": {
              "EncryptionMethodByDriveType": {
                "description": "Allows the administrator to to set the default encryption method for each of the different drive types.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerEncryptionSetting"
                  }
                ]
              },
              "SystemDrivesRequireStartupAuthentication": {
                "description": "Allows the administrator to configure whether BitLocker requires additional authentication each time the computer starts\nand whether you are using BitLocker with or without a Trusted Platform Module (TPM)\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerStartupAuthenticationSetting"
                  }
                ]
              },
              "SystemDrivesPINLength": {
                "description": "Allows the administrator to configure a minimum length for a Trusted Platform Module (TPM) startup PIN\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/SystemDrivesPINLengthSetting"
                  }
                ]
              },
              "SystemDrivesRecoveryMessage": {
                "description": "Allows the administrator to configure the entire recovery message or replace the existing URL that are displayed\non the pre-boot key recovery screen when the OS drive is locked.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerRecoveryMessageSetting"
                  }
                ]
              },
              "SystemDrivesRecoveryOption": {
                "description": "Allows the administrator to control how BitLocker-protected operating system drives are recovered in the absence of\nthe required startup key information. This setting is applied when you turn on BitLocker.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/SystemDrivesRecoveryOptionSetting"
                  }
                ]
              },
              "FixedDrivesRequireEncryption": {
                "description": "Determines whether BitLocker protection is required for fixed data drives to be writable on a computer.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerPolicyStatus"
                  }
                ]
              },
              "FixedDrivesRecoveryOptions": {
                "description": "To control how BitLocker-protected fixed data drives are recovered in the absence of the required credentials.\nThis setting is applied when you turn on BitLocker.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/FixedDrivesRecoveryOptionSetting"
                  }
                ]
              },
              "RemovableDrivesRequireEncryption": {
                "description": "Allows the administrator to  configures whether BitLocker protection is required for a computer to be able\nto write data to a removable data drive.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/RemovableDrivesRequireEncryptionSetting"
                  }
                ]
              },
              "AllowWarningForOtherDiskEncryption": {
                "description": "Allows the Admin to disable the warning prompt for other disk encryption on the user machines.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerPolicyStatus"
                  }
                ]
              }
            }
          }
        ]
      },
      "BitLockerEncryptionSetting": {
        "allOf": [
          {
            "$ref": "#/definitions/BitLockerPolicySetting"
          },
          {
            "type": "object",
            "description": "BitLocker Encryption Settings",
            "required": [
              "SystemDrivesEncryptionMethod",
              "FixedDrivesEncryptionMethod",
              "RemovableDrivesEncryptionMethod"
            ],
            "properties": {
              "SystemDrivesEncryptionMethod": {
                "description": "Allows the administrator to to set the default encryption method for each of the different drive types.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerEncryptionMethods"
                  }
                ]
              },
              "FixedDrivesEncryptionMethod": {
                "description": "Allows the administrator to to set the default encryption method for each of the different drive types.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerEncryptionMethods"
                  }
                ]
              },
              "RemovableDrivesEncryptionMethod": {
                "description": "Allows the administrator to to set the default encryption method for each of the different drive types.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerEncryptionMethods"
                  }
                ]
              }
            }
          }
        ]
      },
      "BitLockerEncryptionMethods": {
        "type": "string",
        "description": "Enum for BitLockerEncryptionMethods",
        "x-enumNames": [
          "AES_CBC_128",
          "AES_CBC_256",
          "XTS_AES_128",
          "XTS_AES_256"
        ],
        "enum": [
          "AES_CBC_128",
          "AES_CBC_256",
          "XTS_AES_128",
          "XTS_AES_256"
        ],
        "x-enumType": "BitLockerEncryptionMethods"
      },
      "BitLockerPolicySetting": {
        "type": "object",
        "description": "BitLocker Policy Settings",
        "required": [
          "PolicyStatus"
        ],
        "properties": {
          "PolicyStatus": {
            "description": "Enable or disable this policy setting\n            ",
            "allOf": [
              {
                "$ref": "#/definitions/BitLockerPolicyStatus"
              }
            ],
            "x-enumType": "BitLockerPolicyStatus"
          }
        }
      },
      "BitLockerPolicyStatus": {
        "type": "string",
        "description": "Enum for BitLocker Policy Status",
        "x-enumNames": [
          "Disabled",
          "Enabled",
          "NotConfigured"
        ],
        "enum": [
          "Disabled",
          "Enabled",
          "NotConfigured"
        ],
        "x-enumType": "BitLockerPolicyStatus"
      },
      "BitLockerRecoveryMessageSetting": {
        "allOf": [
          {
            "$ref": "#/definitions/BitLockerPolicySetting"
          },
          {
            "type": "object",
            "description": "BitLocker Recovery Message Setting",
            "required": [
              "PrebootRecoveryInfo"
            ],
            "properties": {
              "PrebootRecoveryInfo": {
                "description": "Configure the entire recovery message or replace the existing URL that are displayed on the pre-boot key recovery screen\nwhen the OS drive is locked.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/PrebootRecoveryInfoSetting"
                  }
                ]
              },
              "RecoveryMessage": {
                "type": "string",
                "description": "Configure recovery message\n            "
              },
              "RecoveryUrl": {
                "type": "string",
                "description": "Configure recovery URL\n            "
              }
            }
          }
        ]
      },
      "PrebootRecoveryInfoSetting": {
        "type": "string",
        "description": "Enum for PrebootRecoveryInfoSetting",
        "x-enumNames": [
          "Empty",
          "UseDefault",
          "CustomMessage",
          "CustomUrl"
        ],
        "enum": [
          "Empty",
          "UseDefault",
          "CustomMessage",
          "CustomUrl"
        ],
        "x-enumType": "PrebootRecoveryInfoSetting"
      },
      "BitLockerStartupAuthenticationSetting": {
        "allOf": [
          {
            "$ref": "#/definitions/BitLockerPolicySetting"
          },
          {
            "type": "object",
            "description": "BitLocker Startup Authentication Setting",
            "required": [
              "NonTPMStartupKeyUsage",
              "TPMUsage",
              "TPMStartupKeyUsage",
              "PINUsage",
              "TPMPINKeyUsage"
            ],
            "properties": {
              "NonTPMStartupKeyUsage": {
                "type": "boolean",
                "description": "Allow BitLocker without a compatible TPM (requires a password or a startup key on a USB flash drive).\n            "
              },
              "TPMUsage": {
                "description": "Configure TPM startup for computer with TPM\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerConfigSetting"
                  }
                ]
              },
              "TPMStartupKeyUsage": {
                "description": "Configure TPM startup key for computer with TPM\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerConfigSetting"
                  }
                ]
              },
              "PINUsage": {
                "description": "Configure TPM startup PIN for computer with TPM\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerConfigSetting"
                  }
                ]
              },
              "TPMPINKeyUsage": {
                "description": "Configure TPM startup key and PIN for computer with TPM\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerConfigSetting"
                  }
                ]
              }
            }
          }
        ]
      },
      "BitLockerConfigSetting": {
        "type": "string",
        "description": "Enum for BitLockerConfigSetting ",
        "x-enumNames": [
          "Disallowed",
          "Required",
          "OptionalOrAllowed"
        ],
        "enum": [
          "Disallowed",
          "Required",
          "OptionalOrAllowed"
        ],
        "x-enumType": "BitLockerConfigSetting"
      },
      "FixedDrivesRecoveryOptionSetting": {
        "allOf": [
          {
            "$ref": "#/definitions/BitLockerPolicySetting"
          },
          {
            "type": "object",
            "description": "BitLocker Fixed Drives Recovery Option Settings",
            "required": [
              "FDVAllowDRA",
              "FDVRecoveryPasswordUsage",
              "FDVRecoveryKeyUsage",
              "FDVHideRecoveryPage",
              "FDVActiveDirectoryBackup",
              "FDVActiveDirectoryBackupInfo",
              "FDVRequireActiveDirectoryBackup"
            ],
            "properties": {
              "FDVAllowDRA": {
                "type": "boolean",
                "description": "Allow certificate-based data recovery agent\n            "
              },
              "FDVRecoveryPasswordUsage": {
                "description": "Configure user storage of BitLocker recovery information\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerConfigSetting"
                  }
                ]
              },
              "FDVRecoveryKeyUsage": {
                "description": "Configure user storage of BitLocker recovery information\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerConfigSetting"
                  }
                ]
              },
              "FDVHideRecoveryPage": {
                "type": "boolean",
                "description": "Omit recovery options from the BitLocker setup wizard\n            "
              },
              "FDVActiveDirectoryBackup": {
                "type": "boolean",
                "description": "Allow to save BitLocker recovery information to Active Directory Domain Services\n            "
              },
              "FDVActiveDirectoryBackupInfo": {
                "description": "To choose which BitLocker recovery information to store in AD DS for operating system drives\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerRecoveryInfo"
                  }
                ]
              },
              "FDVRequireActiveDirectoryBackup": {
                "type": "boolean",
                "description": "Prevent users from enabling BitLocker unless the computer is connected to the domain and the backup of\nBitLocker recovery information to AD DS succeeds.\n            "
              }
            }
          }
        ]
      },
      "BitLockerRecoveryInfo": {
        "type": "string",
        "description": "Enum for BitLockerRecoveryInfo",
        "x-enumNames": [
          "PasswordsAndKeyPackages",
          "PasswordsOnly"
        ],
        "enum": [
          "PasswordsAndKeyPackages",
          "PasswordsOnly"
        ],
        "x-enumType": "BitLockerRecoveryInfo"
      },
      "RemovableDrivesRequireEncryptionSetting": {
        "allOf": [
          {
            "$ref": "#/definitions/BitLockerPolicySetting"
          },
          {
            "type": "object",
            "description": "BitLocker Removable Drives Require Encryption Settings",
            "required": [
              "RDVCrossOrg"
            ],
            "properties": {
              "RDVCrossOrg": {
                "type": "boolean",
                "description": "Deny write access to devices configured in another organization\n            "
              }
            }
          }
        ]
      },
      "SystemDrivesPINLengthSetting": {
        "allOf": [
          {
            "$ref": "#/definitions/BitLockerPolicySetting"
          },
          {
            "type": "object",
            "description": "BitLocker System Drives PIN Length Setting",
            "required": [
              "MinPINLength"
            ],
            "properties": {
              "MinPINLength": {
                "type": "integer",
                "description": "Allows the administrator to configure a minimum length for a Trusted Platform Module (TPM) startup PIN\n            ",
                "format": "int32"
              }
            }
          }
        ]
      },
      "SystemDrivesRecoveryOptionSetting": {
        "allOf": [
          {
            "$ref": "#/definitions/BitLockerPolicySetting"
          },
          {
            "type": "object",
            "description": "BitLocker System Drives Recovery Option Settings",
            "required": [
              "OSAllowDRA",
              "OSRecoveryPasswordUsage",
              "OSRecoveryKeyUsage",
              "OSHideRecoveryPage",
              "OSActiveDirectoryBackup",
              "OSActiveDirectoryBackupInfo",
              "OSRequireActiveDirectoryBackup"
            ],
            "properties": {
              "OSAllowDRA": {
                "type": "boolean",
                "description": "Allow certificate-based data recovery agent\n            "
              },
              "OSRecoveryPasswordUsage": {
                "description": "Configure user storage of BitLocker recovery information\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerConfigSetting"
                  }
                ]
              },
              "OSRecoveryKeyUsage": {
                "description": "Configure user storage of BitLocker recovery information\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerConfigSetting"
                  }
                ]
              },
              "OSHideRecoveryPage": {
                "type": "boolean",
                "description": "Omit recovery options from the BitLocker setup wizard\n            "
              },
              "OSActiveDirectoryBackup": {
                "type": "boolean",
                "description": "Allow to save BitLocker recovery information to Active Directory Domain Services\n            "
              },
              "OSActiveDirectoryBackupInfo": {
                "description": "To choose which BitLocker recovery information to store in AD DS for operating system drives\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerRecoveryInfo"
                  }
                ]
              },
              "OSRequireActiveDirectoryBackup": {
                "type": "boolean",
                "description": "Prevent users from enabling BitLocker unless the computer is connected to the domain and the backup of\nBitLocker recovery information to AD DS succeeds.\n            "
              }
            }
          }
        ]
      },
      "BitLockerSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "BitLocker device configuration section",
            "x-abstract": true,
            "required": [
              "RequireDeviceEncryption"
            ],
            "properties": {
              "RequireDeviceEncryption": {
                "description": "Allows the administrator to require encryption to be turned on by using BitLocker\\Device Encryption.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerPolicyStatus"
                  }
                ]
              }
            }
          }
        ]
      },
      "BitLockerPhoneSection": {
        "allOf": [
          {
            "$ref": "#/definitions/BitLockerSection"
          },
          {
            "type": "object",
            "description": "Enterprise APN device configuration Desktop Section",
            "required": [
              "RequireStorageCardEncryption"
            ],
            "properties": {
              "RequireStorageCardEncryption": {
                "description": "Allows the administrator to require storage card encryption on the device.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/BitLockerPolicyStatus"
                  }
                ]
              }
            }
          }
        ]
      },
      "ModernDesktopAssignedAccessConfigurationDesktopSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AssignedAccessConfigurationSection"
          },
          {
            "type": "object",
            "description": "Assigned Access device configuration Windows Modern Desktop Section"
          }
        ]
      },
      "AssignedAccessConfigurationSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Assigned Access Configuration device configuration Section",
            "x-abstract": true,
            "properties": {
              "Profiles": {
                "type": "array",
                "description": "Gets or sets list of Profiles",
                "items": {
                  "$ref": "#/definitions/AssignedAccessProfile"
                }
              }
            }
          }
        ]
      },
      "AssignedAccessProfile": {
        "type": "object",
        "description": "Assigned Access Profile",
        "required": [
          "ProfileId",
          "GroupCellWidth",
          "ShowTaskbar"
        ],
        "properties": {
          "ProfileId": {
            "type": "string",
            "description": "a GUID attribute to uniquely identify the Profile\n            ",
            "format": "guid"
          },
          "UserAccounts": {
            "type": "array",
            "description": "User account  list\n            ",
            "items": {
              "$ref": "#/definitions/UserAccount"
            }
          },
          "AllowedApps": {
            "type": "array",
            "description": "a list of allowed applications\n            ",
            "items": {
              "$ref": "#/definitions/AllowedApplication"
            }
          },
          "GroupCellWidth": {
            "type": "integer",
            "description": "GroupCellWidth used by LayoutOptions and defaultlayout:StartLayout.",
            "format": "int32"
          },
          "UwpAppTiles": {
            "type": "array",
            "description": "a list of UWP app tile\n            ",
            "items": {
              "$ref": "#/definitions/UwpAppTile"
            }
          },
          "DesktopAppTiles": {
            "type": "array",
            "description": "a list of Desktop app tile\n            ",
            "items": {
              "$ref": "#/definitions/DesktopAppTile"
            }
          },
          "WebLinkTiles": {
            "type": "array",
            "description": "a list of Web Link tile\n            ",
            "items": {
              "$ref": "#/definitions/WebLinkTile"
            }
          },
          "ShowTaskbar": {
            "type": "boolean",
            "description": "Define whether you want to have the taskbar present in the kiosk device."
          },
          "FileExplorerNamespaceSettings": {
            "description": "File Explorer Namespace Restriction settings",
            "allOf": [
              {
                "$ref": "#/definitions/FileExplorerNamespaceRestriction"
              }
            ]
          }
        }
      },
      "UserAccount": {
        "type": "object",
        "description": "User Account",
        "required": [
          "AccountType"
        ],
        "properties": {
          "AccountName": {
            "type": "string",
            "description": "Identifies the user account/group name\n "
          },
          "AccountType": {
            "description": "Identifies the user account/group type\n ",
            "allOf": [
              {
                "$ref": "#/definitions/UserAccountType"
              }
            ],
            "x-enumType": "UserAccountType"
          }
        }
      },
      "UserAccountType": {
        "type": "string",
        "description": "Enum for different User Account Types ",
        "x-enumNames": [
          "User",
          "LocalGroup",
          "ActiveDirectoryGroup",
          "AzureActiveDirectoryGroup"
        ],
        "enum": [
          "User",
          "LocalGroup",
          "ActiveDirectoryGroup",
          "AzureActiveDirectoryGroup"
        ],
        "x-enumType": "UserAccountType"
      },
      "AllowedApplication": {
        "type": "object",
        "description": "Allowed Application",
        "required": [
          "AppType",
          "AutoLaunch"
        ],
        "properties": {
          "AppName": {
            "type": "string",
            "description": "Identifies the allowed application name\n "
          },
          "AppType": {
            "description": "Identifies the allowed application property type and its value\n ",
            "allOf": [
              {
                "$ref": "#/definitions/ApplicationType"
              }
            ],
            "x-enumType": "ApplicationType"
          },
          "AppIdPath": {
            "type": "string",
            "description": "Identifies the allowed application id\n "
          },
          "AutoLaunch": {
            "type": "boolean",
            "description": "AutoLaunch is supported with 1809 release and it is unique to one App"
          }
        }
      },
      "ApplicationType": {
        "type": "string",
        "description": "Enum for different Application Types ",
        "x-enumNames": [
          "UWP",
          "Desktop"
        ],
        "enum": [
          "UWP",
          "Desktop"
        ],
        "x-enumType": "ApplicationType"
      },
      "UwpAppTile": {
        "allOf": [
          {
            "$ref": "#/definitions/ApplicationTile"
          },
          {
            "type": "object",
            "description": "Define UWP Application Tile Configurations",
            "properties": {
              "UwpApp": {
                "description": "Identifies the allowed UWP application\n ",
                "allOf": [
                  {
                    "$ref": "#/definitions/UwpApplication"
                  }
                ]
              }
            }
          }
        ]
      },
      "UwpApplication": {
        "type": "object",
        "description": "Class for Universal Windows Platform (UWP) Application",
        "properties": {
          "ApplicationName": {
            "type": "string",
            "description": "Gets or sets App Display Name, e.g., \"Microsoft Edge\""
          },
          "AppUserModelId": {
            "type": "string",
            "description": "Gets or sets App User Model ID(AUMID), e.g., \"Microsoft.MicrosoftEdge_8wekyb3d8bbwe!MicrosoftEdge\""
          }
        }
      },
      "ApplicationTile": {
        "type": "object",
        "description": "Define Application Tile Configurations",
        "x-abstract": true,
        "required": [
          "TileSize"
        ],
        "properties": {
          "GroupName": {
            "type": "string",
            "description": "Group display name, should be unique"
          },
          "TileSize": {
            "description": "Defines the Tile Size",
            "allOf": [
              {
                "$ref": "#/definitions/DesktopTileSize"
              }
            ],
            "x-enumType": "DesktopTileSize"
          },
          "Position": {
            "description": "Defines the coordinate to locate the application",
            "allOf": [
              {
                "$ref": "#/definitions/Coordinate"
              }
            ]
          }
        }
      },
      "DesktopTileSize": {
        "type": "string",
        "description": "Defines Desktop application tile size",
        "x-enumNames": [
          "Small",
          "Medium",
          "Wide",
          "Large"
        ],
        "enum": [
          "Small",
          "Medium",
          "Wide",
          "Large"
        ],
        "x-enumType": "DesktopTileSize"
      },
      "Coordinate": {
        "type": "object",
        "description": "Screen coordinate location",
        "required": [
          "Column",
          "Row"
        ],
        "properties": {
          "Column": {
            "type": "integer",
            "description": "Gets or sets Column",
            "format": "int32"
          },
          "Row": {
            "type": "integer",
            "description": "Gets or sets Row",
            "format": "int32"
          }
        }
      },
      "DesktopAppTile": {
        "allOf": [
          {
            "$ref": "#/definitions/ApplicationTile"
          },
          {
            "type": "object",
            "description": "Define Desktop Application Tile Configurations",
            "properties": {
              "DesktopApp": {
                "description": "Identifies the allowed Desktop application\n ",
                "allOf": [
                  {
                    "$ref": "#/definitions/DesktopApplication"
                  }
                ]
              }
            }
          }
        ]
      },
      "DesktopApplication": {
        "type": "object",
        "description": "Class for Desktop Application",
        "properties": {
          "ApplicationName": {
            "type": "string",
            "description": "Gets or sets App Display Name, e.g., \"Microsoft MSPaint\""
          },
          "ApplicationPath": {
            "type": "string",
            "description": "Gets or sets App Full path to the executable File, e.g. \"%windir%\\system32\\mspaint.exe\""
          },
          "ApplicationId": {
            "type": "string",
            "description": "Gets or sets Application Id, Executable File name indicated by KNOWNFOLDERID. e.g., \"{1AC14E77-02E7-4E5D-B744-2EB1AE5198B7}\\mspaint.exe\""
          },
          "ApplicationLinkPath": {
            "type": "string",
            "description": "Gets or sets App shortcut link path, e.g., \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\procexp64.lnk\""
          }
        }
      },
      "WebLinkTile": {
        "allOf": [
          {
            "$ref": "#/definitions/ApplicationTile"
          },
          {
            "type": "object",
            "description": "Define Web Link Tile Configurations",
            "required": [
              "ShowNameOnSquareLogo",
              "ShowNameOnWideLogo"
            ],
            "properties": {
              "TileId": {
                "type": "string",
                "description": "Defines the Tile Id, must uniquely identify your Web site tile.\n            "
              },
              "Arguments": {
                "type": "string",
                "description": "Must contain the URL of your Web site.\n            "
              },
              "DisplayName": {
                "type": "string",
                "description": "Defines the name to display, must specify the text that you want users to see.\n            "
              },
              "SquareLogoUri": {
                "type": "string",
                "description": "Defines the 150x150 square logo to use on the 2x2 tile.\n            "
              },
              "WideLogoUri": {
                "type": "string",
                "description": "Defines the 310x150 wide logo to use on the 4x2 tile.\n            "
              },
              "ShowNameOnSquareLogo": {
                "type": "boolean",
                "description": "Specifies whether the display name is shown on the 2x2 tile.\n            "
              },
              "ShowNameOnWideLogo": {
                "type": "boolean",
                "description": "Specifies whether the display name is shown on the 4x2 tile.\n            "
              },
              "BackgroundColor": {
                "type": "string",
                "description": "Defines the background color, Specifies the color of the tile.\n            "
              },
              "ForegroundText": {
                "description": "Specifies the color of the foreground text.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/ForegroundText"
                  }
                ]
              }
            }
          }
        ]
      },
      "ForegroundText": {
        "type": "string",
        "description": "Enum for ForegroundText",
        "x-enumNames": [
          "light",
          "dark"
        ],
        "enum": [
          "light",
          "dark"
        ],
        "x-enumType": "ForegroundText"
      },
      "FileExplorerNamespaceRestriction": {
        "type": "object",
        "description": "Class for File Explorer Namespace Restriction settings",
        "required": [
          "RestrictFileExplorerNamespace",
          "AllowDownloadsFolder",
          "AllowRemovableDrives"
        ],
        "properties": {
          "RestrictFileExplorerNamespace": {
            "type": "boolean",
            "description": "Gets or sets whether the File Explorer Namespace is restricted"
          },
          "AllowDownloadsFolder": {
            "type": "boolean",
            "description": "Gets or sets App whether Downloads folder is allowed (only valid if RestrictFileExplorerNamespace is false)"
          },
          "AllowRemovableDrives": {
            "type": "boolean",
            "description": "Gets or sets App whether Removable Drives are allowed (only valid if RestrictFileExplorerNamespace is false)"
          }
        }
      },
      "HoloLensAssignedAccessConfigurationSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AssignedAccessConfigurationSection"
          },
          {
            "type": "object",
            "description": "Assigned Access device configuration Windows HoloLens Section"
          }
        ]
      },
      "ModernDesktopApplicationLaunchRestrictionsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ModernDesktopAppLockerSection"
          },
          {
            "type": "object",
            "description": "Represents an Windows Application Launch Restrictions configuration."
          }
        ]
      },
      "ModernDesktopAppLockerSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an Windows App Locker configuration.",
            "x-abstract": true,
            "required": [
              "EnforcementMode"
            ],
            "properties": {
              "GroupGuid": {
                "type": "string",
                "description": "Gets or sets the value of the group guid."
              },
              "EnforcementMode": {
                "description": "Gets or sets the value of the Enforcement Mode.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EnforcementModeType"
                  }
                ]
              },
              "PolicyRules": {
                "type": "array",
                "description": "Gets or sets the collection of Policy Rules in this configuration.",
                "items": {
                  "$ref": "#/definitions/AppLockerRules"
                }
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "ModernDesktopEnterpriseApnSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Enterprise APN device configuration section",
            "required": [
              "IpType",
              "AuthType",
              "IccIdTarget",
              "AlwaysOn",
              "Enabled",
              "Roaming"
            ],
            "properties": {
              "ConnectionName": {
                "type": "string",
                "description": "Gets or sets the name of the connection."
              },
              "ApnName": {
                "type": "string",
                "description": "Gets or sets the name of the apn."
              },
              "IpType": {
                "description": "Gets or sets the type of the ip.",
                "allOf": [
                  {
                    "$ref": "#/definitions/IpTypes"
                  }
                ]
              },
              "AuthType": {
                "description": "Gets or sets the type of the authentication.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EnterpriseApnAuthTypes"
                  }
                ]
              },
              "Username": {
                "type": "string",
                "description": "Gets or sets the username."
              },
              "Password": {
                "type": "string",
                "description": "Gets or sets the password."
              },
              "IccIdTarget": {
                "description": "Gets or sets the icc identifier target.",
                "allOf": [
                  {
                    "$ref": "#/definitions/IccIdTargetTypes"
                  }
                ]
              },
              "AlwaysOn": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [always on]."
              },
              "Enabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether this EnterpriseApnSection is enabled."
              },
              "Roaming": {
                "description": "Gets or sets the roaming.",
                "allOf": [
                  {
                    "$ref": "#/definitions/RoamingTypes"
                  }
                ]
              },
              "Proxies": {
                "type": "array",
                "description": "Gets or sets the proxies.",
                "items": {
                  "$ref": "#/definitions/CellularProxyEntry"
                }
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "IpTypes": {
        "type": "string",
        "description": "Defines Internet Protocol Types",
        "x-enumNames": [
          "InternetProtocolv4",
          "InternetProtocolv6",
          "InternetProtocolv4V6",
          "InternetProtocolv4V6Lat"
        ],
        "enum": [
          "InternetProtocolv4",
          "InternetProtocolv6",
          "InternetProtocolv4V6",
          "InternetProtocolv4V6Lat"
        ],
        "x-enumType": "IpTypes"
      },
      "EnterpriseApnAuthTypes": {
        "type": "string",
        "description": "Enterprise Apn Authentication Types",
        "x-enumNames": [
          "None",
          "Auto",
          "Pap",
          "Chap",
          "MsChapv2"
        ],
        "enum": [
          "None",
          "Auto",
          "Pap",
          "Chap",
          "MsChapv2"
        ],
        "x-enumType": "EnterpriseApnAuthTypes"
      },
      "IccIdTargetTypes": {
        "type": "string",
        "description": "Defines Icc ID Target Types",
        "x-enumNames": [
          "Default",
          "Iccid1",
          "Iccid2"
        ],
        "enum": [
          "Default",
          "Iccid1",
          "Iccid2"
        ],
        "x-enumType": "IccIdTargetTypes"
      },
      "RoamingTypes": {
        "type": "string",
        "description": "Defines Roaming Types ",
        "x-enumNames": [
          "Disallowed",
          "Allowed",
          "DomesticRoaming",
          "UseOnlyForDomesticRoaming",
          "UseOnlyForNonDomesticRoaming",
          "UseOnlyForRoaming"
        ],
        "enum": [
          "Disallowed",
          "Allowed",
          "DomesticRoaming",
          "UseOnlyForDomesticRoaming",
          "UseOnlyForNonDomesticRoaming",
          "UseOnlyForRoaming"
        ],
        "x-enumType": "RoamingTypes"
      },
      "CellularProxyEntry": {
        "type": "object",
        "description": "Enterprise APN cellular proxy entry",
        "required": [
          "BypassLocal",
          "Enable",
          "Port",
          "ProxyType"
        ],
        "properties": {
          "BypassLocal": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [bypass local]."
          },
          "Enable": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this CellularProxyEntry is enable."
          },
          "Exception": {
            "type": "string",
            "description": "Gets or sets the exception."
          },
          "Username": {
            "type": "string",
            "description": "Gets or sets the username."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password."
          },
          "Port": {
            "type": "integer",
            "description": "Gets or sets the port.",
            "format": "int32"
          },
          "Server": {
            "type": "string",
            "description": "Gets or sets the server."
          },
          "ProxyType": {
            "description": "Gets or sets the type of the proxy.",
            "allOf": [
              {
                "$ref": "#/definitions/ProxyTypes"
              }
            ],
            "x-enumType": "ProxyTypes"
          }
        }
      },
      "ProxyTypes": {
        "type": "string",
        "description": "Defines Proxy Types ",
        "x-enumNames": [
          "NullProxy",
          "HttpProxy",
          "WapProxy",
          "Socks4Proxy",
          "Socks5Proxy"
        ],
        "enum": [
          "NullProxy",
          "HttpProxy",
          "WapProxy",
          "Socks4Proxy",
          "Socks5Proxy"
        ],
        "x-enumType": "ProxyTypes"
      },
      "WindowsCEAppRunControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AppRunControlSection"
          },
          {
            "type": "object",
            "description": "Stores the configuration settings for device application run control."
          }
        ]
      },
      "AppRunControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Stores the configuration settings for device application run control.",
            "required": [
              "AppControlMode",
              "NotifyUser",
              "NotifyServer",
              "Enabled",
              "Learn"
            ],
            "properties": {
              "AppControlMode": {
                "description": "Gets or sets a mode of application control run policy",
                "allOf": [
                  {
                    "$ref": "#/definitions/AppRunControlPolicyMode"
                  }
                ]
              },
              "NotifyUser": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to notify user when application terminated"
              },
              "NotifyServer": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to notify server when application terminated"
              },
              "Enabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether is disabled."
              },
              "Learn": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether is on learning"
              },
              "Profiles": {
                "type": "array",
                "description": "Gets or sets collection of application control profiles",
                "items": {
                  "$ref": "#/definitions/AppRunControlProfile"
                }
              }
            }
          }
        ]
      },
      "AppRunControlPolicyMode": {
        "type": "string",
        "description": "Application Run Control Policy Mode",
        "x-enumNames": [
          "Black",
          "White",
          "Unknown"
        ],
        "enum": [
          "Black",
          "White",
          "Unknown"
        ],
        "x-enumType": "AppRunControlPolicyMode"
      },
      "AppRunControlProfile": {
        "type": "object",
        "description": "Data entity describing a single lockdown menue item.",
        "required": [
          "Id",
          "ProfileType",
          "Platform"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets id of application run profile (it is file the id).",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets profile name"
          },
          "LastModified": {
            "type": "string",
            "description": "Gets or sets Last modified time",
            "format": "date-time"
          },
          "ProfileType": {
            "description": "Gets or sets Type of the profile",
            "allOf": [
              {
                "$ref": "#/definitions/AppRunControlListType"
              }
            ],
            "x-enumType": "AppRunControlListType"
          },
          "Platform": {
            "description": "Gets or sets Type of the platform",
            "allOf": [
              {
                "$ref": "#/definitions/AppRunControlListPlatform"
              }
            ],
            "x-enumType": "AppRunControlListPlatform"
          }
        }
      },
      "AppRunControlListType": {
        "type": "string",
        "description": "Application Run Control Policy List Type",
        "x-enumNames": [
          "Unknown",
          "Black",
          "White",
          "AndroidBlack",
          "AndroidWhite",
          "IosBlack",
          "IosWhite",
          "LinuxBlack",
          "LinuxWhite"
        ],
        "enum": [
          "Unknown",
          "Black",
          "White",
          "AndroidBlack",
          "AndroidWhite",
          "IosBlack",
          "IosWhite",
          "LinuxBlack",
          "LinuxWhite"
        ],
        "x-enumType": "AppRunControlListType"
      },
      "AppRunControlListPlatform": {
        "type": "string",
        "description": "Application Run Control Policy List Platform",
        "x-enumNames": [
          "All",
          "PocketPC",
          "Smartphone",
          "WinCE",
          "iOS",
          "Linux"
        ],
        "enum": [
          "All",
          "PocketPC",
          "Smartphone",
          "WinCE",
          "iOS",
          "Linux"
        ],
        "x-enumType": "AppRunControlListPlatform"
      },
      "LinuxAppRunControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AppRunControlSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable application restrictions for Linux devices."
          }
        ]
      },
      "IOSAppWhiteBlackListSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AppRunControlSection"
          },
          {
            "type": "object",
            "description": "Represents a configuration section for white and black listed applications",
            "required": [
              "ShouldWhitelistWebClips",
              "ShouldBlacklistWebClips"
            ],
            "properties": {
              "ShouldWhitelistWebClips": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether web clips should be whitelisted"
              },
              "ShouldBlacklistWebClips": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether web clips should be blacklisted"
              }
            }
          }
        ]
      },
      "AndroidClassicAppRunControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AppRunControlSection"
          },
          {
            "type": "object",
            "description": "Stores the configuration settings for device application run control."
          }
        ]
      },
      "AndroidWorkProfileAppRunControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicAppRunControlSection"
          },
          {
            "type": "object",
            "description": "Stores the configuration settings for device application run control."
          }
        ]
      },
      "WindowsCEAuthenticationSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Stores the configuration settings for Authorization Policy.",
            "required": [
              "UseActiveDirectory",
              "AllowMultipleADUsers",
              "IntegrateWMAuthentication",
              "ShowLockScreen",
              "ExpireWarning",
              "ForceExpire",
              "LdapConnectionId",
              "IdleTimeout",
              "UserAuthenticationMode"
            ],
            "properties": {
              "UserPassword": {
                "type": "string",
                "description": "Gets or sets the user's password."
              },
              "AdminPassword": {
                "type": "string",
                "description": "Gets or sets the administrator password."
              },
              "UseActiveDirectory": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use\nActive Directory authentication (true) or standard authentication\n(false)."
              },
              "AllowMultipleADUsers": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should allow\nmultiple Active Directory users to use it (true) or bind to the\nfirst user who logs on (false)."
              },
              "PasswordPolicy": {
                "description": "Gets or sets the device-side password policy.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WindowsCEPasswordPolicy"
                  }
                ]
              },
              "IntegrateWMAuthentication": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether or not use Window Mobile authentication subsystem."
              },
              "ShowLockScreen": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should\nshow Notification in the lock screen."
              },
              "ExpireWarning": {
                "type": "integer",
                "description": "Gets or sets the number of days before password expiry at which the\ndevice will warn the user of the pending expiry.",
                "format": "int32"
              },
              "ForceExpire": {
                "type": "integer",
                "description": "Gets or sets the number of days before password expiry at which the\ndevice will force the user to change his password.",
                "format": "int32"
              },
              "Domain": {
                "type": "string",
                "description": "Gets or sets the domain name for Active Directory authentication.\nIf null, the user will have to enter the name."
              },
              "LdapConnectionId": {
                "type": "integer",
                "description": "Gets or sets LdapConnectionId.",
                "format": "int32"
              },
              "IdleTimeout": {
                "type": "string",
                "description": "Gets or sets the device idle time-out.",
                "format": "time-span"
              },
              "AdminEventActions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should\ntake on successful or unsuccessful administrator log on attempts.",
                "items": {
                  "$ref": "#/definitions/DeviceEventAction"
                }
              },
              "UserEventActions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should\ntake on successful or unsuccessful user log on attempts.",
                "items": {
                  "$ref": "#/definitions/DeviceEventAction"
                }
              },
              "LogOnBanner": {
                "type": "string",
                "description": "Gets or sets file name for the banner on the log on screen."
              },
              "NotificationBanner": {
                "type": "string",
                "description": "Gets or sets the file name for the banner on the notification screen."
              },
              "UserAuthenticationMode": {
                "description": "Gets or sets the User Authentication Mode",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserAuthenticationMode"
                  }
                ]
              }
            }
          }
        ]
      },
      "WindowsCEPasswordPolicy": {
        "type": "object",
        "description": "Stores the configuration settings for Authorization Policy.",
        "required": [
          "EnforceComplexity",
          "MinimumLength",
          "AllowPasswordChange",
          "RequireNumber",
          "RequireUppercase",
          "RequireLowercase",
          "RequireSpecial",
          "AllowChangePasswordByQuestion"
        ],
        "properties": {
          "EnforceComplexity": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device should enforce\npassword complexity requirements."
          },
          "MinimumLength": {
            "type": "integer",
            "description": "Gets or sets the minimum length of the device password.",
            "format": "int32"
          },
          "AllowPasswordChange": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device should allow\nthe user to change his password."
          },
          "RequireNumber": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device should\nrequire a number in the user password."
          },
          "RequireUppercase": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device should\nrequire an uppercase character in the user password."
          },
          "RequireLowercase": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device should\nrequire a lowercase character in the user password."
          },
          "RequireSpecial": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device should require\na special character in the user password."
          },
          "AllowChangePasswordByQuestion": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device should allow\nuser change password on device by security question."
          }
        }
      },
      "UserAuthenticationMode": {
        "type": "string",
        "description": "User Authentication Modes",
        "x-enumNames": [
          "NoUserAuthentication",
          "StandardUserAuthentication",
          "ActiveDirectoryUserAuthentication"
        ],
        "enum": [
          "NoUserAuthentication",
          "StandardUserAuthentication",
          "ActiveDirectoryUserAuthentication"
        ],
        "x-enumType": "UserAuthenticationMode"
      },
      "WindowsCEExchangeActiveSyncSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Exchange ActiveSync configuration for an iOS device.",
            "required": [
              "UserNameFormat",
              "SavePassword",
              "AllowSSLOption",
              "UseSSL",
              "EnableEmail",
              "EmailSyncThePast",
              "EmailSize",
              "HTMLEmailSize",
              "FileAttachmentSize",
              "EnableCalendar",
              "CalendarSyncThePast",
              "EnableContact",
              "EnableTask",
              "NoteSize",
              "PeakStartTime",
              "PeakEndTime",
              "SyncDuringPeakTime",
              "SyncOffPeakTime",
              "PeakSunday",
              "PeakMonday",
              "PeakTuesday",
              "PeakWednesday",
              "PeakThursday",
              "PeakFriday",
              "PeakSaturday",
              "SyncRoaming",
              "SendImmediately",
              "DelaySend"
            ],
            "properties": {
              "Domain": {
                "type": "string",
                "description": "Gets or sets the user's domain.  If null, the device will prompt\nfor this information."
              },
              "Server": {
                "type": "string",
                "description": "Gets or sets the host name of the Exchange server."
              },
              "UserNameFormat": {
                "description": "Gets or sets the User Name Format used by connection.",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserNameFormat"
                  }
                ]
              },
              "User": {
                "type": "string",
                "description": "Gets or sets the user's name.  If null, the device will prompt\nfor this information."
              },
              "SavePassword": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should save password"
              },
              "AllowSSLOption": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should allow SSL option"
              },
              "UseSSL": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use SSL\nwhen connecting to the Exchange server."
              },
              "EnableEmail": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device email sync enabled"
              },
              "EmailSyncThePast": {
                "type": "integer",
                "description": "Gets or sets the number of days worth of past e-mails the device\nshould retrieve.  If null, the device will retrieve all available\ne-mails.",
                "format": "int32"
              },
              "EmailSize": {
                "type": "integer",
                "description": "Gets or sets the size of e-mails",
                "format": "int64"
              },
              "HTMLEmailSize": {
                "type": "integer",
                "description": "Gets or sets the size of HTML e-mails",
                "format": "int64"
              },
              "FileAttachmentSize": {
                "type": "integer",
                "description": "Gets or sets the size of File Attachment in e-mails",
                "format": "int64"
              },
              "EnableCalendar": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device Calendar sync enabled"
              },
              "CalendarSyncThePast": {
                "type": "integer",
                "description": "Gets or sets the number of days worth of past calendar the device\nshould retrieve.  If null, the device will retrieve all available\ncalendar.",
                "format": "int32"
              },
              "EnableContact": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device Contacts sync enabled"
              },
              "EnableTask": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device Tasks sync enabled"
              },
              "NoteSize": {
                "type": "integer",
                "description": "Gets or sets NoteSize",
                "format": "int64"
              },
              "PeakStartTime": {
                "type": "integer",
                "description": "Gets or sets PeakStartTime\nhigh bytes (first 16 bits) is hours; low bytes (last 16 bits) is minutes\nFor example 08:30 will be 8 [shift right] 16+30 = 524318",
                "format": "int64"
              },
              "PeakEndTime": {
                "type": "integer",
                "description": "Gets or sets endStartTime\nhigh bytes (first 16 bits) is hours; low bytes (last 16 bits) is minutes\nFor example 08:30 will be 8 [shift right] 16+30 = 524318",
                "format": "int64"
              },
              "SyncDuringPeakTime": {
                "type": "integer",
                "description": "Gets or sets SyncDuringPeakTime (in minutes)\n\n 0 - Manually\n-1 - As Arrived",
                "format": "int32"
              },
              "SyncOffPeakTime": {
                "type": "integer",
                "description": "Gets or sets SyncDuringPeakTime (in minutes)\n\n 0 - Manually\n-1 - As Arrived",
                "format": "int32"
              },
              "PeakSunday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Sunday."
              },
              "PeakMonday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Monday"
              },
              "PeakTuesday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Tuesday"
              },
              "PeakWednesday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Wednesday"
              },
              "PeakThursday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Thursday"
              },
              "PeakFriday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Friday"
              },
              "PeakSaturday": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should use peak time setting on Saturday"
              },
              "SyncRoaming": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should allow sync when data Roaming"
              },
              "SendImmediately": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device should send mail items immediately"
              },
              "DelaySend": {
                "type": "integer",
                "description": "Gets or sets delay mail send (in Second)",
                "format": "int64"
              }
            }
          }
        ]
      },
      "WindowsCEFeatureControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Stores the configuration settings for device schedule.",
            "required": [
              "IsDisabled",
              "DisableActiveSync",
              "DisablePhone",
              "DisableCamera",
              "DisableSDCard",
              "DisableBluetooth",
              "DisableBeam"
            ],
            "properties": {
              "IsDisabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether ???"
              },
              "DisableActiveSync": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether ActiveSync is disabled."
              },
              "DisablePhone": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the phone is disabled."
              },
              "DisableCamera": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the camera is disabled."
              },
              "DisableSDCard": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the SD card is disabled."
              },
              "DisableBluetooth": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the Blue Tooth radio is disabled."
              },
              "DisableBeam": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the infrared beam is disabled."
              },
              "HardwareButtonMap": {
                "type": "string",
                "description": "Gets or sets a string containing configuration information for the\ndevice's hardware buttons."
              }
            }
          }
        ]
      },
      "WindowsCEFileEncryptionSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Stores a collection of files/folders to be encrypted",
            "properties": {
              "FileList": {
                "type": "array",
                "description": "Gets or sets the list of encrypted files/folders",
                "items": {
                  "$ref": "#/definitions/FileEncryptionProfile"
                }
              }
            }
          }
        ]
      },
      "FileEncryptionProfile": {
        "type": "object",
        "description": "Data entity describing a single encrypted file/folder item.",
        "required": [
          "Subfolders",
          "Exclude"
        ],
        "properties": {
          "Path": {
            "type": "string",
            "description": "Gets or sets path of the file/folder."
          },
          "Subfolders": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether Sub-Folders should be encrypted recursively"
          },
          "Exclude": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether specified file/folder should be excluded from encryption"
          }
        }
      },
      "WindowsCEWirelessSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Wireless configuration section",
            "properties": {
              "Connection": {
                "description": "Gets or sets the connections.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WiFiProfile"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "WiFiProfile": {
        "type": "object",
        "description": "WiFi profile.",
        "required": [
          "WaitForConnection",
          "EnableRadio",
          "WiFiProfileType"
        ],
        "properties": {
          "WiFiProfileName": {
            "type": "string",
            "description": "Gets or sets the WiFi profile name."
          },
          "WaitForConnection": {
            "type": "integer",
            "description": "Gets or sets the flag for wait connection.",
            "format": "int32"
          },
          "EnableRadio": {
            "type": "integer",
            "description": "Gets or sets the flag for enabling radio.",
            "format": "int32"
          },
          "WiFiProfileType": {
            "description": "Gets or sets the connections.",
            "allOf": [
              {
                "$ref": "#/definitions/WiFiProfileType"
              }
            ],
            "x-enumType": "WiFiProfileType"
          }
        }
      },
      "WiFiProfileType": {
        "type": "string",
        "description": "The WiFiProfileType",
        "x-enumNames": [
          "ZeroConfig",
          "FusionOptions",
          "Fusion",
          "Summit"
        ],
        "enum": [
          "ZeroConfig",
          "FusionOptions",
          "Fusion",
          "Summit"
        ],
        "x-enumType": "WiFiProfileType"
      },
      "FusionOptions": {
        "allOf": [
          {
            "$ref": "#/definitions/WiFiProfile"
          },
          {
            "type": "object",
            "description": "Fusion Options.",
            "required": [
              "Enable80211D",
              "Enable24GhzBand",
              "Enable5GhzBand",
              "EnableAPNetworks",
              "EnableAdHoc",
              "EnableProfileRoaming",
              "EnableIpV4",
              "EnableAutoTimeConfig",
              "EnableProvisioning",
              "EnableRefreshing",
              "EnableIpV6",
              "WlanManagementSelected"
            ],
            "properties": {
              "CountryCode": {
                "type": "string",
                "description": "Gets or sets the Country Code of the profile of Fusion Supplicant.\n#define FAPI_ANGUILLA                                TEXT(\"AI\")\n#define FAPI_ANTIGUA_AND_BARBUDA                    TEXT(\"AG\")\n#define FAPI_ARGENTINA                                TEXT(\"AR\")\n#define FAPI_ARUBA                                    TEXT(\"AW\")\n#define FAPI_AUSTRALIA                                TEXT(\"AU\")\n#define FAPI_AUSTRIA                                TEXT(\"AT\")\n#define FAPI_BAHAMAS                                TEXT(\"BS\")\n#define FAPI_BAHRAIN                                TEXT(\"BH\")\n#define FAPI_BARBADOS                                TEXT(\"BB\")\n#define FAPI_BELARUS                                TEXT(\"BY\")\n#define FAPI_BELGIUM                                TEXT(\"BE\")\n#define FAPI_BERMUDA                                TEXT(\"BM\")\n#define FAPI_BOLIVIA                                TEXT(\"BO\")\n#define FAPI_BOSNIA_AND_HERZEGOVINA                    TEXT(\"BA\")\n#define FAPI_BRAZIL                                    TEXT(\"BR\")\n#define FAPI_BULGARIA                                TEXT(\"BG\")\n#define FAPI_CANADA                                    TEXT(\"CA\")\n#define FAPI_CAYMAN_ISLANDS                            TEXT(\"KY\")\n#define FAPI_CHILE                                    TEXT(\"CL\")\n#define FAPI_CHINA                                    TEXT(\"CN\")\n#define FAPI_CHRISTMAS_ISLAND                        TEXT(\"CX\")\n#define FAPI_COLOMBIA                                TEXT(\"CO\")\n#define FAPI_COSTA_RICA                                TEXT(\"CR\")\n#define FAPI_CROATIA                                TEXT(\"HR\")\n#define FAPI_CYPRUS                                    TEXT(\"CY\")\n#define FAPI_CZECH_REPUBLIC                            TEXT(\"CZ\")\n#define FAPI_DENMARK                                TEXT(\"DK\")\n#define FAPI_DOMINICAN_REPUBLIC                        TEXT(\"DO\")\n#define FAPI_ECUADOR                                TEXT(\"EC\")\n#define FAPI_EGYPT                                    TEXT(\"EG\")\n#define FAPI_EL_SALVADOR                            TEXT(\"SV\")\n#define FAPI_ESTONIA                                TEXT(\"EE\")\n#define FAPI_FALKLAND_ISLANDS_MALVINAS                TEXT(\"FK\")\n#define FAPI_FINLAND                                TEXT(\"FI\")\n#define FAPI_FRANCE                                    TEXT(\"FR\")\n#define FAPI_FRENCH_GUIANA                            TEXT(\"GF\")\n#define FAPI_GERMANY                                TEXT(\"DE\")\n#define FAPI_GREECE                                    TEXT(\"GR\")\n#define FAPI_GUADELOUPE                                TEXT(\"GP\")\n#define FAPI_GUAM                                    TEXT(\"GU\")\n#define FAPI_GUATEMALA                                TEXT(\"GT\")\n#define FAPI_GUYANA                                    TEXT(\"GY\")\n#define FAPI_HAITI                                    TEXT(\"HT\")\n#define FAPI_HONDURAS                                TEXT(\"HN\")\n#define FAPI_HONG_KONG                                TEXT(\"HK\")\n#define FAPI_HUNGARY                                TEXT(\"HU\")\n#define FAPI_ICELAND                                TEXT(\"IS\")\n#define FAPI_INDIA                                    TEXT(\"IN\")\n#define FAPI_INDONESIA                                TEXT(\"ID\")\n#define FAPI_IRELAND                                TEXT(\"IE\")\n#define FAPI_ISRAEL                                    TEXT(\"IL\")\n#define FAPI_ITALY                                    TEXT(\"IT\")\n#define FAPI_JAMAICA                                TEXT(\"JM\")\n#define FAPI_JAPAN                                    TEXT(\"JP\")\n#define FAPI_JORDAN                                    TEXT(\"JO\")\n#define FAPI_KOREA_REPUBLIC_OF                        TEXT(\"KR\")\n#define FAPI_LATVIA                                    TEXT(\"LV\")\n#define FAPI_LEBANON                                TEXT(\"LB\")\n#define FAPI_LIECHTENSTEIN                            TEXT(\"LI\")\n#define FAPI_LITHUANIA                                TEXT(\"LT\")\n#define FAPI_LUXEMBOURG                                TEXT(\"LU\")\n#define FAPI_MACEDONIA_THE_FORMER_YUGOSLAV_REPUBLIC_OF    TEXT(\"MK\")\n#define FAPI_MALAYSIA                                TEXT(\"MY\")\n#define FAPI_MALTA                                    TEXT(\"MT\")\n#define FAPI_MARTINIQUE                                TEXT(\"MQ\")\n#define FAPI_MEXICO                                    TEXT(\"MX\")\n#define FAPI_MONTENEGRO                                TEXT(\"ME\")\n#define FAPI_MOROCCO                                TEXT(\"MA\")\n#define FAPI_NETHERLANDS                            TEXT(\"NL\")\n#define FAPI_NETHERLANDS_ANTILLES                    TEXT(\"AN\")\n#define FAPI_NEW_ZEALAND                            TEXT(\"NZ\")\n#define FAPI_NICARAGUA                                TEXT(\"NI\")\n#define FAPI_NIUE_ISLAND                            TEXT(\"NU\")\n#define FAPI_NORFOLK_ISLAND                            TEXT(\"NF\")\n#define FAPI_NORTHERN_MARIANA_ISLANDS                TEXT(\"MP\")\n#define FAPI_NORWAY                                    TEXT(\"NO\")\n#define FAPI_OMAN                                    TEXT(\"OM\")\n#define FAPI_PAKISTAN                                TEXT(\"PK\")\n#define FAPI_PANAMA                                    TEXT(\"PA\")\n#define FAPI_PARAGUAY                                TEXT(\"PY\")\n#define FAPI_PERU                                    TEXT(\"PE\")\n#define FAPI_PHILIPPINES                            TEXT(\"PH\")\n#define FAPI_POLAND                                    TEXT(\"PL\")\n#define FAPI_PORTUGAL                                TEXT(\"PT\")\n#define FAPI_PUERTO_RICO                            TEXT(\"PR\")\n#define FAPI_QATAR                                    TEXT(\"QA\")\n#define FAPI_ROMANIA                                TEXT(\"RO\")\n#define FAPI_RUSSIAN_FEDERATION                        TEXT(\"RU\")\n#define FAPI_SAUDI_ARABIA                            TEXT(\"SA\")\n#define FAPI_SERBIA                                    TEXT(\"RS\")\n#define FAPI_SINGAPORE                                TEXT(\"SG\")\n#define FAPI_SLOVAKIA                                TEXT(\"SK\")\n#define FAPI_SLOVENIA                                TEXT(\"SI\")\n#define FAPI_SOUTH_AFRICA                            TEXT(\"ZA\")\n#define FAPI_SPAIN                                    TEXT(\"ES\")\n#define FAPI_SRI_LANKA                                TEXT(\"LK\")\n#define FAPI_SWEDEN                                    TEXT(\"SE\")\n#define FAPI_SWITZERLAND                            TEXT(\"CH\")\n#define FAPI_TAIWAN_PROVINCE_OF_CHINA                TEXT(\"TW\")\n#define FAPI_THAILAND                                TEXT(\"TH\")\n#define FAPI_TRINIDAD_AND_TOBAGO                    TEXT(\"TT\")\n#define FAPI_TUNISIA                                TEXT(\"TN\")\n#define FAPI_TURKEY                                    TEXT(\"TR\")\n#define FAPI_UKRAINE                                TEXT(\"UA\")\n#define FAPI_UNITED_ARAB_EMIRATES                    TEXT(\"AE\")\n#define FAPI_UNITED_KINGDOM                            TEXT(\"GB\")\n#define FAPI_UNITED_STATES                            TEXT(\"US\")\n#define FAPI_URUGUAY                                TEXT(\"UY\")\n#define FAPI_VENEZUELA                                TEXT(\"VE\")\n#define FAPI_VIRGIN_ISLANDS_BRITISH                    TEXT(\"VG\")\n#define FAPI_VIRGIN_ISLANDS_US                        TEXT(\"VI\")\n#define FAPI_ALLOW_ANY_COUNTRY                        TEXT(\"  \")"
              },
              "Enable80211D": {
                "type": "integer",
                "description": "Gets or sets the 802.11d option.",
                "format": "int32"
              },
              "Enable24GhzBand": {
                "type": "integer",
                "description": "Gets or sets the 2.4GHz band option.",
                "format": "int32"
              },
              "Enable5GhzBand": {
                "type": "integer",
                "description": "Gets or sets the 5GHz band option.",
                "format": "int32"
              },
              "EnableAPNetworks": {
                "type": "integer",
                "description": "Gets or sets the AP Networks option.",
                "format": "int32"
              },
              "EnableAdHoc": {
                "type": "integer",
                "description": "Gets or sets the Ad Hoc option.",
                "format": "int32"
              },
              "EnableProfileRoaming": {
                "type": "integer",
                "description": "Gets or sets the profile roaming option.",
                "format": "int32"
              },
              "EnableIpV4": {
                "type": "integer",
                "description": "Gets or sets the IP v4 option.",
                "format": "int32"
              },
              "EnableAutoTimeConfig": {
                "type": "integer",
                "description": "Gets or sets the Auto Time Configuration option.",
                "format": "int32"
              },
              "EnableProvisioning": {
                "type": "integer",
                "description": "Gets or sets the Provisioning option.",
                "format": "int32"
              },
              "EnableRefreshing": {
                "type": "integer",
                "description": "Gets or sets the Refreshing option.",
                "format": "int32"
              },
              "EnableIpV6": {
                "type": "integer",
                "description": "Gets or sets the IP v6 option.",
                "format": "int32"
              },
              "WlanManagementSelected": {
                "type": "integer",
                "description": "Gets or sets the WLANManagement option. (Windows = 0; Fusion = 1)",
                "format": "int32"
              }
            }
          }
        ]
      },
      "FusionWiFiProfile": {
        "allOf": [
          {
            "$ref": "#/definitions/WiFiProfile"
          },
          {
            "type": "object",
            "description": "Fusion WiFi profile.",
            "required": [
              "Version",
              "ProfileType",
              "DisableExistingProfiles",
              "PowerMode",
              "PowerLevel",
              "AddressingMode",
              "EncryptionType",
              "AllowMixedMode",
              "NetworkType",
              "Channel",
              "SecurityType",
              "CcxAttributes",
              "AuthenticationType",
              "HexPassphrase",
              "TunnelAuth",
              "UserCertificateRetrievalMethod",
              "LogOnTimeCacheOptions",
              "CredentialsCacheInterval",
              "ConnectsTo",
              "PerformanceSettings",
              "DeleteExistingProfiles"
            ],
            "properties": {
              "Version": {
                "type": "integer",
                "description": "Gets or sets the version of Fusion Supplicant.",
                "format": "int32"
              },
              "ProfileType": {
                "type": "integer",
                "description": "Gets or sets the profile type of Fusion Supplicant.",
                "format": "int32"
              },
              "ProfileName": {
                "type": "string",
                "description": "Gets or sets the profile name of Fusion Supplicant."
              },
              "FriendlyName": {
                "type": "string",
                "description": "Gets or sets the friendly name of the profile of Fusion Supplicant."
              },
              "Ssid": {
                "type": "string",
                "description": "Gets or sets the SSID of the profile of Fusion Supplicant."
              },
              "DisableExistingProfiles": {
                "type": "integer",
                "description": "Gets or sets the checkbox for disabling existing profiles of Fusion Supplicant.",
                "format": "int32"
              },
              "CountryCode": {
                "type": "string",
                "description": "Gets or sets the Country Code of the profile of Fusion Supplicant.\n#define FAPI_ANGUILLA                                TEXT(\"AI\")\n#define FAPI_ANTIGUA_AND_BARBUDA                    TEXT(\"AG\")\n#define FAPI_ARGENTINA                                TEXT(\"AR\")\n#define FAPI_ARUBA                                    TEXT(\"AW\")\n#define FAPI_AUSTRALIA                                TEXT(\"AU\")\n#define FAPI_AUSTRIA                                TEXT(\"AT\")\n#define FAPI_BAHAMAS                                TEXT(\"BS\")\n#define FAPI_BAHRAIN                                TEXT(\"BH\")\n#define FAPI_BARBADOS                                TEXT(\"BB\")\n#define FAPI_BELARUS                                TEXT(\"BY\")\n#define FAPI_BELGIUM                                TEXT(\"BE\")\n#define FAPI_BERMUDA                                TEXT(\"BM\")\n#define FAPI_BOLIVIA                                TEXT(\"BO\")\n#define FAPI_BOSNIA_AND_HERZEGOVINA                    TEXT(\"BA\")\n#define FAPI_BRAZIL                                    TEXT(\"BR\")\n#define FAPI_BULGARIA                                TEXT(\"BG\")\n#define FAPI_CANADA                                    TEXT(\"CA\")\n#define FAPI_CAYMAN_ISLANDS                            TEXT(\"KY\")\n#define FAPI_CHILE                                    TEXT(\"CL\")\n#define FAPI_CHINA                                    TEXT(\"CN\")\n#define FAPI_CHRISTMAS_ISLAND                        TEXT(\"CX\")\n#define FAPI_COLOMBIA                                TEXT(\"CO\")\n#define FAPI_COSTA_RICA                                TEXT(\"CR\")\n#define FAPI_CROATIA                                TEXT(\"HR\")\n#define FAPI_CYPRUS                                    TEXT(\"CY\")\n#define FAPI_CZECH_REPUBLIC                            TEXT(\"CZ\")\n#define FAPI_DENMARK                                TEXT(\"DK\")\n#define FAPI_DOMINICAN_REPUBLIC                        TEXT(\"DO\")\n#define FAPI_ECUADOR                                TEXT(\"EC\")\n#define FAPI_EGYPT                                    TEXT(\"EG\")\n#define FAPI_EL_SALVADOR                            TEXT(\"SV\")\n#define FAPI_ESTONIA                                TEXT(\"EE\")\n#define FAPI_FALKLAND_ISLANDS_MALVINAS                TEXT(\"FK\")\n#define FAPI_FINLAND                                TEXT(\"FI\")\n#define FAPI_FRANCE                                    TEXT(\"FR\")\n#define FAPI_FRENCH_GUIANA                            TEXT(\"GF\")\n#define FAPI_GERMANY                                TEXT(\"DE\")\n#define FAPI_GREECE                                    TEXT(\"GR\")\n#define FAPI_GUADELOUPE                                TEXT(\"GP\")\n#define FAPI_GUAM                                    TEXT(\"GU\")\n#define FAPI_GUATEMALA                                TEXT(\"GT\")\n#define FAPI_GUYANA                                    TEXT(\"GY\")\n#define FAPI_HAITI                                    TEXT(\"HT\")\n#define FAPI_HONDURAS                                TEXT(\"HN\")\n#define FAPI_HONG_KONG                                TEXT(\"HK\")\n#define FAPI_HUNGARY                                TEXT(\"HU\")\n#define FAPI_ICELAND                                TEXT(\"IS\")\n#define FAPI_INDIA                                    TEXT(\"IN\")\n#define FAPI_INDONESIA                                TEXT(\"ID\")\n#define FAPI_IRELAND                                TEXT(\"IE\")\n#define FAPI_ISRAEL                                    TEXT(\"IL\")\n#define FAPI_ITALY                                    TEXT(\"IT\")\n#define FAPI_JAMAICA                                TEXT(\"JM\")\n#define FAPI_JAPAN                                    TEXT(\"JP\")\n#define FAPI_JORDAN                                    TEXT(\"JO\")\n#define FAPI_KOREA_REPUBLIC_OF                        TEXT(\"KR\")\n#define FAPI_LATVIA                                    TEXT(\"LV\")\n#define FAPI_LEBANON                                TEXT(\"LB\")\n#define FAPI_LIECHTENSTEIN                            TEXT(\"LI\")\n#define FAPI_LITHUANIA                                TEXT(\"LT\")\n#define FAPI_LUXEMBOURG                                TEXT(\"LU\")\n#define FAPI_MACEDONIA_THE_FORMER_YUGOSLAV_REPUBLIC_OF    TEXT(\"MK\")\n#define FAPI_MALAYSIA                                TEXT(\"MY\")\n#define FAPI_MALTA                                    TEXT(\"MT\")\n#define FAPI_MARTINIQUE                                TEXT(\"MQ\")\n#define FAPI_MEXICO                                    TEXT(\"MX\")\n#define FAPI_MONTENEGRO                                TEXT(\"ME\")\n#define FAPI_MOROCCO                                TEXT(\"MA\")\n#define FAPI_NETHERLANDS                            TEXT(\"NL\")\n#define FAPI_NETHERLANDS_ANTILLES                    TEXT(\"AN\")\n#define FAPI_NEW_ZEALAND                            TEXT(\"NZ\")\n#define FAPI_NICARAGUA                                TEXT(\"NI\")\n#define FAPI_NIUE_ISLAND                            TEXT(\"NU\")\n#define FAPI_NORFOLK_ISLAND                            TEXT(\"NF\")\n#define FAPI_NORTHERN_MARIANA_ISLANDS                TEXT(\"MP\")\n#define FAPI_NORWAY                                    TEXT(\"NO\")\n#define FAPI_OMAN                                    TEXT(\"OM\")\n#define FAPI_PAKISTAN                                TEXT(\"PK\")\n#define FAPI_PANAMA                                    TEXT(\"PA\")\n#define FAPI_PARAGUAY                                TEXT(\"PY\")\n#define FAPI_PERU                                    TEXT(\"PE\")\n#define FAPI_PHILIPPINES                            TEXT(\"PH\")\n#define FAPI_POLAND                                    TEXT(\"PL\")\n#define FAPI_PORTUGAL                                TEXT(\"PT\")\n#define FAPI_PUERTO_RICO                            TEXT(\"PR\")\n#define FAPI_QATAR                                    TEXT(\"QA\")\n#define FAPI_ROMANIA                                TEXT(\"RO\")\n#define FAPI_RUSSIAN_FEDERATION                        TEXT(\"RU\")\n#define FAPI_SAUDI_ARABIA                            TEXT(\"SA\")\n#define FAPI_SERBIA                                    TEXT(\"RS\")\n#define FAPI_SINGAPORE                                TEXT(\"SG\")\n#define FAPI_SLOVAKIA                                TEXT(\"SK\")\n#define FAPI_SLOVENIA                                TEXT(\"SI\")\n#define FAPI_SOUTH_AFRICA                            TEXT(\"ZA\")\n#define FAPI_SPAIN                                    TEXT(\"ES\")\n#define FAPI_SRI_LANKA                                TEXT(\"LK\")\n#define FAPI_SWEDEN                                    TEXT(\"SE\")\n#define FAPI_SWITZERLAND                            TEXT(\"CH\")\n#define FAPI_TAIWAN_PROVINCE_OF_CHINA                TEXT(\"TW\")\n#define FAPI_THAILAND                                TEXT(\"TH\")\n#define FAPI_TRINIDAD_AND_TOBAGO                    TEXT(\"TT\")\n#define FAPI_TUNISIA                                TEXT(\"TN\")\n#define FAPI_TURKEY                                    TEXT(\"TR\")\n#define FAPI_UKRAINE                                TEXT(\"UA\")\n#define FAPI_UNITED_ARAB_EMIRATES                    TEXT(\"AE\")\n#define FAPI_UNITED_KINGDOM                            TEXT(\"GB\")\n#define FAPI_UNITED_STATES                            TEXT(\"US\")\n#define FAPI_URUGUAY                                TEXT(\"UY\")\n#define FAPI_VENEZUELA                                TEXT(\"VE\")\n#define FAPI_VIRGIN_ISLANDS_BRITISH                    TEXT(\"VG\")\n#define FAPI_VIRGIN_ISLANDS_US                        TEXT(\"VI\")\n#define FAPI_ALLOW_ANY_COUNTRY                        TEXT(\"  \")"
              },
              "PowerMode": {
                "description": "Gets or sets the power mode of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WlanPowerMode"
                  }
                ]
              },
              "PowerLevel": {
                "description": "Gets or sets the transmit power level of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TransmitPowerLevel"
                  }
                ]
              },
              "AddressingMode": {
                "description": "Gets or sets the network addressing mode of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/NetworkAddressingMode"
                  }
                ]
              },
              "IpSettings": {
                "description": "Gets or sets the IPv4 settings of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Ipv4Settings"
                  }
                ]
              },
              "EncryptionType": {
                "description": "Gets or sets the encryption type of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/FusionUIEncryptionType"
                  }
                ]
              },
              "AllowMixedMode": {
                "description": "Gets or sets the mixed mode of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WlanAllowMixedMode"
                  }
                ]
              },
              "WepKey": {
                "description": "Gets or sets the wep 40/104 hex key of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WepData"
                  }
                ]
              },
              "Psk": {
                "type": "string",
                "description": "Gets or sets the 40/104 passphrase or Tkip/Aes hex key/passphrase of the profile of Fusion Supplicant."
              },
              "NetworkType": {
                "description": "Gets or sets the network type of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/FapiWlanNetworkType"
                  }
                ]
              },
              "Channel": {
                "type": "integer",
                "description": "Gets or sets the channel of the profile of Fusion Supplicant.",
                "format": "int32"
              },
              "SecurityType": {
                "description": "Gets or sets the tkip hex key of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/FapiWlanSecurityType"
                  }
                ]
              },
              "CcxAttributes": {
                "type": "integer",
                "description": "Gets or sets the ccx (CCKM) attributes of the profile of Fusion Supplicant.",
                "format": "int32"
              },
              "AuthenticationType": {
                "description": "Gets or sets the authentication type of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/FusionUIAuthType"
                  }
                ]
              },
              "HexPassphrase": {
                "type": "integer",
                "description": "Gets or sets the Hex (0) and Passphrase (1) of the profile of Fusion Supplicant.",
                "format": "int32"
              },
              "TunnelAuth": {
                "description": "Gets or sets the authentication tunneling type of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TunnelType"
                  }
                ]
              },
              "CredentialsAttributes": {
                "description": "Gets or sets the credential attributes of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CredentialAttributes"
                  }
                ]
              },
              "UserCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the user certificate reference Id of the profile of Fusion Supplicant."
              },
              "UserCertificateRetrievalMethod": {
                "description": "Gets or sets the user certificate retrieval method of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "ServerCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the server certificate reference Id of the profile of Fusion Supplicant."
              },
              "Credentials": {
                "description": "Gets or sets the user credentials of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserCredentials"
                  }
                ]
              },
              "CredentialsRequestOptions": {
                "description": "Gets or sets the credential request options of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CacheOptions"
                  }
                ]
              },
              "LogOnTimeCacheOptions": {
                "description": "Gets or sets the login time cache options of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/FapiLogOnTimeCacheOption"
                  }
                ]
              },
              "CredentialsCacheInterval": {
                "type": "integer",
                "description": "Gets or sets the credentials cache interval of the profile of Fusion Supplicant.",
                "format": "int32"
              },
              "LogOnPrompts": {
                "description": "Gets or sets the user login prompts of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/UserLogOnPrompts"
                  }
                ]
              },
              "AdvancedSettings": {
                "description": "Gets or sets the advanced 802.1x settings of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Advanced8021XSettings"
                  }
                ]
              },
              "ConnectsTo": {
                "description": "Gets or sets the connection type (internet/work) of the profile.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ConnectionType"
                  }
                ]
              },
              "UserCertImportFileName": {
                "type": "string",
                "description": "Gets or sets the filename for the importing user certificate of the profile."
              },
              "UserCertImportData": {
                "type": "string",
                "description": "Gets or sets the data of the importing user certificate of the profile."
              },
              "UserCertPrivateKeyPassword": {
                "type": "string",
                "description": "Gets or sets the password of the private key for the importing user certificate (.PFX) of the profile."
              },
              "ServerCertImportFileName": {
                "type": "string",
                "description": "Gets or sets the filename for the importing server certificate of the profile."
              },
              "ServerCertImportData": {
                "type": "string",
                "description": "Gets or sets the data of the importing server certificate of the profile."
              },
              "ServerCertPrivateKeyPassword": {
                "type": "string",
                "description": "Gets or sets the password of the private key for the importing server certificate (.PFX) of the profile."
              },
              "PerformanceSettings": {
                "type": "integer",
                "description": "Gets or sets the performance settings of the profile (0 = Optimize for Data, 1 = Optimize for Voice).",
                "format": "int32"
              },
              "DeleteExistingProfiles": {
                "type": "integer",
                "description": "Gets or sets the checkbox for deleting existing profiles of Fusion Supplicant.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "WlanPowerMode": {
        "type": "string",
        "description": "WLAN Device Power Consumption Settings",
        "x-enumNames": [
          "PowerSaveCam",
          "PowerSaveFast",
          "PowerSaveMax"
        ],
        "enum": [
          "PowerSaveCam",
          "PowerSaveFast",
          "PowerSaveMax"
        ],
        "x-enumType": "WlanPowerMode"
      },
      "TransmitPowerLevel": {
        "type": "string",
        "description": "Transmit Power Level",
        "x-enumNames": [
          "Automatic",
          "PowerPlus",
          "IbssFull",
          "Ibss30Mw",
          "Ibss15Mw",
          "Ibss05Mw",
          "Ibss01Mw"
        ],
        "enum": [
          "Automatic",
          "PowerPlus",
          "IbssFull",
          "Ibss30Mw",
          "Ibss15Mw",
          "Ibss05Mw",
          "Ibss01Mw"
        ],
        "x-enumType": "TransmitPowerLevel"
      },
      "NetworkAddressingMode": {
        "type": "string",
        "description": "Defines the way network address is obtained - DHCP or STATIC",
        "x-enumNames": [
          "Static",
          "Dhcp"
        ],
        "enum": [
          "Static",
          "Dhcp"
        ],
        "x-enumType": "NetworkAddressingMode"
      },
      "Ipv4Settings": {
        "type": "object",
        "description": "Ipv4 Settings",
        "required": [
          "Ipv4SetDns",
          "Ipv4SetWins",
          "Ipv4DnsAuto",
          "Ipv4WinsAuto"
        ],
        "properties": {
          "Ipv4Address": {
            "type": "string",
            "description": "Gets or sets the IPv4 address of the profile."
          },
          "Ipv4SubnetMask": {
            "type": "string",
            "description": "Gets or sets the IPv4 subnet mask of the profile."
          },
          "Ipv4Gateway1": {
            "type": "string",
            "description": "Gets or sets the IPv4 primary gateway of the profile."
          },
          "Ipv4Gateway2": {
            "type": "string",
            "description": "Gets or sets the IPv4 alternate gateway of the profile."
          },
          "Ipv4Dns1": {
            "type": "string",
            "description": "Gets or sets the IPv4 primary DNS of the profile."
          },
          "Ipv4Dns2": {
            "type": "string",
            "description": "Gets or sets the IPv4 alternate DNS of the profile."
          },
          "Ipv4Wins1": {
            "type": "string",
            "description": "Gets or sets the IPv4 primary WINS of the profile."
          },
          "Ipv4Wins2": {
            "type": "string",
            "description": "Gets or sets the IPv4 alternate WINS of the profile."
          },
          "Ipv4SetDns": {
            "type": "integer",
            "description": "Gets or sets the flag for manually setting DNS of the profile.",
            "format": "int32"
          },
          "Ipv4SetWins": {
            "type": "integer",
            "description": "Gets or sets the flag for manually setting WINS of the profile.",
            "format": "int32"
          },
          "Ipv4DnsAuto": {
            "type": "integer",
            "description": "Gets or sets the flag for automatically setting DNS of the profile.",
            "format": "int32"
          },
          "Ipv4WinsAuto": {
            "type": "integer",
            "description": "Gets or sets the flag for automatically setting Wins of the profile.",
            "format": "int32"
          }
        }
      },
      "FusionUIEncryptionType": {
        "type": "string",
        "description": "Defines the Type of Encryption UI Used",
        "x-enumNames": [
          "Open",
          "Wep40",
          "Wep104",
          "Tkip",
          "Aes",
          "Sms4"
        ],
        "enum": [
          "Open",
          "Wep40",
          "Wep104",
          "Tkip",
          "Aes",
          "Sms4"
        ],
        "x-enumType": "FusionUIEncryptionType"
      },
      "WlanAllowMixedMode": {
        "type": "string",
        "description": "Defines whether Mixed Mode setting is ON/OFF",
        "x-enumNames": [
          "AllowMixedModeOff",
          "AllowMixedModeOn"
        ],
        "enum": [
          "AllowMixedModeOff",
          "AllowMixedModeOn"
        ],
        "x-enumType": "WlanAllowMixedMode"
      },
      "WepData": {
        "type": "object",
        "description": "Wep data representation.",
        "required": [
          "KeyIndex"
        ],
        "properties": {
          "KeyIndex": {
            "description": "Gets or sets the wep key index of the profile.",
            "allOf": [
              {
                "$ref": "#/definitions/FapiWlanWepKeyIndex"
              }
            ],
            "x-enumType": "FapiWlanWepKeyIndex"
          },
          "Key1": {
            "type": "string",
            "description": "Gets or sets the wep key 1 of the profile."
          },
          "Key2": {
            "type": "string",
            "description": "Gets or sets the wep key 2 of the profile."
          },
          "Key3": {
            "type": "string",
            "description": "Gets or sets the wep key 3 of the profile."
          },
          "Key4": {
            "type": "string",
            "description": "Gets or sets the wep key 4 of the profile."
          }
        }
      },
      "FapiWlanWepKeyIndex": {
        "type": "string",
        "description": "Defines the WEP Key that will be used Currently",
        "x-enumNames": [
          "FirstWepKey",
          "SecondWepKey",
          "ThirdWepKey",
          "FourthWepKey"
        ],
        "enum": [
          "FirstWepKey",
          "SecondWepKey",
          "ThirdWepKey",
          "FourthWepKey"
        ],
        "x-enumType": "FapiWlanWepKeyIndex"
      },
      "FapiWlanNetworkType": {
        "type": "string",
        "description": "Defines the Type of Operation Of the Wireless Network",
        "x-enumNames": [
          "Infrastructure",
          "Ibss",
          "AutoUnknown"
        ],
        "enum": [
          "Infrastructure",
          "Ibss",
          "AutoUnknown"
        ],
        "x-enumType": "FapiWlanNetworkType"
      },
      "FapiWlanSecurityType": {
        "type": "string",
        "description": "Defines the Type of Security Used",
        "x-enumNames": [
          "Legacy",
          "WpaPersonal",
          "Wpa2Personal",
          "WpaEnterprise",
          "Wpa2Enterprise",
          "Cckm",
          "Wapi"
        ],
        "enum": [
          "Legacy",
          "WpaPersonal",
          "Wpa2Personal",
          "WpaEnterprise",
          "Wpa2Enterprise",
          "Cckm",
          "Wapi"
        ],
        "x-enumType": "FapiWlanSecurityType"
      },
      "FusionUIAuthType": {
        "type": "string",
        "description": "Defines the Type of Authentication UI Used",
        "x-enumNames": [
          "None",
          "EapTls",
          "Peap",
          "Leap",
          "EapTtls",
          "EapFast",
          "Certificate"
        ],
        "enum": [
          "None",
          "EapTls",
          "Peap",
          "Leap",
          "EapTtls",
          "EapFast",
          "Certificate"
        ],
        "x-enumType": "FusionUIAuthType"
      },
      "TunnelType": {
        "type": "string",
        "description": "Defines the Type of Authentication Tunneling Used",
        "x-enumNames": [
          "Mschapv2",
          "Tls",
          "EapGtc",
          "Chap",
          "Mschap",
          "Pap",
          "Md5"
        ],
        "enum": [
          "Mschapv2",
          "Tls",
          "EapGtc",
          "Chap",
          "Mschap",
          "Pap",
          "Md5"
        ],
        "x-enumType": "TunnelType"
      },
      "CredentialAttributes": {
        "type": "object",
        "description": "Credential Flags",
        "required": [
          "UserCertValidate",
          "ServerCertValidate",
          "Advanced8021XAttribute",
          "UseTokenPasswordAttribute"
        ],
        "properties": {
          "UserCertValidate": {
            "type": "integer",
            "description": "Gets or sets the validate flag for the user certificate.",
            "format": "int32"
          },
          "ServerCertValidate": {
            "type": "integer",
            "description": "Gets or sets the validate flag for the server certificate.",
            "format": "int32"
          },
          "Advanced8021XAttribute": {
            "type": "integer",
            "description": "Gets or sets the flag for advanced 802.1x settings.",
            "format": "int32"
          },
          "UseTokenPasswordAttribute": {
            "type": "integer",
            "description": "Gets or sets the flag for use token for password ( 1 = Token, 0 = Static).",
            "format": "int32"
          }
        }
      },
      "UserCredentials": {
        "type": "object",
        "description": "User Credentials",
        "properties": {
          "Identity": {
            "type": "string",
            "description": "Gets or sets the identity of the user credential."
          },
          "Domain": {
            "type": "string",
            "description": "Gets or sets the domain of the user credential."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the Password of the user credential."
          }
        }
      },
      "CacheOptions": {
        "type": "object",
        "description": "Cache Options",
        "required": [
          "OptionConnect",
          "OptionResume",
          "OptionTime"
        ],
        "properties": {
          "OptionConnect": {
            "type": "integer",
            "description": "Gets or sets the flag for the cache option \"Connect\".",
            "format": "int32"
          },
          "OptionResume": {
            "type": "integer",
            "description": "Gets or sets the flag for the cache option \"Resume\".",
            "format": "int32"
          },
          "OptionTime": {
            "type": "integer",
            "description": "Gets or sets the flag for the cache option \"Time\".",
            "format": "int32"
          }
        }
      },
      "FapiLogOnTimeCacheOption": {
        "type": "string",
        "description": "Fapi Login Time Cache Options",
        "x-enumNames": [
          "TimeCacheInterval",
          "TimeCacheAbsolute"
        ],
        "enum": [
          "TimeCacheInterval",
          "TimeCacheAbsolute"
        ],
        "x-enumType": "FapiLogOnTimeCacheOption"
      },
      "UserLogOnPrompts": {
        "type": "object",
        "description": "User Login Prompts",
        "properties": {
          "FirstLogOnPromptTime": {
            "type": "string",
            "description": "Gets or sets the first login prompt time."
          },
          "SecondLogOnPromptTime": {
            "type": "string",
            "description": "Gets or sets the second login prompt time."
          },
          "ThirdLogOnPromptTime": {
            "type": "string",
            "description": "Gets or sets the third login prompt time."
          },
          "FourthLogOnPromptTime": {
            "type": "string",
            "description": "Gets or sets the fourth login prompt time."
          }
        }
      },
      "Advanced8021XSettings": {
        "type": "object",
        "description": "Advanced 8021X Settings",
        "properties": {
          "UserIdentity": {
            "type": "string",
            "description": "Gets or sets the user identity of the advanced 802.1x settings."
          },
          "Domain": {
            "type": "string",
            "description": "Gets or sets the domain of the advanced 802.1x settings."
          }
        }
      },
      "ConnectionType": {
        "type": "string",
        "description": "Connection type",
        "x-enumNames": [
          "Internet",
          "Work"
        ],
        "enum": [
          "Internet",
          "Work"
        ],
        "x-enumType": "ConnectionType"
      },
      "SummitWiFiProfile": {
        "allOf": [
          {
            "$ref": "#/definitions/WiFiProfile"
          },
          {
            "type": "object",
            "description": "Summit profile.",
            "required": [
              "AuthenticationType",
              "EapType",
              "ServerCertificateRetrievalMethod"
            ],
            "properties": {
              "ConfigName": {
                "type": "string",
                "description": "Gets or sets the ConfigName."
              },
              "Ssid": {
                "type": "string",
                "description": "Gets or sets the Ssid."
              },
              "AuthenticationType": {
                "description": "Gets or sets the flag for ad hoc.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SummitAuth"
                  }
                ]
              },
              "EapType": {
                "description": "Gets or sets the Eap Type",
                "allOf": [
                  {
                    "$ref": "#/definitions/SummitEap"
                  }
                ]
              },
              "UserName": {
                "type": "string",
                "description": "Gets or sets the UserName"
              },
              "ServerCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the Server Certificate Reference Id"
              },
              "ServerCertificateRetrievalMethod": {
                "description": "Gets or sets the server certificate retrieval method of the profile of Fusion Supplicant.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "PacFileName": {
                "type": "string",
                "description": "Gets or sets the PacFileName"
              }
            }
          }
        ]
      },
      "SummitAuth": {
        "type": "string",
        "description": "SummitAuth Type",
        "x-enumNames": [
          "AuthOpen",
          "AuthShared",
          "NetworkEap"
        ],
        "enum": [
          "AuthOpen",
          "AuthShared",
          "NetworkEap"
        ],
        "x-enumType": "SummitAuth"
      },
      "SummitEap": {
        "type": "string",
        "description": "Type SummitEap",
        "x-enumNames": [
          "None",
          "Leap",
          "EapFast",
          "PeapMschap",
          "PeapGtc",
          "EapTls",
          "EapTtls",
          "PeapTls"
        ],
        "enum": [
          "None",
          "Leap",
          "EapFast",
          "PeapMschap",
          "PeapGtc",
          "EapTls",
          "EapTtls",
          "PeapTls"
        ],
        "x-enumType": "SummitEap"
      },
      "ZeroConfigProfile": {
        "allOf": [
          {
            "$ref": "#/definitions/WiFiProfile"
          },
          {
            "type": "object",
            "description": "ZeroConfig profile.",
            "required": [
              "AdHoc",
              "Ieee8021X",
              "Authentication",
              "Encryption",
              "AutoKey",
              "KeyIndex",
              "EapType"
            ],
            "properties": {
              "NetworkName": {
                "type": "string",
                "description": "Gets or sets the network name of the profile."
              },
              "AdHoc": {
                "type": "integer",
                "description": "Gets or sets the flag for ad hoc.",
                "format": "int32"
              },
              "Ieee8021X": {
                "type": "integer",
                "description": "Gets or sets the flag for IEEE 802.1x settings.",
                "format": "int32"
              },
              "Authentication": {
                "description": "Gets or sets the authentication of the profile.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WzcAuth"
                  }
                ]
              },
              "Encryption": {
                "description": "Gets or sets the encryption of the profile.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WzcEncrypt"
                  }
                ]
              },
              "AutoKey": {
                "type": "integer",
                "description": "Gets or sets the flag for auto key.",
                "format": "int32"
              },
              "KeyIndex": {
                "type": "integer",
                "description": "Gets or sets the key index of the profile.",
                "format": "int32"
              },
              "NetworkKey": {
                "type": "string",
                "description": "Gets or sets the network key of the profile."
              },
              "EapType": {
                "description": "Gets or sets the eap type of the profile.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WzcEap"
                  }
                ]
              }
            }
          }
        ]
      },
      "WzcAuth": {
        "type": "string",
        "description": "Defines the Type of Authentication Algorithms Used",
        "x-enumNames": [
          "Open",
          "Shared",
          "Wpa",
          "WpaPsk",
          "Wpa2",
          "Wpa2Psk",
          "WpaNone"
        ],
        "enum": [
          "Open",
          "Shared",
          "Wpa",
          "WpaPsk",
          "Wpa2",
          "Wpa2Psk",
          "WpaNone"
        ],
        "x-enumType": "WzcAuth"
      },
      "WzcEncrypt": {
        "type": "string",
        "description": "Defines the Type of Encryption Algorithms Used",
        "x-enumNames": [
          "Disabled",
          "Wep",
          "Tkip",
          "Aes"
        ],
        "enum": [
          "Disabled",
          "Wep",
          "Tkip",
          "Aes"
        ],
        "x-enumType": "WzcEncrypt"
      },
      "WzcEap": {
        "type": "string",
        "description": "Defines the Type of Eap Used",
        "x-enumNames": [
          "Md5",
          "Peap",
          "Tls"
        ],
        "enum": [
          "Md5",
          "Peap",
          "Tls"
        ],
        "x-enumType": "WzcEap"
      },
      "PrinterCustomConfigurationsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Custom configurations section for Printer platform.",
            "properties": {
              "Properties": {
                "type": "array",
                "description": "Gets or sets list of device property values.",
                "items": {
                  "$ref": "#/definitions/DevicePropertyValue"
                }
              }
            }
          }
        ]
      },
      "DevicePropertyValue": {
        "type": "object",
        "description": "Represents the device property value.",
        "properties": {
          "Descriptor": {
            "description": "Gets or sets the descriptor of the property.",
            "allOf": [
              {
                "$ref": "#/definitions/DevicePropertyDescriptor"
              }
            ]
          },
          "Value": {
            "description": "Gets or sets the property value."
          }
        }
      },
      "DevicePropertyDescriptor": {
        "type": "object",
        "description": "Represents the device property descriptor.",
        "required": [
          "Platform",
          "PropertyType",
          "Access"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets the id.",
            "format": "int32"
          },
          "Platform": {
            "description": "Gets or sets the platform.",
            "allOf": [
              {
                "$ref": "#/definitions/DevicePlatform2"
              }
            ],
            "x-enumType": "DevicePlatform"
          },
          "Name": {
            "description": "Gets or sets the name.",
            "allOf": [
              {
                "$ref": "#/definitions/DevicePropertyName"
              }
            ]
          },
          "PropertyType": {
            "description": "Gets or sets the type of the data.",
            "allOf": [
              {
                "$ref": "#/definitions/DevicePropertyValueType"
              }
            ],
            "x-enumType": "DevicePropertyValueType"
          },
          "Access": {
            "description": "Gets or sets the access.",
            "allOf": [
              {
                "$ref": "#/definitions/DevicePropertyAccesses"
              }
            ],
            "x-enumType": "DevicePropertyAccesses"
          },
          "Text": {
            "type": "string",
            "description": "Gets or sets the text."
          },
          "Description": {
            "type": "string",
            "description": "Gets or sets the description."
          }
        }
      },
      "DevicePlatform2": {
        "type": "string",
        "description": "Enumerates the different supported device platforms.",
        "x-enumNames": [
          "Unknown",
          "CESimulator",
          "DOS",
          "WindowsCE",
          "HPCPro",
          "HPC2000",
          "PocketPC",
          "WindowsMobile",
          "SmartPhone",
          "WindowsCEDotNet",
          "Windows",
          "Windows95",
          "Windows98",
          "WindowsME",
          "WindowsNT351",
          "WindowsNT40DomainController",
          "WindowsNT40Server",
          "WindowsNT40Workstation",
          "Windows2000DomainController",
          "Windows2000Server",
          "Windows2000Professional",
          "WindowsXPProfessional",
          "WindowsXPHome",
          "Windows2003Server",
          "WindowsVista",
          "WindowsVista64",
          "Windows2008Server",
          "Windows2008Server64",
          "Windows2003ServerR2",
          "Windows2003ServerR264",
          "Windows2003StorageServer",
          "Windows2003StorageServer64",
          "WindowsSeven",
          "WindowsSeven64",
          "Windows2008ServerR2",
          "Windows2008ServerR264",
          "WindowsEight",
          "WindowsEight64",
          "Windows2012Server",
          "Windows2012Server64",
          "WindowsEightOne",
          "WindowsEightOne64",
          "Windows2012ServerR2",
          "Windows2012ServerR264",
          "WindowsTen",
          "WindowsTen64",
          "Windows2016Server",
          "Windows2016Server64",
          "HHPImager",
          "Android",
          "iOS",
          "macOS",
          "AndroidPlus",
          "ScannerPlatformGeneral",
          "WindowsSeven32BitDeviceManager",
          "WindowsSeven64BitDeviceManager",
          "WindowsXPDeviceManager",
          "WEPosDeviceManager",
          "PosReadyDeviceManager",
          "RemHub",
          "RemScanner",
          "RemBiopticScanner",
          "RemMaximal",
          "WindowsPhone",
          "WindowsRT",
          "WindowsPhone81",
          "WindowsPhone10",
          "WindowsDesktop10",
          "WindowsPhone10RS1",
          "WindowsDesktop10RS1",
          "WindowsHolographic10",
          "WindowsHolographic10RS1",
          "WindowsPhoneMax",
          "ZebraPrinter",
          "WindowsRuntime",
          "WindowsRuntimeMax",
          "Linux",
          "Chrome"
        ],
        "enum": [
          "Unknown",
          "CESimulator",
          "DOS",
          "WindowsCE",
          "HPCPro",
          "HPC2000",
          "PocketPC",
          "WindowsMobile",
          "SmartPhone",
          "WindowsCEDotNet",
          "Windows",
          "Windows95",
          "Windows98",
          "WindowsME",
          "WindowsNT351",
          "WindowsNT40DomainController",
          "WindowsNT40Server",
          "WindowsNT40Workstation",
          "Windows2000DomainController",
          "Windows2000Server",
          "Windows2000Professional",
          "WindowsXPProfessional",
          "WindowsXPHome",
          "Windows2003Server",
          "WindowsVista",
          "WindowsVista64",
          "Windows2008Server",
          "Windows2008Server64",
          "Windows2003ServerR2",
          "Windows2003ServerR264",
          "Windows2003StorageServer",
          "Windows2003StorageServer64",
          "WindowsSeven",
          "WindowsSeven64",
          "Windows2008ServerR2",
          "Windows2008ServerR264",
          "WindowsEight",
          "WindowsEight64",
          "Windows2012Server",
          "Windows2012Server64",
          "WindowsEightOne",
          "WindowsEightOne64",
          "Windows2012ServerR2",
          "Windows2012ServerR264",
          "WindowsTen",
          "WindowsTen64",
          "Windows2016Server",
          "Windows2016Server64",
          "HHPImager",
          "Android",
          "iOS",
          "macOS",
          "AndroidPlus",
          "ScannerPlatformGeneral",
          "WindowsSeven32BitDeviceManager",
          "WindowsSeven64BitDeviceManager",
          "WindowsXPDeviceManager",
          "WEPosDeviceManager",
          "PosReadyDeviceManager",
          "RemHub",
          "RemScanner",
          "RemBiopticScanner",
          "RemMaximal",
          "WindowsPhone",
          "WindowsRT",
          "WindowsPhone81",
          "WindowsPhone10",
          "WindowsDesktop10",
          "WindowsPhone10RS1",
          "WindowsDesktop10RS1",
          "WindowsHolographic10",
          "WindowsHolographic10RS1",
          "WindowsPhoneMax",
          "ZebraPrinter",
          "WindowsRuntime",
          "WindowsRuntimeMax",
          "Linux",
          "Chrome"
        ],
        "x-enumType": "DevicePlatform"
      },
      "DevicePropertyName": {
        "type": "object",
        "description": "Represents the device property name.\n            ",
        "properties": {
          "Value": {
            "type": "string",
            "description": "Gets or sets the name of the property."
          }
        }
      },
      "DevicePropertyValueType": {
        "type": "string",
        "description": "Represents the type of a device property.\n            ",
        "x-enumNames": [
          "Boolean",
          "Ordinal",
          "Decimal",
          "String",
          "DateTime"
        ],
        "enum": [
          "Boolean",
          "Ordinal",
          "Decimal",
          "String",
          "DateTime"
        ],
        "x-enumType": "DevicePropertyValueType"
      },
      "DevicePropertyAccesses": {
        "type": "string",
        "description": "Represents the device property access flags.",
        "x-enumFlags": true,
        "x-enumNames": [
          "ReadOnly",
          "WriteOnly",
          "ReadAndWrite"
        ],
        "enum": [
          "ReadOnly",
          "WriteOnly",
          "ReadAndWrite"
        ],
        "x-enumType": "DevicePropertyAccesses"
      },
      "PrinterLabelSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding Printer Label",
            "required": [
              "LabelType",
              "RemovalMethod"
            ],
            "properties": {
              "LabelType": {
                "description": "Gets or sets Label Type.",
                "allOf": [
                  {
                    "$ref": "#/definitions/LabelType"
                  }
                ]
              },
              "DistanceBetweenGapAndMark": {
                "type": "integer",
                "description": "Gets or sets Distance between label gap and mark.",
                "format": "int32"
              },
              "Position": {
                "type": "integer",
                "description": "Gets or sets Left-edge position of the media being used.",
                "format": "int32"
              },
              "Length": {
                "type": "integer",
                "description": "Gets or sets Length of printer label.",
                "format": "int32"
              },
              "Width": {
                "type": "integer",
                "description": "Gets or sets Width of printer label.",
                "format": "int32"
              },
              "RemovalMethod": {
                "description": "Gets or sets Label Removal Method.",
                "allOf": [
                  {
                    "$ref": "#/definitions/LabelRemovalMethod"
                  }
                ]
              }
            }
          }
        ]
      },
      "LabelType": {
        "type": "string",
        "description": "Enumerates the different ways of printer recognizing print labels.",
        "x-enumNames": [
          "Continuous",
          "GapNotch",
          "Mark"
        ],
        "enum": [
          "Continuous",
          "GapNotch",
          "Mark"
        ],
        "x-enumType": "LabelType"
      },
      "LabelRemovalMethod": {
        "type": "string",
        "description": "Enumerates the different ways in which the printer removes the label.",
        "x-enumNames": [
          "TearOff",
          "PeelOff",
          "Rewind",
          "Applicator",
          "Cutter",
          "DelayedCutter",
          "RFID",
          "LinerLessPeel",
          "LinerLessRewind",
          "Kiosk",
          "LinerLessTear",
          "Stream"
        ],
        "enum": [
          "TearOff",
          "PeelOff",
          "Rewind",
          "Applicator",
          "Cutter",
          "DelayedCutter",
          "RFID",
          "LinerLessPeel",
          "LinerLessRewind",
          "Kiosk",
          "LinerLessTear",
          "Stream"
        ],
        "x-enumType": "LabelRemovalMethod"
      },
      "PrinterPowerSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding Printer Power settings",
            "required": [
              "WiFiInactivityTimeout",
              "CradleInactivityTimeout"
            ],
            "properties": {
              "WiFiInactivityTimeout": {
                "type": "integer",
                "description": "Gets or sets WiFi inactivity timeout (in seconds).",
                "format": "int32"
              },
              "CradleInactivityTimeout": {
                "type": "integer",
                "description": "Gets or sets Cradle inactivity timeout (in seconds).",
                "format": "int32"
              }
            }
          }
        ]
      },
      "PrinterPrinterAdministrationServer": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding Printer Power settings",
            "required": [
              "EnableConnectionTimeout",
              "ConnectionTimeoutInSeconds"
            ],
            "properties": {
              "PrimaryCommunicationPort": {
                "type": "integer",
                "description": "Gets or sets Primary Communication Port.",
                "format": "int32"
              },
              "SecondaryCommunicationPort": {
                "type": "integer",
                "description": "Gets or sets Secondary Communication Port.",
                "format": "int32"
              },
              "EnableConnectionTimeout": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Enable Connection Timeout."
              },
              "ConnectionTimeoutInSeconds": {
                "type": "integer",
                "description": "Gets or sets Connection Timeout.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "PrinterPrinterProfileSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Profile section for Printer platform.",
            "properties": {
              "Description": {
                "type": "string",
                "description": "Gets or sets device description."
              },
              "Location": {
                "type": "string",
                "description": "Gets or sets device location name."
              },
              "UserRole": {
                "type": "string",
                "description": "Gets or sets user role."
              }
            }
          }
        ]
      },
      "PrinterRunControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding Printer Run Control settings.",
            "required": [
              "PrintMethod",
              "ActionAfterDoorClose",
              "ActionAfterPowerOn"
            ],
            "properties": {
              "PrintMethod": {
                "description": "Gets or sets Print Method.",
                "allOf": [
                  {
                    "$ref": "#/definitions/PrintMethod"
                  }
                ]
              },
              "PrintDarkness": {
                "type": "integer",
                "description": "Gets or sets Darkness level.",
                "format": "int32"
              },
              "PrintSpeed": {
                "type": "number",
                "description": "Gets or sets Printing speed.",
                "format": "float"
              },
              "ActionAfterDoorClose": {
                "description": "Gets or sets Action to be taken by printer after user closes media door.",
                "allOf": [
                  {
                    "$ref": "#/definitions/PrinterAction"
                  }
                ]
              },
              "ActionAfterPowerOn": {
                "description": "Gets or sets Action to be taken by printer after power-on.",
                "allOf": [
                  {
                    "$ref": "#/definitions/PrinterAction"
                  }
                ]
              }
            }
          }
        ]
      },
      "PrintMethod": {
        "type": "string",
        "description": "Enumerates the different print methods available for a printer.",
        "x-enumNames": [
          "DirectThermal",
          "ThermalTransfer"
        ],
        "enum": [
          "DirectThermal",
          "ThermalTransfer"
        ],
        "x-enumType": "PrintMethod"
      },
      "PrinterAction": {
        "type": "string",
        "description": "Enumerates the different actions taken by the printer.",
        "x-enumNames": [
          "Feed",
          "Calibrate",
          "Length",
          "NoMotion",
          "ShortCal"
        ],
        "enum": [
          "Feed",
          "Calibrate",
          "Length",
          "NoMotion",
          "ShortCal"
        ],
        "x-enumType": "PrinterAction"
      },
      "PrinterWirelessSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract for an Android wi-fi configuration.",
            "properties": {
              "Connection": {
                "description": "Gets or sets the wireless connection in this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/PrinterWirelessConnection"
                  }
                ]
              }
            }
          }
        ]
      },
      "PrinterWirelessConnection": {
        "type": "object",
        "description": "Store configuration regarding Printer Wi Fi Configuration",
        "required": [
          "SecurityMode"
        ],
        "properties": {
          "SSID": {
            "type": "string",
            "description": "Gets or sets the SSID of the wireless network."
          },
          "SecurityMode": {
            "description": "Gets or sets the security mode used by the network.",
            "allOf": [
              {
                "$ref": "#/definitions/WirelessSecurityMode"
              }
            ],
            "x-enumType": "WirelessSecurityMode"
          },
          "WEPSettings40": {
            "description": "Gets or sets the advanced wireless security settings for one of\nthe Wifi security modes.\nThis will be null if SecurityMode is not Wep40B.",
            "allOf": [
              {
                "$ref": "#/definitions/WEPSettings"
              }
            ]
          },
          "WEPSettings128": {
            "description": "Gets or sets the advanced wireless security settings for one of\nthe Wifi security modes.\nThis will be null if SecurityMode is not Wep128Bit.",
            "allOf": [
              {
                "$ref": "#/definitions/WEPSettings"
              }
            ]
          },
          "EnterpriseSettings": {
            "description": "Gets or sets the advanced wireless security settings for one of\nthe enterprise security modes.\nThis will be null if security mode is not of WPAEnterprise or WEPEnterprise.",
            "allOf": [
              {
                "$ref": "#/definitions/PrinterEnterpriseWirelessSettings"
              }
            ]
          },
          "KerberosSettings": {
            "description": "Gets or sets the advanced wireless security settings for one of\nthe Wifi security modes.\nThis will be null if SecurityMode is not Kerberos.",
            "allOf": [
              {
                "$ref": "#/definitions/KerberosSettings"
              }
            ]
          }
        }
      },
      "WEPSettings": {
        "type": "object",
        "description": "The settings for WEP for wireless configs data contract.",
        "required": [
          "EncryptionIndex",
          "WEPAuthenticationType",
          "EncryptionKeyType"
        ],
        "properties": {
          "EncryptionIndex": {
            "type": "integer",
            "description": "Gets or sets Encryption level. Value can be 1, 2, 3, 4",
            "format": "int32"
          },
          "WEPAuthenticationType": {
            "description": "Gets or sets the authentication type shard or open.",
            "allOf": [
              {
                "$ref": "#/definitions/WEPAuthenticationType"
              }
            ],
            "x-enumType": "WEPAuthenticationType"
          },
          "EncryptionKeyType": {
            "description": "Gets or sets the encryption key type if it is Ascii type or Hex type.",
            "allOf": [
              {
                "$ref": "#/definitions/EncryptionKeyType"
              }
            ],
            "x-enumType": "EncryptionKeyType"
          },
          "EncryptionKey": {
            "type": "string",
            "description": "Gets or sets the encryption key."
          }
        }
      },
      "WEPAuthenticationType": {
        "type": "string",
        "description": "This will provide Wep authentication type.",
        "x-enumNames": [
          "Open",
          "Shared"
        ],
        "enum": [
          "Open",
          "Shared"
        ],
        "x-enumType": "WEPAuthenticationType"
      },
      "EncryptionKeyType": {
        "type": "string",
        "description": "This will provide encryption type.",
        "x-enumNames": [
          "Ascii",
          "Hex"
        ],
        "enum": [
          "Ascii",
          "Hex"
        ],
        "x-enumType": "EncryptionKeyType"
      },
      "PrinterEnterpriseWirelessSettings": {
        "type": "object",
        "description": "Data contract for Enterprise wireless authentication settings.",
        "required": [
          "Protocols"
        ],
        "properties": {
          "Protocols": {
            "description": "Gets or sets the collection of supported authentication protocols.",
            "allOf": [
              {
                "$ref": "#/definitions/WirelessAuthenticationProtocols"
              }
            ],
            "x-enumType": "WirelessAuthenticationProtocols"
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the user name for the connection."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password for the connection.  This can be null."
          },
          "PrivateSharedKey": {
            "type": "string",
            "description": "Gets or sets private shared key for the network.  This should\nbe null if the network is using a PSK."
          },
          "RootCertificateRefId": {
            "type": "string",
            "description": "Gets or sets root certificate reference ID"
          },
          "ClientCertificateRefId": {
            "type": "string",
            "description": "Gets or sets client certificate reference ID"
          },
          "ClientCertificateRetrievalMethod": {
            "description": "Gets or sets retrieval method for client certificate",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          }
        }
      },
      "KerberosSettings": {
        "type": "object",
        "description": "The wifi configuration setting for security mode type of kerberos.",
        "properties": {
          "UserName": {
            "type": "string",
            "description": "Gets or sets Username or UserID for this wifi configuration."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password to be used for this configuration."
          },
          "Realm": {
            "type": "string",
            "description": "Gets or sets the realm string."
          },
          "KeyDistributionCenter": {
            "type": "string",
            "description": "Gets or sets the KeyDistributionCenter."
          }
        }
      },
      "MacEthernetSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents ethernet configuration settings for MAC devices.",
            "properties": {
              "Connection": {
                "description": "Gets or sets the collection of Ethernetconnection defined for this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EthernetConnection"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "EthernetConnection": {
        "type": "object",
        "description": "Represents a single wireless connection in an MAC EthernetConnection configuration.",
        "required": [
          "SecurityMode",
          "AutoJoin"
        ],
        "properties": {
          "EthernetName": {
            "type": "string",
            "description": "Gets or sets the name of the Ethernet network."
          },
          "SecurityMode": {
            "description": "Gets or sets the security mode used by the network.",
            "allOf": [
              {
                "$ref": "#/definitions/WirelessSecurityMode"
              }
            ],
            "x-enumType": "WirelessSecurityMode"
          },
          "EnterpriseSettings": {
            "description": "Gets or sets the advanced wireless security settings for one of\nthe enterprise security modes.",
            "allOf": [
              {
                "$ref": "#/definitions/IOSEnterpriseWirelessSettings"
              }
            ]
          },
          "AutoJoin": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether auto join the  network"
          },
          "NetworkPriority": {
            "type": "integer",
            "description": "Gets or sets priority of which wireless network to connect with when multiple networks are available.",
            "format": "int32"
          }
        }
      },
      "IOSEnterpriseWirelessSettings": {
        "type": "object",
        "description": "Represents the enterprise security settings for an iOS wireless configuration.",
        "required": [
          "Protocols",
          "UserNameFormat",
          "UsePerConnectionPassword",
          "AllowTrustExceptions"
        ],
        "properties": {
          "Protocols": {
            "description": "Gets or sets the collection of supported authentication protocols.",
            "allOf": [
              {
                "$ref": "#/definitions/WirelessAuthenticationProtocols"
              }
            ],
            "x-enumType": "WirelessAuthenticationProtocols"
          },
          "UserNameFormat": {
            "description": "Gets or sets the User Name Format used by connection.",
            "allOf": [
              {
                "$ref": "#/definitions/UserNameFormat"
              }
            ],
            "x-enumType": "UserNameFormat"
          },
          "PACMode": {
            "description": "Gets or sets the PAC mode.  This value is null if the EAP-FAST protocol is unavailable.",
            "allOf": [
              {
                "$ref": "#/definitions/PACMode"
              }
            ],
            "x-enumType": "PACMode"
          },
          "InnerIdentityMode": {
            "description": "Gets or sets the inner identity mode.  This value is null if the TTLS protocol is unavailable.",
            "allOf": [
              {
                "$ref": "#/definitions/InnerIdentityMode"
              }
            ],
            "x-enumType": "InnerIdentityMode"
          },
          "Domain": {
            "type": "string",
            "description": "Gets or sets the domain name for the connection."
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the user name for the connection."
          },
          "UsePerConnectionPassword": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the access point requires a per-connection password."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password for the connection.  This can be null."
          },
          "IdentityCertificateRetrievalMethod": {
            "description": "Gets or sets retrieval method for identity certificate",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          },
          "IdentityCertificateRefId": {
            "type": "string",
            "description": "Gets or sets the ref id of the identity certificate."
          },
          "OuterIdentity": {
            "type": "string",
            "description": "Gets or sets the device's outer identity (for TTLS, PEAP, and EAP-FAST)."
          },
          "TrustedCertificateRefIds": {
            "type": "array",
            "description": "Gets or sets the collection of client certificate ref ids for the device.",
            "items": {
              "type": "string"
            }
          },
          "TrustedServerCertificateNames": {
            "type": "array",
            "description": "Gets or sets the collection of trusted server certificate names.",
            "items": {
              "type": "string"
            }
          },
          "AllowTrustExceptions": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device\nuser will be able to explicitly trust untrusted certificates."
          },
          "TLSMinimumVersion": {
            "type": "string",
            "description": "Gets or sets the TLSMinimumVersion."
          },
          "TLSMaximumVersion": {
            "type": "string",
            "description": "Gets or sets the TLSMaximumVersion."
          }
        }
      },
      "PACMode": {
        "type": "string",
        "description": "PACMode Enum",
        "x-enumNames": [
          "Use",
          "Provision",
          "ProvisionAnonymously"
        ],
        "enum": [
          "Use",
          "Provision",
          "ProvisionAnonymously"
        ],
        "x-enumType": "PACMode"
      },
      "MacExchangeActiveSyncSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Exchange ActiveSync configuration for an macOS device.",
            "properties": {
              "Account": {
                "description": "Gets or sets the ActiveSync account.",
                "allOf": [
                  {
                    "$ref": "#/definitions/MacExchangeActiveSyncAccount"
                  }
                ]
              }
            }
          }
        ]
      },
      "MacExtensionSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac Directory Settings for an macOS device.",
            "required": [
              "ExtensionPointsCombo"
            ],
            "properties": {
              "AllowedExtensions": {
                "type": "array",
                "description": "Allowed Extensions",
                "items": {
                  "type": "string"
                }
              },
              "DeniedExtensionPoints": {
                "type": "array",
                "description": "Denied Extension Points",
                "items": {
                  "type": "string"
                }
              },
              "DeniedExtensions": {
                "type": "array",
                "description": "Denied Extensions",
                "items": {
                  "type": "string"
                }
              },
              "ExtensionPointsCombo": {
                "type": "integer",
                "description": "Dropdown ExtensionPoints",
                "format": "int32"
              }
            }
          }
        ]
      },
      "MacFinderSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac Finder Settings for an macOS device.",
            "required": [
              "RegularFinder",
              "SimpleFinder",
              "AllowHardDisk",
              "AllowExternalHardDisk",
              "AllowInsertedMedia",
              "AllowConnectedServers",
              "ShowEmptyTrashWarning",
              "AllowConnectToServer",
              "AllowEject",
              "AllowBurnDisk",
              "AllowGoToFolder",
              "AllowRestart",
              "AllowShutDown",
              "AllowLogOut"
            ],
            "properties": {
              "RegularFinder": {
                "type": "boolean",
                "description": "Get or Set the value of RegularFinder"
              },
              "SimpleFinder": {
                "type": "boolean",
                "description": "Get or Set the value of  SimpleFinder"
              },
              "AllowHardDisk": {
                "type": "boolean",
                "description": "Get or Set the value of AllowHardDisk"
              },
              "AllowExternalHardDisk": {
                "type": "boolean",
                "description": "Get or Set the value of AllowExternalHardDisk"
              },
              "AllowInsertedMedia": {
                "type": "boolean",
                "description": "Get or Set the value of AllowInsertedMedia"
              },
              "AllowConnectedServers": {
                "type": "boolean",
                "description": "Get or Set the value of AllowConnectedServers"
              },
              "ShowEmptyTrashWarning": {
                "type": "boolean",
                "description": "Get or Set the value of ShowEmptyTrashWarning"
              },
              "AllowConnectToServer": {
                "type": "boolean",
                "description": "Get or Set the value of AllowConnectToServer"
              },
              "AllowEject": {
                "type": "boolean",
                "description": "Get or Set the value of AllowEject"
              },
              "AllowBurnDisk": {
                "type": "boolean",
                "description": "Get or Set the value of AllowBurnDisk"
              },
              "AllowGoToFolder": {
                "type": "boolean",
                "description": "Get or Set the value of AllowGoToFolder"
              },
              "AllowRestart": {
                "type": "boolean",
                "description": "Get or Set the value of AllowRestart"
              },
              "AllowShutDown": {
                "type": "boolean",
                "description": "Get or Set the value of AllowShutDown"
              },
              "AllowLogOut": {
                "type": "boolean",
                "description": "Get or Set the value of AllowLogOut"
              }
            }
          }
        ]
      },
      "MacLoginItemsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac Login Items Settings for an macOS device.",
            "required": [
              "NetworkSharePoints",
              "PreventItems"
            ],
            "properties": {
              "Applications": {
                "type": "array",
                "description": "Gets or sets the Applications.",
                "items": {
                  "$ref": "#/definitions/MacLoginItem"
                }
              },
              "Items": {
                "type": "array",
                "description": "Gets or sets the Items.",
                "items": {
                  "$ref": "#/definitions/MacLoginItem"
                }
              },
              "AuthNetworks": {
                "type": "array",
                "description": "Gets or sets the AuthNetworks.",
                "items": {
                  "$ref": "#/definitions/MacLoginItem"
                }
              },
              "Networks": {
                "type": "array",
                "description": "Gets or sets the Networks.",
                "items": {
                  "$ref": "#/definitions/MacLoginItem"
                }
              },
              "NetworkSharePoints": {
                "type": "boolean",
                "description": "Gets or sets the NetworkSharePoints."
              },
              "PreventItems": {
                "type": "boolean",
                "description": "Gets or sets the PreventItems."
              }
            }
          }
        ]
      },
      "MacLoginItem": {
        "type": "object",
        "description": "Represents an Mac LoginItems.",
        "required": [
          "Hidden"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets the Name."
          },
          "Hidden": {
            "type": "boolean",
            "description": "Gets or sets the Hidden."
          }
        }
      },
      "MacLoginWindowSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Login Window Settings for an macOS device.",
            "required": [
              "ShowAdditionalInfoMenuBar",
              "NameAndPassword",
              "ListOfUsers",
              "ShowLocalUsers",
              "ShowMobileAccts",
              "ShowNetworkUsers",
              "ShowComputerAdmin",
              "ShowOthers",
              "ShowShutDown",
              "ShowRestart",
              "ShowSleep",
              "ShowPasswordHint",
              "AutomaticLogin",
              "ConsoleLogin",
              "FastUserSwitch",
              "LogoutUser",
              "InactivityMinutes",
              "RefreshManagement",
              "SetComputerName",
              "EnableExternalAcct",
              "AllowGuestUser",
              "LocalUserLogin",
              "LocalUserWorkgroup",
              "IgnoreWorkgroupNesting",
              "CombineWorkgroup",
              "ShowWorkgroupDialog"
            ],
            "properties": {
              "ShowAdditionalInfoMenuBar": {
                "type": "boolean",
                "description": "Gets or sets whether to set additional information in menu bar."
              },
              "BannerText": {
                "type": "string",
                "description": "Gets or sets banner text."
              },
              "NameAndPassword": {
                "type": "boolean",
                "description": "Gets or sets ListOfUsers."
              },
              "ListOfUsers": {
                "type": "boolean",
                "description": "Gets or sets ListOfUsers."
              },
              "ShowLocalUsers": {
                "type": "boolean",
                "description": "Gets or sets show Local users."
              },
              "ShowMobileAccts": {
                "type": "boolean",
                "description": "Gets or sets the Mobile accounts."
              },
              "ShowNetworkUsers": {
                "type": "boolean",
                "description": "Gets or sets network users."
              },
              "ShowComputerAdmin": {
                "type": "boolean",
                "description": "Gets or sets Computer admin."
              },
              "ShowOthers": {
                "type": "boolean",
                "description": "Gets or sets Others"
              },
              "ShowShutDown": {
                "type": "boolean",
                "description": "Gets or sets Shut down btn."
              },
              "ShowRestart": {
                "type": "boolean",
                "description": "Gets or sets Restart btn."
              },
              "ShowSleep": {
                "type": "boolean",
                "description": "Gets or sets Sleep btn."
              },
              "ShowPasswordHint": {
                "type": "boolean",
                "description": "Gets or sets ShowPasswordHint"
              },
              "AutomaticLogin": {
                "type": "boolean",
                "description": "Gets or sets AutomaticLogin"
              },
              "ConsoleLogin": {
                "type": "boolean",
                "description": "Gets or sets ConsoleLogin"
              },
              "FastUserSwitch": {
                "type": "boolean",
                "description": "Gets or sets FastUserSwitch"
              },
              "LogoutUser": {
                "type": "boolean",
                "description": "Gets or sets LogoutUser"
              },
              "InactivityMinutes": {
                "type": "integer",
                "description": "Gets or sets InactivityMinutes",
                "format": "int32"
              },
              "RefreshManagement": {
                "type": "boolean",
                "description": "Gets or sets RefreshManagement"
              },
              "SetComputerName": {
                "type": "boolean",
                "description": "Gets or sets SetComputerName"
              },
              "EnableExternalAcct": {
                "type": "boolean",
                "description": "Gets or sets EnableExternalAcct"
              },
              "AllowGuestUser": {
                "type": "boolean",
                "description": "Gets or sets AllowGuestUser"
              },
              "LocalUserLogin": {
                "type": "boolean",
                "description": "Gets or sets LocalUserLogin"
              },
              "LocalUserWorkgroup": {
                "type": "boolean",
                "description": "Gets or sets LocalUserWorkgroup"
              },
              "IgnoreWorkgroupNesting": {
                "type": "boolean",
                "description": "Gets or sets IgnoreWorkgroupNesting"
              },
              "CombineWorkgroup": {
                "type": "boolean",
                "description": "Gets or sets CombineWorkgroup"
              },
              "ShowWorkgroupDialog": {
                "type": "boolean",
                "description": "Gets or sets ShowWorkgroupDialog"
              },
              "AllowedUsers": {
                "type": "array",
                "description": "Gets or sets AllowedUsers",
                "items": {
                  "$ref": "#/definitions/LoginWindowUser"
                }
              },
              "DeniedUsers": {
                "type": "array",
                "description": "Gets or sets DeniedUsers",
                "items": {
                  "$ref": "#/definitions/LoginWindowUser"
                }
              }
            }
          }
        ]
      },
      "LoginWindowUser": {
        "type": "object",
        "description": "Login window user",
        "required": [
          "ConnectionId",
          "FieldType"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "get or set Name"
          },
          "EmailAddress": {
            "type": "string",
            "description": "get or set EmailAddress"
          },
          "ConnectionId": {
            "type": "integer",
            "description": "get or set ConnectionId",
            "format": "int32"
          },
          "FieldType": {
            "type": "integer",
            "description": "get or set FieldType",
            "format": "int32"
          },
          "Guid": {
            "type": "string",
            "description": "get or set Guid"
          }
        }
      },
      "MacAccessibilitySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding MacAccessibilitySection to be displayed with\na device or group.",
            "required": [
              "EnableZoomViaScrollWheel",
              "EnableZoomViaKeyboard",
              "MaximumZoom",
              "MinimumZoom",
              "ShowZoomedOutPreview",
              "ShowSmoothImages",
              "InvertColor",
              "UseGrayscale",
              "EnhanceContrast",
              "CursorSize",
              "EnableVoiceOver",
              "FlashScreen",
              "PlayStereoAudio",
              "EnableStickyKeys",
              "BeepOnModifier",
              "StickyKeysDisplayPressedKey",
              "EnableSlowKeys",
              "SlowKeysBeepOn",
              "SlowKeysDelay",
              "EnableMouseKeys",
              "MouseKeysInitialDelay",
              "MouseKeysMaxSpeed",
              "MouseKeysIgnoreTrackpad"
            ],
            "properties": {
              "EnableZoomViaScrollWheel": {
                "type": "boolean",
                "description": "Gets or sets the Enable Zoom Via Wheel Scroll"
              },
              "EnableZoomViaKeyboard": {
                "type": "boolean",
                "description": "Gets or sets the Enable Zoom Via Keyboard"
              },
              "MaximumZoom": {
                "type": "integer",
                "description": "Gets or sets the Maximum Zoom",
                "format": "int32"
              },
              "MinimumZoom": {
                "type": "integer",
                "description": "Gets or sets the Minimum Zoom",
                "format": "int32"
              },
              "ShowZoomedOutPreview": {
                "type": "boolean",
                "description": "Gets or sets the Show Preview Rectangle when Zoomed out"
              },
              "ShowSmoothImages": {
                "type": "boolean",
                "description": "Gets or sets the Show Smooth Images"
              },
              "InvertColor": {
                "type": "boolean",
                "description": "Gets or sets the Invert Color"
              },
              "UseGrayscale": {
                "type": "boolean",
                "description": "Gets or sets the Use Grayscale"
              },
              "EnhanceContrast": {
                "type": "integer",
                "description": "Gets or sets the Enhance Contrast Value",
                "format": "int32"
              },
              "CursorSize": {
                "type": "integer",
                "description": "Gets or sets the Cursor Size Value",
                "format": "int32"
              },
              "EnableVoiceOver": {
                "type": "boolean",
                "description": "Gets or sets the Enable VoiceOver value"
              },
              "FlashScreen": {
                "type": "boolean",
                "description": "Gets or sets the Flash Screen Value"
              },
              "PlayStereoAudio": {
                "type": "boolean",
                "description": "Gets or sets the PlayStereoAudio value"
              },
              "EnableStickyKeys": {
                "type": "boolean",
                "description": "Gets or sets the Sticky Keys Value"
              },
              "BeepOnModifier": {
                "type": "boolean",
                "description": "Gets or sets the sticky key Beep on Modifier"
              },
              "StickyKeysDisplayPressedKey": {
                "type": "boolean",
                "description": "Gets or sets the display pressed sticky key on screen"
              },
              "EnableSlowKeys": {
                "type": "boolean",
                "description": "Gets or sets the Enable SlowKeys"
              },
              "SlowKeysBeepOn": {
                "type": "boolean",
                "description": "Gets or sets the SlowKeys beep on"
              },
              "SlowKeysDelay": {
                "type": "integer",
                "description": "Gets or sets the Delay in SlowKeys",
                "format": "int32"
              },
              "EnableMouseKeys": {
                "type": "boolean",
                "description": "Gets or sets the Enable MouseDriver Value"
              },
              "MouseKeysInitialDelay": {
                "type": "number",
                "description": "Gets or sets the MouseKeys Initial Delay",
                "format": "decimal"
              },
              "MouseKeysMaxSpeed": {
                "type": "integer",
                "description": "Gets or sets the MouseKeys Maximum speed",
                "format": "int32"
              },
              "MouseKeysIgnoreTrackpad": {
                "type": "boolean",
                "description": "Gets or sets the MouseKeys Ignore built-in trackpad"
              }
            }
          }
        ]
      },
      "MacAirPlaySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding MacAirPlaySection to be displayed with\na device or group.",
            "properties": {
              "Devices": {
                "type": "array",
                "description": "Gets or sets the Devices.",
                "items": {
                  "$ref": "#/definitions/MacAirPlayDevices"
                }
              },
              "DeviceMacAddress": {
                "type": "array",
                "description": "Gets or sets the device Mac address.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "MacAirPlayDevices": {
        "type": "object",
        "description": "Represents an Mac AirPlay.",
        "properties": {
          "DeviceID": {
            "type": "string",
            "description": "Gets or sets the DeviceID."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the DevicePassword."
          }
        }
      },
      "MacDesktopWallpaperScreenSaverSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding MAC Desktop Wallpaper and Screen Saver Payload Section to be displayed with a device or group.",
            "required": [
              "LockDesktopWallpaper",
              "ScreenSaverDelayTime",
              "ScreenSaverRequirePassword",
              "ScreenSaverRequirePasswordDelayTime",
              "DeviceFamilyQualification"
            ],
            "properties": {
              "LockDesktopWallpaper": {
                "type": "boolean",
                "description": "Provides the user an option to allow access to the end user to change the desktop wallpaper."
              },
              "DesktopWallpaperPicturePath": {
                "type": "string",
                "description": "Enter the path of the Wallpaper."
              },
              "ScreenSaverDelayTime": {
                "type": "integer",
                "description": "Select the Screen Saver Inactivity Time after which Screen Saver will activate.",
                "format": "int32"
              },
              "ScreenSaverPicturePath": {
                "type": "string",
                "description": "Enter the path of the Screen Saver module."
              },
              "ScreenSaverRequirePassword": {
                "type": "boolean",
                "description": "If set to true, the end user will be prompted for a password when the screensaver is unlocked or stopped."
              },
              "ScreenSaverRequirePasswordDelayTime": {
                "type": "integer",
                "description": "Select the Require Password Inactivity Time to delay before the password will be required to unlock or stop the Screen Saver.",
                "format": "int32"
              },
              "DeviceFamilyQualification": {
                "description": "Gets the Device Family Qualification (Device Level or User Level) supported by this section",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceFamilyQualification"
                  }
                ]
              }
            }
          }
        ]
      },
      "MacDirectorySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac Directory Settings for an macOS device.",
            "properties": {
              "Directory": {
                "description": "Gets or sets the Exchange ActiveSync account.",
                "allOf": [
                  {
                    "$ref": "#/definitions/MacDirectory"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "MacDirectory": {
        "type": "object",
        "description": "Represents the Mac Directory Settings for an macOS device.",
        "required": [
          "DirectoryServerType",
          "IsMobileAccountConfiguredAtLogin",
          "IsConfirmationRequiredBeforeCreatingMobileAccount",
          "ForceLocalHomeDirectoryOnStartupDisk",
          "UseUNCPath",
          "MountStyle",
          "AllowAuthenticationUsingDomain",
          "Namespace",
          "PacketSigning",
          "PacketEncryption",
          "PasswordTrustInterval"
        ],
        "properties": {
          "DirectoryServerType": {
            "description": "Directory Type",
            "allOf": [
              {
                "$ref": "#/definitions/DirectoryServerType"
              }
            ],
            "x-enumType": "DirectoryServerType"
          },
          "ServerHostName": {
            "type": "string",
            "description": "Server Host Name"
          },
          "UserName": {
            "type": "string",
            "description": "User Name"
          },
          "Password": {
            "type": "string",
            "description": "Password"
          },
          "ClientId": {
            "type": "string",
            "description": "Client Id"
          },
          "OrganizationUnit": {
            "type": "string",
            "description": "Organization Unit"
          },
          "IsMobileAccountConfiguredAtLogin": {
            "type": "boolean"
          },
          "IsConfirmationRequiredBeforeCreatingMobileAccount": {
            "type": "boolean"
          },
          "ForceLocalHomeDirectoryOnStartupDisk": {
            "type": "boolean"
          },
          "UseUNCPath": {
            "type": "boolean"
          },
          "MountStyle": {
            "$ref": "#/definitions/MountStyleType",
            "x-enumType": "MountStyleType"
          },
          "DefaultUserShell": {
            "type": "string"
          },
          "MapUIDToAttribute": {
            "type": "string"
          },
          "MapUserGIDToAttribute": {
            "type": "string"
          },
          "MapGroupGIDToAttribute": {
            "type": "string"
          },
          "PreferredDomainServer": {
            "type": "string"
          },
          "AllowAuthenticationUsingDomain": {
            "type": "boolean"
          },
          "Namespace": {
            "$ref": "#/definitions/NamespaceType",
            "x-enumType": "NamespaceType"
          },
          "PacketSigning": {
            "$ref": "#/definitions/PacketSigningType",
            "x-enumType": "PacketSigningType"
          },
          "PacketEncryption": {
            "$ref": "#/definitions/PacketEncryptionType",
            "x-enumType": "PacketEncryptionType"
          },
          "PasswordTrustInterval": {
            "type": "integer",
            "format": "int32"
          },
          "AllowedGroups": {
            "type": "array",
            "description": "Allowed Groups",
            "items": {
              "type": "string"
            }
          },
          "RestrictDDNSList": {
            "type": "array",
            "description": "Restrict DDNS List",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DirectoryServerType": {
        "type": "string",
        "description": "Enum",
        "x-enumNames": [
          "ActiveDirectory",
          "OpenDirectory"
        ],
        "enum": [
          "ActiveDirectory",
          "OpenDirectory"
        ],
        "x-enumType": "DirectoryServerType"
      },
      "MountStyleType": {
        "type": "string",
        "description": "Enum",
        "x-enumNames": [
          "SMB",
          "AFP"
        ],
        "enum": [
          "SMB",
          "AFP"
        ],
        "x-enumType": "MountStyleType"
      },
      "NamespaceType": {
        "type": "string",
        "description": "Enum",
        "x-enumNames": [
          "Domain",
          "Forest"
        ],
        "enum": [
          "Domain",
          "Forest"
        ],
        "x-enumType": "NamespaceType"
      },
      "PacketSigningType": {
        "type": "string",
        "description": "Enum",
        "x-enumNames": [
          "Allow",
          "Disable",
          "Require"
        ],
        "enum": [
          "Allow",
          "Disable",
          "Require"
        ],
        "x-enumType": "PacketSigningType"
      },
      "PacketEncryptionType": {
        "type": "string",
        "description": "Enum",
        "x-enumNames": [
          "Allow",
          "Disable",
          "Require",
          "SSL"
        ],
        "enum": [
          "Allow",
          "Disable",
          "Require",
          "SSL"
        ],
        "x-enumType": "PacketEncryptionType"
      },
      "MacDockSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac MacDock Settings for an macOS device.",
            "required": [
              "Size",
              "AdjustSize",
              "Magnification",
              "MagnificationSize",
              "AdjustMagnification",
              "AdjustMagnificationSize",
              "AdjustPosition",
              "Applications",
              "Documents",
              "NetworkHome",
              "ApplicationsAndItems",
              "MinimizeEffect",
              "ApplicationIcon",
              "AdjustApplicationIcon",
              "AnimateOpenApplication",
              "AllowAnimateOpenApplication",
              "AutoShowAndHide",
              "IndicatorLights",
              "AllowIndicatorLights",
              "MergeUsersDock"
            ],
            "properties": {
              "Size": {
                "type": "integer",
                "description": "Gets or sets Dock Size",
                "format": "int32"
              },
              "AdjustSize": {
                "type": "boolean",
                "description": "Gets or sets AdjustSize"
              },
              "Magnification": {
                "type": "boolean",
                "description": "Gets or sets Magnification"
              },
              "MagnificationSize": {
                "type": "integer",
                "description": "Gets or sets MagnificationSize",
                "format": "int32"
              },
              "AdjustMagnification": {
                "type": "boolean",
                "description": "Gets or sets AdjustMagnification"
              },
              "AdjustMagnificationSize": {
                "type": "boolean",
                "description": "Gets or sets AdjustMagnificationSize"
              },
              "Position": {
                "type": "string",
                "description": "Gets or sets Position"
              },
              "AdjustPosition": {
                "type": "boolean",
                "description": "Gets or sets AdjustPosition"
              },
              "DockApplications": {
                "type": "array",
                "description": "Gets or sets StaticApps",
                "items": {
                  "type": "string"
                }
              },
              "DockItems": {
                "type": "array",
                "description": "Gets or sets StaticOthers",
                "items": {
                  "type": "string"
                }
              },
              "Applications": {
                "type": "boolean",
                "description": "Gets or sets Applications"
              },
              "Documents": {
                "type": "boolean",
                "description": "Gets or sets Documents"
              },
              "NetworkHome": {
                "type": "boolean",
                "description": "Gets or sets NetworkHome"
              },
              "ApplicationsAndItems": {
                "type": "boolean",
                "description": "Gets or sets ApplicationsAndItems"
              },
              "MinimizeUsing": {
                "type": "string",
                "description": "Gets or sets MinimizeUsing"
              },
              "MinimizeEffect": {
                "type": "boolean",
                "description": "Gets or sets MinimizeEffect"
              },
              "ApplicationIcon": {
                "type": "boolean",
                "description": "Gets or sets ApplicationIcon"
              },
              "AdjustApplicationIcon": {
                "type": "boolean",
                "description": "Gets or sets AdjustApplicationIcon"
              },
              "AnimateOpenApplication": {
                "type": "boolean",
                "description": "Gets or sets AnimateOpenApplication"
              },
              "AllowAnimateOpenApplication": {
                "type": "boolean",
                "description": "Gets or sets AllowAnimateOpenApplication"
              },
              "AutoShowAndHide": {
                "type": "boolean",
                "description": "Gets or sets AutoShowAndHide"
              },
              "IndicatorLights": {
                "type": "boolean",
                "description": "Gets or sets IndicatorLights"
              },
              "AllowIndicatorLights": {
                "type": "boolean",
                "description": "Gets or sets AllowIndicatorLights"
              },
              "MergeUsersDock": {
                "type": "boolean",
                "description": "Gets or sets MergeUsersDock"
              }
            }
          }
        ]
      },
      "MacEnergySaverSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac EnergySaver Settings for an macOS device.",
            "required": [
              "ChkSleepModeMacEnergySaverSchedule",
              "ChkStartupComputerMacEnergySaverSchedule"
            ],
            "properties": {
              "MacEnergySaverDesktop": {
                "description": "Settings for Energy Saver Desktop tab",
                "allOf": [
                  {
                    "$ref": "#/definitions/MacEnergySaver"
                  }
                ]
              },
              "MacEnergySaverPortabilityBattery": {
                "description": "Settings for Energy Saver Portability-Battery tab",
                "allOf": [
                  {
                    "$ref": "#/definitions/MacEnergySaver"
                  }
                ]
              },
              "MacEnergySaverPortabilityAdapter": {
                "description": "Settings for Energy Saver Portability-Adapter tab",
                "allOf": [
                  {
                    "$ref": "#/definitions/MacEnergySaver"
                  }
                ]
              },
              "ChkSleepModeMacEnergySaverSchedule": {
                "type": "boolean",
                "description": "Settings for Energy Saver Portability-Adapter tab"
              },
              "ChkStartupComputerMacEnergySaverSchedule": {
                "type": "boolean",
                "description": "Settings for Energy Saver Portability-Adapter tab"
              },
              "MacEnergySaverScheduleRepeatingPowerOn": {
                "description": "Settings for Energy Saver Schedule-On tab",
                "allOf": [
                  {
                    "$ref": "#/definitions/MacEnergySaverSchedule"
                  }
                ]
              },
              "MacEnergySaverScheduleRepeatingPowerOff": {
                "description": "Settings for Energy Saver Schedule-Off tab",
                "allOf": [
                  {
                    "$ref": "#/definitions/MacEnergySaverSchedule"
                  }
                ]
              }
            }
          }
        ]
      },
      "MacEnergySaver": {
        "type": "object",
        "description": "Mac Energy Saver Entity",
        "required": [
          "ComputerSleepInterval",
          "DisplaySleepInterval",
          "PutHardDiskToSleep",
          "WakeForEthernet",
          "AutoStartAfterPowerFailure"
        ],
        "properties": {
          "ComputerSleepInterval": {
            "type": "integer",
            "description": "Gets or sets Computer Interval after which it will go to sleep mode.",
            "format": "int32"
          },
          "DisplaySleepInterval": {
            "type": "integer",
            "description": "Gets or sets Display Interval after which it will go to sleep mode.",
            "format": "int32"
          },
          "PutHardDiskToSleep": {
            "type": "boolean",
            "description": "Gets or sets flag to put hard disk to sleep"
          },
          "WakeForEthernet": {
            "type": "boolean",
            "description": "Gets or sets flag to wake on ethernet connection"
          },
          "AllowPowerButtonToSleep": {
            "type": "boolean",
            "description": "Gets or sets flag to allow power button to put system in sleep mode"
          },
          "AutoStartAfterPowerFailure": {
            "type": "boolean",
            "description": "Gets or sets flag to allow system to auto start after power failure"
          }
        }
      },
      "MacEnergySaverSchedule": {
        "type": "object",
        "description": "Mac Energy Saver Schedule",
        "required": [
          "Time",
          "Weekdays"
        ],
        "properties": {
          "EventType": {
            "type": "string",
            "description": "Event Type (Sleep,Shut Down, Restart)"
          },
          "Time": {
            "type": "integer",
            "description": "Time Duration",
            "format": "int32"
          },
          "Weekdays": {
            "type": "integer",
            "description": "Day when this schedule is applicable",
            "format": "int32"
          }
        }
      },
      "MacExtensibleSingleSignOnSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding Mac Extensible Single Sign On to be displayed with a device or a user or group.",
            "properties": {
              "MacExtensibleSingleSignOn": {
                "description": "Gets or sets the MacExtensibleSingleSignOn for this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/MacExtensibleSingleSignOn"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic."
              }
            }
          }
        ]
      },
      "MacExtensibleSingleSignOn": {
        "type": "object",
        "description": "Contract data for Mac Extensible Single Sign On.",
        "required": [
          "Type"
        ],
        "properties": {
          "ExtensionData": {
            "type": "string",
            "description": "Gets or sets ExtensionData."
          },
          "ExtensionIdentifier": {
            "type": "string",
            "description": "Gets or sets ExtensionIdentifier - The bundle identifier of the app extension that performs single sign on."
          },
          "Hosts": {
            "type": "array",
            "description": "Gets or sets Host names.",
            "items": {
              "type": "string"
            }
          },
          "Realm": {
            "type": "string",
            "description": "Gets or sets Realm - The realm name for Credential payloads."
          },
          "Type": {
            "description": "Gets or sets Type - The type of SSO.",
            "allOf": [
              {
                "$ref": "#/definitions/MacExtensibleSingleSignOnType"
              }
            ],
            "x-enumType": "MacExtensibleSingleSignOnType"
          },
          "URLs": {
            "type": "array",
            "description": "Gets or sets Urls - URL prefixes of identity providers where the app extension.",
            "items": {
              "type": "string"
            }
          },
          "TeamIdentifier": {
            "type": "string",
            "description": "Gets or sets TeamIdentifier - The team identifier of the app extension (macOS specific)."
          }
        }
      },
      "MacExtensibleSingleSignOnType": {
        "type": "string",
        "description": "Defines the SSO type.",
        "x-enumNames": [
          "Redirect",
          "Credential"
        ],
        "enum": [
          "Redirect",
          "Credential"
        ],
        "x-enumType": "MacExtensibleSingleSignOnType"
      },
      "MacFeatureControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding MacAirPlaySection to be displayed with\na device or group.",
            "required": [
              "LockDesktopWallpaper",
              "AllowAirPlayIncomingRequests",
              "AllowAutoUnlock",
              "AllowCloudDesktopAndDocuments",
              "AllowiTunesFileSharing",
              "AllowUniversalControl",
              "AllowCamera",
              "AllowUSBRestrictedMode",
              "AllowCloudDocumentSync",
              "AllowUsingiCloudPassword",
              "AllowCloudBTMM",
              "AllowCloudFMM",
              "AllowCloudBookmarks",
              "AllowCloudMail",
              "AllowCloudCalendar",
              "AllowCloudReminders",
              "AllowCloudAddressBook",
              "AllowCloudNotes",
              "AllowCloudKeychainSync",
              "AllowSpotlightInternetResults",
              "AllowSelectedWidgets",
              "AllowWidgetCalculator",
              "AllowWidgetCalendar",
              "AllowWidgetAddressbook",
              "AllowWidgetDictionary",
              "AllowWidgetCinema",
              "AllowWidgetStickies",
              "AllowWidgetStocks",
              "AllowWidgetTilegame",
              "AllowWidgetUnitConverter",
              "AllowWidgetWeather",
              "AllowWidgetWebClip",
              "AllowWidgetWorldClock",
              "DisableGameCenter",
              "DisableAddingGameCenterFriends",
              "DisableMultiplayerGaming",
              "DisableAccountModifications",
              "DisableAutoFill",
              "AppStoreDisableAppAdoption",
              "AppStoreRequireAdminToInstall",
              "AppStoreSoftwareUpdateOnly",
              "DisableMusicService",
              "FamilyControlsEnabled",
              "DisableAirDrop",
              "AllowInternalMedia",
              "AuthenticateInternalMedia",
              "ReadonlyInternalMedia",
              "AllowExternalMedia",
              "AuthenticateExternalMedia",
              "ReadonlyExternalMedia",
              "AllowDiskImage",
              "AuthenticateDiskMedia",
              "ReadonlyDiskMedia",
              "AllowDvdRam",
              "AuthenticateDvdRam",
              "ReadonlyDvdRam",
              "AllowCDs",
              "AuthenticateCDs",
              "AllowDVDs",
              "AuthenticateDVDs",
              "AllowRecordableDisk",
              "AuthenticateRecordableDisk",
              "ReadonlyRecordableDisk",
              "EjectOnLogout",
              "RestrictSharingService",
              "RestrictSharingAirdrop",
              "RestrictSharingFacebook",
              "RestrictSharingTwitter",
              "RestrictSharingMail",
              "RestrictSharingMessages",
              "RestrictSharingVideoService",
              "RestrictSharingAddToiPhoto",
              "RestrictSharingAddToAperture",
              "RestrictSharingReadList",
              "RestrictSharingSinaWeibo",
              "RestrictSharingAllowAllNewService",
              "ForceDelayedSoftwareUpdates",
              "EnforcedSoftwareUpdateDelayDuration",
              "EnforcedSoftwareUpdateNonOSDeferredInstallDelay",
              "EnforcedSoftwareUpdateMajorOSDeferredInstallDelay",
              "ForceDelayedAppSoftwareUpdates",
              "ForceDelayedMajorSoftwareUpdates"
            ],
            "properties": {
              "LockDesktopWallpaper": {
                "type": "boolean",
                "description": "flag to denote Allow Wallpaper Modification"
              },
              "OverridePicturePath": {
                "type": "string",
                "description": "value of the wallpaper to override existing"
              },
              "AllowAirPlayIncomingRequests": {
                "type": "boolean",
                "description": "Gets or Sets Allow AirPlay Incoming Requests"
              },
              "AllowAutoUnlock": {
                "type": "boolean",
                "description": "Gets or Sets Allow AutoUnlock"
              },
              "AllowCloudDesktopAndDocuments": {
                "type": "boolean",
                "description": "Gets or Sets Allow Cloud Desktop And Documents"
              },
              "AllowiTunesFileSharing": {
                "type": "boolean",
                "description": "Gets or Sets Allow iTunes File Sharing "
              },
              "AllowUniversalControl": {
                "type": "boolean",
                "description": "Gets or Sets Allow Universal Control"
              },
              "AllowCamera": {
                "type": "boolean",
                "description": "flag to allow camera or not"
              },
              "AllowUSBRestrictedMode": {
                "type": "boolean",
                "description": "flag to allow USB or not"
              },
              "AllowCloudDocumentSync": {
                "type": "boolean",
                "description": "flag to denote document sync to icloud"
              },
              "AllowUsingiCloudPassword": {
                "type": "boolean",
                "description": "flag to denote disabling iCloud password usages for local account"
              },
              "AllowCloudBTMM": {
                "type": "boolean",
                "description": "disallows macOS Back to My Mac iCloud service"
              },
              "AllowCloudFMM": {
                "type": "boolean",
                "description": "Allow macOS Find My Mac iCloud service"
              },
              "AllowCloudBookmarks": {
                "type": "boolean",
                "description": "disallows macOS iCloud Bookmark sync."
              },
              "AllowCloudMail": {
                "type": "boolean",
                "description": "disallows macOS Mail iCloud services."
              },
              "AllowCloudCalendar": {
                "type": "boolean",
                "description": "disallows macOS iCloud Calendar services"
              },
              "AllowCloudReminders": {
                "type": "boolean",
                "description": "disallows iCloud Reminder services."
              },
              "AllowCloudAddressBook": {
                "type": "boolean",
                "description": "disallows macOS iCloud Address Book services."
              },
              "AllowCloudNotes": {
                "type": "boolean",
                "description": "disallows macOS iCloud Notes services."
              },
              "AllowCloudKeychainSync": {
                "type": "boolean",
                "description": "disables iCloud keychain synchronization"
              },
              "AllowSpotlightInternetResults": {
                "type": "boolean",
                "description": "Spotlight will not return Internet search results."
              },
              "AllowSelectedWidgets": {
                "type": "boolean",
                "description": "enable the widget only in white list items"
              },
              "AllowWidgetCalculator": {
                "type": "boolean",
                "description": "allow Calculator widget"
              },
              "AllowWidgetCalendar": {
                "type": "boolean",
                "description": "allow Calendar widget"
              },
              "AllowWidgetAddressbook": {
                "type": "boolean",
                "description": "allow Contact widget"
              },
              "AllowWidgetDictionary": {
                "type": "boolean",
                "description": "allow Dictionary widget"
              },
              "AllowWidgetCinema": {
                "type": "boolean",
                "description": "allow Movies widget"
              },
              "AllowWidgetStickies": {
                "type": "boolean",
                "description": "allow Stickies widget"
              },
              "AllowWidgetStocks": {
                "type": "boolean",
                "description": "allow Stocks widget"
              },
              "AllowWidgetTilegame": {
                "type": "boolean",
                "description": "allow Tile Game widget"
              },
              "AllowWidgetUnitConverter": {
                "type": "boolean",
                "description": "allow Unit Converter widget"
              },
              "AllowWidgetWeather": {
                "type": "boolean",
                "description": "allow Weather widget"
              },
              "AllowWidgetWebClip": {
                "type": "boolean",
                "description": "allow Web-Clip widget"
              },
              "AllowWidgetWorldClock": {
                "type": "boolean",
                "description": "allow World-Clock widget"
              },
              "DisableGameCenter": {
                "type": "boolean",
                "description": "disable Game Center"
              },
              "DisableAddingGameCenterFriends": {
                "type": "boolean",
                "description": "Allowing Adding friends to Game center"
              },
              "DisableMultiplayerGaming": {
                "type": "boolean",
                "description": "Allowing multiplayer gaming in game center"
              },
              "DisableAccountModifications": {
                "type": "boolean",
                "description": "Allowing Account modification in Game center"
              },
              "DisableAutoFill": {
                "type": "boolean",
                "description": "Disable Safari web browser"
              },
              "AppStoreDisableAppAdoption": {
                "type": "boolean",
                "description": "Disable App Adoption by users\n            "
              },
              "AppStoreRequireAdminToInstall": {
                "type": "boolean",
                "description": "Restrict app installations to admin users"
              },
              "AppStoreSoftwareUpdateOnly": {
                "type": "boolean",
                "description": "Restrict app installations to software updates only"
              },
              "DisableMusicService": {
                "type": "boolean",
                "description": "Disable Apple Music Service"
              },
              "FamilyControlsEnabled": {
                "type": "boolean",
                "description": "Enable family controls"
              },
              "Applications": {
                "type": "array",
                "description": "Disable Applications",
                "items": {
                  "$ref": "#/definitions/FeatureControlSingleAppSection"
                }
              },
              "WhiteListDirectory": {
                "type": "array",
                "description": "Whitelist Directories",
                "items": {
                  "type": "string"
                }
              },
              "BlackListDirectory": {
                "type": "array",
                "description": "Blacklist Directories",
                "items": {
                  "type": "string"
                }
              },
              "DisableAirDrop": {
                "type": "boolean",
                "description": "Disable Air Drop"
              },
              "AllowInternalMedia": {
                "type": "boolean",
                "description": "Allow Internal Media"
              },
              "AuthenticateInternalMedia": {
                "type": "boolean",
                "description": "Allow Internal Media - if Authenticate"
              },
              "ReadonlyInternalMedia": {
                "type": "boolean",
                "description": "Allow Internal Media - Read Only"
              },
              "AllowExternalMedia": {
                "type": "boolean",
                "description": "Allow External Media"
              },
              "AuthenticateExternalMedia": {
                "type": "boolean",
                "description": "Allow External Media - if Authenticate"
              },
              "ReadonlyExternalMedia": {
                "type": "boolean",
                "description": "Allow External Media - Read Only"
              },
              "AllowDiskImage": {
                "type": "boolean",
                "description": "Allow Disk Image"
              },
              "AuthenticateDiskMedia": {
                "type": "boolean",
                "description": "Allow Disk Image - if Authenticate"
              },
              "ReadonlyDiskMedia": {
                "type": "boolean",
                "description": "Allow Disk Image - Read Only"
              },
              "AllowDvdRam": {
                "type": "boolean",
                "description": "Allow DVD RAM"
              },
              "AuthenticateDvdRam": {
                "type": "boolean",
                "description": "Allow DVD RAM - if Authenticate"
              },
              "ReadonlyDvdRam": {
                "type": "boolean",
                "description": "Allow DVD RAM - Read Only"
              },
              "AllowCDs": {
                "type": "boolean",
                "description": "Allow CDs"
              },
              "AuthenticateCDs": {
                "type": "boolean",
                "description": "Allow CDs - if Authenticate"
              },
              "AllowDVDs": {
                "type": "boolean",
                "description": "Allow DVDs"
              },
              "AuthenticateDVDs": {
                "type": "boolean",
                "description": "Allow DVDs - if Authenticate"
              },
              "AllowRecordableDisk": {
                "type": "boolean",
                "description": "Allow Recordable Disk"
              },
              "AuthenticateRecordableDisk": {
                "type": "boolean",
                "description": "Allow Recordable Disk - if Authenticate"
              },
              "ReadonlyRecordableDisk": {
                "type": "boolean",
                "description": "Allow Recordable Disk - Read Only"
              },
              "EjectOnLogout": {
                "type": "boolean",
                "description": "Eject Disk on user Logout"
              },
              "RestrictSharingService": {
                "type": "boolean",
                "description": "Restrict Sharing Services"
              },
              "RestrictSharingAirdrop": {
                "type": "boolean",
                "description": "Restrict Sharing Services - AirDrop"
              },
              "RestrictSharingFacebook": {
                "type": "boolean",
                "description": "Restrict Sharing Services - Facebook"
              },
              "RestrictSharingTwitter": {
                "type": "boolean",
                "description": "Restrict Sharing Services - Twitter"
              },
              "RestrictSharingMail": {
                "type": "boolean",
                "description": "Restrict Sharing Services - Mails"
              },
              "RestrictSharingMessages": {
                "type": "boolean",
                "description": "Restrict Sharing Services - Messages"
              },
              "RestrictSharingVideoService": {
                "type": "boolean",
                "description": "Restrict Sharing Services - Video Services"
              },
              "RestrictSharingAddToiPhoto": {
                "type": "boolean",
                "description": "Restrict Sharing Services - Add to iPhoto"
              },
              "RestrictSharingAddToAperture": {
                "type": "boolean",
                "description": "Restrict Sharing Services - Add to Aperture"
              },
              "RestrictSharingReadList": {
                "type": "boolean",
                "description": "Restrict Sharing Services - Add to reading list"
              },
              "RestrictSharingSinaWeibo": {
                "type": "boolean",
                "description": "Restrict Sharing Services - Sina Weibo"
              },
              "RestrictSharingAllowAllNewService": {
                "type": "boolean",
                "description": "Restrict Sharing Services - Allow All new sharing services"
              },
              "ForceDelayedSoftwareUpdates": {
                "type": "boolean",
                "description": "Sets the delay time for software update"
              },
              "EnforcedSoftwareUpdateDelayDuration": {
                "type": "integer",
                "description": "Sets the software update delay duration",
                "format": "int32"
              },
              "EnforcedSoftwareUpdateNonOSDeferredInstallDelay": {
                "type": "integer",
                "description": "Sets the non OS update delay duration",
                "format": "int32"
              },
              "EnforcedSoftwareUpdateMajorOSDeferredInstallDelay": {
                "type": "integer",
                "description": "Sets the major OS update delay duration",
                "format": "int32"
              },
              "ForceDelayedAppSoftwareUpdates": {
                "type": "boolean",
                "description": "Sets the delay time for app software update"
              },
              "ForceDelayedMajorSoftwareUpdates": {
                "type": "boolean",
                "description": "Sets the delay time for major software update"
              }
            }
          }
        ]
      },
      "FeatureControlSingleAppSection": {
        "type": "object",
        "description": "Data contract for iOS feature control Single App configuration.",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets application name."
          },
          "BundleId": {
            "type": "string",
            "description": "Gets or sets application BundleId."
          }
        }
      },
      "MacFileVaultSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding Mac File Vault to be displayed with a device or group.",
            "required": [
              "EnforceFileVault",
              "CreatePersonalRecoveryKey",
              "UseInstitutionalRecoveryKey",
              "UseInstitutionalKeyCreatePersonalKey",
              "ShowPersonalRecoveryKey",
              "StorePersonalRecoveryKey",
              "RebootRequired",
              "UnlockFileVaultRequiredAfterHibernation"
            ],
            "properties": {
              "EnforceFileVault": {
                "type": "boolean",
                "description": "Provides the user an option to enable disk encryption on the device."
              },
              "CreatePersonalRecoveryKey": {
                "type": "boolean",
                "description": "If personal recovery is set, then the device will be encrypted using personal recovery key generated by the MAC device."
              },
              "UseInstitutionalRecoveryKey": {
                "type": "boolean",
                "description": "If an institutional recovery is set, then the device will be encrypted using an institutional recovery key."
              },
              "UseInstitutionalKeyCreatePersonalKey": {
                "type": "boolean",
                "description": "If personal and institutional recovery is set, then create a personal FileVault recovery key, Use an institutional recovery key"
              },
              "InstitutionalRecoveryKeyCertificateRefId": {
                "type": "string",
                "description": "Institutional certificate reference Id."
              },
              "ShowPersonalRecoveryKey": {
                "type": "boolean",
                "description": "If this option is set, then the personal recovery key will not be displayed to the user even after FileVault is enabled."
              },
              "StorePersonalRecoveryKey": {
                "type": "boolean",
                "description": "Provides the user an option to retain the personal recovery key on the MobiControl server in encrypted format."
              },
              "RebootRequired": {
                "type": "boolean",
                "description": "If this option is set, then it forces the device to reboot and finish disk encryption."
              },
              "UnlockFileVaultRequiredAfterHibernation": {
                "type": "boolean",
                "description": "If this option is set, then the password will be required to unlock the disk after hibernation and to restore the state of the disk to the last saved state."
              },
              "ConfigurationPayloadUUID": {
                "type": "string",
                "description": "FileVault Configuration Payload UUID"
              },
              "DiskEncryptionConfigurationPayloadUUID": {
                "type": "string",
                "description": "FileVault Disk Encryption Configuration Payload UUID"
              },
              "EscrowConfigurationPayloadUUID": {
                "type": "string",
                "description": "FileVault Escrow Configuration Payload UUID"
              },
              "CertificateConfigurationPayloadUUID": {
                "type": "string",
                "description": "FileVault Certificate Configuration Payload UUID"
              }
            }
          }
        ]
      },
      "MacFirewallSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding MacFirewallSection to be displayed with\na device or group.",
            "required": [
              "ManageFirewallSettings",
              "EnableFirewall",
              "BlockAllIncomingConnections",
              "EnableStealthMode"
            ],
            "properties": {
              "ManageFirewallSettings": {
                "type": "boolean",
                "description": "Gets or sets the Manage Firewall Settings"
              },
              "EnableFirewall": {
                "type": "boolean",
                "description": "Gets or sets the Enable Firewall"
              },
              "BlockAllIncomingConnections": {
                "type": "boolean",
                "description": "Gets or sets the Block Incoming Connections"
              },
              "EnableStealthMode": {
                "type": "boolean",
                "description": "Gets or sets the Stealth Mode"
              },
              "FirewallRestrictedApps": {
                "type": "array",
                "description": "Gets or sets the Firewall Restricted Applications",
                "items": {
                  "$ref": "#/definitions/FirewallRestrictedApplications"
                }
              }
            }
          }
        ]
      },
      "FirewallRestrictedApplications": {
        "type": "object",
        "description": "Data contract for Firewall Restricted mac App configuration.",
        "required": [
          "Allowed"
        ],
        "properties": {
          "BundleId": {
            "type": "string",
            "description": "Gets or sets Bundle ID."
          },
          "ApplicationName": {
            "type": "string",
            "description": "Gets or sets Application Name."
          },
          "Allowed": {
            "type": "boolean",
            "description": "Gets or sets if Application is allowed by Firewall."
          }
        }
      },
      "MacKernelExtensionSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac Kernel Extension Settings for an macOS device.",
            "required": [
              "AllowUserOverrides"
            ],
            "properties": {
              "AllowUserOverrides": {
                "type": "boolean",
                "description": "Allow User Overrides"
              },
              "AllowedTeamIdentifiers": {
                "type": "array",
                "description": "Allowed Team Identifiers",
                "items": {
                  "type": "string"
                }
              },
              "AllowedKernelExtensions": {
                "type": "array",
                "description": "Allowed Kernel Extensions",
                "items": {
                  "$ref": "#/definitions/MacKernelExtension"
                }
              }
            }
          }
        ]
      },
      "MacKernelExtension": {
        "type": "object",
        "description": "Represents a kernel extension entity in allowed kernel extension list.\n            ",
        "properties": {
          "BundleIdentifier": {
            "type": "string",
            "description": "Bundle Identifier of Kernel Extension"
          },
          "TeamIdentifier": {
            "type": "string",
            "description": "Team Identifier of Kernel Extension"
          }
        }
      },
      "MacPrintingSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "macOs printing payload configuration. payload type: com.apple.mcxprinting",
            "required": [
              "RequireAdminToAddPrinters",
              "AllowLocalPrinters",
              "RequireAdminToPrintLocally",
              "ShowOnlyManagedPrinters",
              "PrintFooter",
              "PrintMACAddress",
              "PrintFooterFontSize"
            ],
            "properties": {
              "DefaultPrinter": {
                "type": "string",
                "description": "Set default printer on mac device."
              },
              "RequireAdminToAddPrinters": {
                "type": "boolean",
                "description": "Allow user to modify printer list or not."
              },
              "AllowLocalPrinters": {
                "type": "boolean",
                "description": "Allow local printers on mac machine or not."
              },
              "RequireAdminToPrintLocally": {
                "type": "boolean",
                "description": "Require admin credentials to print from local printer."
              },
              "ShowOnlyManagedPrinters": {
                "type": "boolean",
                "description": "Only show managed printers on mac device."
              },
              "PrintFooter": {
                "type": "boolean",
                "description": "Print pre-set page footer or not.(username and date)"
              },
              "PrintMACAddress": {
                "type": "boolean",
                "description": "Include Mac address in footer while printing."
              },
              "PrintFooterFontName": {
                "type": "string",
                "description": "Font name used in footer."
              },
              "PrintFooterFontSize": {
                "type": "integer",
                "description": "Footer font size.",
                "format": "int32"
              },
              "UserPrinterList": {
                "type": "array",
                "description": "List of printers which will be installed on mac device.",
                "items": {
                  "$ref": "#/definitions/MacPrinter"
                }
              }
            }
          }
        ]
      },
      "MacPrinter": {
        "type": "object",
        "description": "Represents a printer entity in User installed printer list.",
        "required": [
          "PrinterLocked"
        ],
        "properties": {
          "DisplayName": {
            "type": "string",
            "description": "Printer Name"
          },
          "DeviceURI": {
            "type": "string",
            "description": "Printer Address on network."
          },
          "Location": {
            "type": "string",
            "description": "Friendly location of printer. It can be any custom location like 'SOTI India office floor 1'"
          },
          "Model": {
            "type": "string",
            "description": "Printer Model/driver name. Like it is a 'Generic Printer' or any custom model."
          },
          "CustomDriver": {
            "type": "string",
            "description": "Printer custom driver name."
          },
          "PrinterLocked": {
            "type": "boolean",
            "description": "Printer settings are locked or not. If user can modify printer settings or not."
          },
          "PPDURL": {
            "type": "string",
            "description": "PPD file location. On network or local mac storage."
          }
        }
      },
      "MacWebContentFilterSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "macOs web content filter payload configuration. payload type: com.apple.web content filter",
            "required": [
              "FilterBrowsers",
              "FilterSockets"
            ],
            "properties": {
              "FilterBrowsers": {
                "type": "boolean",
                "description": "Allow user to filter browser option."
              },
              "FilterSockets": {
                "type": "boolean",
                "description": "Allow user to filter sockets option."
              },
              "Organisation": {
                "type": "string",
                "description": "Organisation name that is passed to the 3rd party"
              },
              "Password": {
                "type": "string",
                "description": "Password for authenticating to the service"
              },
              "UserName": {
                "type": "string",
                "description": "UserName for authenticating to the service"
              },
              "CertificateRefId": {
                "type": "string",
                "description": "Required Certificate reference Id for authenticating to the service"
              },
              "FilterType": {
                "type": "string",
                "description": "Filter type"
              },
              "FilterName": {
                "type": "string",
                "description": "Display name of the filter in the app and on the device"
              },
              "Identifier": {
                "type": "string",
                "description": "identifier for the filter plug in"
              },
              "ServiceAddress": {
                "type": "string",
                "description": "Host name or url or ip address of the service"
              },
              "VendorConfig": {
                "type": "array",
                "description": "Custom configuration data for the filter plug-in",
                "items": {
                  "$ref": "#/definitions/MacVendorConfig"
                }
              }
            }
          }
        ]
      },
      "MacVendorConfig": {
        "type": "object",
        "description": "Vendor config for mac web content filter",
        "properties": {
          "Key": {
            "type": "string",
            "description": "Key of custom data"
          },
          "Value": {
            "type": "string",
            "description": "value of custom data"
          }
        }
      },
      "MacXsanSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac Xsan Settings for an macOS device.",
            "properties": {
              "XsanName": {
                "type": "string",
                "description": "Xsan Name"
              },
              "FileSystemNameServers": {
                "type": "array",
                "description": "File System Name Servers",
                "items": {
                  "type": "string"
                }
              },
              "AuthenticationSecret": {
                "type": "string",
                "description": "Authentication Secret"
              }
            }
          }
        ]
      },
      "ManagedLoginItemsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac ManagedLoginItem Settings for an macOS device.",
            "properties": {
              "Rules": {
                "type": "array",
                "description": "Gets or sets the ManagedLoginItemRule.",
                "items": {
                  "$ref": "#/definitions/ManagedLoginItemRule"
                }
              }
            }
          }
        ]
      },
      "ManagedLoginItemRule": {
        "type": "object",
        "description": "ManagedLoginItemRule class.",
        "required": [
          "RuleType"
        ],
        "properties": {
          "RuleType": {
            "description": "Gets or sets ManagedLoginItemRuleType.",
            "allOf": [
              {
                "$ref": "#/definitions/ManagedLoginItemRuleType"
              }
            ],
            "x-enumType": "ManagedLoginItemRuleType"
          },
          "RuleValue": {
            "type": "string",
            "description": "Gets or sets RuleValue."
          },
          "Comment": {
            "type": "string",
            "description": "Gets or sets Comment."
          },
          "TeamIdentifier": {
            "type": "string",
            "description": "Gets or sets TeamIdentifier."
          }
        }
      },
      "ManagedLoginItemRuleType": {
        "type": "string",
        "description": "ManagedLoginItemRuleType enum.",
        "x-enumNames": [
          "BundleIdentifier",
          "BundleIdentifierPrefix",
          "Label",
          "LabelPrefix",
          "TeamIdentifier"
        ],
        "enum": [
          "BundleIdentifier",
          "BundleIdentifierPrefix",
          "Label",
          "LabelPrefix",
          "TeamIdentifier"
        ],
        "x-enumType": "ManagedLoginItemRuleType"
      },
      "MacParentalControlsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding ParentalControlsSection for Mac Device and User Profile.",
            "required": [
              "IronwoodAllowed",
              "ProfanityAllowed",
              "RestrictWeb",
              "UseContentFilter",
              "WhiteListEnabled",
              "FamilyControlsEnabled",
              "WeekdaysAllowanceTimeLimit",
              "WeekendsAllowanceTimeLimit",
              "SundayToThursdayCurfew",
              "FridayAndSaturdayCurfew"
            ],
            "properties": {
              "IronwoodAllowed": {
                "type": "boolean",
                "description": "Gets or sets Use of Siri and Dictation"
              },
              "ProfanityAllowed": {
                "type": "boolean",
                "description": "Gets or sets Profanity in Dictionary and Dictation is Hidden or not"
              },
              "RestrictWeb": {
                "type": "boolean",
                "description": "Gets or sets Web Content Filters"
              },
              "UseContentFilter": {
                "type": "boolean",
                "description": "Gets or sets to Automatically filter content"
              },
              "WhiteListEnabled": {
                "type": "boolean",
                "description": "Gets or sets to allow us to use FilterWhiteList and FilterBlackList"
              },
              "FilterWhiteList": {
                "type": "array",
                "description": "Gets or sets the list of URLs designating the only allowed Websites",
                "items": {
                  "type": "string"
                }
              },
              "FilterBlackList": {
                "type": "array",
                "description": "Gets or sets the list of URLs of Websites that are never to be allowed",
                "items": {
                  "type": "string"
                }
              },
              "SiteWhiteList": {
                "type": "array",
                "description": "Gets or sets an list of dictionaries that define additional allowed sites besides those in the automated list of allowed and un-allowed sites, including disallowed adult sites",
                "items": {
                  "type": "string"
                }
              },
              "FamilyControlsEnabled": {
                "type": "boolean",
                "description": "Gets or sets us able to use Time Limits"
              },
              "WeekdaysAllowanceTimeLimit": {
                "type": "integer",
                "description": "Gets or sets Weekdays Allowance Time Limit",
                "format": "int32"
              },
              "WeekendsAllowanceTimeLimit": {
                "type": "integer",
                "description": "Gets or sets Weekends Allowance Time Limit",
                "format": "int32"
              },
              "SundayToThursdayCurfew": {
                "type": "boolean",
                "description": "Gets or sets Sunday To Thursday Curfew"
              },
              "FridayAndSaturdayCurfew": {
                "type": "boolean",
                "description": "Gets or sets  Friday To Saturday Curfew"
              },
              "FromTimeSundayToThursday": {
                "type": "string",
                "description": "Gets or sets Start time for Curfew that is to start from Sunday"
              },
              "ToTimeSundayToThursday": {
                "type": "string",
                "description": "Gets or sets End time for Curfew that is to end on Thursday"
              },
              "FromTimeFridayAndSaturday": {
                "type": "string",
                "description": "Gets or sets Start time for Curfew that is to start from Friday"
              },
              "ToTimeFridayAndSaturday": {
                "type": "string",
                "description": "Gets or sets End time for Curfew that is to end on Saturday"
              }
            }
          }
        ]
      },
      "MacProxySettingSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding MacAirPlaySection to be displayed with\na device or group.",
            "required": [
              "UsePASV",
              "EnableAutoProxy",
              "HasProxyHostException"
            ],
            "properties": {
              "WebProxy": {
                "description": "Gets or sets the Devices.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProxySettingHostDetail"
                  }
                ]
              },
              "SecureWebProxy": {
                "description": "Gets or sets the Secure Web Proxy (HTTPS)",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProxySettingHostDetail"
                  }
                ]
              },
              "FtpProxy": {
                "description": "Gets or sets the FTP Proxy",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProxySettingHostDetail"
                  }
                ]
              },
              "SocksProxy": {
                "description": "Gets or sets the SOCKS Proxy",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProxySettingHostDetail"
                  }
                ]
              },
              "StreamingProxy": {
                "description": "Gets or sets the Streaming Proxy (RTSP)",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProxySettingHostDetail"
                  }
                ]
              },
              "GropherProxy": {
                "description": "Gets or sets the Gropher Proxy",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProxySettingHostDetail"
                  }
                ]
              },
              "UsePASV": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether gets or sets the UsePASV"
              },
              "EnableAutoProxy": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether gets or sets the Enable Auto Proxy"
              },
              "AutoProxyHostName": {
                "type": "string",
                "description": "Gets or sets the Auto Proxy Host Name"
              },
              "HasProxyHostException": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether gets or sets the Has Proxy Host Exception"
              },
              "ProxyHostExceptions": {
                "type": "array",
                "description": "Gets or sets the Proxy Host Exceptions.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ProxySettingHostDetail": {
        "type": "object",
        "description": "Represents an Proxy Setting Host Detail",
        "required": [
          "IsEnabled"
        ],
        "properties": {
          "IsEnabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether gets or sets the Proxy Is Enabled"
          },
          "HostName": {
            "type": "string",
            "description": "Gets or sets the Proxy Host Name"
          },
          "PortNo": {
            "type": "string",
            "description": "Gets or sets the Proxy Port No"
          }
        }
      },
      "SecurityPrivacySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding MacAirPlaySection to be displayed with\na device or group.",
            "required": [
              "ConfigureGatekeeparSetting",
              "DownloadSource",
              "DisallowGatekeeparSetting",
              "AllowChangePassword",
              "RequirePassword",
              "RequirePasswordTime",
              "SetLockMessage",
              "UnlockUsingAppleWatch",
              "SendDiagnosisToApple"
            ],
            "properties": {
              "ConfigureGatekeeparSetting": {
                "type": "boolean",
                "description": "Gets or sets the Configure Gatekeepar Setting"
              },
              "DownloadSource": {
                "description": "Gets or sets Allow apps download Source from Mac App Store",
                "allOf": [
                  {
                    "$ref": "#/definitions/DownloadSourceType"
                  }
                ]
              },
              "DisallowGatekeeparSetting": {
                "type": "boolean",
                "description": "Gets or sets Disallow Gatekeepar Setting"
              },
              "AllowChangePassword": {
                "type": "boolean",
                "description": "Gets or sets Allow Change Password"
              },
              "RequirePassword": {
                "type": "boolean",
                "description": "Gets or sets Require Password"
              },
              "RequirePasswordTime": {
                "type": "integer",
                "description": "Gets or sets Require Password Time",
                "format": "int32"
              },
              "SetLockMessage": {
                "type": "boolean",
                "description": "Gets or sets the Set Lock Message"
              },
              "UnlockUsingAppleWatch": {
                "type": "boolean",
                "description": "Gets or sets Unlock Using Apple Watch"
              },
              "SendDiagnosisToApple": {
                "type": "boolean",
                "description": "Gets or sets the Send Diagnosis and Usage Data To Apple."
              },
              "PrivacyPreferences": {
                "type": "array",
                "description": "Gets or sets the PrivacyPreference Services List.",
                "items": {
                  "$ref": "#/definitions/PrivacyPreferenceDetail"
                }
              }
            }
          }
        ]
      },
      "DownloadSourceType": {
        "type": "string",
        "description": "Enum",
        "x-enumNames": [
          "MacAppStore",
          "MacAppStoreAndIdentifiedDeveloper",
          "Anywhere"
        ],
        "enum": [
          "MacAppStore",
          "MacAppStoreAndIdentifiedDeveloper",
          "Anywhere"
        ],
        "x-enumType": "DownloadSourceType"
      },
      "PrivacyPreferenceDetail": {
        "type": "object",
        "description": "Represents an Proxy Setting Host Detail",
        "required": [
          "AllowStandardUserToSetSystemService",
          "Allowed",
          "StaticCode"
        ],
        "properties": {
          "Service": {
            "type": "string",
            "description": "Gets or sets the Privacy Service Name"
          },
          "IdentifierType": {
            "type": "string",
            "description": "Gets or sets the The type of Identifier value. Must be either bundleID or path."
          },
          "Identifier": {
            "type": "string",
            "description": "Gets or sets the bundle ID or installation path of the binary."
          },
          "CodeRequirement": {
            "type": "string",
            "description": "Gets or sets the CodeRequirement"
          },
          "AllowStandardUserToSetSystemService": {
            "type": "boolean",
            "description": "Gets or sets the access for standard user to process."
          },
          "Allowed": {
            "type": "boolean",
            "description": "Gets or sets the access to process"
          },
          "StaticCode": {
            "type": "boolean",
            "description": "Gets or sets the StaticCode"
          },
          "AEReceiverIdentifier": {
            "type": "string",
            "description": "Gets or sets the AEReceiverIdentifier"
          },
          "AEReceiverIdentifierType": {
            "type": "string",
            "description": "Gets or sets the AEReceiverIdentifierType"
          },
          "AEReceiverCodeRequirement": {
            "type": "string",
            "description": "Gets or sets the AEReceiverCodeRequirement"
          }
        }
      },
      "SetupAssistant": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac SetupAssistant Settings for an macOS device.",
            "required": [
              "SkipCloudSetup",
              "SkipSiriSetup",
              "SkipPrivacySetup",
              "SkipiCloudStorageSetup",
              "SkipAppearance",
              "SkipScreenTime",
              "SkipTouchIdSetup",
              "SkipTrueTone",
              "SkipUnlockWithWatch",
              "SkipAccessibility"
            ],
            "properties": {
              "SkipCloudSetup": {
                "type": "boolean",
                "description": "Gets or Sets the value to  SkipCloudSetup"
              },
              "SkipSiriSetup": {
                "type": "boolean",
                "description": "Gets or Sets the value to  SkipSiriSetup"
              },
              "SkipPrivacySetup": {
                "type": "boolean",
                "description": "Gets or Sets the value to  SkipPrivacySetup"
              },
              "SkipiCloudStorageSetup": {
                "type": "boolean",
                "description": "Gets or Sets the value to  SkipiCloudStorageSetup"
              },
              "SkipAppearance": {
                "type": "boolean",
                "description": "Gets or Sets the value to  SkipAppearance"
              },
              "SkipScreenTime": {
                "type": "boolean",
                "description": "Gets or Sets the value to  SkipScreenTime"
              },
              "SkipTouchIdSetup": {
                "type": "boolean",
                "description": "Gets or Sets the value to  SkipTouchIdSetup"
              },
              "SkipTrueTone": {
                "type": "boolean",
                "description": "Gets or Sets the value to  SkipTrueTone"
              },
              "SkipUnlockWithWatch": {
                "type": "boolean",
                "description": "Gets or Sets the value to  SkipUnlockWithWatch"
              },
              "SkipAccessibility": {
                "type": "boolean",
                "description": "Gets or Sets the value to  SkipAccessibility"
              }
            }
          }
        ]
      },
      "SoftwareUpdateSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac Directory Settings for an macOS device.",
            "required": [
              "AllowPreReleaseInstallation",
              "AutomaticallyInstallAppUpdates",
              "AutomaticallyInstallMacOSUpdates",
              "AutomaticCheckEnabled",
              "AutomaticDownload",
              "ConfigDataInstall",
              "CriticalUpdateInstall",
              "RestrictSoftwareUpdate",
              "ForceDelayedSoftwareUpdates",
              "EnforcedSoftwareUpdateDelayDuration"
            ],
            "properties": {
              "AllowPreReleaseInstallation": {
                "type": "boolean",
                "description": "Allow PreRelease Installation"
              },
              "CatalogURL": {
                "type": "string",
                "description": "Catalog URL for software update"
              },
              "AutomaticallyInstallAppUpdates": {
                "type": "boolean",
                "description": "Automatically Install App Updates"
              },
              "AutomaticallyInstallMacOSUpdates": {
                "type": "boolean",
                "description": "Automatically Install MacOS Updates"
              },
              "AutomaticCheckEnabled": {
                "type": "boolean",
                "description": "Automatic Check Enabled"
              },
              "AutomaticDownload": {
                "type": "boolean",
                "description": "Automatic Download"
              },
              "ConfigDataInstall": {
                "type": "boolean",
                "description": "ConfigData Install"
              },
              "CriticalUpdateInstall": {
                "type": "boolean",
                "description": "Critical Update Install"
              },
              "RestrictSoftwareUpdate": {
                "type": "boolean",
                "description": "Restrict Software Update"
              },
              "ForceDelayedSoftwareUpdates": {
                "type": "boolean",
                "description": "Sets the software update delay duration"
              },
              "EnforcedSoftwareUpdateDelayDuration": {
                "type": "integer",
                "description": "Sets the delay time for software update",
                "format": "int32"
              }
            }
          }
        ]
      },
      "TimeMachineSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the Mac Directory Settings for an macOS device.",
            "required": [
              "BackupAllVolumes",
              "BackupSystemFilesAndFolders",
              "EnableAutomaticBackups",
              "EnableLocalSnapshots",
              "EnablePathsToSkip"
            ],
            "properties": {
              "BackupServer": {
                "type": "string",
                "description": "Backup Server"
              },
              "BackupAllVolumes": {
                "type": "boolean",
                "description": "All Volume"
              },
              "BackupSystemFilesAndFolders": {
                "type": "boolean",
                "description": "System Files and Folder"
              },
              "EnableAutomaticBackups": {
                "type": "boolean",
                "description": "Automatic Backups"
              },
              "EnableLocalSnapshots": {
                "type": "boolean",
                "description": "Local Snapshots"
              },
              "BackupSizeLimit": {
                "type": "integer",
                "description": "Size Limit",
                "format": "int64"
              },
              "EnablePathsToSkip": {
                "type": "boolean",
                "description": "Enable Paths to Skip"
              },
              "PathsToSkip": {
                "type": "array",
                "description": "Paths to Skip",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "LinuxAuthenticationSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract for Web Filter settings.",
            "required": [
              "AllowSimplePasscode"
            ],
            "properties": {
              "MinimumPasscodeLength": {
                "type": "integer",
                "description": "Gets or sets the minimum passcode length.  Specifies the minimum number of characters a passcode can contain.",
                "format": "int32"
              },
              "AllowSimplePasscode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the user can use sequential or repeated characters in their passcodes. (For example, this would allow the passcodes “3333” or “DEFG.”)"
              },
              "MinimumNumericValue": {
                "type": "integer",
                "description": "Gets or sets a value indicating whether the passcode must contain at least one number.",
                "format": "int32"
              },
              "MinimumSpecialCharacters": {
                "type": "integer",
                "description": "Gets or sets a value indicating whether the passcode must contain at least one special character.",
                "format": "int32"
              },
              "MinimumUpperCase": {
                "type": "integer",
                "description": "Gets or sets a value indicating whether the passcode must contain at least one capital letter.",
                "format": "int32"
              },
              "MinimumLowerCase": {
                "type": "integer",
                "description": "Gets or sets a value indicating whether the passcode must contain at least one capital letter.",
                "format": "int32"
              },
              "MaximumPasscodeAgeInDays": {
                "type": "integer",
                "description": "Gets or sets the maximum passcode age.  Requires users to change their passcode at the interval you specify.",
                "format": "int32"
              },
              "PasscodeHistory": {
                "type": "integer",
                "description": "Gets or sets the length of the passcode history.  A new passcode won’t be accepted if it matches a previously used passcode. You can specify how many previous passcodes are remembered and compared.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "LinuxCustomProfilesSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "           Defines the scheduled scripts configuration \n           ",
            "properties": {
              "CustomProfile": {
                "description": "Gets or sets the custom profile in this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/LinuxCustomProfile"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "LinuxCustomProfile": {
        "type": "object",
        "description": "Represents a single Custom Profile in an Linux Custom Profiles configuration.",
        "properties": {
          "ProfileName": {
            "type": "string",
            "description": "Profile Name"
          },
          "ProfileIdentifier": {
            "type": "string",
            "description": "Profile Identifier"
          },
          "CustomConfigurations": {
            "type": "array",
            "description": "Custom Configurations",
            "items": {
              "$ref": "#/definitions/CustomConfiguration"
            }
          }
        }
      },
      "CustomConfiguration": {
        "type": "object",
        "description": "           Data contract for Custom Configuration\n           ",
        "properties": {
          "Key": {
            "type": "string",
            "description": "Key"
          },
          "Value": {
            "type": "string",
            "description": "Value"
          }
        }
      },
      "LinuxFeatureControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract for Feature Control settings.",
            "required": [
              "AllowUSBPorts",
              "AllowUSBMediaStorage",
              "AllowUSBReadOnlyAccess"
            ],
            "properties": {
              "AllowUSBPorts": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [allow usb ports]."
              },
              "AllowUSBMediaStorage": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [allow usb media storage]."
              },
              "AllowUSBReadOnlyAccess": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [allow usb read only access]."
              }
            }
          }
        ]
      },
      "LinuxLockdownSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable Kiosk\\Lockdown for Linux devices.",
            "required": [
              "Enabled"
            ],
            "properties": {
              "DefaultPassword": {
                "type": "string",
                "description": "Gets or sets the default password."
              },
              "Enabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the lockdown menu is enabled."
              },
              "Controls": {
                "type": "array",
                "description": "Gets or sets the collection of Controls.",
                "items": {
                  "$ref": "#/definitions/LinuxLockdownControl"
                }
              },
              "RevertTimeout": {
                "type": "number",
                "description": "Gets or sets the Admin mode timeout.",
                "format": "double"
              }
            }
          }
        ]
      },
      "LinuxLockdownControl": {
        "type": "object",
        "description": "Class to handle Lockdown controls (User, Administrator, Speed, etc).",
        "properties": {
          "MenuItems": {
            "type": "array",
            "description": "Gets or sets the collection of Linux Lockdown MenuItems.",
            "items": {
              "$ref": "#/definitions/LinuxLockdownMenuItem"
            }
          },
          "ImageItems": {
            "type": "array",
            "description": "Gets or sets the collection of images.",
            "items": {
              "type": "string"
            }
          },
          "TemplateName": {
            "type": "string",
            "description": "Gets or sets the HTML template name."
          },
          "TemplateFileReferenceId": {
            "type": "string",
            "description": "Gets or sets the HTML template file reference id."
          },
          "ControlIdPrefix": {
            "type": "string",
            "description": "Gets or sets the Control Id Prefix (D,S,U or A - Device, Speed, User, Admin)."
          }
        }
      },
      "LinuxLockdownMenuItem": {
        "type": "object",
        "description": "Data entity describing a single lockdown menu item.",
        "required": [
          "IsURLProxyExempted"
        ],
        "properties": {
          "DisplayName": {
            "type": "string",
            "description": "Gets or sets item display name."
          },
          "ProgramPath": {
            "type": "string",
            "description": "Gets or sets item program path."
          },
          "ProgramImage": {
            "type": "string",
            "description": "Gets or sets program image."
          },
          "IsURLProxyExempted": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether given URL should be added to exception list for Proxy on Device."
          }
        }
      },
      "LinuxWebFilterSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract for Web Filter settings.",
            "required": [
              "IsBlackList"
            ],
            "properties": {
              "IsBlackList": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether this instance is black list."
              },
              "WebFilterUrls": {
                "type": "array",
                "description": "Gets or sets the web filter urls.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "LinuxWirelessSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract for an Linux wi-fi configuration.",
            "properties": {
              "Connection": {
                "description": "Gets or sets the wireless connection in this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/LinuxWirelessConnection"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "LinuxWirelessConnection": {
        "type": "object",
        "description": "Represents a single wireless connection in an Linux wireless configuration.",
        "required": [
          "PrivateNetwork",
          "SecurityMode",
          "AutoJoin"
        ],
        "properties": {
          "SSID": {
            "type": "string",
            "description": "Gets or sets the SSID of the wireless network."
          },
          "PrivateNetwork": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the network\nbroadcasts its SSID."
          },
          "SecurityMode": {
            "description": "Gets or sets the security mode used by the network.",
            "allOf": [
              {
                "$ref": "#/definitions/WirelessSecurityMode"
              }
            ],
            "x-enumType": "WirelessSecurityMode"
          },
          "PrivateSharedKey": {
            "type": "string",
            "description": "Gets or sets private shared key for the network.  This should\nbe null if the network is using a PSK."
          },
          "EnterpriseSettings": {
            "description": "Gets or sets the advanced wireless security settings for one of\nthe enterprise security modes.",
            "allOf": [
              {
                "$ref": "#/definitions/LinuxEnterpriseWirelessSettings"
              }
            ]
          },
          "AutoJoin": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to Automatically join the WiFi Connection\nor not"
          }
        }
      },
      "LinuxEnterpriseWirelessSettings": {
        "type": "object",
        "description": "Data contract for Enterprise wireless authentication settings.",
        "required": [
          "Protocols",
          "UserNameFormat"
        ],
        "properties": {
          "Protocols": {
            "description": "Gets or sets the collection of supported authentication protocols.",
            "allOf": [
              {
                "$ref": "#/definitions/WirelessAuthenticationProtocols"
              }
            ],
            "x-enumType": "WirelessAuthenticationProtocols"
          },
          "UserNameFormat": {
            "description": "Gets or sets the User Name Format used by connection.",
            "allOf": [
              {
                "$ref": "#/definitions/UserNameFormat"
              }
            ],
            "x-enumType": "UserNameFormat"
          },
          "InnerIdentityMode": {
            "description": "Gets or sets the inner identity mode.  This value is null if the TTLS protocol is unavailable.",
            "allOf": [
              {
                "$ref": "#/definitions/InnerIdentityMode"
              }
            ],
            "x-enumType": "InnerIdentityMode"
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the user name for the connection."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password for the connection.  This can be null."
          },
          "IdentityCertificateRetrievalMethod": {
            "description": "Gets or sets retrieval method for identity certificate",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          },
          "IdentityCertificateRefId": {
            "type": "string",
            "description": "Gets or sets the ref id of the identity certificate."
          },
          "RootCertificateRefId": {
            "type": "string",
            "description": "Gets or sets the ref id of the root certificate."
          },
          "OuterIdentity": {
            "type": "string",
            "description": "Gets or sets the device's outidentity (for TTLS, PEAP, and EAP-FAST)."
          },
          "TLSMinimumVersion": {
            "type": "string",
            "description": "Gets or sets the TLS Minimum Version"
          },
          "TLSMaximumVersion": {
            "type": "string",
            "description": "Gets or sets the TLS Maximum Version"
          }
        }
      },
      "IOSAccessPointNameSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an access point name (APN) configuration for an iOS device.",
            "properties": {
              "AccessPointName": {
                "type": "string",
                "description": "Gets or sets the name of the carrier (GPRS) access point."
              },
              "UserName": {
                "type": "string",
                "description": "Gets or sets the user name that the device will use to authenticate."
              },
              "Password": {
                "type": "string",
                "description": "Gets or sets the password that the device will use to authenticate."
              },
              "ProxyServerAddress": {
                "type": "string",
                "description": "Gets or sets the address of the proxy server."
              }
            }
          }
        ]
      },
      "IOSAirPlaySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding AirPlay to be displayed with\na device or group.",
            "properties": {
              "Devices": {
                "type": "array",
                "description": "Gets or sets the fonts.",
                "items": {
                  "$ref": "#/definitions/AirPlayDevices"
                }
              },
              "DeviceMacAddress": {
                "type": "array",
                "description": "Gets or sets the device Mac address.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "AirPlayDevices": {
        "type": "object",
        "description": "Represents an iOS AirPlay.",
        "properties": {
          "DeviceName": {
            "type": "string",
            "description": "Gets or sets the DeviceName."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the DevicePassword."
          }
        }
      },
      "IOSAirPrintSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an iOS AirPrint configuration.",
            "properties": {
              "Printer": {
                "description": "Gets or sets the printers.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AirPrintPrinter"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "AirPrintPrinter": {
        "type": "object",
        "description": "Represents an iOS AirPrint Printer configuration.",
        "required": [
          "ForceTLS"
        ],
        "properties": {
          "PrinterProfileName": {
            "type": "string",
            "description": "Gets or sets the Printer Profile Name address."
          },
          "IPAddress": {
            "type": "string",
            "description": "Gets or sets the ip address."
          },
          "ResourcePath": {
            "type": "string",
            "description": "Gets or sets the resource path."
          },
          "Port": {
            "type": "integer",
            "description": "Gets or sets the port number.",
            "format": "int32"
          },
          "ForceTLS": {
            "type": "boolean",
            "description": "Gets or sets the port numberforce tls value."
          }
        }
      },
      "IOSApplicationSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ApplicationSettingsSection"
          },
          {
            "type": "object",
            "description": "Represents an application settings section configuration for AndroidPlus devices."
          }
        ]
      },
      "ApplicationSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents Application settings section configuration",
            "required": [
              "InactivityTimeoutInMinutes",
              "ContentRefreshIntervalInMinutes",
              "IsCancelDownloadsOnInactivity",
              "AllowAppToSavePassword",
              "EnableLogin",
              "AllowCreateNewFileFolder",
              "EnableCopy",
              "EnableFileShare",
              "EnableFilePrint",
              "EnableBackgroundSync",
              "EnableReportsDataSync",
              "ReportsDataSyncIntervalInMinutes"
            ],
            "properties": {
              "Description": {
                "type": "string",
                "description": "Gets or sets the description."
              },
              "InactivityTimeoutInMinutes": {
                "type": "integer",
                "description": "Gets or sets the inactivity timeout in minutes.",
                "format": "int32"
              },
              "ContentRefreshIntervalInMinutes": {
                "type": "integer",
                "description": "Gets or sets the content refresh interval in minutes.",
                "format": "int32"
              },
              "InactivityTimeout": {
                "description": "Gets or sets the inactivity timeout period.",
                "allOf": [
                  {
                    "$ref": "#/definitions/InactivityTimeout"
                  }
                ]
              },
              "ContentRefreshInterval": {
                "description": "Gets or sets the Content refresh interval for the application.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ContentRefreshInterval"
                  }
                ]
              },
              "ContentRepositories": {
                "type": "array",
                "description": "Gets or sets the content repositories.",
                "items": {
                  "$ref": "#/definitions/AppContentRepositorySetting"
                }
              },
              "IsCancelDownloadsOnInactivity": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [cancel downloads on inactivity]."
              },
              "AllowAppToSavePassword": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow application to save password."
              },
              "EnableLogin": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [enable login]."
              },
              "EnterpriseResourceAccessFilterName": {
                "type": "string",
                "description": "Gets or sets the name of the enterprise resource access filter if ."
              },
              "AllowCreateNewFileFolder": {
                "type": "boolean",
                "description": "Gets or sets a value of indicating whether [Create New File Or Folder]."
              },
              "EnableCopy": {
                "type": "boolean",
                "description": "Gets or sets a value of indicating whether [Enable Copy]."
              },
              "EnableFileShare": {
                "type": "boolean",
                "description": "Gets or sets a value of indicating whether [Enable File Share]."
              },
              "EnableFilePrint": {
                "type": "boolean",
                "description": "Gets or sets a value of indicating whether [Enable File Print]."
              },
              "EnableBackgroundSync": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether sync mandatory files or not when app is running in the background."
              },
              "EnableReportsDataSync": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enable Reports Data Sync - capture and sync of file events."
              },
              "ReportsDataSyncIntervalInMinutes": {
                "type": "integer",
                "description": "Gets or sets a value of Reports Data Sync Interval in Minutes.",
                "format": "int64"
              }
            }
          }
        ]
      },
      "InactivityTimeout": {
        "type": "object",
        "description": "Represents an Inactivity Time Out data.",
        "required": [
          "InactivityTimeoutPeriod",
          "InactivityTimeoutUnit"
        ],
        "properties": {
          "InactivityTimeoutPeriod": {
            "type": "integer",
            "description": "Gets or sets the amount of time the user should be inactive to be signed out from the application",
            "format": "int32"
          },
          "InactivityTimeoutUnit": {
            "description": "Gets or sets the unit of of time for InactivityTimeoutUnit",
            "allOf": [
              {
                "$ref": "#/definitions/UnitsOfTime"
              }
            ],
            "x-enumType": "UnitsOfTime"
          }
        }
      },
      "UnitsOfTime": {
        "type": "string",
        "description": "Enumerates the different units of time",
        "x-enumNames": [
          "Second",
          "Minute",
          "Hour"
        ],
        "enum": [
          "Second",
          "Minute",
          "Hour"
        ],
        "x-enumType": "UnitsOfTime"
      },
      "ContentRefreshInterval": {
        "type": "object",
        "description": "Data contract for ContentRefreshInterval",
        "required": [
          "ContentRefreshIntervalPeriod",
          "ContentRefreshIntervalUnit",
          "ContentRefreshIntervalPeriodInSecond"
        ],
        "properties": {
          "ContentRefreshIntervalPeriod": {
            "type": "integer",
            "description": "Gets or sets the amount of time the content on the application should be automatically refreshed",
            "format": "int32"
          },
          "ContentRefreshIntervalUnit": {
            "description": "Gets or sets the unit of time for the content on the application should be automatically refreshed",
            "allOf": [
              {
                "$ref": "#/definitions/UnitsOfTime"
              }
            ],
            "x-enumType": "UnitsOfTime"
          },
          "ContentRefreshIntervalPeriodInSecond": {
            "type": "integer",
            "description": "Gets the time value for the content on the application should be automatically refreshed in seconds",
            "format": "int32"
          }
        }
      },
      "AppContentRepositorySetting": {
        "type": "object",
        "description": "Represents a application content repository setting",
        "required": [
          "RepositoryType",
          "Authentication",
          "UsesEnterpriseResourceAccessFilter",
          "DownloadOverCellular",
          "DownloadOnRoaming",
          "EnableDataLeakagePrevention",
          "AllowEdit",
          "AllowShare",
          "AllowCopyPaste",
          "AllowFileUpload",
          "OpenHyperlinkInSOTISurf",
          "AllowPrint",
          "EnableMandatoryFilesPush",
          "MandatoryFilesSyncInterval"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets the repository GUID."
          },
          "RepositoryAddress": {
            "type": "string",
            "description": "Gets or sets the repository URL."
          },
          "RepositoryType": {
            "description": "Gets or sets the repository type.",
            "allOf": [
              {
                "$ref": "#/definitions/ContentRepositorySettingsRepositoryType"
              }
            ],
            "x-enumType": "ContentRepositorySettingsRepositoryType"
          },
          "RepositoryFilter": {
            "type": "string",
            "description": "Gets or sets the repository filter."
          },
          "RepositoryTargetFolder": {
            "type": "string",
            "description": "Gets or sets the repository target folder."
          },
          "RepositoryFolderPath": {
            "type": "string",
            "description": "Gets or sets the repository folder path."
          },
          "Authentication": {
            "description": "Gets or sets a value indicating whether automatic login is enabled.",
            "allOf": [
              {
                "$ref": "#/definitions/ContentRepositoryAuthenticationType"
              }
            ],
            "x-enumType": "ContentRepositoryAuthenticationType"
          },
          "Domain": {
            "type": "string",
            "description": "Gets or sets the domain."
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the username if Authentication is Fixed credential"
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password Fixed credential"
          },
          "UsesEnterpriseResourceAccessFilter": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to use enterprise resource access filter."
          },
          "EnterpriseResourceAccessFilterName": {
            "type": "string",
            "description": "Gets or sets the name of the enterprise resource access filter if ."
          },
          "DownloadOverCellular": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether application can download data over cellular."
          },
          "DownloadOnRoaming": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether data can be downloaded on roaming by application."
          },
          "EnableDataLeakagePrevention": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether DLP settings are to be applied or not."
          },
          "AllowEdit": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to allow edit."
          },
          "AllowShare": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to allow share."
          },
          "AllowCopyPaste": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to allow copy paste."
          },
          "AllowFileUpload": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to allow file upload."
          },
          "OpenHyperlinkInSOTISurf": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to Open Hyperlinks in Soti surf browser."
          },
          "AllowPrint": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to allow print."
          },
          "ExcludedFileFormats": {
            "type": "string",
            "description": "Gets or sets the list of files which need to be excluded"
          },
          "EnableMandatoryFilesPush": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether Mandatory Files settings are to be applied or not."
          },
          "MandatoryFilesSyncInterval": {
            "type": "integer",
            "description": "Gets or sets the sync interval in minutes.",
            "format": "int32"
          },
          "RepositoryMandatoryFile": {
            "type": "array",
            "description": "Gets or sets the repositories Mandatory File.",
            "items": {
              "$ref": "#/definitions/RepositoryMandatoryFileSettings"
            }
          }
        }
      },
      "ContentRepositorySettingsRepositoryType": {
        "type": "string",
        "description": "Enumerates authentication types for Content Repository Mapping\n            ",
        "x-enumNames": [
          "None",
          "WebDav",
          "SharePointOnline",
          "OneDriveForBusiness",
          "OneDrive",
          "Box",
          "NextCloud"
        ],
        "enum": [
          "None",
          "WebDav",
          "SharePointOnline",
          "OneDriveForBusiness",
          "OneDrive",
          "Box",
          "NextCloud"
        ],
        "x-enumType": "ContentRepositorySettingsRepositoryType"
      },
      "ContentRepositoryAuthenticationType": {
        "type": "string",
        "description": "Enumerates authentication types",
        "x-enumNames": [
          "AutoLogin",
          "Ldap"
        ],
        "enum": [
          "AutoLogin",
          "Ldap"
        ],
        "x-enumType": "ContentRepositoryAuthenticationType"
      },
      "RepositoryMandatoryFileSettings": {
        "type": "object",
        "description": "hahdas",
        "required": [
          "Order",
          "IsCollection"
        ],
        "properties": {
          "Order": {
            "type": "integer",
            "description": "Gets or sets the File Order.",
            "format": "int32"
          },
          "FilePath": {
            "type": "string",
            "description": "Gets or sets the filePath."
          },
          "IsCollection": {
            "type": "boolean",
            "description": "Gets or sets the pathType."
          }
        }
      },
      "AndroidClassicApplicationSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ApplicationSettingsSection"
          },
          {
            "type": "object",
            "description": "Represents an application settings section configuration for AndroidPlus devices."
          }
        ]
      },
      "AndroidWorkProfileApplicationSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ApplicationSettingsSection"
          },
          {
            "type": "object",
            "description": "Represents an application settings section configuration for AndroidPlus devices."
          }
        ]
      },
      "AndroidCorporateApplicationSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkProfileApplicationSettingsSection"
          },
          {
            "type": "object",
            "description": "Represents an Application Settings section for cope devices"
          }
        ]
      },
      "IOSAppLockSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an App Lock configuration for an iOS device.",
            "required": [
              "DisableTouch",
              "DisableDeviceRotation",
              "DisableVolumeButtons",
              "DisableRingerSwitch",
              "DisableSleepWakeButton",
              "DisableAutoLock",
              "EnableVoiceOver",
              "EnableVoiceControl",
              "EnableZoom",
              "EnableInvertColors",
              "EnableAssistiveTouch",
              "EnableSpeakSelection",
              "EnableMonoAudio",
              "AllowVoiceoverAdjustment",
              "AllowVoiceControl",
              "AllowZoomAdjustment",
              "AllowInvertColorAdjustment",
              "AllowAssistiveTouchAdjustment"
            ],
            "properties": {
              "ApplicationName": {
                "type": "string",
                "description": "Gets or sets a times to prompt to user install application."
              },
              "ApplicationId": {
                "type": "string",
                "description": "Gets or sets the application Id."
              },
              "DisableTouch": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable touch."
              },
              "DisableDeviceRotation": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable device rotation."
              },
              "DisableVolumeButtons": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable volume buttons."
              },
              "DisableRingerSwitch": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable ringer switch."
              },
              "DisableSleepWakeButton": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable sleep/wake button."
              },
              "DisableAutoLock": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable auto lock."
              },
              "EnableVoiceOver": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enable voiceover."
              },
              "EnableVoiceControl": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enable voice control."
              },
              "EnableZoom": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enable zoom."
              },
              "EnableInvertColors": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enable invert colors."
              },
              "EnableAssistiveTouch": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enable assistive touch."
              },
              "EnableSpeakSelection": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enable speak selection."
              },
              "EnableMonoAudio": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enable mono audio."
              },
              "AllowVoiceoverAdjustment": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow voiceover adjustment."
              },
              "AllowVoiceControl": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow voice control."
              },
              "AllowZoomAdjustment": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow zoom adjustment."
              },
              "AllowInvertColorAdjustment": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow invert color adjustment."
              },
              "AllowAssistiveTouchAdjustment": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow assistive touch adjustment."
              }
            }
          }
        ]
      },
      "IOSAuthenticationSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the configurable authentication settings for iOS devices.",
            "required": [
              "RequirePasscode",
              "AllowSimplePasscode",
              "RequireAlphanumericValue"
            ],
            "properties": {
              "RequirePasscode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users are required to enter a passcode before using the device. Otherwise, anyone who has the device can access all of its functions and data."
              },
              "AllowSimplePasscode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the user can use sequential or repeated characters in their passcodes. (For example, this would allow the passcodes “3333” or “DEFG.”)"
              },
              "RequireAlphanumericValue": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the passcode must contain at least one letter character."
              },
              "MinimumPasscodeLength": {
                "type": "integer",
                "description": "Gets or sets the minimum passcode length.  Specifies the minimum number of characters a passcode can contain.",
                "format": "int32"
              },
              "MinimumComplexCharacters": {
                "type": "integer",
                "description": "Gets or sets the minimum number of complex characters.  The number of non-alphanumeric characters (such as $, &amp;, and !) that the passcode must contain.",
                "format": "int32"
              },
              "MaximumPasscodeAgeInDays": {
                "type": "integer",
                "description": "Gets or sets the maximum passcode age.  Requires users to change their passcode at the interval you specify.",
                "format": "int32"
              },
              "IdleTimeoutInMinutes": {
                "type": "integer",
                "description": "Gets or sets the device idle timeout.  If the device isn’t used for the period of time you specify, it automatically locks. Entering the passcode unlocks it.",
                "format": "int32"
              },
              "PasscodeHistory": {
                "type": "integer",
                "description": "Gets or sets the length of the passcode history.  A new passcode won’t be accepted if it matches a previously used passcode. You can specify how many previous passcodes are remembered and compared.",
                "format": "int32"
              },
              "UnlockGracePeriodInMinutes": {
                "type": "integer",
                "description": "Gets or sets the grace period for device unlock.  Specifies how soon the device can be unlocked again after use, without reprompting for the passcode.",
                "format": "int32"
              },
              "MaximumFailedAttempts": {
                "type": "integer",
                "description": "Gets or sets the maximum number of failed unlock attempts.  Determines how many failed passcode attempts can be made before the device is wiped. If you don’t change this setting, after six failed passcode attempts, the device imposes a time delay before a passcode can be entered again. The time delay increases with each failed attempt. After the final failed attempt, all data and settings are securely erased from the device. The passcode time delay begins after the sixth attempt, so if you set this value to 6 or lower, no time delay is imposed and the device is erased when the attempt limit is exceeded.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "IOSCalendarSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents a configuration section for Calendar accounts",
            "properties": {
              "Account": {
                "description": "Gets or sets the Calendar account settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CalendarAccount"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "CalendarAccount": {
        "type": "object",
        "description": "Represents a configuration for calendar account",
        "required": [
          "Port",
          "UseSSL"
        ],
        "properties": {
          "Description": {
            "type": "string",
            "description": "Gets or sets the display name for the account"
          },
          "HostName": {
            "type": "string",
            "description": "Gets or sets the calendar account host name"
          },
          "Port": {
            "type": "integer",
            "description": "Gets or sets the calendar account host number",
            "format": "int32"
          },
          "PrincipalUrl": {
            "type": "string",
            "description": "Gets or sets the Principal Url for the calendar account account",
            "format": "uri"
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the calendar account username"
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the calendar account password"
          },
          "UseSSL": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether SSL must be enabled for calendar account server communication"
          }
        }
      },
      "IOSCellularAccessPointNameSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Contract data for cellular APN Section.",
            "properties": {
              "CellularAccessPointNamesItems": {
                "type": "array",
                "description": "An array of access point dictionaries.",
                "items": {
                  "$ref": "#/definitions/CellularAccessPointNamesItems"
                }
              },
              "CellularAccessPointNameAttach": {
                "description": "A configuration dictionary.",
                "allOf": [
                  {
                    "$ref": "#/definitions/CellularAccessPointNameAttach"
                  }
                ]
              }
            }
          }
        ]
      },
      "CellularAccessPointNamesItems": {
        "type": "object",
        "description": "A dictionary of details about the Access Point Name (APN). ",
        "required": [
          "ProxyPort",
          "EnableXLAT464"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name for this configuration."
          },
          "Password": {
            "type": "string",
            "description": "The user's password for the APN. "
          },
          "ProxyPort": {
            "type": "integer",
            "description": "The proxy server's port number.",
            "format": "int32"
          },
          "ProxyServer": {
            "type": "string",
            "description": "The proxy server's port number."
          },
          "Username": {
            "type": "string",
            "description": "The user name for the APN. "
          },
          "AllowedProtocolMask": {
            "description": "The supported Internet Protocol versions.",
            "allOf": [
              {
                "$ref": "#/definitions/CellularApnProtocolMask"
              }
            ],
            "x-enumType": "CellularApnProtocolMask"
          },
          "AllowedProtocolMaskInDomesticRoaming": {
            "description": "The supported Internet Protocol versions while roaming domestically.",
            "allOf": [
              {
                "$ref": "#/definitions/CellularApnProtocolMask"
              }
            ],
            "x-enumType": "CellularApnProtocolMask"
          },
          "AllowedProtocolMaskInRoaming": {
            "description": "The supported Internet Protocol versions while roaming",
            "allOf": [
              {
                "$ref": "#/definitions/CellularApnProtocolMask"
              }
            ],
            "x-enumType": "CellularApnProtocolMask"
          },
          "AuthenticationType": {
            "type": "string",
            "description": "The authentication type for logging in. Default: PAP Possible values: CHAP, PAP"
          },
          "EnableXLAT464": {
            "type": "boolean",
            "description": "If true, enables XLAT464. Available in iOS 16 and later and watchOS 9 and later."
          }
        }
      },
      "CellularApnProtocolMask": {
        "type": "string",
        "description": "Cellular Access Point Name Protocol Mask - The supported Internet Protocol versions.\nIt is used for AllowedProtocolMaskInDomesticRoaming, AllowedProtocolMask and AllowedProtocolMaskInRoaming",
        "x-enumNames": [
          "IPv4",
          "IPv6",
          "Both"
        ],
        "enum": [
          "IPv4",
          "IPv6",
          "Both"
        ],
        "x-enumType": "CellularApnProtocolMask"
      },
      "CellularAccessPointNameAttach": {
        "type": "object",
        "description": "A dictionary of details about the Attach Access Point Name (APN).",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name for this configuration."
          },
          "Password": {
            "type": "string",
            "description": "The user's password for the APN. "
          },
          "Username": {
            "type": "string",
            "description": "The user name for the APN. "
          },
          "AllowedProtocolMask": {
            "description": "The supported Internet Protocol versions.",
            "allOf": [
              {
                "$ref": "#/definitions/CellularApnProtocolMask"
              }
            ],
            "x-enumType": "CellularApnProtocolMask"
          },
          "AuthenticationType": {
            "type": "string",
            "description": "The authentication type for logging in. Default: PAP Possible values: CHAP, PAP"
          }
        }
      },
      "IOSCertificateSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the set of certificates configured for deployment to an iOS device.",
            "properties": {
              "Certificates": {
                "type": "array",
                "description": "Gets or sets the list of Certificates.",
                "items": {
                  "$ref": "#/definitions/CertificateDeploymentInfo"
                }
              },
              "CertificateTemplates": {
                "type": "array",
                "description": "Gets or sets the collection of Certificate templates.",
                "items": {
                  "$ref": "#/definitions/CertificateDeploymentInfo"
                }
              }
            }
          }
        ]
      },
      "CertificateDeploymentInfo": {
        "type": "object",
        "description": "Extended options for certificates deployment",
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Identifies certificate via Guid Reference Id"
          },
          "PrivateKeyDeploymentOptions": {
            "description": "Extended options for PKCS12 certificates deployment",
            "allOf": [
              {
                "$ref": "#/definitions/CertificatePrivateKeyDeploymentOptions"
              }
            ]
          }
        }
      },
      "CertificatePrivateKeyDeploymentOptions": {
        "type": "object",
        "description": "Extended options for certificate",
        "required": [
          "AllowAllAppsAccess",
          "IsPrivateKeyExtractable"
        ],
        "properties": {
          "AllowAllAppsAccess": {
            "type": "boolean",
            "description": "Allows apps access to the private key"
          },
          "IsPrivateKeyExtractable": {
            "type": "boolean",
            "description": "Tags the private key data as \"extractable\" in the keychain"
          }
        }
      },
      "IOSContactsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents a configuration section for contact accounts",
            "properties": {
              "Account": {
                "description": "Gets or sets the contact account settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ContactsAccount"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "ContactsAccount": {
        "type": "object",
        "description": "Represents a configuration for contacts account",
        "required": [
          "Port",
          "UseSSL"
        ],
        "properties": {
          "Description": {
            "type": "string",
            "description": "Gets or sets the display name for the account"
          },
          "HostName": {
            "type": "string",
            "description": "Gets or sets the contacts account host name"
          },
          "Port": {
            "type": "integer",
            "description": "Gets or sets the contacts account host number",
            "format": "int32"
          },
          "PrincipalUrl": {
            "type": "string",
            "description": "Gets or sets the Principal Url for the contacts account",
            "format": "uri"
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the contacts account username"
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the contacts account password"
          },
          "UseSSL": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether SSL must be enabled for contacts account server communication"
          }
        }
      },
      "IOSCustomProfileSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents a custom profile section",
            "properties": {
              "Profile": {
                "description": "Gets or sets list of custom profiles",
                "allOf": [
                  {
                    "$ref": "#/definitions/IOSCustomProfile"
                  }
                ]
              }
            }
          }
        ]
      },
      "IOSCustomProfile": {
        "type": "object",
        "description": "Represents iOS configuration profile stored as plain XML",
        "properties": {
          "Payload": {
            "type": "string",
            "description": "Gets or sets custom profile payload"
          }
        }
      },
      "IOSDnsProxySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "DNS Proxy Config\n            ",
            "properties": {
              "ProviderConfiguration": {
                "type": "string",
                "description": "Dictionary of vendor-specific configuration items."
              },
              "ProviderBundleIdentifier": {
                "type": "string",
                "description": ". Bundle identifier of the DNS proxy network extension\nto use. Useful for apps that contain more than one DNS proxy\nextension."
              },
              "AppBundleIdentifier": {
                "type": "string",
                "description": "Bundle identifier of the app containing the DNS proxy\nnetwork extension."
              },
              "DNSProxyUUID": {
                "type": "string",
                "description": "A globally-unique identifier for this DNS proxy configuration.\nManaged apps with the same DNSProxyUUID in their app attributes\nhave their DNS lookups traffic processed by the proxy.",
                "format": "guid"
              },
              "ApplicationName": {
                "type": "string",
                "description": "App name "
              },
              "Applications": {
                "type": "array",
                "description": "Gets or sets the Applications.",
                "items": {
                  "$ref": "#/definitions/Application"
                }
              }
            }
          }
        ]
      },
      "Application": {
        "type": "object",
        "description": "Simple application clase",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets the Id of the Application."
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets the Name of the Application."
          }
        }
      },
      "IOSDomainsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Configuration contract for Domains Section.",
            "properties": {
              "EmailDomains": {
                "type": "array",
                "description": "Gets/Sets email domains",
                "items": {
                  "type": "string"
                }
              },
              "WebDomains": {
                "type": "array",
                "description": "Gets/Sets Web domains",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "IOSEncryptedDnsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Contract data for cellular APN Section.",
            "properties": {
              "EncryptedDns": {
                "description": "Gets or sets the collection of Encrypted Dns for this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EncryptedDns"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "EncryptedDns": {
        "type": "object",
        "required": [
          "ProhibitDisablement"
        ],
        "properties": {
          "EncryptedDnsSettings": {
            "description": "A dictionary that defines a configuration for an encrypted DNS server.",
            "allOf": [
              {
                "$ref": "#/definitions/EncryptedDnsSettings"
              }
            ]
          },
          "EncryptedDnsOnDemandRules": {
            "type": "array",
            "description": "An array of rules defining the DNS settings.",
            "items": {
              "$ref": "#/definitions/EncryptedDnsOnDemandRule"
            }
          },
          "ProhibitDisablement": {
            "type": "boolean",
            "description": "If true, prohibits users from disabling DNS settings. This key is only available on supervised devices."
          },
          "ConfigurationName": {
            "type": "string",
            "description": "The user specified name for this configuration."
          }
        }
      },
      "EncryptedDnsSettings": {
        "type": "object",
        "description": "Configuration contract for Encrypted DNS.",
        "properties": {
          "DNSProtocol": {
            "type": "string",
            "description": "The encrypted transport protocol used to communicate with the DNS server. Possible values: HTTPS, TLS"
          },
          "ServerAddresses": {
            "type": "array",
            "description": "The list of DNS server IP address strings.",
            "items": {
              "type": "string"
            }
          },
          "ServerName": {
            "type": "string",
            "description": "The hostname of a DNS-over-TLS server used to validate the server certificate."
          },
          "ServerURL": {
            "type": "string",
            "description": "The URI template of a DNS-over-HTTPS server."
          },
          "SupplementalMatchDomains": {
            "type": "array",
            "description": "A list of domain strings used to determine which DNS queries will use the DNS server.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EncryptedDnsOnDemandRule": {
        "type": "object",
        "description": "Configuration contract for Encrypted DNS.",
        "properties": {
          "ActionName": {
            "type": "string",
            "description": "An identifier for each on demand action."
          },
          "Action": {
            "type": "string",
            "description": "The action to take if this dictionary matches the current network.\nPossible values: Connect, Disconnect, EvaluateConnection"
          },
          "ActionParameters": {
            "description": "The dictionary that provides per-connection rules.",
            "allOf": [
              {
                "$ref": "#/definitions/EncryptedDnsActionParameters"
              }
            ]
          },
          "DNSDomainMatch": {
            "type": "array",
            "description": "The array of domain names.",
            "items": {
              "type": "string"
            }
          },
          "DNSServerAddressMatch": {
            "type": "array",
            "description": "The array of IP addresses. This rule matches if any of the network’s specified DNS servers match any entry in the array.",
            "items": {
              "type": "string"
            }
          },
          "InterfaceTypeMatch": {
            "type": "string",
            "description": "The interface type. If specified, this rule matches only if the primary network interface hardware matches the specified type.\nPossible values: Ethernet, WiFi, Cellular"
          },
          "SSIDMatch": {
            "type": "array",
            "description": "The array of SSIDs to match against the current network.",
            "items": {
              "type": "string"
            }
          },
          "URLStringProbe": {
            "type": "string",
            "description": "The URL to probe. If this URL is successfully fetched (returning a 200 HTTP status code) without redirection, this rule matches."
          }
        }
      },
      "EncryptedDnsActionParameters": {
        "type": "object",
        "description": "Configuration contract for Encrypted DNS.",
        "properties": {
          "DomainAction": {
            "type": "string",
            "description": "(Required)\nPossible values: [NeverConnect,ConnectIfNeeded]\nThe DNS settings behavior for the specified domains. Allowed values are:\n'NeverConnect': Do not use the DNS Settings for the specified domains.'ConnectIfNeeded': Allow using the DNS Settings for the specified domains."
          },
          "Domains": {
            "type": "array",
            "description": "(Required)\nThe domains for which this evaluation applies.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IOSExtensibleSingleSignOnSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Contract data for Extensible Single Sign On Section.",
            "properties": {
              "ExtensibleSingleSignOn": {
                "description": "Gets or sets the ExtensibleSingleSignOn for this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ExtensibleSingleSignOn"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "ExtensibleSingleSignOn": {
        "type": "object",
        "description": "Contract data for Extensible Single Sign On.",
        "required": [
          "Type"
        ],
        "properties": {
          "ExtensionData": {
            "type": "string",
            "description": "Gets or sets ExtensionData"
          },
          "ExtensionIdentifier": {
            "type": "string",
            "description": "Gets or sets ExtensionIdentifier - The bundle identifier of the app extension that performs single sign on"
          },
          "Hosts": {
            "type": "array",
            "description": "Gets or sets Host names",
            "items": {
              "type": "string"
            }
          },
          "Realm": {
            "type": "string",
            "description": "Gets or sets Realm - The realm name for Credential payloads"
          },
          "Type": {
            "description": "Gets or sets Type - The type of SSO",
            "allOf": [
              {
                "$ref": "#/definitions/ExtensibleSingleSignOnType"
              }
            ],
            "x-enumType": "ExtensibleSingleSignOnType"
          },
          "URLs": {
            "type": "array",
            "description": "Gets or sets Urls - URL prefixes of identity providers where the app extension",
            "items": {
              "type": "string"
            }
          },
          "TeamIdentifier": {
            "type": "string",
            "description": "Gets or sets TeamIdentifier - The team identifier of the app extension (macOS specific)."
          }
        }
      },
      "ExtensibleSingleSignOnType": {
        "type": "string",
        "description": "Defines the SS0 type",
        "x-enumNames": [
          "Redirect",
          "Credential"
        ],
        "enum": [
          "Redirect",
          "Credential"
        ],
        "x-enumType": "ExtensibleSingleSignOnType"
      },
      "IOSFeatureControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for iOS devices.",
            "required": [
              "AllowAppInstall",
              "AllowCamera",
              "AllowFaceTime",
              "AllowScreenCapture",
              "AllowAutoSyncWhileRoaming",
              "AllowVoiceDialing",
              "AllowInAppPurchase",
              "AllowMultiplayerGaming",
              "ForceEncryptedBackup",
              "ForceiTunesStorePasswordEntry",
              "AllowUntrustedTLSPrompt",
              "AllowCloudBackup",
              "AllowCloudDocumentSync",
              "AllowCloudKeyValueSync",
              "AllowPhotoStream",
              "AllowVoiceRoaming",
              "EnforceVoiceRoamingSetting",
              "AllowDataRoaming",
              "EnforceDataRoamingSetting",
              "AllowSiri",
              "SendDiagnosticToApple",
              "AllowBookstore",
              "BookstoreErotica",
              "AllowPassbookNotificationsWhileLocked",
              "AllowGameCenter",
              "AllowAddingGameCenterFriends",
              "AllowInstallationConfProfilesInteractively",
              "AllowSharedPhotoStream",
              "BlockOsUpgrade",
              "AllowImessage",
              "EnableSiriProfanityFilter",
              "AllowSiriWhileLocked",
              "AllowAppRemoval",
              "AllowiTunes",
              "AllowFindMyDevice",
              "AllowFindMyFriends",
              "AllowSafari",
              "AllowExplicitMusicAndPodcasts",
              "AllowMovieContent",
              "AllowTVContent",
              "AllowAppContent",
              "AllowAccountModification",
              "AllowAppCellularDataModification",
              "AllowCloudKeychainSync",
              "AllowFindMyFriendsModification",
              "AllowHostPairing",
              "AllowOpenFromManagedToUnmanaged",
              "AllowOpenFromUnmanagedToManaged",
              "AllowManagedUnmanagedCopyPaste",
              "AllowOTAPKIUpdates",
              "AllowTextDefine",
              "ForceLimitAdTracking",
              "AllowAssistantUserGeneratedContent",
              "AllowAirdrop",
              "AllowLockScreenControlCenter",
              "AllowLockScreenNotificationsView",
              "AllowLockScreenTodayView",
              "AllowFingerprintUnlock",
              "AllowSpotlightInternetResults",
              "AllowUnEnrollment",
              "AllowActivityContinuation",
              "AllowEnablingRestrictions",
              "AllowEraseContentAndSettings",
              "AllowManagedAppsCloudSync",
              "ForceAirPlayOutgoingRequestsPairingPassword",
              "AllowAutoCorrection",
              "AllowAutomaticAppDownloads",
              "AllowCloudPhotoLibrary",
              "AllowDefinitionLookup",
              "AllowDeviceNameModification",
              "AllowEnterpriseAppTrust",
              "AllowEnterpriseBookBackup",
              "AllowEnterpriseBookMetadataSync",
              "AllowFingerprintModification",
              "AllowKeyboardShortcuts",
              "AllowMusicService",
              "AllowNews",
              "AllowPairedWatch",
              "AllowPasscodeModification",
              "AllowPodcasts",
              "AllowContinuousPathKeyboard",
              "AllowPredictiveKeyboard",
              "AllowSharedStream",
              "AllowSpellCheck",
              "AllowUIAppInstallation",
              "AllowUIConfigurationProfileInstallation",
              "AllowWallpaperModification",
              "ForceAirdropUnmanaged",
              "ForceWatchWristDetection",
              "AllowNotificationsModification",
              "AllowBluetoothModification",
              "AllowDiagnosticSubmissionModification",
              "AllowRemoteScreenObservation",
              "AllowRadioService",
              "AllowDictation",
              "AllowWiFiPowerModification",
              "ForceWiFiWhitelisting",
              "AorceWiFiWhitelisting",
              "AllowAirPrint",
              "AllowAirPrintCredentialsStorage",
              "ForceAirPrintTrustedTLSRequirement",
              "AllowAirPrintiBeaconDiscovery",
              "AllowSystemAppRemoval",
              "AllowVPNCreation",
              "EnforcedSoftwareUpdateDelay",
              "AllowUSBRestrictedMode",
              "ForceAutomaticDateAndTime",
              "AllowPasswordAutoFill",
              "AllowPasswordSharing",
              "AllowPasswordProximityRequests",
              "AllowManagedToWriteUnmanagedContacts",
              "AllowUnmanagedToReadManagedContacts",
              "AllowCellularPlanModification",
              "AllowESIMModification",
              "AllowProximitySetupToNewDevice",
              "ForceClassroomAutomaticallyJoinClasses",
              "ForceClassroomRequestPermissionToLeaveClasses",
              "ForceClassroomUnpromptedAppAndDeviceLock",
              "ForceClassroomUnpromptedScreenObservation",
              "AllowPersonalHotspotModification",
              "AllowSiriServerLogging",
              "AllowFilesUSBDriveAccess",
              "AllowFilesNetworkDriveAccess",
              "AllowApplePersonalizedAdvertising",
              "AllowAppClips",
              "AllowRapidSecurityResponseInstallation",
              "AllowRapidSecurityResponseRemoval",
              "AllowMailPrivacyProtection",
              "AllowCloudPrivateRelay"
            ],
            "properties": {
              "AllowAppInstall": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the App Store is disabled and its icon is removed from the Home screen. Users are unable to install or update their apps using the App Store or iTunes."
              },
              "AllowCamera": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether cameras are completely disabled and the Camera icon is removed from the Home screen. Users are unable to take photographs or videos, or use FaceTime."
              },
              "AllowFaceTime": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users are able to place or receive FaceTime video calls."
              },
              "AllowScreenCapture": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users are able to save a screenshot of the display."
              },
              "AllowAutoSyncWhileRoaming": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether devices that are roaming will sync only when an account is accessed by the user."
              },
              "AllowVoiceDialing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users can dial their phone using voice commands."
              },
              "AllowInAppPurchase": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users can make in-app purchases."
              },
              "AllowMultiplayerGaming": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users can play multiplayer games in Game Center."
              },
              "ForceEncryptedBackup": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users can choose whether or not device backups, performed in iTunes, are stored in encrypted format on their computer."
              },
              "ForceiTunesStorePasswordEntry": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to force the user to enter their iTunes password for each transaction."
              },
              "AllowUntrustedTLSPrompt": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to automatically reject untrusted HTTPS certificates without prompting the user."
              },
              "AllowCloudBackup": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable backing up the device to the cloud."
              },
              "AllowCloudDocumentSync": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable document syncing to the cloud."
              },
              "AllowCloudKeyValueSync": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable key-value syncing to the cloud."
              },
              "AllowPhotoStream": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Photo Stream."
              },
              "AllowVoiceRoaming": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable voice roaming."
              },
              "EnforceVoiceRoamingSetting": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enforce voice roaming setting if user changed it."
              },
              "AllowDataRoaming": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable data roaming."
              },
              "EnforceDataRoamingSetting": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enforce voice roaming setting if user changed it."
              },
              "AllowSiri": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow Siri."
              },
              "SendDiagnosticToApple": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to send diagnostic data to Apple."
              },
              "AllowBookstore": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable book store."
              },
              "BookstoreErotica": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to book erotica."
              },
              "AllowPassbookNotificationsWhileLocked": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable passbook notification while locked."
              },
              "AllowGameCenter": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to to disable game center."
              },
              "AllowAddingGameCenterFriends": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether users can add friends in Game Center."
              },
              "AllowInstallationConfProfilesInteractively": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable installation conf/profiles interactively."
              },
              "AllowSharedPhotoStream": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable shared photo stream."
              },
              "BlockOsUpgrade": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable OS upgrade."
              },
              "AllowImessage": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow the use of iMessage application (supervised devices only)."
              },
              "EnableSiriProfanityFilter": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enable Siri profanity filter (supervised devices only)."
              },
              "AllowSiriWhileLocked": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow Siri while the device is locked."
              },
              "AllowAppRemoval": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether removal of applications is allowed (supervised devices only)."
              },
              "AllowiTunes": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the iTunes Store is disabled and its icon is removed from the Home screen. Users cannot preview, purchase, or download content."
              },
              "AllowFindMyDevice": {
                "type": "boolean",
                "description": "Gets or sets a value that prevents the user from using Find My Device in the Find My app."
              },
              "AllowFindMyFriends": {
                "type": "boolean",
                "description": "Gets or sets a value that prevents the user from using Find My Friends in the Find My app."
              },
              "AllowSafari": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the Safari web browser app is disabled and its icon removed from the Home screen. This also prevents users from opening web clips."
              },
              "SafariOptions": {
                "description": "Gets or sets the run control options for the Safari browser on the device.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SafariOptions"
                  }
                ]
              },
              "AllowExplicitMusicAndPodcasts": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether explicit music or video content purchased from the iTunes Store is hidden. Explicit content is flagged by content providers, such as record labels, when sold through the iTunes Store."
              },
              "AllowMovieContent": {
                "description": "Gets or sets the maximum rating for movies allowed on the device.",
                "allOf": [
                  {
                    "$ref": "#/definitions/MovieContent"
                  }
                ]
              },
              "AllowTVContent": {
                "description": "Gets or sets the maximum rating for TV shows allowed on the device.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TVContent"
                  }
                ]
              },
              "AllowAppContent": {
                "description": "Gets or sets the maximum rating for apps allowed on the device.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AppContent"
                  }
                ]
              },
              "AllowAccountModification": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to prevent the device user from making Account additions and/or modifications to Email, Contacts, and Calendars."
              },
              "AllowAppCellularDataModification": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to prevent the device user from modifying cellular data usage settings for Apps."
              },
              "AllowCloudKeychainSync": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable the synchronization of login credentials between iOS devices associated with an iCloud account."
              },
              "AllowFindMyFriendsModification": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to prevent the device user from making changes within the Find My Friends App."
              },
              "AllowHostPairing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable host pairing."
              },
              "AllowOpenFromManagedToUnmanaged": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow open from managed to unmanaged."
              },
              "AllowOpenFromUnmanagedToManaged": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow open from unmanaged to managed."
              },
              "AllowManagedUnmanagedCopyPaste": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow copy and paste from unmanaged to managed."
              },
              "AllowOTAPKIUpdates": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to prevent the device from obtaining OTA (Over The Air) PKI (Public Key Infrastructure) updates.."
              },
              "AllowTextDefine": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow text define."
              },
              "ForceLimitAdTracking": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to force limiting ad tracking"
              },
              "Applications": {
                "type": "array",
                "description": "Gets or sets a value indicating whether to force limiting ad tracking",
                "items": {
                  "$ref": "#/definitions/FeatureControlSingleAppSection"
                }
              },
              "AllowAssistantUserGeneratedContent": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Show user generated content in Siri"
              },
              "AllowAirdrop": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Airdrop"
              },
              "AllowLockScreenControlCenter": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Show Control Centre in Lock Screen"
              },
              "AllowLockScreenNotificationsView": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Show Notification Centre in Lock Screen"
              },
              "AllowLockScreenTodayView": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Show Today View in Lock Screen"
              },
              "AllowFingerprintUnlock": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Touch ID to unlock device"
              },
              "AllowSpotlightInternetResults": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable internet search results in Spotlight"
              },
              "AllowUnEnrollment": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether user can un-enroll device from agent or self service portal (SSP)."
              },
              "AllowActivityContinuation": {
                "type": "boolean"
              },
              "AllowEnablingRestrictions": {
                "type": "boolean"
              },
              "AllowEraseContentAndSettings": {
                "type": "boolean"
              },
              "AllowManagedAppsCloudSync": {
                "type": "boolean"
              },
              "ForceAirPlayOutgoingRequestsPairingPassword": {
                "type": "boolean"
              },
              "AllowAutoCorrection": {
                "type": "boolean"
              },
              "AllowAutomaticAppDownloads": {
                "type": "boolean"
              },
              "AllowCloudPhotoLibrary": {
                "type": "boolean"
              },
              "AllowDefinitionLookup": {
                "type": "boolean"
              },
              "AllowDeviceNameModification": {
                "type": "boolean"
              },
              "AllowEnterpriseAppTrust": {
                "type": "boolean"
              },
              "AllowEnterpriseBookBackup": {
                "type": "boolean"
              },
              "AllowEnterpriseBookMetadataSync": {
                "type": "boolean"
              },
              "AllowFingerprintModification": {
                "type": "boolean"
              },
              "AllowKeyboardShortcuts": {
                "type": "boolean"
              },
              "AllowMusicService": {
                "type": "boolean"
              },
              "AllowNews": {
                "type": "boolean"
              },
              "AllowPairedWatch": {
                "type": "boolean"
              },
              "AllowPasscodeModification": {
                "type": "boolean"
              },
              "AllowPodcasts": {
                "type": "boolean"
              },
              "AllowContinuousPathKeyboard": {
                "type": "boolean",
                "description": "Gets or sets a value preventing user from using Continuous Path Keyboard"
              },
              "AllowPredictiveKeyboard": {
                "type": "boolean"
              },
              "AllowSharedStream": {
                "type": "boolean"
              },
              "AllowSpellCheck": {
                "type": "boolean"
              },
              "AllowUIAppInstallation": {
                "type": "boolean"
              },
              "AllowUIConfigurationProfileInstallation": {
                "type": "boolean"
              },
              "AllowWallpaperModification": {
                "type": "boolean"
              },
              "ForceAirdropUnmanaged": {
                "type": "boolean"
              },
              "ForceWatchWristDetection": {
                "type": "boolean"
              },
              "AllowNotificationsModification": {
                "type": "boolean"
              },
              "AllowBluetoothModification": {
                "type": "boolean"
              },
              "AllowDiagnosticSubmissionModification": {
                "type": "boolean"
              },
              "AllowRemoteScreenObservation": {
                "type": "boolean"
              },
              "AllowRadioService": {
                "type": "boolean"
              },
              "AllowDictation": {
                "type": "boolean"
              },
              "AllowWiFiPowerModification": {
                "type": "boolean",
                "description": "Gets or sets a value preventing the user from modifying the WiFi state."
              },
              "ForceWiFiWhitelisting": {
                "type": "boolean"
              },
              "AorceWiFiWhitelisting": {
                "type": "boolean"
              },
              "AllowAirPrint": {
                "type": "boolean"
              },
              "AllowAirPrintCredentialsStorage": {
                "type": "boolean"
              },
              "ForceAirPrintTrustedTLSRequirement": {
                "type": "boolean"
              },
              "AllowAirPrintiBeaconDiscovery": {
                "type": "boolean"
              },
              "AllowSystemAppRemoval": {
                "type": "boolean"
              },
              "AllowVPNCreation": {
                "type": "boolean"
              },
              "EnforcedSoftwareUpdateDelay": {
                "type": "integer",
                "description": "Number of days between 0 to 90 to enforce the update",
                "format": "int32"
              },
              "AllowUSBRestrictedMode": {
                "type": "boolean",
                "description": "Ability to connect to USB accessories while the device is locked. Defaults to true"
              },
              "ForceAutomaticDateAndTime": {
                "type": "boolean",
                "description": "Force the Date and Time “Set Automatically” feature to be turned on and not allow the user to turn it off. Defaults to false"
              },
              "AllowPasswordAutoFill": {
                "type": "boolean",
                "description": "Prevent Password AutoFill (Safari). Defaults to true"
              },
              "AllowPasswordSharing": {
                "type": "boolean",
                "description": "Prevent password sharing (also blocks WiFi password sharing). Defaults to true"
              },
              "AllowPasswordProximityRequests": {
                "type": "boolean",
                "description": "Prevent password proximity requests. Defaults to true"
              },
              "AllowManagedToWriteUnmanagedContacts": {
                "type": "boolean",
                "description": "Disable Managed to Unmanaged Contacts Writing. Defaults to true"
              },
              "AllowUnmanagedToReadManagedContacts": {
                "type": "boolean",
                "description": "Disable Unmanaged to Managed Contacts Reading. Defaults to true"
              },
              "AllowCellularPlanModification": {
                "type": "boolean",
                "description": "Disable modifying cellular plans. Defaults to true"
              },
              "AllowESIMModification": {
                "type": "boolean",
                "description": "Prevents users from removing or adding a cellular plan to the eSIM on the device. Defaults to true."
              },
              "AllowProximitySetupToNewDevice": {
                "type": "boolean",
                "description": "Prevents users from using their device to set up nearby iOS devices. Defaults to true"
              },
              "ForceClassroomAutomaticallyJoinClasses": {
                "type": "boolean",
                "description": "Allows the teacher to have enrolled students join classes without prompting the students. Defaults to false"
              },
              "ForceClassroomRequestPermissionToLeaveClasses": {
                "type": "boolean",
                "description": "Force a student enrolled in an unmanaged course via Classroom to request permission from the teacher when attempting to leave the course. Defaults to false"
              },
              "ForceClassroomUnpromptedAppAndDeviceLock": {
                "type": "boolean",
                "description": "Allow the teacher to lock apps or an enrolled student's device without prompting the student. Defaults to false"
              },
              "ForceClassroomUnpromptedScreenObservation": {
                "type": "boolean",
                "description": "Allows the teacher to remotely view an enrolled student's device without prompting the student. Defaults to false"
              },
              "AllowPersonalHotspotModification": {
                "type": "boolean",
                "description": "Prevents users from being able to modify Personal Hotspot settings in Settings. Defaults to true"
              },
              "AllowSiriServerLogging": {
                "type": "boolean",
                "description": "Prevents Siri from storing server logs. Defaults to true\n            "
              },
              "AllowFilesUSBDriveAccess": {
                "type": "boolean",
                "description": "If disabled, prevents user from connecting to any connected USB devices in the Files app. (Requires iOS 13.0+)"
              },
              "AllowFilesNetworkDriveAccess": {
                "type": "boolean",
                "description": "If disabled, prevents user from connecting to any network drives in the Files app. (Requires iOS 13.0+)"
              },
              "AllowApplePersonalizedAdvertising": {
                "type": "boolean",
                "description": "If disabled, limits Apple personalized advertising. (Requires iOS 14+)"
              },
              "AllowAppClips": {
                "type": "boolean",
                "description": "If disabled, prevents a user from adding any App Clips, and removes any existing App Clips on the device. (Requires iOS 14+, Supervision)"
              },
              "AllowRapidSecurityResponseInstallation": {
                "type": "boolean",
                "description": "If disabled, prevents Rapid Security Response Installation."
              },
              "AllowRapidSecurityResponseRemoval": {
                "type": "boolean",
                "description": "If disabled, prevents Rapid Security Response Removal."
              },
              "AllowMailPrivacyProtection": {
                "type": "boolean",
                "description": "Allow users to hide their IP address from senders. Remote content will be privately downloaded in the background when they receive a message instead of when they view it. (Requires iOS 15.2+)"
              },
              "AllowCloudPrivateRelay": {
                "type": "boolean",
                "description": "If disabled, disables iCloud Private Relay. (Required iOS 15+, Supervision)"
              }
            }
          }
        ]
      },
      "SafariOptions": {
        "type": "object",
        "description": "Represents the configurable Safari options for iOS devices.",
        "required": [
          "EnableAutoFill",
          "ForceFraudWarning",
          "EnableJavaScript",
          "BlockPopUps",
          "AllowAcceptAllCookies",
          "AllowAcceptCookiesVisitedSites"
        ],
        "properties": {
          "EnableAutoFill": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether Safari remembers what users enter in web forms."
          },
          "ForceFraudWarning": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether Safari attempts to prevent the user from visiting website identified as being fraudulent or compromised."
          },
          "EnableJavaScript": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether Safari ignores all javascript on websites."
          },
          "BlockPopUps": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether Safari's pop-up blocking feature is enabled."
          },
          "AllowAcceptAllCookies": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether Safari accept all cookies on websites."
          },
          "AllowAcceptCookiesVisitedSites": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether Safari accept cookies on visited websites."
          }
        }
      },
      "MovieContent": {
        "type": "string",
        "description": "Specifies movie content levels to allow on an iOS device.",
        "x-enumNames": [
          "None",
          "G",
          "PG",
          "PG13",
          "R",
          "NC17",
          "All"
        ],
        "enum": [
          "None",
          "G",
          "PG",
          "PG13",
          "R",
          "NC17",
          "All"
        ],
        "x-enumType": "MovieContent"
      },
      "TVContent": {
        "type": "string",
        "description": "Defines the different levels of allowed TV content on iOS devices.",
        "x-enumNames": [
          "None",
          "TVY",
          "TVY7",
          "TVG",
          "TVPG",
          "TV14",
          "TVMA",
          "All"
        ],
        "enum": [
          "None",
          "TVY",
          "TVY7",
          "TVG",
          "TVPG",
          "TV14",
          "TVMA",
          "All"
        ],
        "x-enumType": "TVContent"
      },
      "AppContent": {
        "type": "string",
        "description": "Defines the different levels of allow App content on iOS devices.",
        "x-enumNames": [
          "None",
          "FourPlus",
          "NinePlus",
          "TwelvePlus",
          "SeventeenPlus",
          "All"
        ],
        "enum": [
          "None",
          "FourPlus",
          "NinePlus",
          "TwelvePlus",
          "SeventeenPlus",
          "All"
        ],
        "x-enumType": "AppContent"
      },
      "IOSFontSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding device fonts to be displayed with\na device or group.",
            "properties": {
              "Fonts": {
                "type": "array",
                "description": "Gets or sets the list of Certificates.",
                "items": {
                  "$ref": "#/definitions/Font"
                }
              }
            }
          }
        ]
      },
      "Font": {
        "type": "object",
        "description": "Represents an iOS device font.",
        "required": [
          "FileId"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets the name."
          },
          "FileId": {
            "type": "integer",
            "description": "Gets or sets the file id.",
            "format": "int32"
          }
        }
      },
      "IOSGlobalHttpProxySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Stores an iOS global http proxy configuration.",
            "properties": {
              "Server": {
                "type": "string",
                "description": "Gets or sets server address with port."
              },
              "UserName": {
                "type": "string",
                "description": "Gets or sets username for authentication."
              },
              "Password": {
                "type": "string",
                "description": "Gets or sets password for authentication."
              },
              "PacFileURL": {
                "type": "string",
                "description": "Gets or sets PAC file URL for automatic proxy configuration."
              }
            }
          }
        ]
      },
      "IOSHomeScreenLayoutSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Contract data for Home Screen Layout Section.",
            "properties": {
              "Dock": {
                "type": "array",
                "description": "Gets or sets the dock layout.",
                "items": {
                  "$ref": "#/definitions/PageItem"
                }
              },
              "Pages": {
                "type": "array",
                "description": "Gets or sets the pages layout.",
                "items": {
                  "$ref": "#/definitions/PageLayout"
                }
              }
            }
          }
        ]
      },
      "PageItem": {
        "type": "object",
        "description": "Page Item",
        "properties": {
          "Type": {
            "type": "string",
            "description": "Gets or sets type:\nRequired. Must be one of the following:\n-Application\n-Folder\n-WebClip"
          },
          "DisplayName": {
            "type": "string",
            "description": "Gets or sets Human-readable string to be shown to the user. Valid only if Folder type."
          },
          "BundleID": {
            "type": "string",
            "description": "Gets or sets The bundle identifier of the app, Required if Application type"
          },
          "Folder": {
            "type": "array",
            "description": "Gets or sets Folder layout, valid only if Folder type",
            "items": {
              "$ref": "#/definitions/FolderLayout"
            }
          },
          "URL": {
            "type": "string",
            "description": "Required if WebClip type. URL of the WebClip being referenced "
          }
        }
      },
      "FolderLayout": {
        "type": "object",
        "description": "Folder Layout",
        "properties": {
          "Type": {
            "type": "string",
            "description": "Gets or sets type:\nRequired. Must be one of the following:\n-Application\n-WebClip"
          },
          "DisplayName": {
            "type": "string",
            "description": "Gets or sets Human-readable string to be shown to the user. Valid only if Folder type."
          },
          "BundleID": {
            "type": "string",
            "description": "Gets or sets The bundle identifier of the app, Required if Application type"
          },
          "URL": {
            "type": "string",
            "description": "Required if WebClip type. URL of the WebClip being referenced "
          }
        }
      },
      "PageLayout": {
        "type": "object",
        "description": "Page Layout",
        "properties": {
          "Page": {
            "type": "array",
            "description": "Gets or sets Page:",
            "items": {
              "$ref": "#/definitions/PageItem"
            }
          }
        }
      },
      "IOSKerberosExtensibleSingleSignOnSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Contract data for Kerberos Extensible Single Sign On Section.",
            "properties": {
              "KerberosExtensibleSingleSignOns": {
                "description": "Gets or sets the collection of Kerberos ExtensibleSingleSignOn for this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/KerberosExtensibleSingleSignOn"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "KerberosExtensibleSingleSignOn": {
        "type": "object",
        "description": "Contract data for Kerberos Extensible Single Sign On.",
        "properties": {
          "Hosts": {
            "type": "array",
            "description": "Gets or sets Host names",
            "items": {
              "type": "string"
            }
          },
          "Realm": {
            "type": "string",
            "description": "Gets or sets Realm - The realm name for Credential payloads"
          },
          "ExtensionData": {
            "description": "Gets or sets ExtensionData - This is the dictionary used by the Apple built-in Kerberos extension.",
            "allOf": [
              {
                "$ref": "#/definitions/KerberosExtensibleSingleSignExtensionData"
              }
            ]
          }
        }
      },
      "KerberosExtensibleSingleSignExtensionData": {
        "type": "object",
        "description": "Contract data for Kerberos Extensible Single Sign On ExtensionData.",
        "required": [
          "AllowAutomaticLogin",
          "IsDefaultRealm",
          "RequireUserPresence",
          "UseSiteAutoDiscovery"
        ],
        "properties": {
          "AllowAutomaticLogin": {
            "type": "boolean",
            "description": "Gets or sets allowAutomaticLogin - If false, passwords are not allowed to be saved to the keychain."
          },
          "CredentialBundleIDACL": {
            "type": "array",
            "description": "Gets or sets credentialBundleIDACL - A list of bundle IDs allowed to access the TGT.",
            "items": {
              "$ref": "#/definitions/Application"
            }
          },
          "IsDefaultRealm": {
            "type": "boolean",
            "description": "Gets or sets isDefaultRealm - This property specifies it is the default realm if there is more than one Kerberos extension configuration."
          },
          "PrincipalName": {
            "type": "string",
            "description": "Gets or sets principalName - The principal (aka username) to use. You do not need to include the realm."
          },
          "PreferredKDCs": {
            "type": "array",
            "description": "Gets or sets preferredKDCs - The ordered list of perferred Key Distribution Centers (KDCs) to use for Kerberos traffic. ",
            "items": {
              "type": "string"
            }
          },
          "RequireUserPresence": {
            "type": "boolean",
            "description": "Gets or sets requireUserPresence - If true, requires the user to provide Touch ID, Face ID or their passcode to access the keychain entry."
          },
          "SiteCode": {
            "type": "string",
            "description": "Gets or sets siteCode - The name of the Active Directory site the Kerberos extension should use. Most administrators will never need to modify this value, as the Kerberos extension can normally find the site automatically."
          },
          "UseSiteAutoDiscovery": {
            "type": "boolean",
            "description": "Gets or sets useSiteAutoDiscovery - If false, the Kerberos extension doesn't automatically use LDAP and DNS to determine its AD site name."
          },
          "IdentityCertificateRetrievalMethod": {
            "description": "IdentityCertificateRetrievalMethod",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          },
          "IdentityCertificateId": {
            "type": "integer",
            "description": "IdentityCertificateId",
            "format": "int32"
          },
          "IdentityCertificateRefId": {
            "type": "string",
            "description": "IdentityCertificateId"
          }
        }
      },
      "IOSLDAPSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents the LDAP configuration for an iOS device.",
            "properties": {
              "Account": {
                "description": "Gets or sets the LDAP account.",
                "allOf": [
                  {
                    "$ref": "#/definitions/LDAPAccount"
                  }
                ]
              }
            }
          }
        ]
      },
      "LDAPAccount": {
        "type": "object",
        "description": "Represents the LDAP configuration for an iOS device.",
        "required": [
          "UseSSL"
        ],
        "properties": {
          "Description": {
            "type": "string",
            "description": "Gets or sets the user-friendly description of the LDAP account."
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the user name that the device will use to authenticate\nwith the LDAP server."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password that the device will use to authenticate\nwith the LDAP server."
          },
          "HostName": {
            "type": "string",
            "description": "Gets or sets the host name of the LDAP server."
          },
          "UseSSL": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device should use SSL\nto communicate with the server."
          },
          "SearchSettings": {
            "type": "array",
            "description": "Gets or sets the collection of search settings for this account.",
            "items": {
              "$ref": "#/definitions/LDAPSearch"
            }
          }
        }
      },
      "LDAPSearch": {
        "type": "object",
        "description": "Represents the search settings for an iOS LDAP configuration.",
        "required": [
          "Scope"
        ],
        "properties": {
          "Description": {
            "type": "string",
            "description": "Gets or sets the description of this search."
          },
          "Scope": {
            "description": "Gets or sets the scope of this LDAP search.",
            "allOf": [
              {
                "$ref": "#/definitions/LDAPSearchScope"
              }
            ],
            "x-enumType": "LDAPSearchScope"
          },
          "SearchBase": {
            "type": "string",
            "description": "Gets or sets the base of this search."
          }
        }
      },
      "LDAPSearchScope": {
        "type": "string",
        "description": "Defines the possible scopes for an LDAP search.",
        "x-enumNames": [
          "Base",
          "OneLevel",
          "Subtree"
        ],
        "enum": [
          "Base",
          "OneLevel",
          "Subtree"
        ],
        "x-enumType": "LDAPSearchScope"
      },
      "IOSLockScreenMessageSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an Lock Screen Message Section configuration for an iOS device.",
            "properties": {
              "AssetTagInformation": {
                "type": "string",
                "description": "Gets or sets The asset tag information for the device, displayed in the login window and Lock screen."
              },
              "LockScreenFootnote": {
                "type": "string",
                "description": "Gets or sets The footnote displayed in the login window and Lock screen. "
              }
            }
          }
        ]
      },
      "IOSNetworkUsageSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Contract data for Network Usage Section.",
            "required": [
              "DeviceFamily"
            ],
            "properties": {
              "ApplicationRules": {
                "type": "array",
                "description": "Gets or sets the application rules.",
                "items": {
                  "$ref": "#/definitions/NetworkUsageApplicationRule"
                }
              },
              "SIMRules": {
                "type": "array",
                "description": "Gets or sets the SIM rules.",
                "items": {
                  "$ref": "#/definitions/NetworkUsageSIMRule"
                }
              },
              "DeviceFamily": {
                "description": "Gets the device family supported by this section",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceFamily3"
                  }
                ]
              }
            }
          }
        ]
      },
      "NetworkUsageApplicationRule": {
        "type": "object",
        "description": "Network Usage restriction for iOS applications.",
        "required": [
          "AllowRoamingCellularData",
          "AllowCellularData"
        ],
        "properties": {
          "AppIdentifierMatches": {
            "type": "array",
            "description": "Gets or sets a value indicating whether or not cellular data is to be allowed.",
            "items": {
              "type": "string"
            }
          },
          "AllowRoamingCellularData": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether or not cellular data in roaming is to be allowed."
          },
          "AllowCellularData": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether or not cellular data is to be allowed."
          }
        }
      },
      "NetworkUsageSIMRule": {
        "type": "object",
        "description": "Network Usage regarding sim cards restriction for iOS applications.",
        "required": [
          "WiFiAssistPolicy"
        ],
        "properties": {
          "ICCIDs": {
            "type": "array",
            "description": "Gets or sets a value of the SIM cards the wifi assist policy is applied to",
            "items": {
              "type": "string"
            }
          },
          "WiFiAssistPolicy": {
            "type": "integer",
            "description": "Gets or sets a value indicating the wifi assist policy.",
            "format": "int32"
          }
        }
      },
      "DeviceFamily3": {
        "type": "string",
        "description": "Enumerates the different device families.",
        "x-enumNames": [
          "NotSpecified",
          "All",
          "WindowsCE",
          "iOS",
          "WindowsDesktop",
          "AndroidPlus",
          "Scanner",
          "WindowsPhone",
          "Blackberry",
          "Printer",
          "WindowsRuntime",
          "Linux",
          "Chrome"
        ],
        "enum": [
          "NotSpecified",
          "All",
          "WindowsCE",
          "iOS",
          "WindowsDesktop",
          "AndroidPlus",
          "Scanner",
          "WindowsPhone",
          "Blackberry",
          "Printer",
          "WindowsRuntime",
          "Linux",
          "Chrome"
        ],
        "x-enumType": "DeviceFamily"
      },
      "IOSNotificationSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Contract data for Notification Settings Section.",
            "required": [
              "DeviceFamily"
            ],
            "properties": {
              "NotificationSettings": {
                "type": "array",
                "description": "Gets or sets the application rules.",
                "items": {
                  "$ref": "#/definitions/NotificationSettings"
                }
              },
              "DeviceFamily": {
                "description": "Gets the device family supported by this section",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceFamily3"
                  }
                ]
              }
            }
          }
        ]
      },
      "NotificationSettings": {
        "type": "object",
        "description": "Network Usage restriction for iOS applications.",
        "required": [
          "NotificationsEnabled",
          "ShowInNotificationCenter",
          "ShowInLockScreen",
          "AlertType",
          "BadgesEnabled",
          "SoundsEnabled",
          "ShowInCarPlay",
          "GroupingType",
          "CriticalAlertEnabled"
        ],
        "properties": {
          "ApplicationName": {
            "type": "string",
            "description": "Application Name"
          },
          "BundleIdentifier": {
            "type": "string",
            "description": "Gets or sets Bundle identifier of app to which to apply these notification settings"
          },
          "NotificationsEnabled": {
            "type": "boolean",
            "description": "Gets or sets Whether notifications are allowed for this app"
          },
          "ShowInNotificationCenter": {
            "type": "boolean",
            "description": "Gets or sets Whether notifications can be shown in notification center"
          },
          "ShowInLockScreen": {
            "type": "boolean",
            "description": "Gets or sets Whether notifications can be shown in the lock screen."
          },
          "AlertType": {
            "type": "integer",
            "description": "Gets or sets The type of alert for notifications for this app:\n0: None\n1: Banner (default)\n2: Modal Alert.",
            "format": "int32"
          },
          "BadgesEnabled": {
            "type": "boolean",
            "description": "Gets or sets Whether badges are allowed for this app."
          },
          "SoundsEnabled": {
            "type": "boolean",
            "description": "Gets or sets Whether sounds are allowed for this app."
          },
          "ShowInCarPlay": {
            "type": "boolean",
            "description": "Gets or sets Whether sounds are allowed for this app."
          },
          "GroupingType": {
            "type": "integer",
            "description": "Gets or sets The type of grouping for notifications for this app:\n0: Automatic - group notifications into app-specified groups. (Default)\n1: By app - group notifications into one group.\n2: Off - do not group notifications..",
            "format": "int32"
          },
          "CriticalAlertEnabled": {
            "type": "boolean",
            "description": "Gets or sets Whether an app can mark a notification as a critical\nnotification that will ignore Do Not Disturb and ringer settings."
          }
        }
      },
      "IOSSCEPSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents a configuration section for SCEP servers",
            "properties": {
              "Configurations": {
                "type": "array",
                "description": "Gets or sets the collection of SCEP server settings.",
                "items": {
                  "$ref": "#/definitions/SCEPConfiguration"
                }
              }
            }
          }
        ]
      },
      "IOSSecureBrowserAppSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/SecureBrowserAppSettingsSection"
          },
          {
            "type": "object",
            "description": "Represents an secure browser application settings section configuration for Android devices."
          }
        ]
      },
      "SecureBrowserAppSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines secure browser setting section configuration",
            "required": [
              "DisableCopyPaste",
              "DisableScreenCapture",
              "DisableDownloads",
              "DisallowSharingOfDownloadedFiles",
              "DisableZoomGesture",
              "DefaultZoomLevel",
              "DisableMediaAutoplay",
              "HideAddressBar",
              "DisablePullToRefresh",
              "OpenSameLinkInSameTab",
              "DisableThirdPartyCookies",
              "DisableJavaScript",
              "DisablePopups",
              "DisableCookies",
              "DisableWebsiteCache",
              "EnableKioskMode",
              "EnableLDAPLogin",
              "InactivityTimeout",
              "DisableAutoFill",
              "DisableSafeSearch",
              "DisableAccessToUntrustedWebsites",
              "DisableInvalidSSLCertificateWarnings",
              "OpenNewTabInBackground",
              "MixedContentType",
              "AllowDebugging",
              "AllowProGlove",
              "AllowAnalyticsWithXSight",
              "DisablePrint",
              "AppShutdownTime",
              "ClearCookiesOnLaunch",
              "ClearHistoryOnLaunch",
              "DisableBookmarks",
              "OpenFilesInThirdPartyApps",
              "PreviewFiles"
            ],
            "properties": {
              "Description": {
                "type": "string",
                "description": "Gets or sets the Description of secure browser app settings section."
              },
              "DisableCopyPaste": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable copy paste]."
              },
              "DisableScreenCapture": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable screen capture]."
              },
              "DisableDownloads": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable downloads]."
              },
              "DisallowSharingOfDownloadedFiles": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disallow sharing of downloaded files]."
              },
              "ExcludedFileFormats": {
                "type": "string",
                "description": "Gets or sets a value indicating  [Excluded File Formats]."
              },
              "DisableZoomGesture": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disallow zoom gesture in web page]."
              },
              "DefaultZoomLevel": {
                "type": "integer",
                "description": "Gets or sets a value indicating  [Default Zoom Level].",
                "format": "int32"
              },
              "DisableMediaAutoplay": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disallow auto play in web page]."
              },
              "HideAddressBar": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [Hide the address bar in browser]."
              },
              "DisablePullToRefresh": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [Disable Pull To Refresh]."
              },
              "OpenSameLinkInSameTab": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [Open Same Link in Same Tab or not]."
              },
              "DisableThirdPartyCookies": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [Disable Third Party Cookies in browser]."
              },
              "DisableJavaScript": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable java script]."
              },
              "DisablePopups": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable popups]."
              },
              "DisableCookies": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable cookies]."
              },
              "DisableWebsiteCache": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable website cache]."
              },
              "EnableKioskMode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [enable kiosk mode]."
              },
              "EnableLDAPLogin": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [enable LDAP login]."
              },
              "InactivityTimeout": {
                "type": "integer",
                "description": "Gets or sets a value indicating whether [enable LDAP login].",
                "format": "int32"
              },
              "DisableAutoFill": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable automatic fill]."
              },
              "DisableSafeSearch": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable safe search]."
              },
              "DisableAccessToUntrustedWebsites": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable access to untrusted websites]."
              },
              "DisableInvalidSSLCertificateWarnings": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable Invalid SSL Certificate Warnings]."
              },
              "OpenNewTabInBackground": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [open new tab in background]."
              },
              "DefaultSearchUrl": {
                "type": "string",
                "description": "Gets or sets the search URL configurations."
              },
              "MixedContentType": {
                "description": "Gets or sets the Mixed Content Type configurations.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserManageMixedContentType"
                  }
                ]
              },
              "AllowDebugging": {
                "type": "boolean",
                "description": "Gets or sets the Allow Debugging configurations."
              },
              "AllowProGlove": {
                "type": "boolean",
                "description": "Gets or sets the Allow ProGlove configurations."
              },
              "AllowAnalyticsWithXSight": {
                "type": "boolean",
                "description": "Gets or sets the Allow Analytics With XSight configurations."
              },
              "GatewaySettings": {
                "description": "Gets or sets the gateway settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserGatewaySettings"
                  }
                ]
              },
              "FilterSettings": {
                "description": "Gets or sets the filter settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserUrlFilteringSettings"
                  }
                ]
              },
              "BookmarkSettings": {
                "description": "Gets or sets the bookmark settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserBookmarkSettings"
                  }
                ]
              },
              "CertBasedAuthenticationSettings": {
                "description": "Gets or sets the domain based certificate authentication settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserCertificateBasedAuthSettings"
                  }
                ]
              },
              "NetworkSettings": {
                "description": "Gets or sets the network settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserNetworkSettings"
                  }
                ]
              },
              "BrandSettings": {
                "description": "Gets or sets the brand settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserBrandingSettings"
                  }
                ]
              },
              "KioskModeSettings": {
                "description": "Gets or sets the kiosk mode settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserKioskModeSettings"
                  }
                ]
              },
              "DisablePrint": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable printing]."
              },
              "AppShutdownTime": {
                "type": "integer",
                "description": "Gets or sets the app shutdown time.",
                "format": "int32"
              },
              "ClearCookiesOnLaunch": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [clear cookies on launch]."
              },
              "ClearHistoryOnLaunch": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [clear history on launch]."
              },
              "DisableBookmarks": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [disable bookmarks]."
              },
              "OpenFilesInThirdPartyApps": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [OpenFilesInThirdPartyApps] allowed."
              },
              "PreviewFiles": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [PreviewFiles] allowed."
              },
              "ExportBrowsingHistorySettings": {
                "description": "Gets or sets the export browser history settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserExportBrowsingHistorySettings"
                  }
                ]
              },
              "DownloadLocationSettings": {
                "description": "Gets or sets the download location settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserDownloadLocationSettings"
                  }
                ]
              },
              "AgentApplicationSettings": {
                "description": "Gets or sets the agent application settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserAgentApplicationSettings"
                  }
                ]
              },
              "AutoRefreshSettings": {
                "description": "Gets or sets the auto refresh settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SecureBrowserAutoRefreshSettings"
                  }
                ]
              }
            }
          }
        ]
      },
      "SecureBrowserManageMixedContentType": {
        "type": "string",
        "description": "Managed Mixed content type",
        "x-enumNames": [
          "Never",
          "Always",
          "CompatibilityMode"
        ],
        "enum": [
          "Never",
          "Always",
          "CompatibilityMode"
        ],
        "x-enumType": "SecureBrowserManageMixedContentType"
      },
      "SecureBrowserGatewaySettings": {
        "type": "object",
        "description": "Defines secure browser gateway settings.",
        "required": [
          "Enabled",
          "Port"
        ],
        "properties": {
          "Enabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this SecureBrowserGatewaySettings is enabled."
          },
          "ProxyAddress": {
            "type": "string",
            "description": "Gets or sets the proxy address."
          },
          "Port": {
            "type": "integer",
            "description": "Gets or sets the port.",
            "format": "int32"
          },
          "DomainUrls": {
            "type": "array",
            "description": "Gets or sets the domain urls.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SecureBrowserUrlFilteringSettings": {
        "type": "object",
        "description": "Defines secure browser website filtering settings.",
        "required": [
          "Enabled",
          "IsBlackList"
        ],
        "properties": {
          "Enabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this SecureBrowserUrlFilteringSettings is enabled."
          },
          "IsBlackList": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this instance is black list."
          },
          "DefaultRedirectUrl": {
            "type": "string",
            "description": "Gets or sets default redirect url."
          },
          "FilterUrls": {
            "type": "array",
            "description": "Gets or sets the filter urls.",
            "items": {
              "type": "string"
            }
          },
          "ExceptionUrls": {
            "type": "array",
            "description": "Gets or sets the exception urls.",
            "items": {
              "type": "string"
            }
          },
          "BlockedCategories": {
            "type": "array",
            "description": "Gets or sets the blocked categories.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SecureBrowserBookmarkSettings": {
        "type": "object",
        "description": "Defines secure browser bookmark settings.",
        "required": [
          "Enabled",
          "HomeScreenUrlEnabled",
          "WebsiteShowFirstOnCatalogEnabled"
        ],
        "properties": {
          "Enabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this SecureBrowserBookmarkSettings is enabled."
          },
          "Bookmarks": {
            "type": "array",
            "description": "Gets or sets the bookmarks settings.",
            "items": {
              "$ref": "#/definitions/SecureBrowserBookmark"
            }
          },
          "HomeScreenUrlEnabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [home screen URL enabled]."
          },
          "HomeScreenUrlSettings": {
            "description": "Gets or sets the home screen URL.",
            "allOf": [
              {
                "$ref": "#/definitions/SecureBrowserHomeScreenUrlSettings"
              }
            ]
          },
          "BookmarkFolders": {
            "type": "array",
            "description": "Gets or sets the  bookmarks folder settings.",
            "items": {
              "$ref": "#/definitions/SecureBrowserBookmarkFolder"
            }
          },
          "WebsiteShowFirstOnCatalogEnabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether websites should show before folders in catalog on device."
          }
        }
      },
      "SecureBrowserBookmark": {
        "type": "object",
        "description": "Defines secure browser bookmark configuration.",
        "required": [
          "BookmarkPath"
        ],
        "properties": {
          "Url": {
            "type": "string",
            "description": "Gets or sets the URL."
          },
          "BookmarkPath": {
            "type": "integer",
            "description": "Gets or sets the bookmark path.",
            "format": "int32"
          },
          "Title": {
            "type": "string",
            "description": "Gets or sets the title."
          }
        }
      },
      "SecureBrowserHomeScreenUrlSettings": {
        "type": "object",
        "description": "Defines secure browser home screen url settings.",
        "properties": {
          "HomeScreenLink": {
            "type": "string",
            "description": "Gets or sets the home screen Link."
          },
          "CorporateBookmarks": {
            "type": "array",
            "description": "Gets or sets the corporate bookmarks.",
            "items": {
              "$ref": "#/definitions/SecureBrowserBookmark"
            }
          }
        }
      },
      "SecureBrowserBookmarkFolder": {
        "type": "object",
        "description": "Defines secure browser bookmark folder configuration.",
        "properties": {
          "Bookmarks": {
            "type": "array",
            "description": "Gets or sets the URL.",
            "items": {
              "$ref": "#/definitions/SecureBrowserBookmark"
            }
          },
          "Name": {
            "type": "string",
            "description": "Name of the bookmark folder."
          }
        }
      },
      "SecureBrowserCertificateBasedAuthSettings": {
        "type": "object",
        "description": "Defines secure browser certificate based authentication with domain settings.",
        "required": [
          "Enabled"
        ],
        "properties": {
          "Enabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this SecureBrowserCertificateBasedAuthSettings is enabled."
          },
          "CertificateDomainData": {
            "type": "array",
            "description": "Gets or sets the certificate and domain settings.",
            "items": {
              "$ref": "#/definitions/SecureBrowserCertificateDomainData"
            }
          }
        }
      },
      "SecureBrowserCertificateDomainData": {
        "type": "object",
        "description": "Defines secure browser certificate and domain configuration.",
        "required": [
          "UserCertificateRetrievalMethod"
        ],
        "properties": {
          "DomainName": {
            "type": "string",
            "description": "Gets or sets the Domain Name."
          },
          "UserCertificateRefId": {
            "type": "string",
            "description": "Gets or sets the id of the user certificate."
          },
          "UserCertificateRetrievalMethod": {
            "description": "Gets or sets retrieval method for user certificate",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          }
        }
      },
      "SecureBrowserNetworkSettings": {
        "type": "object",
        "description": "The Secure Browser Network Settings",
        "required": [
          "CellularEnabled",
          "RoamingEnabled",
          "WifiEnabled"
        ],
        "properties": {
          "CellularEnabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [cellular enabled]."
          },
          "RoamingEnabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [roaming enabled]."
          },
          "WifiEnabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [wifi enabled]."
          }
        }
      },
      "SecureBrowserBrandingSettings": {
        "type": "object",
        "description": "Defines secure browser Branding settings.",
        "required": [
          "Enabled"
        ],
        "properties": {
          "Enabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this SecureBrowserBrandingSettings is enabled."
          },
          "AppearanceColor": {
            "description": "Gets or sets the AppearanceColor settings of branding.",
            "allOf": [
              {
                "$ref": "#/definitions/SecureBrowserAppearanceColor"
              }
            ]
          },
          "TextColor": {
            "description": "Gets or sets the Text Color settings of branding.",
            "allOf": [
              {
                "$ref": "#/definitions/SecureBrowserTextColor"
              }
            ]
          },
          "Icons": {
            "type": "array",
            "description": "Gets or sets the icons(logo) of brand.",
            "items": {
              "$ref": "#/definitions/SecureBrowserIcon"
            }
          }
        }
      },
      "SecureBrowserAppearanceColor": {
        "type": "object",
        "description": "Defines secure browser Branding appearance colors for surf app.",
        "properties": {
          "PrimaryColor": {
            "type": "string",
            "description": "Gets or sets the primary color for surf app."
          }
        }
      },
      "SecureBrowserTextColor": {
        "type": "object",
        "description": "Defines secure browser Branding appearance colors for surf app.",
        "properties": {
          "DisplayTextColor": {
            "type": "string",
            "description": "Gets or sets the Display Text color for surf app."
          }
        }
      },
      "SecureBrowserIcon": {
        "type": "object",
        "description": "Defines secure browser Icon info.",
        "required": [
          "IconFileId",
          "UseOriginal"
        ],
        "properties": {
          "IconFileId": {
            "type": "integer",
            "description": "Gets or sets the icon file id.",
            "format": "int32"
          },
          "UseOriginal": {
            "type": "boolean",
            "description": "Gets or sets the value indicates that icon will be inverted on agent side or not."
          }
        }
      },
      "SecureBrowserKioskModeSettings": {
        "type": "object",
        "description": "The secure browser kiosk mode settings",
        "required": [
          "HideAppBottomBar",
          "HideAppMenu",
          "ClearCookiesWithHome",
          "AllowMultipleTabs",
          "DisableKeyboard"
        ],
        "properties": {
          "HideAppBottomBar": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide application bottom bar]."
          },
          "HideAppMenu": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide application menu]."
          },
          "ClearCookiesWithHome": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [clear cookies with home]."
          },
          "AllowMultipleTabs": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [Allow multiple tabs]."
          },
          "DisableKeyboard": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [disable keyboard]."
          }
        }
      },
      "SecureBrowserExportBrowsingHistorySettings": {
        "type": "object",
        "description": "The secure browser export browsing history settings\n            ",
        "required": [
          "Enabled"
        ],
        "properties": {
          "Enabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this SecureBrowserExportBrowsingHistorySettings is enabled."
          },
          "FileLocation": {
            "type": "string",
            "description": "Gets or sets the file location."
          }
        }
      },
      "SecureBrowserDownloadLocationSettings": {
        "type": "object",
        "description": "The secure browser download location settings\n            ",
        "required": [
          "Enabled"
        ],
        "properties": {
          "Enabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this SecureBrowserExportBrowsingHistorySettings is enabled."
          },
          "DownloadLocation": {
            "type": "string",
            "description": "Gets or sets the download location."
          }
        }
      },
      "SecureBrowserAgentApplicationSettings": {
        "type": "object",
        "description": "The secure browser agent application settings",
        "required": [
          "HideAccessibility",
          "HideTextScaling",
          "HideAutoHideTopAndBottomBar",
          "HideFullScreenMode",
          "HideAdvanced",
          "HideRestoreTabsOnStartup",
          "HideOpenLinksInNewTab",
          "HideUrlSuggestions",
          "HideAutoOpenDownloadedFiles",
          "HideDownloadLocation",
          "HideResetSettings",
          "DefaultAutoHideTopAndBottomBar",
          "DefaultFullScreenMode",
          "DefaultRestoreTabsOnStartup",
          "DefaultOpenLinksInNewTab",
          "DefaultUrlSuggestions",
          "DefaultAutoOpenDownloadedFiles"
        ],
        "properties": {
          "HideAccessibility": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide accessibility]."
          },
          "HideTextScaling": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide text scaling]."
          },
          "HideAutoHideTopAndBottomBar": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide auto hide top and bottom bar]."
          },
          "HideFullScreenMode": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide full screen mode]."
          },
          "HideAdvanced": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide advanced]."
          },
          "HideRestoreTabsOnStartup": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide restore tabs on startup]."
          },
          "HideOpenLinksInNewTab": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide open links in new tab]."
          },
          "HideUrlSuggestions": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide url suggestions]."
          },
          "HideAutoOpenDownloadedFiles": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide Open DownloadedFiles]."
          },
          "HideDownloadLocation": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide download location]."
          },
          "HideResetSettings": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [hide reset settings]."
          },
          "DefaultTextScaling": {
            "type": "string",
            "description": "Gets or sets a value indicating whether [default text scaling]."
          },
          "DefaultAutoHideTopAndBottomBar": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [default Auto hide top bottom bar]."
          },
          "DefaultFullScreenMode": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [default fullScreen Mode]."
          },
          "DefaultRestoreTabsOnStartup": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [default Restore Tabs On Startup]."
          },
          "DefaultOpenLinksInNewTab": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [default OpenLinks In NewTab]."
          },
          "DefaultUrlSuggestions": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [default url suggestions]."
          },
          "DefaultAutoOpenDownloadedFiles": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [Default Auto Open Downloaded Files]."
          }
        }
      },
      "SecureBrowserAutoRefreshSettings": {
        "type": "object",
        "description": "Defines secure browser auto refresh setting section configuration",
        "required": [
          "AllowAutoRefresh",
          "AutoRefreshUnitOfTime",
          "AutoRefreshTime"
        ],
        "properties": {
          "AllowAutoRefresh": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [Allow Auto Refresh]."
          },
          "AutoRefreshUnitOfTime": {
            "description": "Gets or sets a value indicating whether [Disable Pull To Refresh].",
            "allOf": [
              {
                "$ref": "#/definitions/UnitsOfTime"
              }
            ],
            "x-enumType": "UnitsOfTime"
          },
          "AutoRefreshTime": {
            "type": "integer",
            "description": "Gets or sets a value indicating whether [Auto refresh Time].",
            "format": "int32"
          }
        }
      },
      "AndroidClassicSecureBrowserAppSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/SecureBrowserAppSettingsSection"
          },
          {
            "type": "object",
            "description": "Represents an secure browser application settings section configuration for Android plus devices."
          }
        ]
      },
      "AndroidWorkProfileSecureBrowserAppSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicSecureBrowserAppSettingsSection"
          },
          {
            "type": "object",
            "description": "Represents an secure browser application settings section configuration for Android plus devices."
          }
        ]
      },
      "AndroidCorporateSecureBrowserAppSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkProfileSecureBrowserAppSettingsSection"
          },
          {
            "type": "object",
            "description": "Represents an secure browser application settings section configuration for Android plus devices."
          }
        ]
      },
      "IOSSsoSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an iOS Single Sign On  configuration.",
            "properties": {
              "Sso": {
                "description": "Gets or sets the Single Sign On Configurations.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Sso"
                  }
                ]
              }
            }
          }
        ]
      },
      "Sso": {
        "type": "object",
        "description": "Represents an iOS SSO (Single Sign On) configuration.",
        "properties": {
          "AccountName": {
            "type": "string",
            "description": "Gets or sets the Account Name."
          },
          "Principal": {
            "type": "string",
            "description": "Gets or sets the Principal."
          },
          "Realm": {
            "type": "string",
            "description": "Gets or sets the Realm."
          },
          "TargetApplications": {
            "type": "array",
            "description": "Gets or sets the TargetApplications.",
            "items": {
              "$ref": "#/definitions/Application"
            }
          },
          "UrlPrefixes": {
            "type": "array",
            "description": "Gets or sets the URLPrefix.",
            "items": {
              "type": "string"
            }
          },
          "IdentityCertificateRetrievalMethod": {
            "description": "Gets or sets retrieval method for identity certificate",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          },
          "CertificateRefId": {
            "type": "string",
            "description": "Gets or sets the reference Id id of the certificate's identity."
          }
        }
      },
      "IOSSubscribedCalendarSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents a configuration section for subscribed calendars",
            "properties": {
              "Calendar": {
                "description": "Gets or sets the subscribed calendar settings.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SubscribedCalendar"
                  }
                ]
              }
            }
          }
        ]
      },
      "SubscribedCalendar": {
        "type": "object",
        "description": "Represents configuration for a subscribed calendar",
        "required": [
          "UseSSL"
        ],
        "properties": {
          "Description": {
            "type": "string",
            "description": "Gets or sets a value for subscribed calendar description"
          },
          "Url": {
            "type": "string",
            "description": "Gets or sets a value for subscribed calendar URL",
            "format": "uri"
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets a username for subscribed calendar"
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets a password for subscribed calendar"
          },
          "UseSSL": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether SSL must be enabled for subscribed calendar server communication"
          }
        }
      },
      "IOSVPNPerAppSection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNSection"
          },
          {
            "type": "object",
            "description": "Represents an iOS VPN configuration.",
            "required": [
              "AutoStart"
            ],
            "properties": {
              "AutoStart": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether VPN connection auto start when app start"
              },
              "Applications": {
                "type": "array",
                "description": "Gets or sets the Applications.",
                "items": {
                  "$ref": "#/definitions/Application"
                }
              }
            }
          }
        ]
      },
      "VPNSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an iOS VPN configuration.",
            "properties": {
              "Connection": {
                "description": "Gets or sets the VPN connection in this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNConnection"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "VPNConnection": {
        "type": "object",
        "description": "Base class for all iOS VPN connection types.",
        "x-abstract": true,
        "required": [
          "UserNameFormat",
          "ProxyServerMode",
          "ConnectionType"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Gets or sets the user friendly name for this VPN connection."
          },
          "OriginalName": {
            "type": "string",
            "description": "Gets or sets the original name for this VPN connection."
          },
          "ServerAddress": {
            "type": "string",
            "description": "Gets or sets the IP address or host name for the VPN server."
          },
          "Domain": {
            "type": "string",
            "description": "Gets or sets the domain for authenticating the connection."
          },
          "UserNameFormat": {
            "description": "Gets or sets the User Name Format used by connection.",
            "allOf": [
              {
                "$ref": "#/definitions/UserNameFormat"
              }
            ],
            "x-enumType": "UserNameFormat"
          },
          "Account": {
            "type": "string",
            "description": "Gets or sets the account for authenticating the connection."
          },
          "ProxyServerMode": {
            "description": "Gets or sets the proxy server mode.",
            "allOf": [
              {
                "$ref": "#/definitions/ProxyServerMode"
              }
            ],
            "x-enumType": "ProxyServerMode"
          },
          "ProxyConfigurationAddress": {
            "type": "string",
            "description": "Gets or sets the IP address or host name of a server for automatic proxy configuration."
          },
          "ProxyServer": {
            "description": "Gets or sets the proxy server settings for this connection.",
            "allOf": [
              {
                "$ref": "#/definitions/ProxyServerSettings"
              }
            ]
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password for this connection.  This value should be\nnull when using the Certificate authentication mode."
          },
          "PerAppSettings": {
            "description": "Gets or sets the PerAppSettings for VPN per app; leave it as NULL for normal system wide VPN configuration",
            "allOf": [
              {
                "$ref": "#/definitions/PerAppSettings"
              }
            ]
          },
          "ConnectionType": {
            "description": "Gets or sets the connection Type",
            "allOf": [
              {
                "$ref": "#/definitions/VPNConnectionType"
              }
            ],
            "x-enumType": "VPNConnectionType"
          }
        }
      },
      "ProxyServerSettings": {
        "type": "object",
        "description": "Represents a proxy server configuration.",
        "properties": {
          "ProxyServerAddress": {
            "type": "string",
            "description": "Gets or sets the IP address or host name of the proxy server."
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the user name if this is an authenticating proxy (it should\nbe null otherwise)."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password if this is an authentication proxy (it should\nbe null otherwise)."
          }
        }
      },
      "PerAppSettings": {
        "type": "object",
        "description": "Special VPN per App settings",
        "required": [
          "AutoStart",
          "DisallowApplications",
          "ProviderType",
          "VPNUUID"
        ],
        "properties": {
          "AutoStart": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether VPN connection auto start when app start"
          },
          "DisallowApplications": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether a VPN connection should use a whitelist allowing applications (false) or a blacklist disallowing applications (true)"
          },
          "Applications": {
            "type": "array",
            "description": "Gets or sets the Applications.",
            "items": {
              "$ref": "#/definitions/Application"
            }
          },
          "ProviderType": {
            "description": "Gets or sets the VPN provider type",
            "allOf": [
              {
                "$ref": "#/definitions/VPNProviderType"
              }
            ],
            "x-enumType": "VPNProviderType"
          },
          "VPNUUID": {
            "type": "string",
            "description": "Gets or sets the VPN UUID.",
            "format": "guid"
          },
          "CalendarDomains": {
            "type": "array",
            "description": "An array whose entries must each specify a domain that will trigger this VPN connection in Calendar. Each entry is in the format www.apple.com",
            "items": {
              "type": "string"
            }
          },
          "ContactsDomains": {
            "type": "array",
            "description": "An array whose entries must each specify a domain that will trigger this VPN connection in Contacts. Each entry is in the format www.apple.com",
            "items": {
              "type": "string"
            }
          },
          "MailDomains": {
            "type": "array",
            "description": "An array whose entries must each specify a domain that will trigger this VPN connection in Mail. Each entry is in the format www.apple.com",
            "items": {
              "type": "string"
            }
          },
          "SafariDomains": {
            "type": "array",
            "description": "An array whose entries must each specify a domain that triggers the VPN connection in Safari. Each entry is in the format www.apple.com",
            "items": {
              "type": "string"
            }
          },
          "SMBDomains": {
            "type": "array",
            "description": "An array of SMB domains that is accessible through this VPN connection",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "VPNProviderType": {
        "type": "string",
        "description": "Enumerates the different encryption levels possible for VPN connections.",
        "x-enumNames": [
          "AppProxy",
          "PacketTunnel"
        ],
        "enum": [
          "AppProxy",
          "PacketTunnel"
        ],
        "x-enumType": "VPNProviderType"
      },
      "VPNConnectionType": {
        "type": "string",
        "description": "Enumerates the different types VPN connections.",
        "x-enumNames": [
          "JuniperSSL",
          "NetMotion",
          "IPSecXauthPsk",
          "ArubaVia",
          "CiscoAnyConnect",
          "EnterprisePremium",
          "Custom",
          "IosIkev2",
          "F5SSL",
          "F5SSLPerApp",
          "SotiVPNPerApp",
          "IPSecHybridRsa",
          "IPSecXauthRsa",
          "IPSec",
          "L2TP",
          "PPTP",
          "PulseSecure",
          "SonicWall",
          "IosSotiVPN"
        ],
        "enum": [
          "JuniperSSL",
          "NetMotion",
          "IPSecXauthPsk",
          "ArubaVia",
          "CiscoAnyConnect",
          "EnterprisePremium",
          "Custom",
          "IosIkev2",
          "F5SSL",
          "F5SSLPerApp",
          "SotiVPNPerApp",
          "IPSecHybridRsa",
          "IPSecXauthRsa",
          "IPSec",
          "L2TP",
          "PPTP",
          "PulseSecure",
          "SonicWall",
          "IosSotiVPN"
        ],
        "x-enumType": "VPNConnectionType"
      },
      "Ikev2Connection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents an Ikev2 VPN connection for an iOS device.",
            "properties": {
              "AlwaysOn": {
                "description": "AlwaysOn",
                "allOf": [
                  {
                    "$ref": "#/definitions/AppleVpnAlwaysOn"
                  }
                ]
              },
              "Ikev2": {
                "description": "IKEva payload",
                "allOf": [
                  {
                    "$ref": "#/definitions/AppleVpnIkev2"
                  }
                ]
              },
              "VPN": {
                "description": "VPN payload",
                "allOf": [
                  {
                    "$ref": "#/definitions/AppleVpn"
                  }
                ]
              }
            }
          }
        ]
      },
      "AppleVpnAlwaysOn": {
        "type": "object",
        "description": "AppleVpnAlwaysOn",
        "required": [
          "AllowAllCaptiveNetworkPlugins",
          "AllowCaptiveWebSheet",
          "UiToggleEnabled"
        ],
        "properties": {
          "AllowAllCaptiveNetworkPlugins": {
            "type": "boolean",
            "description": "AllowAllCaptiveNetworkPlugins"
          },
          "AllowCaptiveWebSheet": {
            "type": "boolean",
            "description": "AllowCaptiveWebSheet"
          },
          "AllowedCaptiveNetworkPlugins": {
            "type": "array",
            "description": "AllowedCaptiveNetworkPlugins",
            "items": {
              "$ref": "#/definitions/AlwaysOnAllowedCaptiveNetworkPlugin"
            }
          },
          "ServiceExceptions": {
            "type": "array",
            "description": "ServiceExceptions",
            "items": {
              "$ref": "#/definitions/AlwaysOnServiceException"
            }
          },
          "TunnelConfigurations": {
            "type": "array",
            "description": "TunnelConfigurations",
            "items": {
              "$ref": "#/definitions/AlwaysOnTunnelConfiguration"
            }
          },
          "UiToggleEnabled": {
            "type": "boolean",
            "description": "UiToggleEnabled"
          }
        }
      },
      "AlwaysOnAllowedCaptiveNetworkPlugin": {
        "type": "object",
        "description": "AlwaysOnAllowedCaptiveNetworkPlugin",
        "properties": {
          "BundleIdentifier": {
            "type": "string",
            "description": "bundle id"
          },
          "Name": {
            "type": "string",
            "description": "Name "
          }
        }
      },
      "AlwaysOnServiceException": {
        "type": "object",
        "description": "AlwaysOnServiceException ",
        "required": [
          "Action",
          "ServiceName"
        ],
        "properties": {
          "Action": {
            "description": "action",
            "allOf": [
              {
                "$ref": "#/definitions/AlwaysOnServiceExceptionActionType"
              }
            ],
            "x-enumType": "AlwaysOnServiceExceptionActionType"
          },
          "ServiceName": {
            "description": "server name",
            "allOf": [
              {
                "$ref": "#/definitions/AlwaysOnServiceExceptionServiceNameType"
              }
            ],
            "x-enumType": "AlwaysOnServiceExceptionServiceNameType"
          }
        }
      },
      "AlwaysOnServiceExceptionActionType": {
        "type": "string",
        "description": "AlwaysOnServiceExceptionAction Enum",
        "x-enumNames": [
          "Allow",
          "Drop"
        ],
        "enum": [
          "Allow",
          "Drop"
        ],
        "x-enumType": "AlwaysOnServiceExceptionActionType"
      },
      "AlwaysOnServiceExceptionServiceNameType": {
        "type": "string",
        "description": "AlwaysOnServiceExceptionServiceName Enum",
        "x-enumNames": [
          "VoiceMail",
          "AirPrint",
          "CellularServices"
        ],
        "enum": [
          "VoiceMail",
          "AirPrint",
          "CellularServices"
        ],
        "x-enumType": "AlwaysOnServiceExceptionServiceNameType"
      },
      "AlwaysOnTunnelConfiguration": {
        "allOf": [
          {
            "$ref": "#/definitions/AppleVpnIkev2"
          },
          {
            "type": "object",
            "description": "AlwaysOnTunnelConfiguration",
            "properties": {
              "Interfaces": {
                "type": "array",
                "description": "Interfaces",
                "items": {
                  "$ref": "#/definitions/TunnelConfigurationInterfaceType"
                }
              },
              "ProtocolType": {
                "type": "string",
                "description": "protocol type"
              }
            }
          }
        ]
      },
      "TunnelConfigurationInterfaceType": {
        "type": "string",
        "description": "TunnelConfigurationInterface Enum",
        "x-enumNames": [
          "Cellular",
          "WiFi"
        ],
        "enum": [
          "Cellular",
          "WiFi"
        ],
        "x-enumType": "TunnelConfigurationInterfaceType"
      },
      "AppleVpnIkev2": {
        "type": "object",
        "description": "AppleVpnIkev2",
        "required": [
          "AuthenticationMethod",
          "CertificateType",
          "DeadPeerDetectionRate",
          "DisableMobike",
          "DisableRedirect",
          "EnableCertificateRevocationCheck",
          "EnablePfs",
          "ExtendedAuthEnabled",
          "NatKeepAliveInterval",
          "NatKeepAliveOffloadEnable",
          "UseConfigurationAttributeInternalIpSubnet",
          "EnableFallback",
          "EapAuthenticationMethod"
        ],
        "properties": {
          "AuthenticationMethod": {
            "description": "AuthenticationMethod",
            "allOf": [
              {
                "$ref": "#/definitions/Ikev2AuthenticationMethodType"
              }
            ],
            "x-enumType": "Ikev2AuthenticationMethodType"
          },
          "AuthName": {
            "type": "string",
            "description": "AuthName"
          },
          "AuthPassword": {
            "type": "string",
            "description": "AuthPassword"
          },
          "CertificateType": {
            "description": "CertificateType",
            "allOf": [
              {
                "$ref": "#/definitions/Ikev2CertificateType"
              }
            ],
            "x-enumType": "Ikev2CertificateType"
          },
          "ChildSecurityAssociationParameters": {
            "description": "ChildSecurityAssociationParameters",
            "allOf": [
              {
                "$ref": "#/definitions/Ikev2ChildSecurityAssociationParameters"
              }
            ]
          },
          "DeadPeerDetectionRate": {
            "description": "DeadPeerDetectionRate",
            "allOf": [
              {
                "$ref": "#/definitions/Ikev2DeadPeerDetectionRateType"
              }
            ],
            "x-enumType": "Ikev2DeadPeerDetectionRateType"
          },
          "DisableMobike": {
            "type": "boolean",
            "description": "DisableMobike"
          },
          "DisableRedirect": {
            "type": "boolean",
            "description": "DisableRedirect"
          },
          "EnableCertificateRevocationCheck": {
            "type": "boolean",
            "description": "EnableCertificateRevocationCheck"
          },
          "EnablePfs": {
            "type": "boolean",
            "description": "EnablePfs"
          },
          "ExtendedAuthEnabled": {
            "type": "boolean",
            "description": "ExtendedAuthEnabled"
          },
          "SecurityAssociationParameters": {
            "description": "SecurityAssociationParameters",
            "allOf": [
              {
                "$ref": "#/definitions/Ikev2SecurityAssociationParameters"
              }
            ]
          },
          "LocalIdentifier": {
            "type": "string",
            "description": "LocalIdentifier"
          },
          "NatKeepAliveInterval": {
            "type": "integer",
            "description": "NatKeepAliveInterval",
            "format": "int32"
          },
          "NatKeepAliveOffloadEnable": {
            "type": "boolean",
            "description": "NatKeepAliveOffloadEnable"
          },
          "PayloadCertificateUuid": {
            "type": "string",
            "description": "PayloadCertificateUuid"
          },
          "RemoteAddress": {
            "type": "string",
            "description": "RemoteAddress"
          },
          "RemoteIdentifier": {
            "type": "string",
            "description": "RemoteIdentifier"
          },
          "ServerCertificateCommonName": {
            "type": "string",
            "description": "ServerCertificateCommonName"
          },
          "ServerCertificateIssuerCommonName": {
            "type": "string",
            "description": "ServerCertificateIssuerCommonName"
          },
          "SharedSecret": {
            "type": "string",
            "description": "SharedSecret"
          },
          "TlsMaximumVersion": {
            "type": "string",
            "description": "TlsMaximumVersion"
          },
          "TlsMinimumVersion": {
            "type": "string",
            "description": "TlsMinimumVersion"
          },
          "UseConfigurationAttributeInternalIpSubnet": {
            "type": "boolean",
            "description": "UseConfigurationAttributeInternalIpSubnet"
          },
          "EnableFallback": {
            "type": "boolean",
            "description": "EnableFallback"
          },
          "DomainName": {
            "type": "string",
            "description": "Domain Name"
          },
          "EapAuthenticationMethod": {
            "description": "EapAuthenticationMethod ",
            "allOf": [
              {
                "$ref": "#/definitions/Ikev2EapAuthenticationMethodType"
              }
            ],
            "x-enumType": "Ikev2EapAuthenticationMethodType"
          },
          "IdentityCertificateRetrievalMethod": {
            "description": "IdentityCertificateRetrievalMethod",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          },
          "IdentityCertificateRefId": {
            "type": "string",
            "description": "IdentityCertificateRefId"
          }
        }
      },
      "Ikev2AuthenticationMethodType": {
        "type": "string",
        "description": "IKEv2AuthenticationMethod Enum",
        "x-enumNames": [
          "None",
          "Certificate",
          "SharedSecret"
        ],
        "enum": [
          "None",
          "Certificate",
          "SharedSecret"
        ],
        "x-enumType": "Ikev2AuthenticationMethodType"
      },
      "Ikev2CertificateType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NotSpecified",
          "RSA",
          "ECDSA256",
          "ECDSA384",
          "ECDSA512",
          "Ed25519"
        ],
        "enum": [
          "NotSpecified",
          "RSA",
          "ECDSA256",
          "ECDSA384",
          "ECDSA512",
          "Ed25519"
        ],
        "x-enumType": "Ikev2CertificateType"
      },
      "Ikev2ChildSecurityAssociationParameters": {
        "type": "object",
        "description": "Ikev2ChildSecurityAssociationParameters",
        "required": [
          "DiffieHellmanGroup",
          "EncryptionAlgorithm",
          "IntegrityAlgorithm",
          "LifeTimeInMinutes"
        ],
        "properties": {
          "DiffieHellmanGroup": {
            "description": "DiffieHellmanGroup",
            "allOf": [
              {
                "$ref": "#/definitions/DiffieHellmanGroupType"
              }
            ],
            "x-enumType": "DiffieHellmanGroupType"
          },
          "EncryptionAlgorithm": {
            "description": "EncryptionAlgorithm",
            "allOf": [
              {
                "$ref": "#/definitions/EncryptionAlgorithmType"
              }
            ],
            "x-enumType": "EncryptionAlgorithmType"
          },
          "IntegrityAlgorithm": {
            "description": "IntegrityAlgorithm",
            "allOf": [
              {
                "$ref": "#/definitions/IntegrityAlgorithmType"
              }
            ],
            "x-enumType": "IntegrityAlgorithmType"
          },
          "LifeTimeInMinutes": {
            "type": "integer",
            "description": "LifeTimeInMinutes ",
            "format": "int32"
          }
        }
      },
      "DiffieHellmanGroupType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "One",
          "Two",
          "Five",
          "Fourteen",
          "Fifteen",
          "Sixteen",
          "Seventeen",
          "Eighteen",
          "Nineteen",
          "Twenty",
          "TwentyOne",
          "ThirtyOne"
        ],
        "enum": [
          "One",
          "Two",
          "Five",
          "Fourteen",
          "Fifteen",
          "Sixteen",
          "Seventeen",
          "Eighteen",
          "Nineteen",
          "Twenty",
          "TwentyOne",
          "ThirtyOne"
        ],
        "x-enumType": "DiffieHellmanGroupType"
      },
      "EncryptionAlgorithmType": {
        "type": "string",
        "description": "EncryptionAlgorithm Enum",
        "x-enumNames": [
          "DES",
          "The3DES",
          "AES128",
          "AES256",
          "AES128GCM",
          "AES256GCM",
          "ChaCha20Poly1305"
        ],
        "enum": [
          "DES",
          "The3DES",
          "AES128",
          "AES256",
          "AES128GCM",
          "AES256GCM",
          "ChaCha20Poly1305"
        ],
        "x-enumType": "EncryptionAlgorithmType"
      },
      "IntegrityAlgorithmType": {
        "type": "string",
        "description": "IntegrityAlgorithm Enum",
        "x-enumNames": [
          "ShaOne96",
          "ShaOne160",
          "ShaTwo256",
          "ShaTwo384",
          "ShaTwo512"
        ],
        "enum": [
          "ShaOne96",
          "ShaOne160",
          "ShaTwo256",
          "ShaTwo384",
          "ShaTwo512"
        ],
        "x-enumType": "IntegrityAlgorithmType"
      },
      "Ikev2DeadPeerDetectionRateType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Low",
          "Medium",
          "High"
        ],
        "enum": [
          "None",
          "Low",
          "Medium",
          "High"
        ],
        "x-enumType": "Ikev2DeadPeerDetectionRateType"
      },
      "Ikev2SecurityAssociationParameters": {
        "type": "object",
        "description": "Ikev2SecurityAssociationParameters",
        "required": [
          "DiffieHellmanGroup",
          "EncryptionAlgorithm",
          "IntegrityAlgorithm",
          "LifeTimeInMinutes"
        ],
        "properties": {
          "DiffieHellmanGroup": {
            "description": "DiffieHellmanGroup",
            "allOf": [
              {
                "$ref": "#/definitions/DiffieHellmanGroupType"
              }
            ],
            "x-enumType": "DiffieHellmanGroupType"
          },
          "EncryptionAlgorithm": {
            "description": "EncryptionAlgorithm",
            "allOf": [
              {
                "$ref": "#/definitions/EncryptionAlgorithmType"
              }
            ],
            "x-enumType": "EncryptionAlgorithmType"
          },
          "IntegrityAlgorithm": {
            "description": "IntegrityAlgorithm",
            "allOf": [
              {
                "$ref": "#/definitions/IntegrityAlgorithmType"
              }
            ],
            "x-enumType": "IntegrityAlgorithmType"
          },
          "LifeTimeInMinutes": {
            "type": "integer",
            "description": "LifeTimeInMinutes",
            "format": "int32"
          }
        }
      },
      "Ikev2EapAuthenticationMethodType": {
        "type": "string",
        "description": "Ikev2EapAuthenticationMethodType",
        "x-enumNames": [
          "Certificate",
          "Password"
        ],
        "enum": [
          "Certificate",
          "Password"
        ],
        "x-enumType": "Ikev2EapAuthenticationMethodType"
      },
      "AppleVpn": {
        "type": "object",
        "description": "AppleVpn",
        "required": [
          "AuthenticationMethod",
          "DisconnectOnIdle",
          "DisconnectOnIdleTimer",
          "ExcludeLocalNetworks",
          "IncludeAllNetworks",
          "ProviderDesignatedRequirement",
          "DisconnectOnIdleTimerUnit"
        ],
        "properties": {
          "AuthenticationMethod": {
            "description": "AuthenticationMethod",
            "allOf": [
              {
                "$ref": "#/definitions/VpnAuthenticationMethodType"
              }
            ],
            "x-enumType": "VpnAuthenticationMethodType"
          },
          "DisconnectOnIdle": {
            "type": "boolean",
            "description": "DisconnectOnIdle"
          },
          "DisconnectOnIdleTimer": {
            "type": "integer",
            "description": "DisconnectOnIdleTimer",
            "format": "int32"
          },
          "Password": {
            "type": "string",
            "description": "Password"
          },
          "ExcludeLocalNetworks": {
            "type": "boolean",
            "description": "ExcludeLocalNetworks"
          },
          "IncludeAllNetworks": {
            "type": "boolean",
            "description": "IncludeAllNetworks"
          },
          "ProviderDesignatedRequirement": {
            "type": "boolean",
            "description": "ProviderDesignatedRequirement"
          },
          "Actions": {
            "type": "array",
            "description": "Actions",
            "items": {
              "$ref": "#/definitions/VPNHostAction"
            }
          },
          "DisconnectOnIdleTimerUnit": {
            "description": "DisconnectOnIdleTimerUnit",
            "allOf": [
              {
                "$ref": "#/definitions/AppleVpnDisconnectOnIdleTimerUnitType"
              }
            ],
            "x-enumType": "AppleVpnDisconnectOnIdleTimerUnitType"
          }
        }
      },
      "VpnAuthenticationMethodType": {
        "type": "string",
        "description": "VpnAuthenticationMethod Enum",
        "x-enumNames": [
          "Password",
          "Certificate",
          "PasswordCertificate"
        ],
        "enum": [
          "Password",
          "Certificate",
          "PasswordCertificate"
        ],
        "x-enumType": "VpnAuthenticationMethodType"
      },
      "VPNHostAction": {
        "type": "object",
        "description": "Represents the action a device should take when connecting to a\nparticular VPN host using VPN on demand.",
        "required": [
          "Action"
        ],
        "properties": {
          "MatchName": {
            "type": "string",
            "description": "Gets or sets the value to compare against the target domain or\nhost name."
          },
          "Action": {
            "description": "Gets or sets the action the device should take.",
            "allOf": [
              {
                "$ref": "#/definitions/VPNOnDemandAction"
              }
            ],
            "x-enumType": "VPNOnDemandAction"
          }
        }
      },
      "VPNOnDemandAction": {
        "type": "string",
        "description": "Enumerates the different VPN On Demand actions.",
        "x-enumNames": [
          "AlwaysEstablish",
          "NeverEstablish",
          "EstablishIfNeeded"
        ],
        "enum": [
          "AlwaysEstablish",
          "NeverEstablish",
          "EstablishIfNeeded"
        ],
        "x-enumType": "VPNOnDemandAction"
      },
      "AppleVpnDisconnectOnIdleTimerUnitType": {
        "type": "string",
        "description": "AppleVpnDisconnectOnIdleTimerUnitType",
        "x-enumNames": [
          "InSecond",
          "InMinute"
        ],
        "enum": [
          "InSecond",
          "InMinute"
        ],
        "x-enumType": "AppleVpnDisconnectOnIdleTimerUnitType"
      },
      "IosSotiVPNConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents the SOTIVpn Connection for an iOS device.",
            "properties": {
              "VpnNetworkReferenceId": {
                "type": "string",
                "description": "Gets or sets a value indicating the External Reference of a SOTI VPN Network."
              },
              "MTU": {
                "type": "integer",
                "description": "Gets or sets a value indicating the Maximum Transmission Unit. Ranges from 1000 to 9999.",
                "format": "int32"
              },
              "VPN": {
                "description": "VPN payload.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AppleVpn"
                  }
                ]
              }
            }
          }
        ]
      },
      "ArubaViaConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents an Aruba VIA VPN connection settings for an iOS device.",
            "required": [
              "AuthenticationMode"
            ],
            "properties": {
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid values\nare Password and Certificate.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "IdentityCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for identity certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "IdentityCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the reference id of the connection's identity certificate.\nThis value should be null when using the Password authentication\nmode."
              },
              "Actions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should take for\nvarious domain names.  This should be null when using the Password\nauthentication mode or when VPN on demand is disabled.",
                "items": {
                  "$ref": "#/definitions/VPNHostAction"
                }
              }
            }
          }
        ]
      },
      "CiscoAnyConnectConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents a Cisco AnyConnect VPN connection for an iOS device.",
            "required": [
              "AuthenticationMode"
            ],
            "properties": {
              "Group": {
                "type": "string",
                "description": "Gets or sets the group for this connection."
              },
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid values\nare Password and Certificate.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "IdentityCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for identity certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "IdentityCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the reference id of the connection's identity certificate.\nThis value should be null when using the Password authentication\nmode."
              },
              "Actions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should take for\nvarious domain names.  This should be null when using the Password\nauthentication mode or when VPN on demand is disabled.",
                "items": {
                  "$ref": "#/definitions/VPNHostAction"
                }
              }
            }
          }
        ]
      },
      "CustomSSLConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents a custom SSL VPN connection settings for an iOS device.",
            "required": [
              "AuthenticationMode"
            ],
            "properties": {
              "Identifier": {
                "type": "string",
                "description": "Gets or sets identifier (reverse DNS format) for this connection"
              },
              "CustomData": {
                "type": "object",
                "description": "Gets or sets custom data values",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid values\nare Password and Certificate.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "IdentityCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for identity certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "IdentityCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the reference id of the connection's identity certificate.\nThis value should be null when using the Password authentication\nmode."
              },
              "Actions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should take for\nvarious domain names.  This should be null when using the Password\nauthentication mode or when VPN on demand is disabled.",
                "items": {
                  "$ref": "#/definitions/VPNHostAction"
                }
              }
            }
          }
        ]
      },
      "EnterprisePremiumConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Data contract for Enterprise Premium VPN connection for an AndroidSamsung configuration.",
            "required": [
              "BackupServerEnabled",
              "MobikeEnabled",
              "DeadPeerDetectionEnabled",
              "DefaultRouteEnabled",
              "UserAuthenticationEnabled",
              "SmartcardAuthenticationEnabled",
              "FipsModeEnabled",
              "IKEVersion",
              "IKEPhase1KeyExchangeMode",
              "IKEIdentity",
              "EnterpriseAuthenticationMethod",
              "PerfectForwardSecrecy",
              "SuiteBType",
              "DiffieHellmanGroup",
              "SplitTunnelType",
              "CacAuthentication"
            ],
            "properties": {
              "BackupServerAddress": {
                "type": "string",
                "description": "Gets or sets backup server address."
              },
              "BackupServerEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether backup server is enabled."
              },
              "MobikeEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether mobike is enabled."
              },
              "DeadPeerDetectionEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether dead peer detection is enabled."
              },
              "DefaultRouteEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether default route is enabled."
              },
              "UserAuthenticationEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether user authentication is enabled."
              },
              "SmartcardAuthenticationEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether smartcard authentication is enabled."
              },
              "Applications": {
                "type": "array",
                "description": "Gets or sets list of applications which should use current VPN connection.",
                "items": {
                  "type": "string"
                }
              },
              "FipsModeEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether FIPS-mode is enabled."
              },
              "IKEVersion": {
                "description": "Gets or sets IKE version.",
                "allOf": [
                  {
                    "$ref": "#/definitions/IKEVersion"
                  }
                ]
              },
              "IKEPhase1KeyExchangeMode": {
                "description": "Gets or sets IKE phase 1 exchange mode.",
                "allOf": [
                  {
                    "$ref": "#/definitions/IKEPhase1KeyExchangeMode"
                  }
                ]
              },
              "IKEIdentity": {
                "description": "Gets or sets IKE Identity.",
                "allOf": [
                  {
                    "$ref": "#/definitions/IKEIdentity"
                  }
                ]
              },
              "EnterpriseAuthenticationMethod": {
                "description": "Gets or sets authentication method.",
                "allOf": [
                  {
                    "$ref": "#/definitions/EnterpriseAuthenticationMethod"
                  }
                ]
              },
              "PresharedKey": {
                "type": "string",
                "description": "Gets or sets pre-shared key."
              },
              "PerfectForwardSecrecy": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether perfect forward secrecy should be used."
              },
              "SuiteBType": {
                "description": "Gets or sets Suite B Type.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SuiteBType"
                  }
                ]
              },
              "DiffieHellmanGroup": {
                "type": "integer",
                "description": "Gets or sets Diffie-Hellman Group.\nPossible values are 0, 1, 2, 5, 14, 15, 16, 17, 18, 24.",
                "format": "int32"
              },
              "GroupName": {
                "type": "string",
                "description": "Gets or sets group name."
              },
              "SplitTunnelType": {
                "description": "Gets or sets split tunnel type.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SplitTunnelType"
                  }
                ]
              },
              "ForwardRoutes": {
                "type": "array",
                "description": "Gets or sets list of forward routes.",
                "items": {
                  "type": "string"
                }
              },
              "UserCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the reference id of the user certificate."
              },
              "UserCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for user certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "RootCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the reference id of the CA certificate (always a file not a template)."
              },
              "CacAuthentication": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether CAC authentication should be used."
              }
            }
          }
        ]
      },
      "IKEVersion": {
        "type": "string",
        "description": "IKE Version.",
        "x-enumNames": [
          "IKEv1",
          "IKEv2"
        ],
        "enum": [
          "IKEv1",
          "IKEv2"
        ],
        "x-enumType": "IKEVersion"
      },
      "IKEPhase1KeyExchangeMode": {
        "type": "string",
        "description": "IKE Phase 1 key exchange mode.",
        "x-enumNames": [
          "MainMode",
          "AggressiveMode"
        ],
        "enum": [
          "MainMode",
          "AggressiveMode"
        ],
        "x-enumType": "IKEPhase1KeyExchangeMode"
      },
      "IKEIdentity": {
        "type": "string",
        "description": "IKE Identity.",
        "x-enumNames": [
          "Automatic",
          "IPAddress",
          "FQDN",
          "Email",
          "KeyIdentifier"
        ],
        "enum": [
          "Automatic",
          "IPAddress",
          "FQDN",
          "Email",
          "KeyIdentifier"
        ],
        "x-enumType": "IKEIdentity"
      },
      "EnterpriseAuthenticationMethod": {
        "type": "string",
        "description": "Enterpise Premium VPN authentication method.",
        "x-enumNames": [
          "Certificate",
          "PreSharedKey",
          "HybridRsa",
          "EapMd5",
          "EapMsChap2"
        ],
        "enum": [
          "Certificate",
          "PreSharedKey",
          "HybridRsa",
          "EapMd5",
          "EapMsChap2"
        ],
        "x-enumType": "EnterpriseAuthenticationMethod"
      },
      "SuiteBType": {
        "type": "string",
        "description": "Suite B Type.",
        "x-enumNames": [
          "None",
          "GCM128",
          "GCM256",
          "GMAC128",
          "GMAC256"
        ],
        "enum": [
          "None",
          "GCM128",
          "GCM256",
          "GMAC128",
          "GMAC256"
        ],
        "x-enumType": "SuiteBType"
      },
      "SplitTunnelType": {
        "type": "string",
        "description": "Split Tunner Type.",
        "x-enumNames": [
          "Disabled",
          "Manual",
          "Auto"
        ],
        "enum": [
          "Disabled",
          "Manual",
          "Auto"
        ],
        "x-enumType": "SplitTunnelType"
      },
      "F5SSLConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents an F5 SSL VPN connection configuration",
            "required": [
              "AuthenticationMode"
            ],
            "properties": {
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid values\nare Password and Certificate.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "IdentityCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for identity certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "IdentityCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the reference id of the connection's identity certificate.\nThis value should be null when using the Password authentication\nmode."
              },
              "Actions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should take for\nvarious domain names.  This should be null when using the Password\nauthentication mode or when VPN on demand is disabled.",
                "items": {
                  "$ref": "#/definitions/VPNHostAction"
                }
              },
              "FIPSModeEnabled": {
                "type": "boolean",
                "description": "Gets or sets the value for enabling or disabling fips mode\nThis value should be null if FIPS mode is not supported."
              }
            }
          }
        ]
      },
      "F5SSLConnectionPerApp": {
        "allOf": [
          {
            "$ref": "#/definitions/F5SSLConnection"
          },
          {
            "type": "object",
            "description": "Represents an F5 SSL Per App VPN connection configuration"
          }
        ]
      },
      "IPSecConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents an IPSec VPN connection for an iOS device.",
            "required": [
              "AuthenticationMode"
            ],
            "properties": {
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid values\nare Certificate, SharedSecret, and Hybrid.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "GroupName": {
                "type": "string",
                "description": "Gets or sets the group name for this connection.  This value should\nbe null when using the certificate authentication mode."
              },
              "SharedSecret": {
                "type": "string",
                "description": "Gets or sets the shared secret for this connection.  This value should\nbe null when using the certificate authentication mode."
              },
              "PromptForPassword": {
                "type": "boolean",
                "description": "Gets or sets the prompt for password flag.  This value should be null\nwhen using the certificate authentication mode."
              },
              "IdentityCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for identity certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "IdentityCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the reference id of the connection's identity certificate.\nThis value should be null when using the Password authentication\nmode."
              },
              "IncludeUserPIN": {
                "type": "boolean",
                "description": "Gets or sets the include user PIN flag.  If true, the device will request\nthe user for his PIN and send it during authentication.  This value should\nbe null when using the shared secret authentication mode."
              },
              "Actions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should take for\nvarious domain names.  This should be null when using the shared secret\nauthentication mode or when VPN on demand is disabled.",
                "items": {
                  "$ref": "#/definitions/VPNHostAction"
                }
              }
            }
          }
        ]
      },
      "IPSecHybridRsaConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents an IPSecHybridRsa VPN connection for an AndroidSamsung device.",
            "required": [
              "AuthenticationMode",
              "SendAllTraffic"
            ],
            "properties": {
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid values are\nPassword and RSASecureId.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "SendAllTraffic": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether all network\ntraffic will be routed through this VPN connection."
              },
              "UserCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for user certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "RootCertificateReferenceId": {
                "type": "string",
                "description": "Gets or sets the reference id of the CA certificate (always a file not a template)."
              }
            }
          }
        ]
      },
      "IPSecXauthPskConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents an IPSecXauthPsk VPN connection for an AndroidSamsung device.",
            "required": [
              "AuthenticationMode",
              "SendAllTraffic"
            ],
            "properties": {
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid values are\nPassword and RSASecureId.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "SharedSecret": {
                "type": "string",
                "description": "Gets or sets the shared secret for this connection."
              },
              "SendAllTraffic": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether all network\ntraffic will be routed through this VPN connection."
              },
              "PSKey": {
                "type": "string",
                "description": "Gets or sets the PSK for this connection."
              },
              "IpSecIdentifier": {
                "type": "string",
                "description": "Gets or sets IpSec Identifier."
              }
            }
          }
        ]
      },
      "IPSecXauthRsaConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents an IPSecXauthRsa VPN connection for an AndroidSamsung device.",
            "required": [
              "AuthenticationMode",
              "SendAllTraffic"
            ],
            "properties": {
              "AuthenticationMode": {
                "description": "Xauth\n           Gets or sets the authentication mode for this connection.  Valid values are\n           Password and RSASecureId.\n           ",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "SendAllTraffic": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether all network\ntraffic will be routed through this VPN connection."
              },
              "UserCertificateReferenceId": {
                "type": "string",
                "description": "Gets or sets the reference id of the user certificate."
              },
              "UserCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for user certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "RootCertificateReferenceId": {
                "type": "string",
                "description": "Gets or sets the reference id of the CA certificate (always a file not a template)."
              }
            }
          }
        ]
      },
      "JuniperSSLConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents a Juniper SSL VPN connection for an iOS or Samsung device.",
            "required": [
              "AuthenticationMode"
            ],
            "properties": {
              "Realm": {
                "type": "string",
                "description": "Gets or sets the realm for this connection."
              },
              "Role": {
                "type": "string",
                "description": "Gets or sets the role for this connection."
              },
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid\nvalues are Password and Certificate.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "IdentityCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for identity certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "IdentityCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the reference id of the connection's identity certificate.\nThis value should be null when using the Password authentication\nmode."
              },
              "Actions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should take for\nvarious domain names.  This should be null when using the Password\nauthentication mode or when VPN on demand is disabled.",
                "items": {
                  "$ref": "#/definitions/VPNHostAction"
                }
              }
            }
          }
        ]
      },
      "L2TPConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents an L2TP VPN connection for an iOS device.",
            "required": [
              "AuthenticationMode",
              "SendAllTraffic"
            ],
            "properties": {
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid values are\nPassword and RSASecureId.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "Authentication": {
                "type": "string",
                "description": "Gets or sets the authentication for this connection"
              },
              "SharedSecret": {
                "type": "string",
                "description": "Gets or sets the shared secret for this connection."
              },
              "SendAllTraffic": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether all network\ntraffic will be routed through this VPN connection."
              },
              "PSKey": {
                "type": "string",
                "description": "Gets or sets the PSK for this connection."
              },
              "UserCertificateReferenceId": {
                "type": "string",
                "description": "Gets or sets the reference id of the User certificate"
              },
              "UserCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for user certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "RootCertificateReferenceId": {
                "type": "string",
                "description": "Gets or sets the reference id of the CA certificate (always a file not a template)."
              },
              "IdType": {
                "description": "Gets or sets id type for VPN connection.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNIdType"
                  }
                ]
              },
              "IdValue": {
                "type": "string",
                "description": "Gets or sets id value for VPN connection."
              }
            }
          }
        ]
      },
      "VPNIdType": {
        "type": "string",
        "description": "Declares VPN ID types.",
        "x-enumNames": [
          "Email",
          "DistinguishedName",
          "DNSName",
          "KeyId",
          "IPAddress"
        ],
        "enum": [
          "Email",
          "DistinguishedName",
          "DNSName",
          "KeyId",
          "IPAddress"
        ],
        "x-enumType": "VPNIdType"
      },
      "NetMotionConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents a SonicWALL connection configuration for an iOS device.",
            "required": [
              "Port",
              "ValidateServer",
              "AuthenticationMode"
            ],
            "properties": {
              "Group": {
                "type": "string",
                "description": "Gets or sets the domain for this connection."
              },
              "Port": {
                "type": "integer",
                "description": "Gets or sets the port for this connection.",
                "format": "int32"
              },
              "ProfileId": {
                "type": "string",
                "description": "Gets or sets the unique profile identifier for this connection."
              },
              "ServerSuffix": {
                "type": "string",
                "description": "Gets or sets the server suffix for this connection."
              },
              "ValidateServer": {
                "type": "boolean",
                "description": "Gets or sets whether validation of server will occur for this connection."
              },
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid values\nare Password and Certificate.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "IdentityCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for identity certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "IdentityCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the reference id of the connection's identity certificate.\nThis value should be null when using the Password authentication\nmode."
              },
              "CaCertificateId": {
                "type": "integer",
                "description": "Gets or sets the file id of the connection's CA certificate.\nThis value should be null when using the Password authentication\nmode.",
                "format": "int32"
              },
              "Actions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should take for\nvarious domain names.  This should be null when using the Password\nauthentication mode or when VPN on demand is disabled.",
                "items": {
                  "$ref": "#/definitions/VPNHostAction"
                }
              }
            }
          }
        ]
      },
      "PPTPConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents a PPTP VPN connection for an iOS device.",
            "required": [
              "AuthenticationMode",
              "EncryptionLevel",
              "SendAllTraffic"
            ],
            "properties": {
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection. Valid values\nare Password and RSASecureId.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "EncryptionLevel": {
                "description": "Gets or sets the encryption level for this connection.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNEncryptionLevel"
                  }
                ]
              },
              "SendAllTraffic": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether all network\ntraffic will be routed through this VPN connection."
              }
            }
          }
        ]
      },
      "VPNEncryptionLevel": {
        "type": "string",
        "description": "Enumerates the different encryption levels possible for VPN connections.",
        "x-enumNames": [
          "None",
          "Automatic",
          "Maximum"
        ],
        "enum": [
          "None",
          "Automatic",
          "Maximum"
        ],
        "x-enumType": "VPNEncryptionLevel"
      },
      "PulseSecureConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents a Pulse Secure VPN connection for an iOS device.",
            "required": [
              "AuthenticationMode"
            ],
            "properties": {
              "Realm": {
                "type": "string",
                "description": "Gets or sets the realm for this connection."
              },
              "Role": {
                "type": "string",
                "description": "Gets or sets the role for this connection."
              },
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid\nvalues are Password and Certificate.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "IdentityCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for identity certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "IdentityCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the reference id of the connection's identity certificate.\nThis value should be null when using the Password authentication\nmode."
              },
              "Actions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should take for\nvarious domain names.  This should be null when using the Password\nauthentication mode or when VPN on demand is disabled.",
                "items": {
                  "$ref": "#/definitions/VPNHostAction"
                }
              }
            }
          }
        ]
      },
      "SonicWallConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents a SonicWALL connection configuration for an iOS device.",
            "required": [
              "AuthenticationMode"
            ],
            "properties": {
              "Group": {
                "type": "string",
                "description": "Gets or sets the login group or domain for this connection."
              },
              "AuthenticationMode": {
                "description": "Gets or sets the authentication mode for this connection.  Valid values\nare Password and Certificate.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNAuthenticationMode"
                  }
                ]
              },
              "IdentityCertificateRetrievalMethod": {
                "description": "Gets or sets retrieval method for identity certificate",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "IdentityCertificateRefId": {
                "type": "string",
                "description": "Gets or sets the reference id of the connection's identity certificate.\nThis value should be null when using the Password authentication\nmode."
              },
              "Actions": {
                "type": "array",
                "description": "Gets or sets the collection of actions that the device should take for\nvarious domain names.  This should be null when using the Password\nauthentication mode or when VPN on demand is disabled.",
                "items": {
                  "$ref": "#/definitions/VPNHostAction"
                }
              }
            }
          }
        ]
      },
      "SotiVPNConnection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNConnection"
          },
          {
            "type": "object",
            "description": "Represents a PPTP VPN connection for an iOS device.",
            "required": [
              "PerAppVpnMode"
            ],
            "properties": {
              "VpnNetworkReferenceId": {
                "type": "string",
                "description": "Gets or sets a value indicating the External Reference of a SOTI VPN Network."
              },
              "MTU": {
                "type": "integer",
                "description": "Gets or sets a value indicating the Maximum Transmission Unit. Ranges from 1000 to 9999.",
                "format": "int32"
              },
              "PerAppVpnMode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether VPN is device-wide or app specific."
              }
            }
          }
        ]
      },
      "IOSVPNSection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNSection"
          },
          {
            "type": "object",
            "description": "Represents an iOS VPN configuration."
          }
        ]
      },
      "AndroidClassicVPNSection": {
        "allOf": [
          {
            "$ref": "#/definitions/VPNSection"
          },
          {
            "type": "object",
            "description": "Represents an AndroidPlus VPN configuration."
          }
        ]
      },
      "IOSWebClipSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Stores an iOS device web clip configuration.",
            "properties": {
              "WebClip": {
                "description": "Gets or sets the collection of web clips for this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/IOSWebClip"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "IOSWebClip": {
        "type": "object",
        "description": "Represents an iOS device web clip.",
        "required": [
          "Removable",
          "FullScreen",
          "SuppressEffects"
        ],
        "properties": {
          "Label": {
            "type": "string",
            "description": "Gets or sets the label for this web clip."
          },
          "URL": {
            "type": "string",
            "description": "Gets or sets the URL for this web clip."
          },
          "Notes": {
            "type": "string",
            "description": "Gets or sets the Notes for this web clip."
          },
          "Removable": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device user can remove\nthis web clip from his home screen."
          },
          "FullScreen": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this web clip should launch\nthe browser in full screen mode."
          },
          "IconFileReferenceId": {
            "type": "string",
            "description": "Gets or sets the icon file reference id for this web clip."
          },
          "SuppressEffects": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the icon file already has\nfinishing effects applied.  If true, then the device will not\napply finishing effects to this icon."
          }
        }
      },
      "IOSWebContentFilterSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an iOS Web Content Filter configuration.",
            "required": [
              "AutoFilterEnabled",
              "FilterMode",
              "AuthenticationType",
              "FilterBrowsers",
              "FilterSockets"
            ],
            "properties": {
              "AutoFilterEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether [auto filter enabled]."
              },
              "FilterMode": {
                "description": "Gets or sets a filter mode",
                "allOf": [
                  {
                    "$ref": "#/definitions/WebContentFilterMode"
                  }
                ]
              },
              "PermittedURLs": {
                "type": "array",
                "description": "Gets or sets the permitted UR ls.",
                "items": {
                  "type": "string"
                }
              },
              "WhitelistedBookmarks": {
                "type": "array",
                "description": "Gets or sets the whitelisted bookmarks.",
                "items": {
                  "$ref": "#/definitions/WhitelistedBookmark"
                }
              },
              "BlacklistedURLs": {
                "type": "array",
                "description": "Gets or sets the blacklisted UR ls.",
                "items": {
                  "type": "string"
                }
              },
              "Applications": {
                "type": "array",
                "description": "Gets or sets the Applications.",
                "items": {
                  "$ref": "#/definitions/Application"
                }
              },
              "ContentFilterUUID": {
                "type": "string",
                "description": "Gets or sets the unique identifier of the content filter.",
                "format": "guid"
              },
              "UserDefinedName": {
                "type": "string",
                "description": "Gets or sets the name of the content filter."
              },
              "PluginBundleID": {
                "type": "string",
                "description": "Gets or sets the plugin bundle ID of the content filter."
              },
              "ServerAddress": {
                "type": "string",
                "description": "Gets or sets the server address of the plugin content filter."
              },
              "Organization": {
                "type": "string",
                "description": "Gets or sets the organization of the plugin content filter."
              },
              "UserName": {
                "type": "string",
                "description": "Gets or sets the user name of the plugin content filter."
              },
              "AuthenticationType": {
                "description": "Gets or sets the authentication type of the plugin content filter.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WebContentFilterAuthType"
                  }
                ]
              },
              "Password": {
                "type": "string",
                "description": "Gets or sets the password of the plugin content filter."
              },
              "IdentityCertificateRetrievalMethod": {
                "description": "IdentityCertificateRetrievalMethod",
                "allOf": [
                  {
                    "$ref": "#/definitions/CertificateRetrievalMethod"
                  }
                ]
              },
              "IdentityCertificateId": {
                "type": "integer",
                "description": "IdentityCertificateId",
                "format": "int32"
              },
              "IdentityCertificateReferenceId": {
                "type": "string",
                "description": "IdentityCertificateReferenceId"
              },
              "FilterBrowsers": {
                "type": "boolean",
                "description": "Gets or sets the filter browser option  of the plugin content filter."
              },
              "FilterSockets": {
                "type": "boolean",
                "description": "Gets or sets the filter sockets option of the plugin content filter."
              },
              "CustomConfigurationData": {
                "type": "string",
                "description": "Gets or sets the custom configuration of the plugin content filter."
              }
            }
          }
        ]
      },
      "WebContentFilterMode": {
        "type": "string",
        "description": "Defines the filter mode enum.",
        "x-enumNames": [
          "AutoFilter",
          "Blacklist",
          "Whitelist",
          "Plugin"
        ],
        "enum": [
          "AutoFilter",
          "Blacklist",
          "Whitelist",
          "Plugin"
        ],
        "x-enumType": "WebContentFilterMode"
      },
      "WhitelistedBookmark": {
        "type": "object",
        "description": "Represents the Whitelisted Bookmark for iOS devices.",
        "properties": {
          "URL": {
            "type": "string",
            "description": "Gets or sets the URL."
          },
          "BookmarkPath": {
            "type": "string",
            "description": "Gets or sets the bookmark path."
          },
          "Title": {
            "type": "string",
            "description": "Gets or sets the title."
          }
        }
      },
      "WebContentFilterAuthType": {
        "type": "string",
        "description": "Defines the auth type mode enum.",
        "x-enumNames": [
          "Password",
          "Certificate"
        ],
        "enum": [
          "Password",
          "Certificate"
        ],
        "x-enumType": "WebContentFilterAuthType"
      },
      "IOSWirelessSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents wireless configuration settings for iOS devices.",
            "properties": {
              "Connection": {
                "description": "Gets or sets the wireless connection in this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/IOSWirelessConnection"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "IOSWirelessConnection": {
        "type": "object",
        "description": "Represents a single wireless connection in an iOS wireless configuration.",
        "required": [
          "PrivateNetwork",
          "MacRandomizationDisabled",
          "SecurityMode",
          "ProxyServerMode",
          "AutoJoin",
          "IsHotspot",
          "IsRoamingEnabled",
          "DisplayOperator"
        ],
        "properties": {
          "SSID": {
            "type": "string",
            "description": "Gets or sets the SSID of the wireless network."
          },
          "PrivateNetwork": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the network\nbroadcasts its SSID."
          },
          "MacRandomizationDisabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the network\nbroadcasts its SSID."
          },
          "SecurityMode": {
            "description": "Gets or sets the security mode used by the network.",
            "allOf": [
              {
                "$ref": "#/definitions/WirelessSecurityMode"
              }
            ],
            "x-enumType": "WirelessSecurityMode"
          },
          "PrivateSharedKey": {
            "type": "string",
            "description": "Gets or sets private shared key for the network.  This should\nbe null if the network is using a PSK."
          },
          "EnterpriseSettings": {
            "description": "Gets or sets the advanced wireless security settings for one of\nthe enterprise security modes.",
            "allOf": [
              {
                "$ref": "#/definitions/IOSEnterpriseWirelessSettings"
              }
            ]
          },
          "ProxyServerMode": {
            "description": "Gets or sets the proxy server mode.",
            "allOf": [
              {
                "$ref": "#/definitions/ProxyServerMode"
              }
            ],
            "x-enumType": "ProxyServerMode"
          },
          "ProxyConfigurationAddress": {
            "type": "string",
            "description": "Gets or sets the IP address or host name of a server for automatic proxy configuration."
          },
          "ProxyServer": {
            "description": "Gets or sets the proxy server settings for this connection.",
            "allOf": [
              {
                "$ref": "#/definitions/ProxyServerSettings"
              }
            ]
          },
          "AutoJoin": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether auto join the  network"
          },
          "NetworkPriority": {
            "type": "integer",
            "description": "Gets or sets priority of which wireless network to connect with when multiple networks are available.",
            "format": "int32"
          },
          "IsHotspot": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the network is hotspot."
          },
          "DomainName": {
            "type": "string",
            "description": "Gets or sets the domain name."
          },
          "HESSID": {
            "type": "string",
            "description": "Gets or sets the HESSID of the wireless network."
          },
          "IsRoamingEnabled": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether WiFi roaming is enabled."
          },
          "RoamingOrganizationIdentifiers": {
            "type": "array",
            "description": "Gets or sets the roaming organization identifiers.",
            "items": {
              "type": "string"
            }
          },
          "NetworkAccessIdentifiers": {
            "type": "array",
            "description": "Gets or sets the network access identifiers.",
            "items": {
              "type": "string"
            }
          },
          "MobileCode": {
            "type": "array",
            "description": "Gets or sets mobile country and network codes.",
            "items": {
              "$ref": "#/definitions/MobileCode"
            }
          },
          "DisplayOperator": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to display the name of the operator of the hotspot access point."
          }
        }
      },
      "MobileCode": {
        "type": "object",
        "description": "Represents a mobile code used in wireless connection.",
        "properties": {
          "Country": {
            "type": "integer",
            "description": "Gets or sets mobile country code.",
            "format": "int32"
          },
          "Network": {
            "type": "integer",
            "description": "Gets or sets mobile network code.",
            "format": "int32"
          }
        }
      },
      "AntivirusSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a device antivirus configuration.",
            "required": [
              "FileMonitorEnabled",
              "ApplicationMonitorEnabled",
              "QuarantineInfectedApplications",
              "QuarantineInfectedFiles",
              "DeleteInfectedApplications",
              "DeleteInfectedFiles"
            ],
            "properties": {
              "FileMonitorEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether file monitoring is enabled on\nthe device."
              },
              "ApplicationMonitorEnabled": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether application monitoring is enabled\non the device."
              },
              "QuarantineLocation": {
                "type": "string",
                "description": "Gets or sets the quarantine location on the device."
              },
              "QuarantineInfectedApplications": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether an infected application should be\nquarantined."
              },
              "QuarantineInfectedFiles": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether an infected file should be\nquarantined."
              },
              "DeleteInfectedApplications": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether an infected application should be\ndeleted."
              },
              "DeleteInfectedFiles": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether an infected file should be\ndeleted."
              },
              "Whitelist": {
                "description": "Gets or sets the antivirus whitelist.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AntivirusItems"
                  }
                ]
              },
              "ScanSchedule": {
                "description": "Gets or sets the devices scan schedule.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Schedule"
                  }
                ]
              },
              "EmptyQuarantineSchedule": {
                "description": "Gets or sets the devices empty quarantine schedule.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Schedule"
                  }
                ]
              }
            }
          }
        ]
      },
      "AntivirusItems": {
        "type": "object",
        "description": "Data contract describing a device antivirus configuration.",
        "properties": {
          "Applications": {
            "type": "array",
            "description": "Gets or sets the whitelisted applications",
            "items": {
              "$ref": "#/definitions/AntivirusApplication"
            }
          },
          "Files": {
            "type": "array",
            "description": "Gets or sets the whitelisted files",
            "items": {
              "$ref": "#/definitions/AntivirusFile"
            }
          }
        }
      },
      "AntivirusApplication": {
        "type": "object",
        "description": "Data contract describing a device antivirus configuration.",
        "properties": {
          "PackageId": {
            "type": "string",
            "description": "Gets or sets the package id of a whitelisted application"
          },
          "DisplayName": {
            "type": "string",
            "description": "Gets or sets the display name of a whitelisted application"
          }
        }
      },
      "AntivirusFile": {
        "type": "object",
        "description": "Data contract describing a device antivirus configuration.",
        "properties": {
          "Path": {
            "type": "string",
            "description": "Gets or sets the path of a whitelisted file"
          },
          "FileSize": {
            "type": "integer",
            "description": "Gets or sets the file size of a whitelisted file",
            "format": "int32"
          },
          "Checksum": {
            "type": "string",
            "description": "Gets or sets the checksum of a whitelisted file"
          }
        }
      },
      "AndroidClassicAntivirusSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AntivirusSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a device antivirus configuration."
          }
        ]
      },
      "AndroidWorkProfileAntivirusSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AntivirusSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a device antivirus configuration."
          }
        ]
      },
      "AndroidCorporateAntivirusSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkProfileAntivirusSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a device antivirus configuration."
          }
        ]
      },
      "AuthenticationSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an authentication configuration for Android devices.",
            "required": [
              "NotifyUserOfPoorQualityPassword",
              "IdleTimeoutInMinutes",
              "MaximumFailedAttempts",
              "MinimumPasswordLength"
            ],
            "properties": {
              "PasswordQuality": {
                "description": "Gets or sets the required password quality.",
                "allOf": [
                  {
                    "$ref": "#/definitions/PasswordQuality"
                  }
                ]
              },
              "NotifyUserOfPoorQualityPassword": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the device will\nnotify the user if his active password does not satisfy the\nnew quality setting."
              },
              "IdleTimeoutInMinutes": {
                "type": "number",
                "description": "Gets or sets the amount of time the device should remain idle\nbefore automatically locking.",
                "format": "double"
              },
              "IdleTimeout": {
                "description": "Gets or sets the IdleTimeout data.",
                "allOf": [
                  {
                    "$ref": "#/definitions/IdleTimeout"
                  }
                ]
              },
              "MaximumFailedAttempts": {
                "type": "integer",
                "description": "Gets or sets the maximum number of failed logins allowed before\nthe device is wiped.",
                "format": "int32"
              },
              "MinimumPasswordLength": {
                "type": "integer",
                "description": "Gets or sets the minimum length of the user's password.",
                "format": "int32"
              },
              "RevertTimeout": {
                "type": "number",
                "description": "Gets or sets the Admin mode timeout.",
                "format": "double"
              }
            }
          }
        ]
      },
      "PasswordQuality": {
        "type": "string",
        "description": "Enumerates the different password quality settings for Android authentication configurations.",
        "x-enumNames": [
          "Alphanumeric",
          "Alphabetic",
          "Numeric",
          "Something",
          "SmartCard",
          "Biometric",
          "Complexity"
        ],
        "enum": [
          "Alphanumeric",
          "Alphabetic",
          "Numeric",
          "Something",
          "SmartCard",
          "Biometric",
          "Complexity"
        ],
        "x-enumType": "PasswordQuality"
      },
      "IdleTimeout": {
        "type": "object",
        "description": "Represents an Idle Time Out data.",
        "required": [
          "LockWhenIdle"
        ],
        "properties": {
          "IdleTimeoutInTimeUnits": {
            "type": "integer",
            "description": "Gets or sets the amount of time the device should remain idle\nbefore automatically locking in units of time.",
            "format": "int32"
          },
          "UnitOfTime": {
            "description": "Gets or sets the unit of of time the device should remain idle\nbefore automatically locking in units of time.",
            "allOf": [
              {
                "$ref": "#/definitions/UnitsOfTime"
              }
            ],
            "x-enumType": "UnitsOfTime"
          },
          "LockWhenIdle": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the device should be automatically locking after remaining idle."
          }
        }
      },
      "AndroidClassicAuthenticationSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AuthenticationSection"
          },
          {
            "type": "object",
            "description": "Represents an authentication configuration for Android Samsung devices.",
            "required": [
              "UniquePasswordsBeforeReuse",
              "MinimumNonAlphanumericNumber",
              "CacAuthentication",
              "EnforceWorkProfilePasswordPolicy",
              "WorkProfileUniquePasswordsBeforeReuse",
              "WorkProfileMinimumNonAlphanumericNumber",
              "WorkProfileCacAuthentication",
              "WorkProfileIdleTimeoutInMinutes",
              "WorkProfileMaximumFailedAttempts",
              "WorkProfileMinimumPasswordLength",
              "MinimumNumericCharacters",
              "MinimumLetters",
              "MinimumLowercase",
              "MinimumUppercase",
              "WorkProfileMinimumNumericCharacters",
              "WorkProfileMinimumLetters",
              "WorkProfileMinimumLowercase",
              "WorkProfileMinimumUppercase",
              "ManagedDeviceDisableSwipe",
              "MaximumHoursAuthenticationTimeout",
              "WorkProfileMaximumHoursAuthenticationTimeout",
              "EnforceUserPasswordPolicy",
              "ConfiguredForAndroidManagementDevice"
            ],
            "properties": {
              "UserPassword": {
                "type": "string",
                "description": "Gets or sets the user's password."
              },
              "UniquePasswordsBeforeReuse": {
                "type": "integer",
                "description": "Gets or sets the amount of unique passwords before reuse.",
                "format": "int32"
              },
              "MaximumPasswordAge": {
                "type": "integer",
                "description": "Gets or sets the maximum password age (1-365 days, or none).",
                "format": "int32"
              },
              "MinimumNonAlphanumericNumber": {
                "type": "integer",
                "description": "Gets or sets the minimum number of non-alphanumeric (special) characters.",
                "format": "int32"
              },
              "CacAuthentication": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether CAC authentication should be used."
              },
              "EnforceWorkProfilePasswordPolicy": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether work profile password policy should be enforced."
              },
              "WorkProfileUniquePasswordsBeforeReuse": {
                "type": "integer",
                "description": "Gets or sets the amount of unique passwords before reuse for Work Profile.",
                "format": "int32"
              },
              "WorkProfileMaximumPasswordAge": {
                "type": "integer",
                "description": "Gets or sets the maximum password age (1-365 days, or none) for Work Profile.",
                "format": "int32"
              },
              "WorkProfileMinimumNonAlphanumericNumber": {
                "type": "integer",
                "description": "Gets or sets the minimum number of non-alphanumeric (special) characters for Work Profile",
                "format": "int32"
              },
              "WorkProfileCacAuthentication": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether CAC authentication should be used for Work Profile."
              },
              "WorkProfilePasswordQuality": {
                "description": "Gets or sets the required password quality for Work Profile.",
                "allOf": [
                  {
                    "$ref": "#/definitions/PasswordQuality"
                  }
                ]
              },
              "WorkProfileIdleTimeoutInMinutes": {
                "type": "number",
                "description": "Gets or sets the amount of time the device should remain idle\nbefore automatically locking for Work Profile.",
                "format": "double"
              },
              "WorkProfileIdleTimeout": {
                "description": "Gets or sets the IdleTimeout data for Work Profile.",
                "allOf": [
                  {
                    "$ref": "#/definitions/IdleTimeout"
                  }
                ]
              },
              "WorkProfileMaximumFailedAttempts": {
                "type": "integer",
                "description": "Gets or sets the maximum number of failed logins allowed before\nthe device is wiped for Work Profile",
                "format": "int32"
              },
              "WorkProfileMinimumPasswordLength": {
                "type": "integer",
                "description": "Gets or sets the minimum length of the Work Profile password.",
                "format": "int32"
              },
              "MinimumNumericCharacters": {
                "type": "integer",
                "description": "Gets or sets the minimum number of numeric character",
                "format": "int32"
              },
              "MinimumLetters": {
                "type": "integer",
                "description": "Gets or sets the minimum number of letters",
                "format": "int32"
              },
              "MinimumLowercase": {
                "type": "integer",
                "description": "Gets or sets the minimum number of lowercase letters",
                "format": "int32"
              },
              "MinimumUppercase": {
                "type": "integer",
                "description": "Gets or sets the minimum number of uppercase letters",
                "format": "int32"
              },
              "PasswordComplexity": {
                "description": "Gets or sets the minimum password complexity",
                "allOf": [
                  {
                    "$ref": "#/definitions/PasswordComplexity"
                  }
                ]
              },
              "WorkProfileMinimumNumericCharacters": {
                "type": "integer",
                "description": "Gets or sets the minimum number of numeric character for work profile policy",
                "format": "int32"
              },
              "WorkProfileMinimumLetters": {
                "type": "integer",
                "description": "Gets or sets the minimum number of letters for work profile policy",
                "format": "int32"
              },
              "WorkProfileMinimumLowercase": {
                "type": "integer",
                "description": "Gets or sets the minimum number of lowercase letters for work profile policy",
                "format": "int32"
              },
              "WorkProfileMinimumUppercase": {
                "type": "integer",
                "description": "Gets or sets the minimum number of uppercase letters for work profile policy",
                "format": "int32"
              },
              "WorkProfilePasswordComplexity": {
                "description": "Gets or sets the minimum password complexity for Work Profile.",
                "allOf": [
                  {
                    "$ref": "#/definitions/PasswordComplexity"
                  }
                ]
              },
              "ManagedDeviceDisableSwipe": {
                "type": "boolean",
                "description": "Gets or sets whether an attempt should be made to remove swipe"
              },
              "MaximumHoursAuthenticationTimeout": {
                "type": "integer",
                "description": "Gets or sets the maximum number of hours before strong authentication is required",
                "format": "int32"
              },
              "WorkProfileMaximumHoursAuthenticationTimeout": {
                "type": "integer",
                "description": "Gets or sets the maximum number of hours before strong authentication is required",
                "format": "int32"
              },
              "AdminPassword": {
                "type": "string",
                "description": "Gets or sets the administrator password."
              },
              "EnforceUserPasswordPolicy": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether user password policy should be enforced."
              },
              "ConfiguredForAndroidManagementDevice": {
                "type": "boolean",
                "description": "Get or sets value indicating whether administrator is configure for AndroidManagement device "
              }
            }
          }
        ]
      },
      "PasswordComplexity": {
        "type": "string",
        "description": "Enumerates the different password complexity settings for Android authentication configurations.",
        "x-enumNames": [
          "None",
          "Low",
          "Medium",
          "High"
        ],
        "enum": [
          "None",
          "Low",
          "Medium",
          "High"
        ],
        "x-enumType": "PasswordComplexity"
      },
      "AndroidWorkProfileAuthenticationSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicAuthenticationSection"
          },
          {
            "type": "object",
            "description": "Represents an authentication configuration for Android Samsung devices."
          }
        ]
      },
      "AndroidCorporateAuthenticationSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkProfileAuthenticationSection"
          },
          {
            "type": "object",
            "description": "Represents an authentication configuration for Android Samsung devices."
          }
        ]
      },
      "SettingsManagerSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "This class is used for the capturing the fields\ndisplayed in settings manager",
            "required": [
              "AutoBrightness",
              "Brightness",
              "ScreenTimeout",
              "ScreenRotation",
              "EnableBlueTooth",
              "ScanBlueTooth",
              "MakeVisibleBlueTooth",
              "PairBlueTooth",
              "EnableWifi",
              "ScanWifi",
              "RingtoneVolumeSound",
              "MediaVolumeSound",
              "NotificationVolumeSound",
              "SystemVolumeSound",
              "AddWifi",
              "ModifyWifi",
              "EnableTimeZone",
              "EnableSyncWithSntpServer",
              "EnableFlashlight",
              "EnableManageAccessPointName",
              "EnableManageDeviceSecurity",
              "DeviceSecurityType"
            ],
            "properties": {
              "Description": {
                "type": "string",
                "description": "Gets or sets the Description of settings manager."
              },
              "AutoBrightness": {
                "type": "boolean",
                "description": "Gets or sets the Auto Brightness field for Display in settings manager."
              },
              "Brightness": {
                "type": "boolean",
                "description": "Gets or sets the Brightness field for Display in settings manager."
              },
              "ScreenTimeout": {
                "type": "boolean",
                "description": "Gets or sets the Screen Timeout field for Display in settings manager."
              },
              "ScreenRotation": {
                "type": "boolean",
                "description": "Gets or sets the Screen Rotation field for Display in settings manager."
              },
              "EnableBlueTooth": {
                "type": "boolean",
                "description": "Gets or sets the Enable BlueTooth field for Bluetooth in settings manager."
              },
              "ScanBlueTooth": {
                "type": "boolean",
                "description": "Gets or sets the Scan BlueTooth field for Bluetooth in settings manager."
              },
              "MakeVisibleBlueTooth": {
                "type": "boolean",
                "description": "Gets or sets the Make visible BlueTooth field for Bluetooth in settings manager."
              },
              "PairBlueTooth": {
                "type": "boolean",
                "description": "Gets or sets the Make visible BlueTooth field for Bluetooth in settings manager."
              },
              "EnableWifi": {
                "type": "boolean",
                "description": "Gets or sets the Enable field for Wifi in settings manager."
              },
              "ScanWifi": {
                "type": "boolean",
                "description": "Gets or sets the Scan field for Wifi in settings manager."
              },
              "RingtoneVolumeSound": {
                "type": "boolean",
                "description": "Gets or sets the Ringtone Volume field for Sound in settings manager."
              },
              "MediaVolumeSound": {
                "type": "boolean",
                "description": "Gets or sets the Media Volume field for Sound in settings manager."
              },
              "NotificationVolumeSound": {
                "type": "boolean",
                "description": "Gets or sets the Notification Volume field for Sound in settings manager."
              },
              "SystemVolumeSound": {
                "type": "boolean",
                "description": "Gets or sets the System Volume field for Sound in settings manager."
              },
              "AddWifi": {
                "type": "boolean",
                "description": "Gets or sets the Add field for Wifi in settings manager."
              },
              "ModifyWifi": {
                "type": "boolean",
                "description": "Gets or sets the Modify field for Wifi in settings manager."
              },
              "EnableTimeZone": {
                "type": "boolean",
                "description": "Gets or sets the Enable field for Time Zone in settings manager."
              },
              "EnableSyncWithSntpServer": {
                "type": "boolean",
                "description": "Gets or sets the Enable field for sync with sntp server in settings manager."
              },
              "SntpServer": {
                "type": "string",
                "description": "Gets or sets the sntp server in settings manager."
              },
              "EnableFlashlight": {
                "type": "boolean",
                "description": "Gets or sets the Enable field for flashlight in settings manager."
              },
              "EnableManageAccessPointName": {
                "type": "boolean",
                "description": "Gets or sets the Enable field for access point name in settings manager."
              },
              "EnableManageDeviceSecurity": {
                "type": "boolean",
                "description": "Gets or sets the Enable field for device security in settings manager."
              },
              "DeviceSecurityType": {
                "description": "Gets or sets the type of device security in settings manager.",
                "allOf": [
                  {
                    "$ref": "#/definitions/SettingsManagerDeviceSecurityType"
                  }
                ]
              }
            }
          }
        ]
      },
      "SettingsManagerDeviceSecurityType": {
        "type": "string",
        "description": "Device security type",
        "x-enumNames": [
          "Password",
          "PIN"
        ],
        "enum": [
          "Password",
          "PIN"
        ],
        "x-enumType": "SettingsManagerDeviceSecurityType"
      },
      "AndroidClassicSettingsManagerSettingsSection": {
        "allOf": [
          {
            "$ref": "#/definitions/SettingsManagerSettingsSection"
          },
          {
            "type": "object",
            "description": "Represents an application settings section configuration for Android devices."
          }
        ]
      },
      "WebClipSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a device web clip configuration section.",
            "properties": {
              "WebClip": {
                "description": "Gets or sets the web clip for this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WebClip"
                  }
                ]
              }
            }
          }
        ]
      },
      "WebClip": {
        "type": "object",
        "description": "Data contract describing a device web clip.",
        "properties": {
          "Label": {
            "type": "string",
            "description": "Gets or sets the label for this web clip."
          },
          "URL": {
            "type": "string",
            "description": "Gets or sets the URL for this web clip.",
            "format": "uri"
          },
          "IconFileId": {
            "type": "integer",
            "description": "Gets or sets the icon file id for this web clip.",
            "format": "int32"
          },
          "Notes": {
            "type": "string",
            "description": "Gets or sets the Notes for this web clip."
          }
        }
      },
      "AndroidClassicBookmarkSection": {
        "allOf": [
          {
            "$ref": "#/definitions/WebClipSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a device web clip configuration.",
            "properties": {
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "AndroidCorporateBookmarkSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicBookmarkSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a device web clip configuration."
          }
        ]
      },
      "AndroidWorkProfileBookmarkSection": {
        "allOf": [
          {
            "$ref": "#/definitions/WebClipSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a device web clip configuration.",
            "properties": {
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "AndroidClassicAccessPointNameSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents wireless configuration settings for iOS devices.",
            "properties": {
              "Connection": {
                "description": "Gets or sets wireless connection defined for this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/ApnConnection"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "ApnConnection": {
        "type": "object",
        "description": "Data contract for a single wireless connection in an Android wireless configuration.",
        "required": [
          "ProxyPortNumber",
          "PortNumber",
          "MmsPortNumber",
          "AccessPointType",
          "MvnoType",
          "AuthenticationType",
          "IsDefault"
        ],
        "properties": {
          "ConnectionId": {
            "type": "string",
            "description": "Gets or sets the identifier of the connection."
          },
          "AccessPointFriendlyName": {
            "type": "string",
            "description": "Gets or sets the friendly name of the carrier (GPRS) access point."
          },
          "AccessPointName": {
            "type": "string",
            "description": "Gets or sets the name of the carrier (GPRS) access point."
          },
          "CountryCode": {
            "type": "string",
            "description": "Gets or sets the mobile country code."
          },
          "NetworkCode": {
            "type": "string",
            "description": "Gets or sets the mobile network code."
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the user name that the device will use to authenticate."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password that the device will use to authenticate."
          },
          "ServerAddress": {
            "type": "string",
            "description": "Gets or sets the address of the server."
          },
          "ProxyServerAddress": {
            "type": "string",
            "description": "Gets or sets the address of the proxy server."
          },
          "ProxyPortNumber": {
            "type": "integer",
            "description": "Gets or sets the port of the proxy server.",
            "format": "int32"
          },
          "PortNumber": {
            "type": "integer",
            "description": "Gets or sets the port number.",
            "format": "int32"
          },
          "MmsProxyAddress": {
            "type": "string",
            "description": "Gets or sets the MMS proxy address."
          },
          "MmsPortNumber": {
            "type": "integer",
            "description": "Gets or sets the MMS port number.",
            "format": "int32"
          },
          "MmsServerAddress": {
            "type": "string",
            "description": "Gets or sets the MMS server address."
          },
          "AccessPointType": {
            "description": "Gets or sets access point type.",
            "allOf": [
              {
                "$ref": "#/definitions/AccessPointType"
              }
            ],
            "x-enumType": "AccessPointType"
          },
          "MvnoType": {
            "description": "Gets or sets the MVNO Type.",
            "allOf": [
              {
                "$ref": "#/definitions/MvnoType"
              }
            ],
            "x-enumType": "MvnoType"
          },
          "MvnoValue": {
            "type": "string",
            "description": "Gets or sets the MVNO Value."
          },
          "AccessPointCustomType": {
            "type": "string",
            "description": "Get or sets access point custom type string if AccessPointType is AnyType"
          },
          "AuthenticationType": {
            "description": "Gets or sets the authentication type.",
            "allOf": [
              {
                "$ref": "#/definitions/ApnAuthenticationType"
              }
            ],
            "x-enumType": "ApnAuthenticationType"
          },
          "IsDefault": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the connection is default."
          }
        }
      },
      "AccessPointType": {
        "type": "string",
        "description": "Defines the access point type for APN Connection.",
        "x-enumNames": [
          "None",
          "Mms",
          "Internet",
          "InternetMms",
          "AnyType"
        ],
        "enum": [
          "None",
          "Mms",
          "Internet",
          "InternetMms",
          "AnyType"
        ],
        "x-enumType": "AccessPointType"
      },
      "MvnoType": {
        "type": "string",
        "description": "Defines the MVNO Type for the APN Connection.",
        "x-enumNames": [
          "None",
          "SPN",
          "IMSI",
          "GID"
        ],
        "enum": [
          "None",
          "SPN",
          "IMSI",
          "GID"
        ],
        "x-enumType": "MvnoType"
      },
      "ApnAuthenticationType": {
        "type": "string",
        "description": "Enumerates the different authentication types available for APN connections.",
        "x-enumNames": [
          "None",
          "PAP",
          "CHAP",
          "PAPOrCHAP"
        ],
        "enum": [
          "None",
          "PAP",
          "CHAP",
          "PAPOrCHAP"
        ],
        "x-enumType": "ApnAuthenticationType"
      },
      "AndroidCorporateAccessPointNameSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicAccessPointNameSection"
          },
          {
            "type": "object",
            "description": "Represents wireless configuration settings."
          }
        ]
      },
      "BrowserSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Samsung devices.",
            "required": [
              "DisableIncognitoMode",
              "DisableLocationTracking",
              "DisableJavaScript",
              "DisableAutofill",
              "EnforceSafeSearch",
              "DisableBrowserHistory",
              "DisablePasswordManagement",
              "AllowCookies",
              "DisablePopups",
              "EnableTranslation",
              "DisableBookmarkEdit",
              "DisableSearchSuggestions",
              "DisablePrefetching",
              "DisableDataCompression"
            ],
            "properties": {
              "DisableIncognitoMode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether incognito mode should be disabled"
              },
              "DisableLocationTracking": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether location tracking should be disabled"
              },
              "DisableJavaScript": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether javascript should be disabled"
              },
              "DisableAutofill": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether auto-fill should be disabled"
              },
              "EnforceSafeSearch": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether safe search should be enforced"
              },
              "DisableBrowserHistory": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether browser history should be disabled"
              },
              "DisablePasswordManagement": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether password management should be disabled"
              },
              "AllowCookies": {
                "description": "Gets or sets cookie restrictions.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowCookies"
                  }
                ]
              },
              "DisablePopups": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether auto-fill should be disabled"
              },
              "DefaultSearchProvider": {
                "type": "string",
                "description": "Gets or sets URL for default search provider."
              },
              "EnableTranslation": {
                "type": "boolean",
                "description": "Gets or sets Default Translation."
              },
              "DisableBookmarkEdit": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether bookmark editing is disabled"
              },
              "DisableSearchSuggestions": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether bookmark editing is disabled"
              },
              "DisablePrefetching": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether bookmark editing is disabled"
              },
              "DisableDataCompression": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether data compression should be disabled."
              }
            }
          }
        ]
      },
      "AllowCookies": {
        "type": "string",
        "description": "This enum represents Android for Work browser cookie restrictions",
        "x-enumNames": [
          "None",
          "AllowForSessionOnly",
          "All"
        ],
        "enum": [
          "None",
          "AllowForSessionOnly",
          "All"
        ],
        "x-enumType": "AllowCookies"
      },
      "AndroidWorkProfileOwnerBrowserSection": {
        "allOf": [
          {
            "$ref": "#/definitions/BrowserSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Samsung devices."
          }
        ]
      },
      "AndroidCorporateBrowserSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkProfileOwnerBrowserSection"
          },
          {
            "type": "object",
            "description": "Represents browser configuration for Android Cope devices."
          }
        ]
      },
      "ChromeWebFilterPolicySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Samsung devices.",
            "properties": {
              "Blacklist": {
                "type": "array",
                "description": "Gets or sets the black list",
                "items": {
                  "type": "string"
                }
              },
              "Whitelist": {
                "type": "array",
                "description": "Gets or sets the white list",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "AndroidWorkProfileOwnerChromeWebFilterPolicySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ChromeWebFilterPolicySection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Samsung devices."
          }
        ]
      },
      "AndroidCorporateChromeWebFilterPolicySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ChromeWebFilterPolicySection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Samsung devices."
          }
        ]
      },
      "ChromeWebProxySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents Android Work Chrome Web Proxy Section",
            "required": [
              "ChromeProxyMode"
            ],
            "properties": {
              "ChromeProxyMode": {
                "description": "Gets or sets proxy mode",
                "allOf": [
                  {
                    "$ref": "#/definitions/ChromeProxyMode"
                  }
                ]
              },
              "ProxyServerHost": {
                "type": "string",
                "description": "Gets host for proxy server (for fixed server mode)"
              },
              "ProxyServerPort": {
                "type": "integer",
                "description": "Gets port for proxy server (for fixed server mode)",
                "format": "int32"
              },
              "ProxyPacUrl": {
                "type": "string",
                "description": "Gets or sets Uri with PAC address (for PacScript mode)",
                "format": "uri"
              },
              "ProxyBypassList": {
                "type": "array",
                "description": "Gets or sets proxy bypass uris",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ChromeProxyMode": {
        "type": "string",
        "description": "Represents valid values for proxy mode",
        "x-enumNames": [
          "Direct",
          "AutoDetect",
          "PacScript",
          "FixedServers",
          "System"
        ],
        "enum": [
          "Direct",
          "AutoDetect",
          "PacScript",
          "FixedServers",
          "System"
        ],
        "x-enumType": "ChromeProxyMode"
      },
      "AndroidWorkProfileOwnerChromeWebProxySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ChromeWebProxySection"
          },
          {
            "type": "object",
            "description": "Represents Android Work Chrome Web Proxy Section"
          }
        ]
      },
      "AndroidCorporateChromeWebProxySection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkProfileOwnerChromeWebProxySection"
          },
          {
            "type": "object",
            "description": "Represents a Browser proxy section for cope devices"
          }
        ]
      },
      "AndroidClassicAndroidWorkFeatureControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Samsung devices.",
            "required": [
              "DisableScreenCapture",
              "DisableCamera",
              "DisableAirplaneMode",
              "AllowContactSharing",
              "DisableCopyPaste",
              "RedactNotifications",
              "StayAwakeWhileCharging",
              "DisableFactoryReset",
              "DisableSafeBoot",
              "DisableInstallationFromUnknownSources",
              "DisableUsbDebugging",
              "DisableMassStorage",
              "DataRoamingState",
              "DisableDeveloperOptions",
              "BluetoothState",
              "WifiState",
              "DisableManagedAppUninstallation",
              "DisableThirdPartyInputMethods",
              "DisableCrossProfileCallerId",
              "DisableKeyguardCamera",
              "DisableKeyguardFingerprint",
              "DisableKeyguardSecureNotifications",
              "DisableKeyguardTrustAgents",
              "DisableKeyguardFeaturesAll",
              "DisableRemoveAgent",
              "DisableCertificateManagement",
              "LocationAccuracy",
              "DisableSms",
              "DisableSdCard",
              "DisableMultiUser",
              "DisableOutgoingNfc",
              "DisableStatusBar",
              "DisableBluetoothContactSharing",
              "DisableFingerprintAuthentication",
              "AllowCrossProfileSharing",
              "DisableTetheringManagement",
              "DisableAppManagement",
              "DisableBluetoothManagement",
              "WifiManagement",
              "DisableVpnManagement",
              "DisableLocationSharing",
              "DisableNetworkSettingsReset",
              "DisableOutgoingCalls",
              "BlockConnectionsWithoutVPN",
              "DisableMultipleGoogleAccounts",
              "DisableNoneGoogleAccount",
              "DisableGoogleAccount",
              "DisableDozeMode",
              "DisableCreateWindows",
              "DisableFirstUseHints",
              "MinimumWifiSecurityLevel",
              "DisableVerifyApps",
              "PeriodicAttestationFrequency",
              "DisableMicrophone",
              "DisableDateTimeConfig",
              "DisablePrinting",
              "DisableAmbientDisplay",
              "DisableScreenTimeout",
              "DisableBrightnessConfigurationManagement",
              "MuteDeviceVolume",
              "EnableBackupServices"
            ],
            "properties": {
              "DisableScreenCapture": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Screen Capture."
              },
              "DisableCamera": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Camera."
              },
              "DisableAirplaneMode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Airplane Mode."
              },
              "AllowContactSharing": {
                "description": "Gets or sets contact sharing restrictions.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AllowContactSharing"
                  }
                ]
              },
              "DisableCopyPaste": {
                "type": "boolean",
                "description": "Gets or sets contact copy paste restrictions."
              },
              "RedactNotifications": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to redact notifications coming from Android for Work applications."
              },
              "StayAwakeWhileCharging": {
                "description": "Gets or sets a value indicating whether a device shall stay awake while charging on Managed Devices coming from Android for Work applications.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TernaryFeatureState"
                  }
                ]
              },
              "DisableFactoryReset": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether an end-user shall be prevented to perform device factory reset on Managed Devices."
              },
              "DisableSafeBoot": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether an end-user shall be prevented to perform device safe boot on Managed Devices."
              },
              "DisableInstallationFromUnknownSources": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether an end-user shall be prevented from Installing Applications From Unknown Sources on Managed Devices."
              },
              "DisableUsbDebugging": {
                "description": "Gets or sets a value indicating whether to disable USB Debugging.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TernaryFeatureState"
                  }
                ]
              },
              "DisableMassStorage": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable USB Mass Storage."
              },
              "DataRoamingState": {
                "description": "Gets or sets a value indicating whether to disable data roaming.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TernaryFeatureState"
                  }
                ]
              },
              "DisableDeveloperOptions": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable developer options."
              },
              "BluetoothState": {
                "description": "Gets or sets a value indicating whether to disable bluetooth.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TernaryFeatureState"
                  }
                ]
              },
              "WifiState": {
                "description": "Gets or sets a value indicating whether to disable wifi.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TernaryFeatureState"
                  }
                ]
              },
              "DisableManagedAppUninstallation": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Managed Application uninstallation."
              },
              "DisableThirdPartyInputMethods": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether 3rd party input methods should be disabled"
              },
              "DisableCrossProfileCallerId": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable Caller ID Information for Work Contacts should be disabled"
              },
              "DisableKeyguardCamera": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable camera keyguard"
              },
              "DisableKeyguardFingerprint": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable Fingerprint keyguard"
              },
              "DisableKeyguardSecureNotifications": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable Secure Notifications keyguard"
              },
              "DisableKeyguardTrustAgents": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable Trust Agents keyguard"
              },
              "DisableKeyguardFeaturesAll": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable All keyguard features"
              },
              "DisableRemoveAgent": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable Agent Removal."
              },
              "DisableCertificateManagement": {
                "type": "boolean",
                "description": "Gets or sets a value indicated Disable Certificate Management"
              },
              "LocationAccuracy": {
                "description": "Gets or sets a value indicating Location Accuracy",
                "allOf": [
                  {
                    "$ref": "#/definitions/LocationAccuracy"
                  }
                ]
              },
              "DisableSms": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable SMS"
              },
              "DisableSdCard": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable Mounting SD Card"
              },
              "DisableMultiUser": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable multi user control"
              },
              "DisableOutgoingNfc": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable NFC Sharing"
              },
              "DisableStatusBar": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable the Status Bar"
              },
              "DisableBluetoothContactSharing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Bluetooth Contact Sharing"
              },
              "DisableFingerprintAuthentication": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Fingerprint Authentication"
              },
              "AllowCrossProfileSharing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether data can be shared between work and personal profiles"
              },
              "DisableTetheringManagement": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Tethering Management"
              },
              "DisableAppManagement": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable App Management"
              },
              "DisableBluetoothManagement": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Bluetooth Management"
              },
              "WifiManagement": {
                "description": "Gets or sets wifi management level",
                "allOf": [
                  {
                    "$ref": "#/definitions/WifiManagement"
                  }
                ]
              },
              "DisableVpnManagement": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable VPN Management"
              },
              "DisableLocationSharing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Location Sharing"
              },
              "DisableNetworkSettingsReset": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Network Settings Reset"
              },
              "DisableOutgoingCalls": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Outgoing Calls"
              },
              "EnableAlwaysOnVpn": {
                "type": "string",
                "description": "Gets or sets a value indicating whether to Enable Always On VPN"
              },
              "BlockConnectionsWithoutVPN": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Block Connections Without VPN"
              },
              "DisableMultipleGoogleAccounts": {
                "description": "Gets or sets a value indicating whether to disable multiple Google accounts.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AccountCreationRestriction"
                  }
                ]
              },
              "DisableNoneGoogleAccount": {
                "description": "Gets or sets a value indicating whether to disable None Google account.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AccountCreationRestriction"
                  }
                ]
              },
              "DisableGoogleAccount": {
                "description": "Gets or sets a value indicating whether to disable Google account.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AccountCreationRestriction"
                  }
                ]
              },
              "DisableDozeMode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Doze Mode."
              },
              "DisableCreateWindows": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable window creation."
              },
              "DisableFirstUseHints": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable hints in apps."
              },
              "MinimumWifiSecurityLevel": {
                "description": "Gets or sets WIFI security level.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WirelessPolicySecurityLevel"
                  }
                ]
              },
              "DisableVerifyApps": {
                "type": "boolean",
                "description": "Gets or sets DisableVerifyApps."
              },
              "PeriodicAttestationFrequency": {
                "description": "Gets or sets attestation frequency.",
                "allOf": [
                  {
                    "$ref": "#/definitions/PeriodicAttestationFrequency"
                  }
                ]
              },
              "DisableMicrophone": {
                "type": "boolean",
                "description": "Gets or sets copy value indicating whether to disable device microphone."
              },
              "DisableDateTimeConfig": {
                "type": "boolean",
                "description": "Gets or sets value indicating whether to allow changing the date and time settings on devices."
              },
              "DisablePrinting": {
                "type": "boolean",
                "description": "Gets or sets value indicating whether to disable printing"
              },
              "DisableAmbientDisplay": {
                "type": "boolean",
                "description": "Gets or sets value indicating whether to disable ambient display"
              },
              "DisableScreenTimeout": {
                "type": "boolean",
                "description": "Gets or sets value indicating whether to disable screen timeout"
              },
              "DisableBrightnessConfigurationManagement": {
                "type": "boolean",
                "description": "Gets or sets value indicating whether to disable Brightness Configuration Management"
              },
              "MuteDeviceVolume": {
                "type": "boolean",
                "description": "Gets or sets value indicating whether to mute device volume and disallow any further adjustment"
              },
              "ShortRestrictionMessage": {
                "type": "string",
                "description": "Gets or sets the short support message which gets displayed to the user in settings screens where funtionality has been disabled by the admin."
              },
              "LongRestrictionMessage": {
                "type": "string",
                "description": "Gets or sets the long support message which gets displayed to the user in the device administators settings screen."
              },
              "EnableBackupServices": {
                "type": "boolean",
                "description": "Gets or sets the EnableBackupServices by the admin."
              }
            }
          }
        ]
      },
      "AllowContactSharing": {
        "type": "string",
        "description": "This enum represents Android for Work contact sharing restrictions",
        "x-enumNames": [
          "None",
          "AllowNameAndPhoneNumberOnly",
          "All"
        ],
        "enum": [
          "None",
          "AllowNameAndPhoneNumberOnly",
          "All"
        ],
        "x-enumType": "AllowContactSharing"
      },
      "TernaryFeatureState": {
        "type": "string",
        "description": "Represents the tri-state Feature Control value.\n            ",
        "x-enumNames": [
          "NotImposed",
          "Disabled",
          "Enabled"
        ],
        "enum": [
          "NotImposed",
          "Disabled",
          "Enabled"
        ],
        "x-enumType": "TernaryFeatureState"
      },
      "LocationAccuracy": {
        "type": "string",
        "description": "This enum represents Android for Work Location Accuracy",
        "x-enumNames": [
          "NotImposed",
          "Disabled",
          "HighAccuracy",
          "GPSOnly",
          "BatterySaving"
        ],
        "enum": [
          "NotImposed",
          "Disabled",
          "HighAccuracy",
          "GPSOnly",
          "BatterySaving"
        ],
        "x-enumType": "LocationAccuracy"
      },
      "WifiManagement": {
        "type": "string",
        "description": "This enum represents Android for Work WifiManagement",
        "x-enumNames": [
          "Allowed",
          "None",
          "Restricted"
        ],
        "enum": [
          "Allowed",
          "None",
          "Restricted"
        ],
        "x-enumType": "WifiManagement"
      },
      "AccountCreationRestriction": {
        "type": "string",
        "description": "This enum represents Android Enterprise Account Creation Restrictions",
        "x-enumNames": [
          "None",
          "GoogleAccount",
          "AllAccounts"
        ],
        "enum": [
          "None",
          "GoogleAccount",
          "AllAccounts"
        ],
        "x-enumType": "AccountCreationRestriction"
      },
      "WirelessPolicySecurityLevel": {
        "type": "string",
        "description": "This enum represents android.app.enterprise.WifiPolicy",
        "x-enumNames": [
          "Open",
          "WEP",
          "WPA",
          "EAPLEAP",
          "EAPFAST",
          "EAPPEAP",
          "EAPTTLS",
          "EAPTLS"
        ],
        "enum": [
          "Open",
          "WEP",
          "WPA",
          "EAPLEAP",
          "EAPFAST",
          "EAPPEAP",
          "EAPTTLS",
          "EAPTLS"
        ],
        "x-enumType": "WirelessPolicySecurityLevel"
      },
      "PeriodicAttestationFrequency": {
        "type": "string",
        "description": "This enum represents Attestation Frequency on Android Enterprise devices",
        "x-enumNames": [
          "Daily",
          "EveryHour",
          "EveryTwoHours"
        ],
        "enum": [
          "Daily",
          "EveryHour",
          "EveryTwoHours"
        ],
        "x-enumType": "PeriodicAttestationFrequency"
      },
      "AndroidWorkProfileOwnerFeatureControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicAndroidWorkFeatureControlSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Enterprise Profile Owner (COPE) devices.",
            "required": [
              "DisableInstallationFromUnknownSourcesPersonal"
            ],
            "properties": {
              "DisableInstallationFromUnknownSourcesPersonal": {
                "type": "boolean",
                "description": "Gets or sets value indicating whether to Allow Installation from Unknown Sources on Personal"
              },
              "WorkProfileWipeMessage": {
                "type": "string",
                "description": "Gets or sets the long support message which gets displayed to the user in the profile owner devices."
              }
            }
          }
        ]
      },
      "AndroidWorkFirewall": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicFirewallSection"
          },
          {
            "type": "object",
            "description": "Represents an Android Work Firewall section configuration."
          }
        ]
      },
      "AndroidClassicFirewallSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract for an Android Firewall configuration.",
            "required": [
              "UrlFilter"
            ],
            "properties": {
              "AllowRules": {
                "type": "array",
                "description": "Gets or sets a list of allow rules.",
                "items": {
                  "type": "string"
                }
              },
              "DenyRules": {
                "type": "array",
                "description": "Gets or sets a list of deny rules.",
                "items": {
                  "type": "string"
                }
              },
              "DenyRulesAppDetail": {
                "type": "array",
                "description": "Gets or sets a list of deny rules App List.",
                "items": {
                  "type": "string"
                }
              },
              "RerouteRules": {
                "type": "array",
                "description": "Gets or sets a list of reroute rules.",
                "items": {
                  "type": "string"
                }
              },
              "RerouteRulesAppDetail": {
                "type": "array",
                "description": "Gets or sets a list of reroute rules App List.",
                "items": {
                  "type": "string"
                }
              },
              "UrlFilterRules": {
                "type": "array",
                "description": "Gets or sets a list of Url filter rules.",
                "items": {
                  "type": "string"
                }
              },
              "RedirectExceptionsRules": {
                "type": "array",
                "description": "Gets or sets a list of redirect exceptions rules.",
                "items": {
                  "type": "string"
                }
              },
              "UrlFilter": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow Log attempts by users to access blacklisted URL"
              }
            }
          }
        ]
      },
      "AndroidEnterpriseCopeFirewall": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicFirewallSection"
          },
          {
            "type": "object",
            "description": "Represents firewall configuration for Android Cope devices."
          }
        ]
      },
      "AndroidWorkOEMConfigSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an Android Work OEM configuration.",
            "properties": {
              "OEMConfig": {
                "description": "Gets or sets the OEM configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AndroidWorkOEMConfig"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "AndroidWorkOEMConfig": {
        "type": "object",
        "description": "Base class for all AndroidWork OEM Config types.",
        "x-abstract": true,
        "required": [
          "OEMConfigType"
        ],
        "properties": {
          "AndroidProductId": {
            "type": "string",
            "description": "Gets or sets app package id"
          },
          "AppConfiguration": {
            "type": "string",
            "description": "Gets or sets app configuration"
          },
          "AppConfigurationSchema": {
            "type": "string",
            "description": "Gets or sets app configuration schema"
          },
          "OEMConfigType": {
            "description": "Gets or sets the OEM Config Type",
            "allOf": [
              {
                "$ref": "#/definitions/AndroidWorkOEMConfigType"
              }
            ],
            "x-enumType": "AndroidWorkOEMConfigType"
          }
        }
      },
      "AndroidWorkOEMConfigType": {
        "type": "string",
        "description": "Enumerates the different types of AndroidWork OEM Config.",
        "x-enumNames": [
          "AndroidWorkKnoxServicePlugin",
          "AndroidWorkPanasonicServicePlugin",
          "AndroidWorkDatalogicServicePlugin",
          "AndroidWorkHoneywell",
          "AndroidWorkZebra"
        ],
        "enum": [
          "AndroidWorkKnoxServicePlugin",
          "AndroidWorkPanasonicServicePlugin",
          "AndroidWorkDatalogicServicePlugin",
          "AndroidWorkHoneywell",
          "AndroidWorkZebra"
        ],
        "x-enumType": "AndroidWorkOEMConfigType"
      },
      "AndroidWorkDatalogicServicePlugin": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkOEMConfig"
          },
          {
            "type": "object",
            "description": "Represents Datalogic Service Plugin OEM Config for an Android Work device."
          }
        ]
      },
      "AndroidWorkHoneywell": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkOEMConfig"
          },
          {
            "type": "object",
            "description": "Represents Honeywell OEM Config for an Android Work device."
          }
        ]
      },
      "AndroidWorkKnoxServicePlugin": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkOEMConfig"
          },
          {
            "type": "object",
            "description": "Represents Knox Service Plugin OEM Config for an Android Work device."
          }
        ]
      },
      "AndroidWorkPanasonicServicePlugin": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkOEMConfig"
          },
          {
            "type": "object",
            "description": "Represents Panasonic Service Plugin OEM Config for an Android Work device."
          }
        ]
      },
      "AndroidWorkZebra": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkOEMConfig"
          },
          {
            "type": "object",
            "description": "Represents Zebra OEM Config for an Android Work device."
          }
        ]
      },
      "AndroidWorkOEMConfigSectionDatalogicServicePlugin": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkOEMConfigSection"
          },
          {
            "type": "object",
            "description": "Represents an Android Work OEM Datalogic Service Plugin configuration."
          }
        ]
      },
      "AndroidWorkOEMConfigSectionHoneywell": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkOEMConfigSection"
          },
          {
            "type": "object",
            "description": "Represents an Android Work OEM Honeywell configuration."
          }
        ]
      },
      "AndroidWorkOEMConfigSectionKnoxServicePlugin": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkOEMConfigSection"
          },
          {
            "type": "object",
            "description": "Represents an Android Work OEM Samsung Knox Service Plugin configuration."
          }
        ]
      },
      "AndroidWorkOEMConfigSectionPanasonicServicePlugin": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkOEMConfigSection"
          },
          {
            "type": "object",
            "description": "Represents an Android Work OEM Panasonic configuration."
          }
        ]
      },
      "AndroidWorkOEMConfigSectionZebra": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkOEMConfigSection"
          },
          {
            "type": "object",
            "description": "Represents an Android Work OEM Zebra configuration."
          }
        ]
      },
      "AndroidWorkProfileOEMConfigSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkOEMConfigSection"
          },
          {
            "type": "object",
            "description": "Represents an Android Work OEM configuration."
          }
        ]
      },
      "AndroidCorporateOEMConfigSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkProfileOEMConfigSection"
          },
          {
            "type": "object",
            "description": "Represents an Android Work OEM configuration."
          }
        ]
      },
      "AndroidWorkProfileOwnerPhoneCallPolicySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract describing a phone call configuration.",
            "required": [
              "NotifyServer",
              "NotifyUser"
            ],
            "properties": {
              "NotifyServer": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to notify server on call blocked."
              },
              "NotifyUser": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to notify user on call blocked."
              },
              "Policies": {
                "type": "array",
                "description": "Gets or sets the list of policies.",
                "items": {
                  "$ref": "#/definitions/PhoneCallPolicy"
                }
              }
            }
          }
        ]
      },
      "AndroidClassicAndroidWorkVPNSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Represents an Android for Work VPN configuration.",
            "properties": {
              "Connection": {
                "description": "Gets or sets the VPN connection in this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/VPNConnection"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "AndroidWorkProfileAndroidWorkVPNSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicAndroidWorkVPNSection"
          },
          {
            "type": "object",
            "description": "Represents an Android for Work VPN configuration."
          }
        ]
      },
      "AndroidCorporateIpSecVPNSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicAndroidWorkVPNSection"
          },
          {
            "type": "object",
            "description": "Represents an Android for Coperate IpSec VPN configuration."
          }
        ]
      },
      "AndroidCorporateVPNSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicAndroidWorkVPNSection"
          },
          {
            "type": "object",
            "description": "Represents an Android for Work VPN configuration."
          }
        ]
      },
      "AndroidClassicAndroidWorkWallpaperSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data Contract Describing wallpaper configurations",
            "required": [
              "UseDifferentLockScreenWallpaper"
            ],
            "properties": {
              "UseDifferentLockScreenWallpaper": {
                "type": "boolean",
                "description": "Gets or sets value if device's home screen and lock screen will use same wallpaper"
              },
              "HomeScreenFileId": {
                "type": "integer",
                "description": "Home Screen wallpaper file id",
                "format": "int32"
              },
              "LockScreenFileId": {
                "type": "integer",
                "description": "Lock Screen wallpaper file id",
                "format": "int32"
              }
            }
          }
        ]
      },
      "DeviceInActivitySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Device inactivity configurations",
            "required": [
              "IsPlayMediaConfigured",
              "IsWipeAppsConfigured"
            ],
            "properties": {
              "InActivityDetails": {
                "description": "Gets or sets value of device inactivity details.",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceInActivityDetails"
                  }
                ]
              },
              "IsPlayMediaConfigured": {
                "type": "boolean",
                "description": "Gets or sets value is play media is configured or not."
              },
              "MediaDetails": {
                "description": "Gets or sets value of device media details.",
                "allOf": [
                  {
                    "$ref": "#/definitions/DeviceInActivityMediaDetails"
                  }
                ]
              },
              "IsWipeAppsConfigured": {
                "type": "boolean",
                "description": "Gets or sets value if wipe app is configured or not."
              },
              "WipeAppDetails": {
                "type": "array",
                "description": "Gets or sets list of device wipe app details.",
                "items": {
                  "$ref": "#/definitions/DeviceInActivityWipeAppDetail"
                }
              }
            }
          }
        ]
      },
      "DeviceInActivityDetails": {
        "type": "object",
        "description": "Device inactivity details",
        "required": [
          "InactivityTimer",
          "InactivityTimerUnit",
          "UserConfirmation",
          "UserConfirmationTimer"
        ],
        "properties": {
          "InactivityTimer": {
            "type": "integer",
            "description": "Gets or sets value of inactivity timer in milliseconds.",
            "format": "int32"
          },
          "InactivityTimerUnit": {
            "description": "Gets or sets value of inactivity unit.",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceInactivityUnit"
              }
            ],
            "x-enumType": "DeviceInactivityUnit"
          },
          "UserConfirmation": {
            "type": "boolean",
            "description": "Gets or sets value of user confirmation."
          },
          "UserConfirmationTimer": {
            "type": "integer",
            "description": "Gets or sets value of user confirmation timer in milliseconds.",
            "format": "int32"
          },
          "UserConfirmationMessage": {
            "type": "string",
            "description": "Gets or sets value of user confirmation message."
          }
        }
      },
      "DeviceInactivityUnit": {
        "type": "string",
        "description": "Enum for timer units in Device Inactivity",
        "x-enumNames": [
          "Seconds",
          "Minutes"
        ],
        "enum": [
          "Seconds",
          "Minutes"
        ],
        "x-enumType": "DeviceInactivityUnit"
      },
      "DeviceInActivityMediaDetails": {
        "type": "object",
        "description": "Media details",
        "required": [
          "PlayDuration"
        ],
        "properties": {
          "DefaultMediaPath": {
            "type": "string",
            "description": "Gets or sets value of default media path."
          },
          "WelcomeImagePath": {
            "type": "string",
            "description": "Gets or sets value of welcome image path."
          },
          "PlayDuration": {
            "type": "integer",
            "description": "Gets or sets value of play duration in milliseconds.",
            "format": "int32"
          },
          "ScheduleMedia": {
            "type": "array",
            "description": "Gets or sets list of schedule media details.",
            "items": {
              "$ref": "#/definitions/DeviceInActivityScheduleMedia"
            }
          }
        }
      },
      "DeviceInActivityScheduleMedia": {
        "type": "object",
        "description": "Schedule media details",
        "required": [
          "Frequency"
        ],
        "properties": {
          "MediaPath": {
            "type": "string",
            "description": "Gets or sets value of media path."
          },
          "Frequency": {
            "description": "Gets or sets value of run task frequency.",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceInactivityFrequency"
              }
            ],
            "x-enumType": "DeviceInactivityFrequency"
          },
          "WeeklyDetails": {
            "description": "Gets or sets value of weekly details.",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceInActivityScheduleWeeklyMedia"
              }
            ]
          },
          "PeriodicDetails": {
            "description": "Gets or sets value of periodic details.",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceInActivitySchedulePeriodicMedia"
              }
            ]
          }
        }
      },
      "DeviceInactivityFrequency": {
        "type": "string",
        "description": "Enum for frequency units in Device Inactivity",
        "x-enumNames": [
          "Always",
          "Weekly",
          "Periodically"
        ],
        "enum": [
          "Always",
          "Weekly",
          "Periodically"
        ],
        "x-enumType": "DeviceInactivityFrequency"
      },
      "DeviceInActivityScheduleWeeklyMedia": {
        "type": "object",
        "description": "Schedule media weekly details",
        "properties": {
          "MediaWeeklyFrequency": {
            "type": "string",
            "description": "Gets or sets value of media path."
          },
          "StartTime": {
            "type": "string",
            "description": "Gets or sets value of start time."
          },
          "EndTime": {
            "type": "string",
            "description": "Gets or sets value of end time."
          }
        }
      },
      "DeviceInActivitySchedulePeriodicMedia": {
        "type": "object",
        "description": "Schedule media periodic details",
        "required": [
          "MediaPeriodicFrequency"
        ],
        "properties": {
          "MediaPeriodicFrequency": {
            "type": "integer",
            "description": "Gets or sets value of media path.",
            "format": "int32"
          },
          "MediaPeriodicFrequencyUnit": {
            "type": "string",
            "description": "Gets or sets value of start time."
          },
          "StartTime": {
            "type": "string",
            "description": "Gets or sets value of start time in hh:mm a format."
          },
          "EndTime": {
            "type": "string",
            "description": "Gets or sets value of end time in hh:mm a format."
          },
          "StartDate": {
            "type": "string",
            "description": "Gets or sets value of start date in yyyy-mm-dd format."
          },
          "EndDate": {
            "type": "string",
            "description": "Gets or sets value of end date in yyyy-mm-dd format."
          }
        }
      },
      "DeviceInActivityWipeAppDetail": {
        "type": "object",
        "description": "Wipe app details",
        "properties": {
          "AppName": {
            "type": "string",
            "description": "Gets or sets value of app name."
          },
          "BundleIdentifier": {
            "type": "string",
            "description": "Gets or sets value of bundle identifier."
          }
        }
      },
      "AndroidClassicFactoryResetProtectionSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the factory reset protection configuration",
            "required": [
              "DisableFactoryResetProtection",
              "ConfiguredForAndroidManagementDevice"
            ],
            "properties": {
              "Associations": {
                "type": "array",
                "description": "Gets or sets collection of associations",
                "items": {
                  "$ref": "#/definitions/FactoryResetProtectionAssociation"
                }
              },
              "DisableFactoryResetProtection": {
                "type": "boolean",
                "description": "Gets or sets disable factory reset protection"
              },
              "ConfiguredForAndroidManagementDevice": {
                "type": "boolean",
                "description": "Get or sets value indicating whether payload is configured for Android Management device "
              }
            }
          }
        ]
      },
      "FactoryResetProtectionAssociation": {
        "type": "object",
        "description": "Defines the associations for factory reset protection configuration",
        "properties": {
          "GoogleAccountId": {
            "type": "string",
            "description": "Gets or sets the Google Account Id"
          },
          "AssociatedEmail": {
            "type": "string",
            "description": "Gets or set the associated email"
          }
        }
      },
      "AndroidCorporateFactoryResetProtectionSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicFactoryResetProtectionSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding FactoryResetProtectionSection to be displayed with\na device or group."
          }
        ]
      },
      "AndroidClassicFeatureControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Samsung devices.",
            "required": [
              "DisableCamera",
              "DisableQuickSettingsEdit",
              "DisableQuickSettingBatteryNotification",
              "DisableQuickSettingTimeNotification",
              "DisableAirplaneMode",
              "DisableMicrophone",
              "DisableFactoryReset",
              "PersistGps",
              "DisableScreenCapture",
              "DisableMockLocations",
              "DisableClipboard",
              "DisableUsbMediaPlayer",
              "DisableNfc",
              "DisableHomeKey",
              "DisableGoogleBackup",
              "DisableUsbDebugging",
              "DisableUsbotg",
              "DisableMassStorage",
              "DisableSdCard",
              "DisableKies",
              "DisableAndroidMarket",
              "DisableYoutube",
              "DisableBrowser",
              "DisableSettings",
              "DisableUnknownSources",
              "DisableBackgroundData",
              "DisableVoiceDialer",
              "DisableRemoveAgent",
              "DisableBluetooth",
              "RequireBtPassword",
              "DisableBtOutgoingCalls",
              "DisableBtDiscoverable",
              "RequireBtPasswordForDiscovery",
              "DisableBtLimitedDiscoverableMode",
              "DisableBtPairing",
              "DisableBtDataTransfer",
              "DisableBtDesktopConnectivity",
              "DisableWifi",
              "DisableWifiProfiles",
              "DisableWifiChanges",
              "DisableCellularData",
              "DisableWifiPromptForCredentials",
              "MinimumWifiSecurityLevel",
              "MinimumCertificateSecurityLevel",
              "DisableRoamingDataUsage",
              "DisableRoamingSyncing",
              "DisableRoamingWapPushProcessing",
              "DisableAllTethering",
              "DisableWifiTethering",
              "DisableBtTethering",
              "DisableUsbTethering",
              "DisableWiFiHotspot",
              "DisableWiFiHotspotChanges",
              "BlockOsUpgrade",
              "PreventUninstallApps",
              "DisableMultiWindow",
              "DisableMultiUser",
              "DisableIncomingSms",
              "DisableOutgoingSms",
              "DisableIncomingMms",
              "DisableOutgoingMms",
              "DisableAccountAddition",
              "PreventUnenrollment",
              "DisableSafeMode",
              "DisableDozeMode"
            ],
            "properties": {
              "DisableCamera": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Camera."
              },
              "DisableQuickSettingsEdit": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable changes to Device quick settings."
              },
              "DisableQuickSettingBatteryNotification": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable changes to Device battery settings."
              },
              "DisableQuickSettingTimeNotification": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable changes to Device DateTime settings."
              },
              "DisableAirplaneMode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Airplane Mode."
              },
              "DisableMicrophone": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Microphone."
              },
              "DisableFactoryReset": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Factory Reset."
              },
              "PersistGps": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to enforce GPS availability."
              },
              "DisableScreenCapture": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Screen Capture."
              },
              "DisableMockLocations": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Mock Locations ."
              },
              "DisableClipboard": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Clipboard."
              },
              "DisableUsbMediaPlayer": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable USB Media Player."
              },
              "DisableNfc": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable NFC."
              },
              "DisableHomeKey": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Home Key."
              },
              "DisableGoogleBackup": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Google Backup."
              },
              "DisableUsbDebugging": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable USB Debugging."
              },
              "DisableUsbotg": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable USB On-the-Go."
              },
              "DisableMassStorage": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable USB Mass Storage."
              },
              "DisableSdCard": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable SD Card Access."
              },
              "DisableKies": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Kies."
              },
              "DisableAndroidMarket": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Android Market."
              },
              "DisableYoutube": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable YouTube."
              },
              "DisableBrowser": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Android Browser."
              },
              "DisableSettings": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Access to Device Settings."
              },
              "DisableUnknownSources": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Non-Market App Installation."
              },
              "DisableBackgroundData": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Background Data."
              },
              "DisableVoiceDialer": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Voice Dialer."
              },
              "DisableRemoveAgent": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow removing MobiControl Agent."
              },
              "DisableBluetooth": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Bluetooth."
              },
              "RequireBtPassword": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to require Password to Enable BT."
              },
              "DisableBtOutgoingCalls": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Outgoing Calls via BT."
              },
              "DisableBtDiscoverable": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable BT Discoverable."
              },
              "RequireBtPasswordForDiscovery": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to require Password to Enable BT Discovery."
              },
              "DisableBtLimitedDiscoverableMode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable BT Limited Discoverable Mode."
              },
              "DisableBtPairing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Bluetooth Pairing."
              },
              "DisableBtDataTransfer": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Bluetooth Data Transfer."
              },
              "DisableBtDesktopConnectivity": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Desktop Connectivity via BT."
              },
              "DisableWifi": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Wi-Fi connections."
              },
              "DisableWifiProfiles": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Wi-Fi Profiles."
              },
              "DisableWifiChanges": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Wi-Fi Changes."
              },
              "DisableCellularData": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to limit Wi-Fi and/or cellular data."
              },
              "DisableWifiPromptForCredentials": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Prompt for Credentials."
              },
              "MinimumWifiSecurityLevel": {
                "description": "Gets or sets WIFI security level.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WirelessPolicySecurityLevel"
                  }
                ]
              },
              "MinimumCertificateSecurityLevel": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to use high certificate level."
              },
              "DisableRoamingDataUsage": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Data Usage on Roaming."
              },
              "DisableRoamingSyncing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Automatic Sync on Roaming."
              },
              "DisableRoamingWapPushProcessing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Push Messages on Roaming."
              },
              "DisableAllTethering": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable All Tethering."
              },
              "DisableWifiTethering": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Wi-Fi Tethering."
              },
              "DisableBtTethering": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Bluetooth Tethering."
              },
              "DisableUsbTethering": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable USB Tethering."
              },
              "DisableWiFiHotspot": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Wi-Fi Hotspot."
              },
              "DisableWiFiHotspotChanges": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Wi-Fi Hotspot Changes."
              },
              "BlockOsUpgrade": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable OS upgrade."
              },
              "PreventUninstallApps": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow uninstalling the apps from device."
              },
              "DisableMultiWindow": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow multi Window."
              },
              "DisableMultiUser": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow multi User."
              },
              "DisableIncomingSms": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable incoming sms messaging."
              },
              "DisableOutgoingSms": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable outgoing sms messaging."
              },
              "DisableIncomingMms": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable incoming mms messaging."
              },
              "DisableOutgoingMms": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable outgoing mms messaging."
              },
              "DisableAccountAddition": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to allow user to add new email account."
              },
              "PreventUnenrollment": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether user can un-enroll device from agent or self service portal (SSP)."
              },
              "DisableSafeMode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Safe Mode."
              },
              "DisableDozeMode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Doze Mode."
              }
            }
          }
        ]
      },
      "AndroidClassicFileEncryptionSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Stores encryption parameters for Android Samsung device",
            "required": [
              "InternalStorageEncryption",
              "ExternalStorageEncryption"
            ],
            "properties": {
              "InternalStorageEncryption": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the internal storage in encrypted."
              },
              "ExternalStorageEncryption": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the external storage in encrypted."
              }
            }
          }
        ]
      },
      "AndroidClassicHotspot": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Stores Hotspot configuration for Android Samsung device",
            "required": [
              "SecurityMode"
            ],
            "properties": {
              "SSID": {
                "type": "string",
                "description": "Gets or sets the SSID (Service Set Identifier) of wireless hotspot connection.\n            "
              },
              "SecurityMode": {
                "description": "Gets or sets security mode of wireless hotspot connection.\n            ",
                "allOf": [
                  {
                    "$ref": "#/definitions/HotspotSecurityMode"
                  }
                ]
              },
              "Password": {
                "type": "string",
                "description": "Gets or sets password of wireless hotspot connection.\n            "
              }
            }
          }
        ]
      },
      "HotspotSecurityMode": {
        "type": "string",
        "description": "Enumerates the different possible wireless security modes.",
        "x-enumNames": [
          "Open",
          "WPA",
          "WPA2"
        ],
        "enum": [
          "Open",
          "WPA",
          "WPA2"
        ],
        "x-enumType": "HotspotSecurityMode"
      },
      "AndroidClassicManagedGooglePlaySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Samsung devices.",
            "required": [
              "ApplicationUpdates",
              "ApplicationFeedback",
              "MaintenanceStartTime",
              "MaintenanceDuration",
              "MaintenanceWindowRequired"
            ],
            "properties": {
              "ApplicationUpdates": {
                "description": "Gets or sets the Auto Updates for Managed Google Play applications",
                "allOf": [
                  {
                    "$ref": "#/definitions/AutoUpdatePolicy"
                  }
                ]
              },
              "ApplicationFeedback": {
                "type": "boolean",
                "description": "Gets or sets the Application Feedback is enabled or disabled"
              },
              "MaintenanceStartTime": {
                "type": "integer",
                "description": "Gets or sets the Maintenance Window Start Time (from Device's 12AM time)",
                "format": "int64"
              },
              "MaintenanceDuration": {
                "type": "integer",
                "description": "Gets or sets the Maintenance Window Duration",
                "format": "int64"
              },
              "MaintenanceWindowRequired": {
                "type": "boolean",
                "description": "Gets or sets whether Maintenance Window should be used"
              }
            }
          }
        ]
      },
      "AutoUpdatePolicy": {
        "type": "string",
        "description": "This enum represents Managed Google Play Application Update Policies",
        "x-enumNames": [
          "User",
          "Always",
          "Never",
          "WifiOnly"
        ],
        "enum": [
          "User",
          "Always",
          "Never",
          "WifiOnly"
        ],
        "x-enumType": "AutoUpdatePolicy"
      },
      "AndroidWorkProfileManagedGooglePlaySection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicManagedGooglePlaySection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Samsung devices."
          }
        ]
      },
      "AndroidCorporateManagedGooglePlaySection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidWorkProfileManagedGooglePlaySection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Cope devices."
          }
        ]
      },
      "AndroidClassicSystemUpdatePolicySection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding SystemUpdatePolicySection to be displayed with\na device or group.",
            "required": [
              "SystemUpdatePolicy"
            ],
            "properties": {
              "SystemUpdatePolicy": {
                "description": "System update policy of the device",
                "allOf": [
                  {
                    "$ref": "#/definitions/SystemUpdatePolicy"
                  }
                ]
              },
              "StartTime": {
                "type": "string",
                "description": "Starting window time, if system update policy is Windowed"
              },
              "EndTime": {
                "type": "string",
                "description": "Ending window time, if system update policy is Windowed"
              },
              "UpdateFreezePeriods": {
                "type": "array",
                "description": "List of freeze periods where OTA updates are not permitted",
                "items": {
                  "$ref": "#/definitions/UpdateFreezePeriod"
                }
              }
            }
          }
        ]
      },
      "SystemUpdatePolicy": {
        "type": "string",
        "description": "Data contract wrapper for Soti.MobiControl.ManagementService.Contracts.Data.DeviceConfiguration.SystemUpdatePolicy",
        "x-enumNames": [
          "Automatic",
          "Windowed",
          "Postponed"
        ],
        "enum": [
          "Automatic",
          "Windowed",
          "Postponed"
        ],
        "x-enumType": "SystemUpdatePolicy"
      },
      "UpdateFreezePeriod": {
        "type": "object",
        "description": "Defines a freeze period where OTA updates are not permitted",
        "required": [
          "StartDate",
          "EndDate"
        ],
        "properties": {
          "StartDate": {
            "type": "string",
            "description": "Indicates the starting date of freeze period",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "Indicates the ending date of freeze period",
            "format": "date-time"
          }
        }
      },
      "AndroidCorporateSystemUpdatePolicySection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicSystemUpdatePolicySection"
          },
          {
            "type": "object",
            "description": "Store configuration regarding SystemUpdatePolicySection to be displayed with\na device or group."
          }
        ]
      },
      "AndroidClassicWirelessSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Data contract for an Android wi-fi configuration.",
            "properties": {
              "Connection": {
                "description": "Gets or sets the wireless connection in this configuration.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AndroidClassicWirelessConnection"
                  }
                ]
              },
              "UniqueCharacteristic": {
                "type": "string",
                "description": "Gets unique characteristic"
              }
            }
          }
        ]
      },
      "AndroidClassicWirelessConnection": {
        "type": "object",
        "description": "Represents a single wireless connection in an Android Plus wireless configuration.",
        "required": [
          "PrivateNetwork",
          "SecurityMode",
          "AutoJoin",
          "AutoConnect",
          "ProxyServerMode"
        ],
        "properties": {
          "SSID": {
            "type": "string",
            "description": "Gets or sets the SSID of the wireless network."
          },
          "PrivateNetwork": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the network\nbroadcasts its SSID."
          },
          "SecurityMode": {
            "description": "Gets or sets the security mode used by the network.",
            "allOf": [
              {
                "$ref": "#/definitions/WirelessSecurityMode"
              }
            ],
            "x-enumType": "WirelessSecurityMode"
          },
          "PrivateSharedKey": {
            "type": "string",
            "description": "Gets or sets private shared key for the network.  This should\nbe null if the network is using a PSK."
          },
          "EnterpriseSettings": {
            "description": "Gets or sets the advanced wireless security settings for one of\nthe enterprise security modes.",
            "allOf": [
              {
                "$ref": "#/definitions/AndroidClassicEnterpriseWirelessSettings"
              }
            ]
          },
          "AutoJoin": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to Automatically join the WiFi Connection\nor not"
          },
          "AutoConnect": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether to Automatically connect with the WiFi\nor not"
          },
          "ProxyHostname": {
            "type": "string",
            "description": "Gets or sets a value indicating Wifi proxy Hostname"
          },
          "ProxyPort": {
            "type": "integer",
            "description": "Gets or sets a value indicating Wifi proxy Port",
            "format": "int32"
          },
          "PacUrl": {
            "type": "string",
            "description": "Gets or sets a value indicating Wifi proxy Pac Url"
          },
          "ProxyServerMode": {
            "description": "Gets or sets the Wifi Proxy Mode",
            "allOf": [
              {
                "$ref": "#/definitions/ProxyServerMode"
              }
            ],
            "x-enumType": "ProxyServerMode"
          },
          "ProxyExceptions": {
            "type": "string",
            "description": "Gets or sets the Wifi Proxy Exceptions"
          }
        }
      },
      "AndroidClassicEnterpriseWirelessSettings": {
        "type": "object",
        "description": "Data contract for Enterprise wireless authentication settings.",
        "required": [
          "Protocols",
          "UserNameFormat"
        ],
        "properties": {
          "Protocols": {
            "description": "Gets or sets the collection of supported authentication protocols.",
            "allOf": [
              {
                "$ref": "#/definitions/WirelessAuthenticationProtocols"
              }
            ],
            "x-enumType": "WirelessAuthenticationProtocols"
          },
          "UserNameFormat": {
            "description": "Gets or sets the User Name Format used by connection.",
            "allOf": [
              {
                "$ref": "#/definitions/UserNameFormat"
              }
            ],
            "x-enumType": "UserNameFormat"
          },
          "InnerIdentityMode": {
            "description": "Gets or sets the inner identity mode.  This value is null if the TTLS protocol is unavailable.",
            "allOf": [
              {
                "$ref": "#/definitions/InnerIdentityMode"
              }
            ],
            "x-enumType": "InnerIdentityMode"
          },
          "UserName": {
            "type": "string",
            "description": "Gets or sets the user name for the connection."
          },
          "Password": {
            "type": "string",
            "description": "Gets or sets the password for the connection.  This can be null."
          },
          "IdentityCertificateRetrievalMethod": {
            "description": "Gets or sets retrieval method for identity certificate",
            "allOf": [
              {
                "$ref": "#/definitions/CertificateRetrievalMethod"
              }
            ],
            "x-enumType": "CertificateRetrievalMethod"
          },
          "RootCertificateRefId": {
            "type": "string",
            "description": "Gets or sets the ref id of the CA certificate."
          },
          "IdentityCertificateRefId": {
            "type": "string",
            "description": "Gets or sets the ref id of the identity certificate."
          },
          "OuterIdentity": {
            "type": "string",
            "description": "Gets or sets the device's outer identity (for TTLS, PEAP, and EAP-FAST)."
          },
          "Domain": {
            "type": "string",
            "description": "Gets or sets the Domain suffix."
          }
        }
      },
      "AndroidWorkProfileWirelessSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicWirelessSection"
          },
          {
            "type": "object",
            "description": "Data contract for an Android wi-fi configuration."
          }
        ]
      },
      "AndroidCorporateWirelessSection": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidClassicWirelessSection"
          },
          {
            "type": "object",
            "description": "Data contract for an Android wi-fi configuration."
          }
        ]
      },
      "AndroidCorporateAppRunControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Stores the configuration settings for device application run control.",
            "required": [
              "DeviceAppControlMode",
              "WorkProfileAppControlMode"
            ],
            "properties": {
              "DeviceProfiles": {
                "type": "array",
                "description": "Gets or sets collection of Device side application control profiles",
                "items": {
                  "$ref": "#/definitions/AppRunControlProfile"
                }
              },
              "WorkProfileProfiles": {
                "type": "array",
                "description": "Gets or sets collection of Profile side application control profiles",
                "items": {
                  "$ref": "#/definitions/AppRunControlProfile"
                }
              },
              "DeviceAppControlMode": {
                "description": "Gets or sets a mode of Device side application control run policy ",
                "allOf": [
                  {
                    "$ref": "#/definitions/AppRunControlPolicyMode"
                  }
                ]
              },
              "WorkProfileAppControlMode": {
                "description": "Gets or sets a mode of Profile side application control run policy",
                "allOf": [
                  {
                    "$ref": "#/definitions/AppRunControlPolicyMode"
                  }
                ]
              }
            }
          }
        ]
      },
      "AndroidCorporateFeatureControlSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Defines the configurable device feature restrictions for Android Enterprise Profile Owner (COPE) devices.",
            "required": [
              "DisableTetheringManagement",
              "DisableBluetoothManagement",
              "WifiManagement",
              "DisableVpnManagement",
              "DisableNetworkSettingsReset",
              "MinimumWifiSecurityLevel",
              "DataRoamingState",
              "BluetoothState",
              "WifiState",
              "DisableKeyguardFeaturesAll",
              "DisableFingerprintAuthentication",
              "DisableCreateWindows",
              "DisablePersonalAccountCreation",
              "DisableWorkAccountCreation",
              "DisableDozeMode",
              "BlockConnectionsWithoutVPN",
              "DisableKeyguardSecureNotifications",
              "DisableVerifyApps",
              "PeriodicAttestationFrequency",
              "DisableOutgoingCalls",
              "DisableFirstUseHints",
              "LocationAccuracy",
              "DisableDateTimeConfig",
              "DisableScreenTimeout",
              "DisableBrightnessConfigurationManagement",
              "DisableLocationSharing",
              "DisableCamera",
              "DisableCameraOnPersonal",
              "DisableScreenCapture",
              "DisableScreenCaptureOnPersonal",
              "DisableFactoryReset",
              "DisableSafeBoot",
              "DisableKeyguardTrustAgents",
              "DisableSms",
              "StayAwakeWhileCharging",
              "DisablePrinting",
              "DisableKeyguardCamera",
              "DisableCopyPaste",
              "RedactNotifications",
              "DisableManagedAppUninstallation",
              "DisableThirdPartyInputMethods",
              "DisableCrossProfileCallerId",
              "DisableInstallationFromUnknownSources",
              "DisableInstallationFromUnknownSourcesPersonal",
              "AllowCrossProfileSharing",
              "DisableOutgoingNfc",
              "DisableUsbDebugging",
              "DisableMassStorage",
              "DisableBluetoothContactSharing",
              "EnableBackupServices"
            ],
            "properties": {
              "DisableTetheringManagement": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Tethering Management"
              },
              "DisableBluetoothManagement": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Bluetooth Management"
              },
              "WifiManagement": {
                "description": "Gets or sets wifi management level",
                "allOf": [
                  {
                    "$ref": "#/definitions/WifiManagement"
                  }
                ]
              },
              "DisableVpnManagement": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable VPN Management"
              },
              "DisableNetworkSettingsReset": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Network Settings Reset"
              },
              "MinimumWifiSecurityLevel": {
                "description": "Gets or sets WIFI security level.",
                "allOf": [
                  {
                    "$ref": "#/definitions/WirelessPolicySecurityLevel"
                  }
                ]
              },
              "DataRoamingState": {
                "description": "Gets or sets a value indicating whether to disable data roaming.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TernaryFeatureState"
                  }
                ]
              },
              "BluetoothState": {
                "description": "Gets or sets a value indicating whether to disable bluetooth.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TernaryFeatureState"
                  }
                ]
              },
              "WifiState": {
                "description": "Gets or sets a value indicating whether to disable wifi.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TernaryFeatureState"
                  }
                ]
              },
              "ShortRestrictionMessage": {
                "type": "string",
                "description": "Gets or sets the short support message which gets displayed to the user in settings screens where funtionality has been disabled by the admin."
              },
              "LongRestrictionMessage": {
                "type": "string",
                "description": "Gets or sets the long support message which gets displayed to the user in the device administators settings screen."
              },
              "DisableKeyguardFeaturesAll": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable All keyguard features"
              },
              "DisableFingerprintAuthentication": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Fingerprint Authentication"
              },
              "DisableCreateWindows": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable window creation."
              },
              "DisablePersonalAccountCreation": {
                "description": "Gets or sets a value indicating whether to disable personal account creation.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AccountCreationRestriction"
                  }
                ]
              },
              "DisableWorkAccountCreation": {
                "description": "Gets or sets a value indicating whether to disable work account creation.",
                "allOf": [
                  {
                    "$ref": "#/definitions/AccountCreationRestriction"
                  }
                ]
              },
              "DisableDozeMode": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Doze Mode."
              },
              "EnableAlwaysOnVpn": {
                "type": "string",
                "description": "Gets or sets a value indicating whether to Enable Always On VPN"
              },
              "BlockConnectionsWithoutVPN": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Block Connections Without VPN"
              },
              "DisableKeyguardSecureNotifications": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable Secure Notifications keyguard"
              },
              "DisableVerifyApps": {
                "type": "boolean",
                "description": "Gets or sets DisableVerifyApps."
              },
              "PeriodicAttestationFrequency": {
                "description": "Gets or sets attestation frequency.",
                "allOf": [
                  {
                    "$ref": "#/definitions/PeriodicAttestationFrequency"
                  }
                ]
              },
              "DisableOutgoingCalls": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Outgoing Calls"
              },
              "DisableFirstUseHints": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable hints in apps."
              },
              "LocationAccuracy": {
                "description": "Gets or sets a value indicating Location Accuracy",
                "allOf": [
                  {
                    "$ref": "#/definitions/LocationAccuracy"
                  }
                ]
              },
              "DisableDateTimeConfig": {
                "type": "boolean",
                "description": "Gets or sets value indicating whether to allow changing the date and time settings on devices."
              },
              "DisableScreenTimeout": {
                "type": "boolean",
                "description": "Gets or sets value indicating whether to disable screen timeout"
              },
              "DisableBrightnessConfigurationManagement": {
                "type": "boolean",
                "description": "Gets or sets value indicating whether to disable Brightness Configuration Management"
              },
              "DisableLocationSharing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Location Sharing"
              },
              "DisableCamera": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Camera."
              },
              "DisableCameraOnPersonal": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Camera on Personal side of COPE."
              },
              "DisableScreenCapture": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Screen Capture."
              },
              "DisableScreenCaptureOnPersonal": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Screen Capture on Personal side of COPE."
              },
              "DisableFactoryReset": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Factory Reset."
              },
              "DisableSafeBoot": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether an end-user shall be prevented to perform device safe boot on Managed Devices."
              },
              "DisableKeyguardTrustAgents": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable Trust Agents keyguard"
              },
              "DisableSms": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable SMS"
              },
              "StayAwakeWhileCharging": {
                "description": "Gets or sets a value indicating whether a device shall stay awake while charging on Managed Devices.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TernaryFeatureState"
                  }
                ]
              },
              "DisablePrinting": {
                "type": "boolean",
                "description": "Gets or sets value indicating whether to disable printing"
              },
              "DisableKeyguardCamera": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable camera keyguard"
              },
              "DisableCopyPaste": {
                "type": "boolean",
                "description": "Gets or sets copy paste restrictions."
              },
              "RedactNotifications": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to redact notifications coming from Android for Work applications."
              },
              "DisableManagedAppUninstallation": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable Managed Application uninstallation."
              },
              "DisableThirdPartyInputMethods": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether 3rd party input methods should be disabled"
              },
              "DisableCrossProfileCallerId": {
                "type": "boolean",
                "description": "Gets or sets a value indicating Disable Caller ID Information for Work Contacts should be disabled"
              },
              "DisableInstallationFromUnknownSources": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether an end-user shall be prevented from Installing Applications From Unknown Sources on Managed Devices."
              },
              "DisableInstallationFromUnknownSourcesPersonal": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether an end-user shall be prevented from Installing Applications From Unknown Sources on Personal."
              },
              "AllowCrossProfileSharing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether data can be shared between work and personal profiles"
              },
              "DisableOutgoingNfc": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable NFC Sharing"
              },
              "DisableUsbDebugging": {
                "description": "Gets or sets a value indicating whether to disable USB Debugging.",
                "allOf": [
                  {
                    "$ref": "#/definitions/TernaryFeatureState"
                  }
                ]
              },
              "DisableMassStorage": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to disable USB Mass Storage."
              },
              "DisableBluetoothContactSharing": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether to Disable Bluetooth Contact Sharing"
              },
              "EnableBackupServices": {
                "type": "boolean",
                "description": "Gets or sets the backup services by the admin."
              }
            }
          }
        ]
      },
      "AndroidCorporatePersonalPlayStoreSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Stores the configuration settings for personal app playstore on COPE device.",
            "required": [
              "AppControlMode"
            ],
            "properties": {
              "AppControlMode": {
                "description": "Gets or sets collection of Device side application control profiles",
                "allOf": [
                  {
                    "$ref": "#/definitions/AppRunControlPolicyMode"
                  }
                ]
              },
              "AppProfiles": {
                "type": "array",
                "description": "Gets or sets collection of Profile side application control profiles",
                "items": {
                  "$ref": "#/definitions/AppRunControlProfile"
                }
              }
            }
          }
        ]
      },
      "AndroidCorporateWorkProfileComplianceSection": {
        "allOf": [
          {
            "$ref": "#/definitions/ProfileDeviceConfigurationSection"
          },
          {
            "type": "object",
            "description": "Stores the configuration settings for work profile compliance.",
            "required": [
              "MaximumTimeOff"
            ],
            "properties": {
              "MaximumTimeOff": {
                "type": "integer",
                "description": "Gets or sets the maximum time (in seconds) work profile is allowed to be turned off",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ProfileLogEntry": {
        "type": "object",
        "description": "Contains information for a package log entry",
        "required": [
          "Timestamp",
          "EventSeverity",
          "EventId",
          "EventOriginator"
        ],
        "properties": {
          "Timestamp": {
            "type": "string",
            "description": "Log entry timestamp",
            "format": "date-time"
          },
          "EventSeverity": {
            "description": "Log entry severity",
            "allOf": [
              {
                "$ref": "#/definitions/EventSeverity"
              }
            ],
            "x-enumType": "EventSeverity"
          },
          "Message": {
            "type": "string",
            "description": "Log entry message"
          },
          "SourceName": {
            "type": "string",
            "description": "Log entry source name"
          },
          "EventId": {
            "type": "integer",
            "description": "Log entry event identifier",
            "format": "int32"
          },
          "EventCode": {
            "type": "string",
            "description": "Log entry event identifier"
          },
          "EventOriginator": {
            "description": "Log entry source type",
            "allOf": [
              {
                "$ref": "#/definitions/EventOriginator"
              }
            ],
            "x-enumType": "EventOriginator"
          }
        }
      },
      "DeviceAssignmentSummary": {
        "type": "object",
        "description": "Device Status Summary",
        "properties": {
          "ProfileReferenceId": {
            "type": "string",
            "description": "Profile Reference Id"
          },
          "DeviceAssignmentStatusCounts": {
            "type": "array",
            "description": "Device Assignment Status Counts",
            "items": {
              "$ref": "#/definitions/DeviceAssignmentStatusCount"
            }
          }
        }
      },
      "DeviceAssignmentStatusCount": {
        "type": "object",
        "description": "Device Assignment Status Count",
        "required": [
          "DeviceProfileStatus",
          "DeviceCount"
        ],
        "properties": {
          "DeviceProfileStatus": {
            "description": "Device Profile Status",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceProfileStatus"
              }
            ],
            "x-enumType": "DeviceProfileStatus"
          },
          "DeviceCount": {
            "type": "integer",
            "description": "Device Count",
            "format": "int32"
          }
        }
      },
      "ProfileVersionInfo": {
        "type": "object",
        "description": "Profile Version Info",
        "required": [
          "VersionNumber",
          "ProfileVersionStatus",
          "DeviceFamily",
          "DeviceFamilyQualification",
          "PayloadsCount",
          "PackagesCount",
          "CreatedByDate"
        ],
        "properties": {
          "VersionNumber": {
            "type": "integer",
            "description": "Version Number",
            "format": "int32"
          },
          "ProfileVersionStatus": {
            "description": "Profile Version Status",
            "allOf": [
              {
                "$ref": "#/definitions/ProfileVersionStatus"
              }
            ],
            "x-enumType": "ProfileVersionStatus"
          },
          "Name": {
            "type": "string",
            "description": "Name"
          },
          "Description": {
            "type": "string",
            "description": "Description"
          },
          "DeviceFamily": {
            "description": "Device Family",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamily2"
              }
            ],
            "x-enumType": "DeviceFamily"
          },
          "DeviceFamilyQualification": {
            "description": "Device Family Qualification",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamilyQualification"
              }
            ],
            "x-enumType": "DeviceFamilyQualification"
          },
          "IsInstalledSilently": {
            "type": "boolean",
            "description": "Is Installed Silently"
          },
          "PayloadsCount": {
            "type": "integer",
            "description": "Payloads Count",
            "format": "int32"
          },
          "PackagesCount": {
            "type": "integer",
            "description": "Packages Count",
            "format": "int32"
          },
          "CreatedByDate": {
            "type": "string",
            "description": "Created By Date",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "description": "Created By"
          },
          "ModifiedByDate": {
            "type": "string",
            "description": "Modified By Date",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "description": "Modified By"
          },
          "AssignedByDate": {
            "type": "string",
            "description": "Assigned By Date",
            "format": "date-time"
          },
          "AssignedBy": {
            "type": "string",
            "description": "Assigned By"
          }
        }
      },
      "ProfileName": {
        "type": "object",
        "description": "Represents either the current name of a profile or the value to update the name\nof a profile with",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name for the profile",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          }
        }
      },
      "ProfileDescription": {
        "type": "object",
        "description": "Parameter used when updating or getting the profile description",
        "properties": {
          "Description": {
            "type": "string",
            "description": "The profile's description or the new description to use"
          }
        }
      },
      "ProfileDigest": {
        "type": "object",
        "description": "Profile information that should be available to device",
        "required": [
          "Family",
          "IsMandatory",
          "VersionNumber",
          "AssignmentDate",
          "LastModified"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Gets or sets Profile reference Id"
          },
          "Family": {
            "description": "Gets or sets device family.",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamily"
              }
            ],
            "x-enumType": "DeviceFamily"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets Profile name"
          },
          "IsMandatory": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this profile is mandatory"
          },
          "VersionNumber": {
            "type": "integer",
            "description": "Gets or sets Profile version number",
            "format": "int32"
          },
          "AssignmentDate": {
            "type": "string",
            "description": "Gets or sets Assignment Date",
            "format": "date-time"
          },
          "InheritedFrom": {
            "type": "string",
            "description": "Gets or sets a value indicationg where the profile was inherited from"
          },
          "LastModified": {
            "type": "string",
            "description": "Gets or sets a value when profile was last modified",
            "format": "date-time"
          }
        }
      },
      "DeviceFamily4": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NotSpecified",
          "All",
          "WindowsCE",
          "iOS",
          "WindowsDesktop",
          "AndroidPlus",
          "Scanner",
          "WindowsPhone",
          "Blackberry",
          "Printer",
          "WindowsRuntime",
          "Linux",
          "Chrome"
        ],
        "enum": [
          "NotSpecified",
          "All",
          "WindowsCE",
          "iOS",
          "WindowsDesktop",
          "AndroidPlus",
          "Scanner",
          "WindowsPhone",
          "Blackberry",
          "Printer",
          "WindowsRuntime",
          "Linux",
          "Chrome"
        ],
        "x-enumType": "DeviceFamily"
      },
      "ProfileInfo": {
        "type": "object",
        "description": "Profile Info.",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "Profile name",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Description": {
            "type": "string",
            "description": "Profile description"
          }
        }
      },
      "ExportProfilesParameters": {
        "type": "object",
        "description": "ExportProfiles Summary",
        "required": [
          "ProfileReferenceIds"
        ],
        "properties": {
          "Password": {
            "type": "string",
            "description": "Password for ExportProfiles"
          },
          "ProfileReferenceIds": {
            "type": "array",
            "description": "ProfileReferenceIds for ExportProfiles",
            "items": {
              "type": "string"
            },
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          }
        }
      },
      "Servers": {
        "type": "object",
        "description": "Holds both lists of Deployment and Management Servers",
        "properties": {
          "ProductVersion": {
            "type": "string",
            "description": "MobiControl Version"
          },
          "ProductVersionBuild": {
            "type": "string",
            "description": "MobiControl Version build number"
          },
          "DeploymentServers": {
            "type": "array",
            "description": "List of Deployment servers used by client",
            "items": {
              "$ref": "#/definitions/DeploymentServer"
            }
          },
          "ManagementServers": {
            "type": "array",
            "description": "List of Management servers used by client",
            "items": {
              "$ref": "#/definitions/ManagementServer"
            }
          },
          "SOTIAssistServer": {
            "description": "HelpDesk Server - will be null if not available",
            "allOf": [
              {
                "$ref": "#/definitions/SOTIAssistServer"
              }
            ]
          },
          "SystemCertificates": {
            "type": "array",
            "description": "System certificates used by MobiControl",
            "items": {
              "$ref": "#/definitions/Certificate"
            }
          }
        }
      },
      "DeploymentServer": {
        "allOf": [
          {
            "$ref": "#/definitions/Server"
          },
          {
            "type": "object",
            "description": "Represents a base class for Management/Deployment Servers",
            "required": [
              "IsConnected",
              "PulseTimeout",
              "RuleReload",
              "ScheduleInterval",
              "MinThreads",
              "MaxThreads",
              "MaxBurstThreads",
              "PulseWaitInterval"
            ],
            "properties": {
              "IsConnected": {
                "type": "boolean",
                "description": "Value indicating whether the management service is\ncurrently connected to this server."
              },
              "PrimaryManagementAddress": {
                "type": "string",
                "description": "The server's management address, including port."
              },
              "SecondaryManagementAddress": {
                "type": "string",
                "description": "The server's secondary management address."
              },
              "PrimaryAgentAddress": {
                "type": "string",
                "description": "The server's primary agent address, including port."
              },
              "SecondaryAgentAddress": {
                "type": "string",
                "description": "The server's secondary agent address, including port."
              },
              "PulseTimeout": {
                "type": "integer",
                "description": "The number of seconds in between test messages from this server",
                "format": "int32"
              },
              "RuleReload": {
                "type": "integer",
                "description": "The number of minutes in between rule changes",
                "format": "int32"
              },
              "ScheduleInterval": {
                "type": "integer",
                "description": "The number of minutes in between schedule changes",
                "format": "int32"
              },
              "MinThreads": {
                "type": "integer",
                "description": "The minimum number of threads on the server.",
                "format": "int32"
              },
              "MaxThreads": {
                "type": "integer",
                "description": "The maximum number of threads supported by the server.",
                "format": "int32"
              },
              "MaxBurstThreads": {
                "type": "integer",
                "description": "The maximum number of service threads based on Server Configurations. \nThis value is 256 times the amount of processor cores available on the Deployment Server.",
                "format": "int32"
              },
              "PulseWaitInterval": {
                "type": "integer",
                "description": "The number of seconds in between waiting for reply test message.",
                "format": "int32"
              },
              "ConnectedDeviceCount": {
                "type": "integer",
                "description": "Gets or sets the number of connected devices.",
                "format": "int32"
              },
              "ConnectedManagerCount": {
                "type": "integer",
                "description": "The number of connected managers.",
                "format": "int32"
              },
              "MsgQueueLength": {
                "type": "integer",
                "description": "The message queue length.",
                "format": "int32"
              },
              "CurrentThreadCount": {
                "type": "integer",
                "description": "The current number of worker threads.",
                "format": "int32"
              },
              "DeviceManagementAddress": {
                "type": "string",
                "description": "The Device management address."
              },
              "Certificate": {
                "description": "The certificate used by the server.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Certificate"
                  }
                ]
              }
            }
          }
        ]
      },
      "Certificate": {
        "type": "object",
        "required": [
          "NotBeforeDate",
          "NotAfterDate"
        ],
        "properties": {
          "UsageType": {
            "$ref": "#/definitions/SystemCertificateType",
            "x-enumType": "SystemCertificateType"
          },
          "SubjectName": {
            "type": "string"
          },
          "CommonName": {
            "type": "string"
          },
          "IssuerName": {
            "type": "string"
          },
          "NotBeforeDate": {
            "type": "string",
            "format": "date-time"
          },
          "NotAfterDate": {
            "type": "string",
            "format": "date-time"
          },
          "Thumbprint": {
            "type": "string"
          }
        }
      },
      "SystemCertificateType": {
        "type": "string",
        "description": "System Certificate Types",
        "x-enumNames": [
          "None",
          "MobiControlRoot",
          "MobiControlServer",
          "MobiControlManager",
          "MobiControlIntermediate",
          "MobiControlProfileSigning",
          "MobiControlCloudLink",
          "MobiControlPrinterAdministrationClient",
          "MobiControlOAuthAuthorizationServer",
          "MobiControlOAuthResourceServer",
          "MobiControlIdp",
          "MobiControlIdpClient",
          "MobiControlSearchService",
          "MobiControlXtHub",
          "SignalClient",
          "SignalServer",
          "SearchClient",
          "MobiControlAPNS",
          "ManagementServerDSE",
          "EnterpriseRoot",
          "EnterpriseServer",
          "EnterpriseManager",
          "EnterpriseProfileSigning",
          "EnterprisePrinterAdministrationClient",
          "TrustedRoot",
          "TrustedServer",
          "TrustedManager"
        ],
        "enum": [
          "None",
          "MobiControlRoot",
          "MobiControlServer",
          "MobiControlManager",
          "MobiControlIntermediate",
          "MobiControlProfileSigning",
          "MobiControlCloudLink",
          "MobiControlPrinterAdministrationClient",
          "MobiControlOAuthAuthorizationServer",
          "MobiControlOAuthResourceServer",
          "MobiControlIdp",
          "MobiControlIdpClient",
          "MobiControlSearchService",
          "MobiControlXtHub",
          "SignalClient",
          "SignalServer",
          "SearchClient",
          "MobiControlAPNS",
          "ManagementServerDSE",
          "EnterpriseRoot",
          "EnterpriseServer",
          "EnterpriseManager",
          "EnterpriseProfileSigning",
          "EnterprisePrinterAdministrationClient",
          "TrustedRoot",
          "TrustedServer",
          "TrustedManager"
        ],
        "x-enumType": "SystemCertificateType"
      },
      "Server": {
        "type": "object",
        "description": "Base Server class for Rest API",
        "required": [
          "Status"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "description": "Gets or sets the reference identifier."
          },
          "Name": {
            "type": "string",
            "description": "The server's name."
          },
          "Status": {
            "description": "The server's current status.",
            "allOf": [
              {
                "$ref": "#/definitions/ServerStatus"
              }
            ],
            "x-enumType": "ServerStatus"
          }
        }
      },
      "ServerStatus": {
        "type": "string",
        "description": "Status of the server",
        "x-enumNames": [
          "Stopped",
          "Started",
          "Disabled",
          "Unlicensed",
          "Deleted",
          "StartedButNotRegistered",
          "Offline",
          "Unknown"
        ],
        "enum": [
          "Stopped",
          "Started",
          "Disabled",
          "Unlicensed",
          "Deleted",
          "StartedButNotRegistered",
          "Offline",
          "Unknown"
        ],
        "x-enumType": "ServerStatus"
      },
      "ManagementServer": {
        "allOf": [
          {
            "$ref": "#/definitions/Server"
          },
          {
            "type": "object",
            "description": "Management Server REST Api model",
            "required": [
              "TotalConsoleUsers"
            ],
            "properties": {
              "Fqdn": {
                "type": "string",
                "description": "The server's fully qualified domain name."
              },
              "PortNumber": {
                "type": "integer",
                "description": "The server's port number.",
                "format": "int32"
              },
              "Description": {
                "type": "string",
                "description": "The server description."
              },
              "StatusTime": {
                "type": "string",
                "description": "The server status time.",
                "format": "date-time"
              },
              "MacAddress": {
                "type": "string",
                "description": "The server's MAC address."
              },
              "SOTIAssistServerURLOverride": {
                "type": "string",
                "description": "Override for default Assist URL"
              },
              "TotalConsoleUsers": {
                "type": "integer",
                "description": "The total number of console users on the server.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "SOTIAssistServer": {
        "allOf": [
          {
            "$ref": "#/definitions/Server"
          },
          {
            "type": "object",
            "description": "SOTIAssist Server",
            "properties": {
              "ServerUrl": {
                "type": "string",
                "description": "HelpDesk Server Url"
              },
              "RemoteControlUri": {
                "type": "string",
                "description": "Remote Control Uri"
              }
            }
          }
        ]
      },
      "SOTICentralServer": {
        "allOf": [
          {
            "$ref": "#/definitions/Server"
          },
          {
            "type": "object",
            "description": "SOTICentral Server",
            "properties": {
              "ServerUrl": {
                "type": "string",
                "description": "SOTI Central Server Url"
              }
            }
          }
        ]
      },
      "SOTIDiscussionForumServer": {
        "allOf": [
          {
            "$ref": "#/definitions/Server"
          },
          {
            "type": "object",
            "description": "SOTIDiscussionForum Server",
            "properties": {
              "ServerUrl": {
                "type": "string",
                "description": "SOTI Discussion Forum Server Url"
              }
            }
          }
        ]
      },
      "SOTIMarketPlaceServer": {
        "allOf": [
          {
            "$ref": "#/definitions/Server"
          },
          {
            "type": "object",
            "description": "SOTIMarketPlace Server",
            "properties": {
              "ServerUrl": {
                "type": "string",
                "description": "SOTI Market Place Server Url"
              }
            }
          }
        ]
      },
      "SystemLogLevel": {
        "type": "object",
        "description": "Contains information for system Log levels",
        "required": [
          "ManagementService",
          "DeploymentServer",
          "Database",
          "AccessControl",
          "Client",
          "WebConsole"
        ],
        "properties": {
          "ManagementService": {
            "description": "Gets or sets the current level of the management service debug stream.",
            "allOf": [
              {
                "$ref": "#/definitions/TraceLevel"
              }
            ],
            "x-enumType": "TraceLevel"
          },
          "DeploymentServer": {
            "description": "Gets or sets the current level of the deployment server debug stream.",
            "allOf": [
              {
                "$ref": "#/definitions/TraceLevel"
              }
            ],
            "x-enumType": "TraceLevel"
          },
          "Database": {
            "description": "Gets or sets the current level of the database debug stream.",
            "allOf": [
              {
                "$ref": "#/definitions/TraceLevel"
              }
            ],
            "x-enumType": "TraceLevel"
          },
          "AccessControl": {
            "description": "Gets or sets the current level of the access control debug stream.",
            "allOf": [
              {
                "$ref": "#/definitions/TraceLevel"
              }
            ],
            "x-enumType": "TraceLevel"
          },
          "Client": {
            "description": "Gets or sets the current level of the web request debug stream.",
            "allOf": [
              {
                "$ref": "#/definitions/TraceLevel"
              }
            ],
            "x-enumType": "TraceLevel"
          },
          "WebConsole": {
            "description": "Gets or sets the current level of the web console debug stream.",
            "allOf": [
              {
                "$ref": "#/definitions/TraceLevel"
              }
            ],
            "x-enumType": "TraceLevel"
          }
        }
      },
      "TraceLevel": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Off",
          "Error",
          "Warning",
          "Info",
          "Verbose"
        ],
        "enum": [
          "Off",
          "Error",
          "Warning",
          "Info",
          "Verbose"
        ],
        "x-enumType": "TraceLevel"
      },
      "WindowsModernDeviceUpdatesSummary": {
        "type": "object",
        "required": [
          "RequireApproval"
        ],
        "properties": {
          "UpdateExternalId": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          },
          "PublishDate": {
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "$ref": "#/definitions/WindowsModernUpdateType",
            "x-enumType": "WindowsModernUpdateType"
          },
          "Severity": {
            "$ref": "#/definitions/WindowsModernUpdateSeverity",
            "x-enumType": "WindowsModernUpdateSeverity"
          },
          "UpdateClassification": {
            "$ref": "#/definitions/WindowsModernUpdateClassification"
          },
          "KbArticleNumber": {
            "type": "integer",
            "format": "int32"
          },
          "MoreInfoUrl": {
            "type": "string"
          },
          "RequireApproval": {
            "type": "boolean"
          },
          "UpdateStatus": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DeviceWindowsUpdateStatus"
            },
            "x-enumType": "DeviceWindowsUpdateStatus"
          },
          "ApprovedBy": {
            "type": "string"
          },
          "ApproverId": {
            "type": "integer",
            "format": "int32"
          },
          "ApprovedDate": {
            "type": "string",
            "format": "date-time"
          },
          "InstalledDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "WindowsModernUpdateType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "DetectOid",
          "Classification",
          "Product",
          "Driver",
          "Software"
        ],
        "enum": [
          "Unknown",
          "DetectOid",
          "Classification",
          "Product",
          "Driver",
          "Software"
        ],
        "x-enumType": "WindowsModernUpdateType"
      },
      "WindowsModernUpdateSeverity": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Low",
          "Moderate",
          "Important",
          "Critical"
        ],
        "enum": [
          "None",
          "Low",
          "Moderate",
          "Important",
          "Critical"
        ],
        "x-enumType": "WindowsModernUpdateSeverity"
      },
      "WindowsModernUpdateClassification": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string"
          },
          "ClassificationExternalId": {
            "type": "string"
          }
        }
      },
      "DeviceWindowsUpdateStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Approved",
          "Installable",
          "Failed",
          "PendingReboot",
          "Installed",
          "PendingApproval"
        ],
        "enum": [
          "Unknown",
          "Approved",
          "Installable",
          "Failed",
          "PendingReboot",
          "Installed",
          "PendingApproval"
        ],
        "x-enumType": "DeviceWindowsUpdateStatus"
      },
      "WindowsUpdateApproveRequest": {
        "type": "object",
        "properties": {
          "ApproveUpdateGuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RuleInfo": {
        "type": "object",
        "description": "Enrollment Role that can be set from global setting",
        "required": [
          "RuleId",
          "DeviceFamily",
          "Default"
        ],
        "properties": {
          "RuleId": {
            "type": "string",
            "description": "Rule Id",
            "format": "guid"
          },
          "Name": {
            "type": "string",
            "description": "Rule Name "
          },
          "DeviceFamily": {
            "description": "Rule Type",
            "allOf": [
              {
                "$ref": "#/definitions/DeviceFamily2"
              }
            ],
            "x-enumType": "DeviceFamily"
          },
          "Default": {
            "type": "boolean",
            "description": "Get or set if this rule is the default rule"
          }
        }
      },
      "DefaultRuleSetting": {
        "type": "object",
        "description": "Default Rule Setting",
        "properties": {
          "EnrollmentUrl": {
            "type": "string",
            "description": "Enrollment Url"
          },
          "LinuxShellCommand": {
            "type": "string",
            "description": "Linux Shell Command string"
          }
        }
      },
      "AgentInfo": {
        "type": "object",
        "required": [
          "AgentState",
          "ModelId"
        ],
        "properties": {
          "Manufacturer": {
            "type": "string"
          },
          "AppId": {
            "type": "string"
          },
          "Model": {
            "type": "string"
          },
          "InstalledVersion": {
            "type": "string"
          },
          "AvailableVersion": {
            "type": "string"
          },
          "PlatformCertificate": {
            "type": "string"
          },
          "AgentState": {
            "$ref": "#/definitions/AgentState",
            "x-enumType": "AgentState"
          },
          "FileUrl": {
            "type": "string"
          },
          "ModelId": {
            "type": "integer",
            "format": "int32"
          },
          "AgentVersion": {
            "type": "string"
          }
        }
      },
      "AgentState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NotInstalled",
          "UpdateAvailable",
          "PendingCompatibilityUpdate",
          "Latest",
          "InProgress"
        ],
        "enum": [
          "NotInstalled",
          "UpdateAvailable",
          "PendingCompatibilityUpdate",
          "Latest",
          "InProgress"
        ],
        "x-enumType": "AgentState"
      },
      "AgentStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "All",
          "OutOfDate",
          "Updated",
          "Incompatible",
          "InProgress"
        ],
        "enum": [
          "All",
          "OutOfDate",
          "Updated",
          "Incompatible",
          "InProgress"
        ],
        "x-enumType": "AgentStatus"
      },
      "Manufacturer": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          }
        }
      },
      "AgentJob": {
        "type": "object",
        "properties": {
          "AgentInfo": {
            "$ref": "#/definitions/AgentInfo"
          },
          "Job": {
            "$ref": "#/definitions/JobInfo"
          },
          "ErrorMessage": {
            "type": "string"
          }
        }
      },
      "JobInfo": {
        "type": "object",
        "required": [
          "StartDateTime"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "JobStatus": {
            "type": "string"
          },
          "StartDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "EndDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "Server": {
            "type": "string"
          },
          "JobType": {
            "type": "string"
          },
          "ServerType": {
            "type": "string"
          },
          "EntityType": {
            "type": "string"
          },
          "EntityReferenceId": {
            "type": "string"
          },
          "EntityDisplayName": {
            "type": "string"
          }
        }
      },
      "DownloadAgentsRequest": {
        "type": "object",
        "properties": {
          "AgentInfo": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AgentInfo"
            }
          }
        }
      },
      "AgentCompatibilityInfo": {
        "type": "object",
        "required": [
          "DeviceFamily"
        ],
        "properties": {
          "AgentCompatibilityCertificate": {
            "type": "string"
          },
          "AppId": {
            "type": "string"
          },
          "DeviceFamily": {
            "$ref": "#/definitions/AdsDeviceFamily",
            "x-enumType": "AdsDeviceFamily"
          },
          "DeviceType": {
            "type": "integer",
            "format": "int32"
          },
          "MaxCompatibleBuild": {
            "type": "integer",
            "format": "int32"
          },
          "MaxCompatibleVersionMajor": {
            "type": "integer",
            "format": "int32"
          },
          "MaxCompatibleVersionMinor": {
            "type": "integer",
            "format": "int32"
          },
          "MinCompatibleBuild": {
            "type": "integer",
            "format": "int32"
          },
          "MinCompatibleVersionMajor": {
            "type": "integer",
            "format": "int32"
          },
          "MinCompatibleVersionMinor": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AdsDeviceFamily": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NotSpecified",
          "WindowsCE",
          "iOS",
          "WindowsDesktop",
          "AndroidPlus",
          "Linux"
        ],
        "enum": [
          "NotSpecified",
          "WindowsCE",
          "iOS",
          "WindowsDesktop",
          "AndroidPlus",
          "Linux"
        ],
        "x-enumType": "AdsDeviceFamily"
      },
      "PlugInInfo": {
        "type": "object",
        "required": [
          "PlugInType",
          "ModelId"
        ],
        "properties": {
          "Manufacturer": {
            "type": "string"
          },
          "AgentAppId": {
            "type": "string"
          },
          "PlugInAppId": {
            "type": "string"
          },
          "Model": {
            "type": "string"
          },
          "InstalledVersion": {
            "type": "string"
          },
          "PlugInVersion": {
            "type": "string"
          },
          "AvailableVersion": {
            "type": "string"
          },
          "PlatformCertificate": {
            "type": "string"
          },
          "PlugInState": {
            "$ref": "#/definitions/PlugInState",
            "x-enumType": "PlugInState"
          },
          "PlugInType": {
            "$ref": "#/definitions/PlugInType",
            "x-enumType": "PlugInType"
          },
          "FileUrl": {
            "type": "string"
          },
          "ModelId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PlugInState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NotInstalled",
          "UpdateAvailable",
          "Latest",
          "InProgress"
        ],
        "enum": [
          "NotInstalled",
          "UpdateAvailable",
          "Latest",
          "InProgress"
        ],
        "x-enumType": "PlugInState"
      },
      "PlugInType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "RC",
          "MDM",
          "Enterprise"
        ],
        "enum": [
          "RC",
          "MDM",
          "Enterprise"
        ],
        "x-enumType": "PlugInType"
      },
      "PlugInStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "All",
          "OutOfDate",
          "UpToDate",
          "InProgress"
        ],
        "enum": [
          "All",
          "OutOfDate",
          "UpToDate",
          "InProgress"
        ],
        "x-enumType": "PlugInStatus"
      },
      "PlugInJob": {
        "type": "object",
        "properties": {
          "PlugInInfo": {
            "$ref": "#/definitions/PlugInInfo"
          },
          "Job": {
            "$ref": "#/definitions/JobInfo"
          },
          "ErrorMessage": {
            "type": "string"
          }
        }
      },
      "InstallPlugInsRequest": {
        "type": "object",
        "properties": {
          "PlugInInfo": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PlugInInfo"
            }
          }
        }
      },
      "GoogleDomainEnterprise": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "PrimaryDomain": {
            "type": "string"
          },
          "SecondaryDomains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "DateTime": {
            "type": "string",
            "format": "date-time"
          },
          "Id": {
            "type": "string"
          },
          "ReferenceId": {
            "type": "string"
          }
        }
      },
      "GoogleDomainProduct": {
        "type": "object",
        "required": [
          "IsPrivate",
          "Price",
          "IsApproved"
        ],
        "properties": {
          "Id": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          },
          "IsPrivate": {
            "type": "boolean"
          },
          "Version": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IconUrl": {
            "type": "string",
            "format": "uri"
          },
          "DetailsUrl": {
            "type": "string",
            "format": "uri"
          },
          "AppConfigurationSchema": {
            "type": "string"
          },
          "WorkDetailsUrl": {
            "type": "string",
            "format": "uri"
          },
          "Screenshots": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Price": {
            "type": "number",
            "format": "decimal"
          },
          "IsApproved": {
            "type": "boolean"
          },
          "Seller": {
            "type": "string"
          },
          "AppTracks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GoogleDomainAppTrack"
            }
          },
          "Permissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GoogleDomainProductPermission"
            }
          }
        }
      },
      "GoogleDomainAppTrack": {
        "type": "object",
        "required": [
          "AndroidAppTrackId"
        ],
        "properties": {
          "AndroidAppTrackId": {
            "type": "integer",
            "format": "int32"
          },
          "TrackId": {
            "type": "string"
          },
          "TrackAlias": {
            "type": "string"
          }
        }
      },
      "GoogleDomainProductPermission": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ExternalPermissionId": {
            "type": "string"
          }
        }
      },
      "GoogleDomainBindRequest": {
        "type": "object",
        "properties": {
          "PrimaryDomain": {
            "type": "string"
          },
          "AuthorizationToken": {
            "type": "string"
          }
        }
      },
      "GoogleDomainUnbindRequest": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string"
          }
        }
      },
      "SecurityCatalogueItemRightSummary": {
        "type": "object",
        "required": [
          "SecurityPrincipalType",
          "CanView",
          "CanEdit"
        ],
        "properties": {
          "PrincipalName": {
            "type": "string"
          },
          "PrincipalReferenceId": {
            "type": "string"
          },
          "SecurityPrincipalType": {
            "$ref": "#/definitions/SecurityPrincipalType",
            "x-enumType": "SecurityPrincipalType"
          },
          "CanView": {
            "type": "boolean"
          },
          "CanEdit": {
            "type": "boolean"
          }
        }
      },
      "SecurityPrincipalType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "MobiControlUser",
          "Role",
          "LdapUser",
          "LdapGroup",
          "SsoUser",
          "SsoGroup",
          "IdpLocalUser",
          "IdpLdapUser",
          "IdpThirdPartyIdpUser",
          "IdpAzureUser",
          "IdpLocalUserGroup",
          "IdpLdapUserGroup",
          "IdpThirdPartyIdpUserGroup",
          "IdpAzureUserGroup",
          "RtlsServicePrincipalGroup",
          "RtlsServicePrincipalUser"
        ],
        "enum": [
          "MobiControlUser",
          "Role",
          "LdapUser",
          "LdapGroup",
          "SsoUser",
          "SsoGroup",
          "IdpLocalUser",
          "IdpLdapUser",
          "IdpThirdPartyIdpUser",
          "IdpAzureUser",
          "IdpLocalUserGroup",
          "IdpLdapUserGroup",
          "IdpThirdPartyIdpUserGroup",
          "IdpAzureUserGroup",
          "RtlsServicePrincipalGroup",
          "RtlsServicePrincipalUser"
        ],
        "x-enumType": "SecurityPrincipalType"
      },
      "SecurityCatalogueItemRight": {
        "type": "object",
        "properties": {
          "PrincipalReferenceId": {
            "type": "string"
          },
          "CanView": {
            "type": "boolean"
          },
          "CanEdit": {
            "type": "boolean"
          }
        }
      },
      "SecurityRoleSummary": {
        "type": "object",
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "SecurityRole": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          }
        }
      },
      "SecurityUser": {
        "type": "object",
        "x-abstract": true,
        "required": [
          "UserKind",
          "IsAccountLocked",
          "NumberOfFailedLogins"
        ],
        "properties": {
          "UserKind": {
            "$ref": "#/definitions/UserKind2",
            "x-enumType": "UserKind"
          },
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "IsEulaAccepted": {
            "type": "boolean"
          },
          "IsAccountLocked": {
            "type": "boolean"
          },
          "NumberOfFailedLogins": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserKind2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "MobiControlUser",
          "LdapUser",
          "SsoUser",
          "SsoLdapUser",
          "SsoThirdPartyUser",
          "SsoAzureUser"
        ],
        "enum": [
          "MobiControlUser",
          "LdapUser",
          "SsoUser",
          "SsoLdapUser",
          "SsoThirdPartyUser",
          "SsoAzureUser"
        ],
        "x-enumType": "UserKind"
      },
      "SecurityLdapUser": {
        "allOf": [
          {
            "$ref": "#/definitions/SecurityUser"
          },
          {
            "type": "object",
            "required": [
              "IsHiddenUser"
            ],
            "properties": {
              "LdapConnectionId": {
                "type": "string"
              },
              "DomainName": {
                "type": "string"
              },
              "Sid": {
                "type": "string"
              },
              "EmailAddress": {
                "type": "string"
              },
              "IsHiddenUser": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SecurityMobiControlUser": {
        "allOf": [
          {
            "$ref": "#/definitions/SecurityUser"
          },
          {
            "type": "object",
            "properties": {
              "LastPasswordChangeDate": {
                "type": "string",
                "format": "date-time"
              },
              "EmailAddress": {
                "type": "string"
              },
              "Password": {
                "type": "string"
              },
              "ExistingPassword": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SecuritySsoUser": {
        "allOf": [
          {
            "$ref": "#/definitions/SecurityUser"
          },
          {
            "type": "object",
            "required": [
              "IsHiddenUser"
            ],
            "properties": {
              "SsoConnectionId": {
                "type": "string"
              },
              "EmailAddress": {
                "type": "string"
              },
              "ExternalId": {
                "type": "string"
              },
              "DomainName": {
                "type": "string"
              },
              "IsHiddenUser": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SecurityUserRoles": {
        "allOf": [
          {
            "$ref": "#/definitions/SecurityUser"
          },
          {
            "type": "object",
            "properties": {
              "RoleReferenceIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "SecurityUserGroupSummary": {
        "type": "object",
        "x-abstract": true,
        "required": [
          "UserGroupKind"
        ],
        "properties": {
          "UserGroupKind": {
            "$ref": "#/definitions/SecurityUserGroupKind",
            "x-enumType": "SecurityUserGroupKind"
          },
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "SecurityUserGroupKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "LdapUserGroup",
          "SsoUserGroup",
          "SsoLdapUserGroup",
          "SsoThirdPartyUserGroup",
          "SsoAzureUserGroup",
          "RtlsServicePrincipalGroup",
          "RtlsServicePrincipalUser"
        ],
        "enum": [
          "LdapUserGroup",
          "SsoUserGroup",
          "SsoLdapUserGroup",
          "SsoThirdPartyUserGroup",
          "SsoAzureUserGroup",
          "RtlsServicePrincipalGroup",
          "RtlsServicePrincipalUser"
        ],
        "x-enumType": "SecurityUserGroupKind"
      },
      "SecurityLdapUserGroupSummary": {
        "allOf": [
          {
            "$ref": "#/definitions/SecurityUserGroupSummary"
          },
          {
            "type": "object",
            "properties": {
              "Sid": {
                "type": "string"
              },
              "LdapConnectionId": {
                "type": "string"
              },
              "DomainName": {
                "type": "string"
              },
              "DisplayName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SecuritySsoUserGroupSummary": {
        "allOf": [
          {
            "$ref": "#/definitions/SecurityUserGroupSummary"
          },
          {
            "type": "object",
            "properties": {
              "SsoConnectionId": {
                "type": "string"
              },
              "DomainName": {
                "type": "string"
              },
              "ExternalId": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SecurityUserGroupRoles": {
        "allOf": [
          {
            "$ref": "#/definitions/SecurityUserGroupSummary"
          },
          {
            "type": "object",
            "properties": {
              "RoleReferenceIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "SecurityCatalogueItemReference": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          }
        }
      },
      "SecurityRightSummary": {
        "type": "object",
        "required": [
          "IsAllowed",
          "Scope"
        ],
        "properties": {
          "Permission": {
            "type": "string"
          },
          "IsAllowed": {
            "type": "boolean"
          },
          "IsAllowedSelf": {
            "type": "boolean"
          },
          "InheritsFrom": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SecurityUserRightInheritsFrom"
            }
          },
          "Scope": {
            "$ref": "#/definitions/Scope",
            "x-enumType": "Scope"
          },
          "Asset": {
            "$ref": "#/definitions/SecurityAsset"
          }
        }
      },
      "SecurityUserRightInheritsFrom": {
        "type": "object",
        "required": [
          "IsAllowed"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "IsAllowed": {
            "type": "boolean"
          }
        }
      },
      "Scope": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Any",
          "SystemAdministrator",
          "DeviceOwner"
        ],
        "enum": [
          "Any",
          "SystemAdministrator",
          "DeviceOwner"
        ],
        "x-enumType": "Scope"
      },
      "SecurityAsset": {
        "type": "object",
        "required": [
          "AssetType"
        ],
        "properties": {
          "AssetType": {
            "$ref": "#/definitions/AssetType2",
            "x-enumType": "AssetType"
          },
          "ReferenceId": {
            "type": "string"
          }
        }
      },
      "AssetType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Device",
          "DeviceGroup",
          "CatalogueItem"
        ],
        "enum": [
          "Device",
          "DeviceGroup",
          "CatalogueItem"
        ],
        "x-enumType": "AssetType"
      },
      "SecurityRight": {
        "type": "object",
        "required": [
          "IsAllowed"
        ],
        "properties": {
          "Permission": {
            "type": "string"
          },
          "IsAllowed": {
            "type": "boolean"
          }
        }
      },
      "BulkActionLimitSummary": {
        "type": "object",
        "required": [
          "ActionName",
          "Inherited"
        ],
        "properties": {
          "ActionName": {
            "$ref": "#/definitions/DeviceBulkAction",
            "x-enumType": "DeviceBulkAction"
          },
          "Limit": {
            "type": "integer",
            "format": "int32"
          },
          "Inherited": {
            "type": "boolean"
          }
        }
      },
      "DeviceBulkAction": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "CheckIn",
          "Wipe",
          "Lock",
          "Unenroll",
          "SendMessage",
          "SendScript",
          "Delete",
          "Disable",
          "Enable",
          "Rename",
          "ResetPasscode",
          "SoftReset",
          "UpgradeAgentNow",
          "SyncFilesNow",
          "UpgradeFirmware",
          "UpgradeAgent",
          "MoveDevice",
          "UpgradeFirmwareZebra",
          "EnableAdminMode",
          "DisableAdminMode"
        ],
        "enum": [
          "CheckIn",
          "Wipe",
          "Lock",
          "Unenroll",
          "SendMessage",
          "SendScript",
          "Delete",
          "Disable",
          "Enable",
          "Rename",
          "ResetPasscode",
          "SoftReset",
          "UpgradeAgentNow",
          "SyncFilesNow",
          "UpgradeFirmware",
          "UpgradeAgent",
          "MoveDevice",
          "UpgradeFirmwareZebra",
          "EnableAdminMode",
          "DisableAdminMode"
        ],
        "x-enumType": "DeviceBulkAction"
      },
      "SecurityRoleLogEntry": {
        "allOf": [
          {
            "$ref": "#/definitions/SecurityLogEntry"
          },
          {
            "type": "object"
          }
        ]
      },
      "SecurityLogEntry": {
        "type": "object",
        "x-abstract": true,
        "required": [
          "Timestamp",
          "EventSeverity",
          "EventId",
          "EventOriginator"
        ],
        "properties": {
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "EventSeverity": {
            "$ref": "#/definitions/EventSeverity3",
            "x-enumType": "EventSeverity"
          },
          "EventId": {
            "$ref": "#/definitions/Event",
            "x-enumType": "Event"
          },
          "EventCode": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "ExtraInfo": {
            "type": "string"
          },
          "EventOriginator": {
            "$ref": "#/definitions/EventOriginator3",
            "x-enumType": "EventOriginator"
          },
          "UserName": {
            "type": "string"
          }
        }
      },
      "EventSeverity3": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Information",
          "Warning",
          "Error"
        ],
        "enum": [
          "Information",
          "Warning",
          "Error"
        ],
        "x-enumType": "EventSeverity"
      },
      "Event": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "DeploymentServerStart",
          "DeploymentServerStop",
          "DeploymentServerDisabled",
          "DeploymentServerEnabled",
          "DeploymentServerNotLicensed",
          "DeploymentServerDeleted",
          "ManagementServiceStart",
          "ManagementServiceStop",
          "ManagementServiceDeleted",
          "DeploymentServerErrorNoProfile",
          "DeploymentServerErrorName",
          "DeploymentServerErrorNoIpAddress",
          "DeploymentServerErrorCreateDevId",
          "ServerError",
          "DatabaseMaintenance",
          "LogTruncated",
          "DeleteOfflineDevices",
          "ServerUnused",
          "UnregisteredDeviceExchange",
          "CheckCertificate",
          "CheckCertificateFailure",
          "AcceptedDeviceExchange",
          "AcceptedEnterpriseResourceGateway",
          "UnregisteredDeviceEnterpriseResourceGateway",
          "DeleteExpiredIdpUsers",
          "MoveDevicePersonLoginToArchiveDb",
          "ManagerConnected",
          "ManagerDisconnected",
          "ManagerDifferentTime",
          "LogTruncatedManually",
          "DatabaseShrunk",
          "UserAdded",
          "UserUpdated",
          "UserDeleted",
          "UserGroupAdded",
          "DirectoryUserAdded",
          "DirectoryUserGroupAdded",
          "UserGroupDeleted",
          "DirectoryUserDeleted",
          "DirectoryUserGroupDeleted",
          "UserGroupUpdated",
          "DirectoryUserUpdated",
          "DirectoryUserGroupUpdated",
          "DirectoryUserAccountLocked",
          "DirectoryUserAccountUnlocked",
          "SsoUserGroupAdded",
          "SsoUserGroupDeleted",
          "SsoUserGroupUpdated",
          "SetLdapGroupSync",
          "IdpUserAdded",
          "IdpUserUpdatedEvent",
          "IdpUserGroupAdded",
          "DeviceMalwareFileQuarantineReset",
          "DeviceSupportInfoPushed",
          "DeviceNotRoaming",
          "NotMissingMandatoryApplication",
          "DeviceSecurityNotViolated",
          "CertificateRevoked",
          "CertificateRenewRequested",
          "CertificateRevokedFailed",
          "CertificateRenewFailed",
          "CertificateRenewed",
          "CertificatePushedToDevice",
          "DeviceSimInserted",
          "DeviceSimChanged",
          "DeviceSimRemoved",
          "DeviceContentFileSync",
          "DeviceConfigPending",
          "DeviceRenamed",
          "DeviceLocated",
          "DeviceLocateFailure",
          "DeviceEncryptionLevel",
          "DeviceCheckedInNotMdm",
          "DeviceProcessTerminated",
          "DeviceItunesStoreLoggedIn",
          "DeviceItunesStoreLoggedOut",
          "DeviceSupervisionEnabled",
          "DeviceSupervisionDisabled",
          "DeviceFindMyIphoneEnabled",
          "DeviceFindMyIphoneDisabled",
          "DeviceDoNotDistrurbEnabled",
          "DeviceDoNotDisturbDisabled",
          "DevicePersonalHotspotEnabled",
          "DevicePersonalHotspotDisabled",
          "DeviceLicenseError",
          "DeviceUnenrolled",
          "DeviceElmLicenseActivationFailure",
          "ScriptCommandNotSupported",
          "AppleITunesHashChanged",
          "DeviceFileSyncAttemptExhausted",
          "DeviceFileSyncActivity",
          "DeviceConnected",
          "DeviceDisconnected",
          "DeviceAdded",
          "DeviceFileSync",
          "DeviceLockdown",
          "DeviceLockdownRemoved",
          "DeviceCustomLog",
          "DeviceTimeSynchronization",
          "DeviceCustomData",
          "DeviceAdvancedSettings",
          "DeviceRemoteControl",
          "DeviceRelocated",
          "DeviceDataCollectionConfig",
          "DataCollected",
          "DeviceInaccurateTime",
          "DeviceGeofencingConfigured",
          "DeviceAlertConfigured",
          "DeviceEnteredGeofence",
          "DeviceExitedGeofence",
          "DeviceAgentUpgradeFailed",
          "DeviceBlockedOutgoing",
          "DeviceBlockedIncoming",
          "DeviceStoppedIllegalProcess",
          "ProcessLearned",
          "ManuallyRelocated",
          "DeviceCheckedIn",
          "DeviceConfigurationSuccess",
          "DeviceConfigurationRemoved",
          "DeviceSecurityViolated",
          "MissingMandatoryApplication",
          "DeviceRoaming",
          "DeviceManagementProfileRemoved",
          "DeviceDeleted",
          "DeviceHasBlacklistedApplication",
          "DeviceAdministrativeAccessDisabled",
          "DeviceAdministrativeAccessEnabled",
          "DeviceActionSentInternal",
          "DeviceTermsConditionsAccepted",
          "DeviceTermsConditionsRejected",
          "DeviceLabelsConfigured",
          "DeviceTermsConditionsPushed",
          "DeviceHasNoBlacklistedApplication",
          "DeviceMalwareApplicationDetected",
          "DeviceMalwareFileDetected",
          "DeviceMalwareApplicationQuarantined",
          "DeviceMalwareFileQuarantined",
          "DevicemalwareUrlBlocked",
          "DeviceMalwareApplicationQuarantineReset",
          "DeviceErrorInvalidMessage",
          "DeviceErrorInvalidVersion",
          "DeviceErrorUnknownClass",
          "DeviceErrorConnected",
          "DeviceErrorAckError",
          "DeviceErrorNoPackageId",
          "DeviceErrorNotUsed",
          "DeviceLicensesExceeded",
          "DeviceFileSyncError",
          "DeviceWrongSiteName",
          "DeviceFileSyncAborted",
          "DeviceEnabled",
          "DeviceDisabled",
          "DeviceRuleFilterFailure",
          "DeviceConfigurationFailure",
          "DeviceConfigurationRemoveFailure",
          "DeviceFeatureNotSupported",
          "DeviceContentFileNoPushNetworkMismatch",
          "DeviceRelocatedDueToReenrollment",
          "DeviceProfileRevokedByAdmin",
          "DeviceProfileInstalled",
          "DeviceProfileRemoved",
          "DeviceProfileFailedToInstall",
          "DeviceProfileFailedToRemove",
          "DeviceProfileInstalledByAdmin",
          "DeviceUserRequestedProfileInstallation",
          "DeviceUserRequestedProfileRemoval",
          "DeviceUserChangedByAdmin",
          "DeviceVppInvitationSent",
          "DeviceVppInvitationAccepted",
          "DeviceActivationLockEnabled",
          "DeviceActivationLockDisabled",
          "DeviceActivationLockBypassCodeRetrieved",
          "DeviceActivationLockBypassRequestHasBeenSent",
          "DeviceFailedToRequestActivationLockBypass",
          "DeviceActivationLockBypassCodeCannotBeRetrieved",
          "ApplicationStatusSetAsManaged",
          "ClearRestrictionsCommandReceived",
          "RenameDeviceSuccessful",
          "SetWallpaperSuccessful",
          "SetDeviceNameActionSent",
          "DeviceErrorAgentUpgradeNetworkMismatch",
          "RequestDeviceCheckIn",
          "ResetPasscodeActionSent",
          "BlockSotiSurfCommandRequested",
          "AllowSotiSurfCommandRequested",
          "DeviceSoftResetSent",
          "DeviceTurnOffSuspendSent",
          "DeviceDisablePasscodeLock",
          "UnenrollUserRequested",
          "UnenrollAdminRequested",
          "DeviceUnenrolledByUser",
          "DeviceUnenrolledByAdmin",
          "DeviceSclStatusChanged",
          "MdmLostModeEnabled",
          "MdmLostModeEnableFailed",
          "MdmLostModeEnableRequested",
          "MdmLostModeDisabled",
          "MdmLostModeDisableFailed",
          "MdmLostModeDisableRequested",
          "MdmLostModeLocateRequested",
          "OsUpdateScanSucceeded",
          "OsUpdateScanFailed",
          "OsUpdateScanRequested",
          "OsUpdateStatusRefreshRequested",
          "OsUpdateRequested",
          "OsUpdateStarted",
          "OsUpdateFailedToStart",
          "OsUpdateFailedToStartDeviceBusy",
          "OsUpdateRefreshStatusRequested",
          "OsUpdateStatusRefreshed",
          "OsUpdateStatusRefreshFailed",
          "AvailableOSUpdatesFailedDeviceBusy",
          "OsUpdateStatusRefreshFailedDeviceBusy",
          "ClearRestrictionsCommandSuccess",
          "ClearRestrictionsCommandFailed",
          "SuccessfullySotiSurfBlocked",
          "FailedToBlockSotiSurf",
          "AllowSotiSurfCommandSuccess",
          "AllowSotiSurfCommandFailed",
          "AllowSotiSurfCommandFailedDeviceBusy",
          "BlockSotiSurfCommandFailedDeviceBusy",
          "ClearRestrictionsCommandFailedDeviceBusy",
          "BypassActivationLockFailedNotFoundError",
          "BypassActivationLockFailed",
          "BypassActivationLockSuccess",
          "BypassActivationLockFailedRequestedAlreadyError",
          "ClearSotiSurfCacheRequested",
          "ClearSotiSurfCacheSucceeded",
          "ClearSotiSurfCacheFailed",
          "ClearSotiSurfCacheFailedDeviceBusy",
          "BlockSotiHubCommandRequested",
          "SuccessfullyBlockedSotiHub",
          "FailedToBlockSotiHub",
          "BlockSotiHubCommandFailedDeviceBusy",
          "ScanForVirusesRequested",
          "UpdateVirusDefinitionsRequested",
          "CommunicationErrorInitialization",
          "CommunicationErrorSendmesage",
          "CommunicationErrorSendFile",
          "CommunicationErrorReceiveFile",
          "AllowSotiHubCommandSuccess",
          "AllowSotiHubCommandFailed",
          "AllowSotiHubCommandFailedDeviceBusy",
          "AllowSotiHubCommandRequested",
          "ClearSotiHubCacheRequested",
          "ClearSotiHubCacheSucceeded",
          "ClearSotiHubCacheFailed",
          "ClearSotiHubCacheFailedDeviceBusy",
          "PrintTestPageSent",
          "FactoryReset",
          "DisablePasscodeLockCommandSuccess",
          "DisablePasscodeLockCommandFailed",
          "DisablePasscodeLockCommandFailedDeviceBusy",
          "SetWallpaperHomeScreenCommandSuccess",
          "SetWallpaperLockScreenCommandSuccess",
          "SetWallpaperCommandFailed",
          "SetWallpaperCommandFailedDeviceBusy",
          "GenerateUnlockCode",
          "EnableLostModeFailedDeviceBusy",
          "DisableLostModeFailedDeviceBusy",
          "AllowExchangeAccessRequested",
          "BlockExchangeAccessRequested",
          "TurnOffSuspendSuccess",
          "TurnOffSuspendFailed",
          "TurnOffSuspendFailedDeviceBusy",
          "UpdateManagementProfileRequested",
          "UpdateManagementProfileSuccess",
          "UpdateManagementProfileFailed",
          "UpdateManagementProfileFailedDeviceBusy",
          "ApplicationUpdateRequestedOnDevice",
          "ApplicationUpdateSuccess",
          "ApplicationUpdateFailedDeviceBusy",
          "ApplicationUpdateFailed",
          "ApplicationConfigurationSaved",
          "ApplicationConfigurationValidationFailed",
          "ApplicationUpdateRequestFailedOsVersionIncompatible",
          "ApplicationUpdateRequestFailedDuplicateRequest",
          "ProfilePayloadNotInstalledUnSupervisedDevice",
          "ProfilePayloadNotInstalledLowerOsVersionDevice",
          "ApplicationUpdateRequestedByServer",
          "ApplicationUpdateRequestFailedDeviceOsVersionLessThanMinimum",
          "DeviceCheckInCompleted",
          "DeviceEmptyCheckInCompleted",
          "ApplicationUpdateFailedReachedAttemptsLimit",
          "DatabaseCreated",
          "DatabaseDeleted",
          "DatabaseUpgradeAttempt",
          "DatabaseUpgradeComplete",
          "DeviceSoftResetSuccess",
          "DeviceSoftResetFailed",
          "DeviceSoftResetFailedDeviceBusy",
          "ApplicationUpdateFailedAppIsUptodate",
          "BluetoothDisableRequested",
          "BluetoothDisableFailed",
          "BluetoothDisableSuccess",
          "BluetoothEnableRequested",
          "BluetoothEnableFailed",
          "BluetoothEnableSuccess",
          "BluetoothEnableFailedDeviceBusy",
          "BluetoothDisableFailedDeviceBusy",
          "UpdateManagementProfileCommandAlreadyRequested",
          "PlaySoundRequested",
          "PlaySoundSuccess",
          "PlaySoundFailedDeviceBusy",
          "PlaySoundFailed",
          "WipeSuccess",
          "WipeFailed",
          "WipeAlreadyRequested",
          "UpdateMDMProfileRequestedByServer",
          "MaintenanceofiOSMdmProfilesStart",
          "MaintenanceofiOSMdmProfilesEnd",
          "UpgradeofVPPApplicationDataStart",
          "UpgradeofVPPApplicationDataSuccess",
          "UpgradeofVPPApplicationDataFailure",
          "NoCommandGeneratedUnxpectedError",
          "NoCommandGeneratedDuplicateCommand",
          "IosAppIsB2bButFoundInItuneStore",
          "IosAppNotFoundInItuneStore",
          "IosAppNotAvailableForPurchase",
          "AppUsedInB2BAndRegularRule",
          "DuplicateRegularAppRemoved",
          "DuplicateB2BAppRemoved",
          "UpgradeofB2BApplicationDataStart",
          "UpgradeofB2BApplicationDataSuccess",
          "UpgradeofB2BApplicationDataFailure",
          "B2BAppUsedInRegularRule",
          "RegularAppUsedInB2BRule",
          "MaintenanceofiOsMdmProfilesEndWithMoreInfo",
          "DatabaseErrorRuleNotFound",
          "DatabaseErrorAddingDevice",
          "IosDeviceUnenrolledDueToOffline7Days",
          "IosDeviceTokenUpdateWithEmptyBody",
          "AppStoreAppNotAvailableAndUsedAsB2B",
          "ClientCertificateValidationFailedNotValidYet",
          "ClientCertificateValidationFailedExpired",
          "ClientCertificateValidationFailedUnknownIssuer",
          "ClientCertificateValidationFailedNotInternalScep",
          "ClientCertificateValidationFailedToBeRenewed",
          "SotiMobiControlSharedDeviceProfileSingleAppModeRemovalSuccess",
          "SotiMobiControlSharedDeviceProfileSingleAppModeRemovalFailed",
          "SotiMobiControlSharedDeviceProfileSotiLoginAppUninstallSuccess",
          "SotiMobiControlSharedDeviceProfileSotiLoginAppUninstallFailed",
          "SotiMobiControlSharedDeviceProfileRemovedSuccess",
          "CheckInFailedUnexpectedError",
          "SharedDeviceSecurityTokenWasGenerated",
          "SharedDeviceSecurityTokenWasDeleted",
          "RemoveApplicationCommandSuccess",
          "RemoveApplicationCommandError",
          "RemoveApplicationCommandNotNow",
          "MultiUserSignedOut",
          "MultiUserSignedIn",
          "MultiUserSignedOutByAdmin",
          "DeviceUserAuthenticationSuccess",
          "DeviceUserAuthorizationFailure",
          "DeviceHasLatestAppInstalled",
          "DeviceApplicationAlreadyPresent",
          "DeviceApplicationWontBeRequestWithoutUserBasedVPPAssignment",
          "InstallApplicationFailedDueToDeviceNotBelongToVppOrg",
          "UserEnrollmentDeviceRequiresUserBasedVppApplication",
          "DeviceApplicationRetryRequested",
          "DeviceUserRequestedApplicationInstallation",
          "ResetExchangeAccessRequested",
          "AppFeedbackUpdateRequested",
          "JobSucceeded",
          "JobPushStarted",
          "JobScheduleStarted",
          "JobUninstalled",
          "JobError",
          "JobErrorCommunication",
          "JobErrorFileNotFound",
          "JobErrorCreateFile",
          "JobErrorWriteFile",
          "JobErrorNoSpace",
          "JobErrorIncompatible",
          "JobErrorCorruptedFile",
          "JobErrorAborted",
          "JobErrorDependentFailed",
          "JobErrorAbortedByScript",
          "JobErrorDeviceNotAuthenticated",
          "JobErrorGeneric",
          "JobErrorNotSupported",
          "RuleCreated",
          "RuleEnabled",
          "RuleDisabled",
          "RuleRenamed",
          "RuleChanged",
          "RuleDeleted",
          "RuleBarcodeGenerated",
          "RuleDeactivated",
          "RequestSharedDeviceLogoutByAdministrator",
          "MultiUserLoginClearAppFailed",
          "MultiUserLogoutClearAppFailed",
          "MultiUserLoginRemoveProfileFailed",
          "MultiUserLogoutRemoveProfileFailed",
          "MultiUserLoginRemovingApps",
          "MultiUserLogoutRemovingApps",
          "MultiUserLoginRemovingProfiles",
          "MultiUserLogoutRemovingProfiles",
          "MultiUserLogoutDisablingPasscode",
          "MultiUserLoginRemovingAppsFailed",
          "MultiUserLogoutRemovingAppsFailed",
          "MultiUserLoginFailed",
          "MultiUserLogoutFailed",
          "MultiUserLogoutDisablingPasscodeFailed",
          "MultiUserCheckinRequested",
          "MultiUserLoginRelocateFailed",
          "MultiUserLogoutRelocateFailed",
          "MultiUserLoginRelocating",
          "MultiUserLogoutRelocating",
          "MultiUserLoginRemovingAppsFailedUnknownError",
          "MultiUserLogoutRemovingAppsFailedUnknownError",
          "MultiUserLoginRemoveProfileFailedUnknownError",
          "MultiUserLogoutRemoveProfileFailedUnknownError",
          "MultiUserLogoutDisablingPasscodeFailedUnknownError",
          "MultiUserLogoutClearAppFailedUnknownError",
          "MultiUserLoginClearAppFailedUnknownError",
          "MultiUserLoginRemovingAppsDeviceBusy",
          "MultiUserLogoutRemovingAppsDeviceBusy",
          "MultiUserLoginRemovingProfilesDeviceBusy",
          "MultiUserLogoutRemovingProfilesDeviceBusy",
          "MultiUserTroubleshootActionRequestByAdministrator",
          "MultiUserLoginBypassRemovingAppsErrorSuccess",
          "MultiUserLogoutBypassRemovingAppsErrorSuccess",
          "MultiUserLoginBypassRemovingAppsErrorFailure",
          "MultiUserLogoutBypassRemovingAppsErrorFailure",
          "MultiUserLoginBypassRemovingAppsUnexpectedErrorSuccess",
          "MultiUserLogoutBypassRemovingAppsUnexpectedErrorSuccess",
          "MultiUserLoginBypassRemovingAppsUnexpectedErrorFailure",
          "MultiUserLogoutBypassRemovingAppsUnexpectedErrorFailure",
          "MultiUserLoginBypassRelocateErrorSuccess",
          "MultiUserLogoutBypassRelocateErrorSuccess",
          "MultiUserLoginBypassRelocateErrorFailure",
          "MultiUserLogoutBypassRelocateErrorFailure",
          "MultiUserLoginBypassRemovingProfilesErrorSuccess",
          "MultiUserLogoutBypassRemovingProfilesErrorSuccess",
          "MultiUserLoginBypassRemovingProfilesErrorFailure",
          "MultiUserLogoutBypassRemovingProfilesErrorFailure",
          "MultiUserLoginBypassRemovingProfilesUnexpectedErrorSuccess",
          "MultiUserLogoutBypassRemovingProfilesUnexpectedErrorSuccess",
          "MultiUserLoginBypassRemovingProfilesUnexpectedErrorFailure",
          "MultiUserLogoutBypassRemovingProfilesUnexpectedErrorFailure",
          "MultiUserLogoutBypassDisablePasscodeErrorSuccess",
          "MultiUserLogoutBypassDisablePasscodeErrorFailure",
          "MultiUserLogoutBypassDisablePasscodeUnexpectedErrorSuccess",
          "MultiUserLogoutBypassDisablePasscodeUnexpectedErrorFailure",
          "MultiUserLoginBypassLoginErrorSuccess",
          "MultiUserLogoutBypassLogoutErrorSuccess",
          "MultiUserLoginBypassLoginFailure",
          "MultiUserLogoutBypassLogoutErrorFailure",
          "MultiUserLoginDeviceProgramWiped",
          "MultiUserLogoutDeviceProgramWiped",
          "MultiUserLoginBypassRemovingAppsDataErrorSuccess",
          "MultiUserLoginBypassRemovingAppsDataErrorFailure",
          "MultiUserLogoutBypassRemovingAppsDataErrorSuccess",
          "MultiUserLogoutBypassRemovingAppsDataErrorFailure",
          "MultiUserLoginBypassRemovingAppsDataUnexpectedErrorSuccess",
          "MultiUserLoginBypassRemovingAppsDataUnexpectedErrorFailure",
          "MultiUserLogoutBypassRemovingAppsDataUnexpectedErrorSuccess",
          "MultiUserLogoutBypassRemovingAppsDataUnexpectedErrorFailure",
          "DeviceUserTermsConditionsAccepted",
          "DeviceUserTermsConditionsRejected",
          "AutoUpdateAppVersionSearchStarted",
          "AutoUpdateAppVersionApplicationNotFound",
          "AutoUpdateAppVersionNewerVersionNotFound",
          "AutoUpdateAppVersionNewerVersionFound",
          "AutoUpdateAppVersionRuleUpdatedWithNewerAppVersion",
          "AutoUpdateAppVersionSearchCompleted",
          "AutoUpdateAppVersionRuleChanged",
          "HotspotDisableRequested",
          "HotspotDisableFailed",
          "HotspotDisableSuccess",
          "HotspotDisableFailedDeviceBusy",
          "HotspotEnableRequested",
          "HotspotEnableFailed",
          "HotspotEnableSuccess",
          "HotspotEnableFailedDeviceBusy",
          "ActiveDirectoryLogonSuccess",
          "ActiveDirectoryLogonFailure",
          "ActiveDirectoryPasswordChangeSuccess",
          "MobiControlPasswordChangeFailed",
          "LogOnSuccess",
          "LogOnFailure",
          "LogOff",
          "MaxNumberOfPasswordAttempts",
          "MobiControlPasswordChanged",
          "WebContentLibraryFileAdded",
          "WebContentLibraryFileDeleted",
          "WebContentLibraryFileRenamed",
          "WebContentLibraryFileMoved",
          "WebContentLibraryFileUpdated",
          "WebContentLibraryFolderAdded",
          "WebContentLibraryFolderDeleted",
          "WebContentLibraryFolderRenamed",
          "WebContentLibraryFolderMoved",
          "WebContentLibraryModified",
          "WebContentLibraryCategoryAdded",
          "WebContentLibraryCategoryUpdated",
          "WebContentLibraryCategoryDeleted",
          "WebContentLibraryFileVersionAdded",
          "WebContentLibraryFileVersionRestored",
          "MobiControlWebSessionTimeout",
          "MobiControlForgetPasswordAttempt",
          "ActiveDirectoryServiceErrorMessage",
          "LogOnFailureUserNotInDb",
          "LogOnFailureUserNotInLDAP",
          "LogOnFailureIncorrectGroup",
          "LogOnFailurePasswordIncorrect",
          "LogOnFailureAccountLocked",
          "LogOnFailureAccessDenied",
          "LogOnFailureWebConsoleAccessBlockedByUser",
          "SamlErrorInvalid",
          "SamlErrorMissingElement",
          "SamlErrorInvalidElement",
          "SamlErrorMultipleAssertions",
          "SamlErrorMissingReferenceUri",
          "SamlErrorInvalidReferenceUri",
          "SamlErrorSignatureValidationFailed",
          "SamlErrorInvalidSecurityToken",
          "SamlErrorIdpLogonNotSupported",
          "SamlErrorNoRequestParams",
          "AssertionNeedsToBeSigned",
          "ResponseNeedsToBeSigned",
          "MobiControlTerminateConcurrentSessions",
          "FederationMetadataAutomaticallyUpdated",
          "AutomaticFederationMetadataUpdateFailed",
          "MaxWebEvent",
          "BlockedExchangeAccess",
          "FailedToUpdateMetadataFile",
          "AndroidPluginInstalled",
          "AndroidPluginInstallFailed",
          "AndroidPluginInstallFailedDevice",
          "AndroidPluginInstallNotAvailable",
          "AndroidPlugInOnlyLocalPlugInAvailableRequested",
          "AndroidPlugInServerOutDatedInstallation",
          "AndroidPlugInAdsRetrievalFailed",
          "PermissionOnEnrollRequested",
          "AdsSyncFailure",
          "UpdateAllowedAndroidType",
          "UpdateSamsungElmConfiguration",
          "UploadLoginPortalBrandingImage",
          "UploadEnrollmentPortalBrandingImage",
          "UploadAdminConsolePortalBrandingImage",
          "UploadSsPortalBrandingImage",
          "RemoveLoginPortalBrandingImage",
          "RemoveEnrollmentPortalBrandingImage",
          "RemoveAdminConsolePortalBrandingImage",
          "RemoveSsPortalBrandingImage",
          "UpdateDeviceMatchCriteria",
          "UpdateUserUnenrollActionSettings",
          "AccessPointDiscoveryStart",
          "AccessPointCollectionStart",
          "AccessPointConfigUpdateStart",
          "AccessPointNewDeviceFound",
          "AccessPointConfigUpdated",
          "AccessPointGeneralError",
          "AccessPointDeviceNotSupported",
          "AccessPointInvalidProfile",
          "AccessPointInvalidConfig",
          "AccessPointDeviceDeleted",
          "AccessPointDeviceDown",
          "AccessPointSnmpError",
          "AccessPointSnmpAuthFailure",
          "AccessPointFtpError",
          "AccessPointFtpErrorConnect",
          "AccessPointFtpAuthFailure",
          "AccessPointFtpNotFound",
          "AccessPointCliError",
          "AccessPointCliErrorConnect",
          "AccessPointCliAuthFailure",
          "AccessPointExportFailure",
          "AccessPointImportFailure",
          "AccessPointHttpError",
          "AccessPointHttpAuthFailure",
          "AccessPointHttpBadResponse",
          "HoneywellMessage",
          "HoneywellConfigurationFailed",
          "HoneywellRpaError",
          "InsufficientPrinterLicenses",
          "BatteryLowSet",
          "BatteryLowClear",
          "CleanPrintHead",
          "CutterJammedSet",
          "CutterJammedClear",
          "HeadColdSet",
          "HeadColdClear",
          "HeadElementBad",
          "HeadOpenSet",
          "HeadOpenClear",
          "HeadTooHotSet",
          "HeadTooHotClear",
          "LabelReadySet",
          "LabelReadyClear",
          "MediaLowSet",
          "MediaLowClear",
          "PaperOutSet",
          "PaperOutClear",
          "PowerSupplyOverTempSet",
          "PowerSupplyOverTempClear",
          "PqJobCompleted",
          "PrinterPausedSet",
          "PrinterPausedClear",
          "ReplaceHead",
          "RewindFullSet",
          "RewindFullClear",
          "RfidErrorSet",
          "RfidErrorClear",
          "RibbonInWarningSet",
          "RibbonInWarningClear",
          "RibbonLowSet",
          "RibbonLowClear",
          "RibbonOutSet",
          "RibbonOutClear",
          "ZbiBasicForcedError",
          "ZbiBasicRuntimeError",
          "PasCreated",
          "PasEdited",
          "PasConnected",
          "PasDisconnected",
          "PasDeleted",
          "ForceDeviceScanSent",
          "DeviceClearCacheRequest",
          "DeviceAllowContentRequest",
          "DeviceBlockContentRequest",
          "AlertQueueLength",
          "AlertWorkerThread",
          "DeviceOutOfContact",
          "CustomAlert",
          "DeviceInContact",
          "DeviceHasNotCheckedIn",
          "ProdActivationSuccess",
          "ProdActivationFailure",
          "ProdActivationCheck4UpdateSucceed",
          "ProdActivationCheck4UpdateFailed",
          "CloudLinkCreated",
          "CloudLinkModified",
          "CloudLinkDeleted",
          "CloudLinkNotReachable",
          "NonElmEnrollmentBlocked",
          "MessagingServiceError",
          "AppleMessagingServiceError",
          "ReportScheduleCreated",
          "ReportScheduleCloned",
          "ReportScheduleModified",
          "ReportScheduleDeleted",
          "ReportScheduleDisabled",
          "ReportScheduleResent",
          "ReportScheduleFailed",
          "ReportTruncated",
          "DeviceLicenseRemaining",
          "DeviceLicenseRemainingPrecentage",
          "ReportScheduleEnabled",
          "UserScanVirus",
          "UserUpdateVirusDefinition",
          "UserScanIntegrityServerBaseline",
          "UserScanIntegrityServer",
          "UserLockContainer",
          "UserUnlockContainter",
          "DeviceResetPasscodeRequest",
          "DeviceConfigurationChanged",
          "DeviceRename",
          "DeviceLocateRequest",
          "DeviceLocateFailureRequest",
          "DeviceStopLocateRequest",
          "DeviceMoved",
          "DeviceConfigurationDeleted",
          "DeviceDeletionRequestedByUser",
          "DeviceActionSent",
          "DeviceCustomAttribute",
          "DeviceEnableRequest",
          "DeviceDisableRequest",
          "DeviceUnenrolled2",
          "DeviceTraceRequest",
          "DevicePushPackageRequest",
          "DeviceSyncFileRequest",
          "DeviceRemoteControlRequest",
          "DeviceUnlockCodeRequest",
          "DeviceAgentUpgradeEnabled",
          "DeviceAgentUpgradeDisabled",
          "DevicePublishWakeupMessage",
          "DeviceLockRequest",
          "DeviceRefreshStatusRequest",
          "DeviceRestartRequest",
          "DeviceWipeRequest",
          "DeviceUnlockRequest",
          "DevicePropertyChanged",
          "DeviceExchangeFilterSetBlock",
          "DeviceExchangeFilterSetUnblock",
          "DeviceExchangeFilterRemoved",
          "DeviceNoteAdded",
          "DeviceNoteUpdated",
          "DeviceNoteDeleted",
          "DeviceProgramRemoved",
          "DeviceProgramWiped",
          "DeviceElmUpgradeEnabled",
          "DeviceElmUpgradeDisabled",
          "DeviceGroupAgentElmUpgradeEnabled",
          "DeviceGroupAgentElmUpgradeDisabled",
          "DeviceRemoteLockAndResetPassword",
          "DeviceRemotePing",
          "DeviceResetContainerPasscodeRequest",
          "DeviceRemoteSessionEnded",
          "SendScriptRequest",
          "SendMessageRequest",
          "DeviceLocationHistory",
          "SendScriptViaSmsRequest",
          "SendSmsRequest",
          "SetWallpaperRequest",
          "DeviceAgentUpgradeRequested",
          "DeviceProgramUpdated",
          "SendScriptViaPnsRequest",
          "DeviceUpgradeAgent",
          "DeviceUpdateLicenseRequest",
          "DeviceUpdateLicenseFailed",
          "DeviceUpdateLicenseSuccess",
          "WindowsModernWipeExecuted",
          "IosDeviceApnsTokenIsInvalid",
          "DeviceGroupResetPasscodeRequest",
          "DeviceGroupConfigurationChanged",
          "DeviceGroupRenamed",
          "DeviceGroupLocateRequest",
          "DeviceGroupLocateFailureRequest",
          "DeviceGroupStopLocateRequest",
          "DeviceGroupMoved",
          "DeviceGroupConfigurationDeleted",
          "DeviceGroupDeleted",
          "DeviceGroupActionSent",
          "DeviceGroupCustomAttribute",
          "DeviceGroupEnabled",
          "DeviceGroupDisabled",
          "DeviceGroupAdded",
          "DeviceGroupTraceRequest",
          "DeviceGroupPushPackageRequest",
          "DeviceGroupSyncFileRequest",
          "DeviceGroupAgentUpgradeEnabled",
          "DeviceGroupAgentUpgradeDisabled",
          "DeviceGroupPublishWakeupMessage",
          "DeviceGroupLockRequest",
          "DeviceGroupRefreshStatusRequest",
          "DeviceGroupRestartRequest",
          "DeviceGroupUnlockRequest",
          "DeviceGroupWipeRequest",
          "DeviceGroupExchangeFilterSetBlock",
          "DeviceGroupExchangeFilterSetUnblock",
          "DeviceGroupNoteAdded",
          "DeviceGroupNoteUpdated",
          "DeviceGroupNoteDeleted",
          "DeviceGroupProgramRemoved",
          "DeviceGroupProgramWiped",
          "DeviceGroupProgramUpdated",
          "DeviceGroupUpgradeAgent",
          "ManagementServiceStarted",
          "ManagementServiceRequestStop",
          "ManagementServiceDeploymentServerDisabled",
          "ManagementServiceDeploymentServerEnabled",
          "AdminContactInfoChanged",
          "BESLinkChanged",
          "ConsoleSecuritySettingChanged",
          "LogTruncateManuallyRequest",
          "DatabaseShrinkRequest",
          "AlertTruncateManuallyRequest",
          "ManagementServiceUserAdded",
          "ManagementServiceUserUpdated",
          "ManagementServiceUserDeleted",
          "UserAttemptingToUpgradeDatabase",
          "UserProductActivationSuccess",
          "UserProductActivationFailed",
          "EnrollmentPublishRequest",
          "EnrollmentRemoved",
          "EnrollmentUpdated",
          "ManagementServiceDetectedStop",
          "ManagementServiceStartRequest",
          "ManagementServiceStopRequest",
          "DatabaseConfigurationChanged",
          "ManagementServiceAddressChanged",
          "LogLevelChanged",
          "LogMaintenanceConfigurationChanged",
          "ApplicationUpdateRequested",
          "DeviceEnrollmentFailed",
          "GeofencingAdded",
          "GeofencingDeleted",
          "GeofencingRenamed",
          "EmailProfileAdded",
          "EmailProfileDeleted",
          "EmailProfileChanged",
          "EmailProfileTextSent",
          "ExchangeFilterChanged",
          "ExchangeFilterDeleted",
          "BinaryFileAdded",
          "TextFileAdded",
          "CertificationFileAdded",
          "ScriptFileAdded",
          "SkinFileAdded",
          "OtherFileAdded",
          "LockdownTemplateFileAdded",
          "FileDeleted",
          "FileRenamed",
          "TextFileChanged",
          "ScriptFileChanged",
          "LockdownTemplateFileChanged",
          "ActivateRegistrationSuccess",
          "ActivateRegistrationFailure",
          "AgentBuildRequest",
          "AgentBuildSuccess",
          "AgentCreated",
          "AgentDeleted",
          "AgentExported",
          "AgentBarcodeGenerated",
          "AlertStateChanged",
          "ArubaSettingChanged",
          "BingMapTokenRequest",
          "CertificationAuthorityChanged",
          "CertificationAuthorityDeleted",
          "CertificationAuthorityTestRequest",
          "CertificationTemplateChanged",
          "CertificationTemplateDeleted",
          "ContainerAdded",
          "ContainerUpdated",
          "ContainerDeleted",
          "CustomDataTypeAdded",
          "CustomDataTypeUpdated",
          "CustomDataTypeDeleted",
          "DeviceFilterAdded",
          "DeviceFilterUpdated",
          "DeviceFilterDeleted",
          "DeviceFilterCloned",
          "UpdateLabel",
          "UpdateLabelType",
          "LdapConnectionAdded",
          "LdapConnectionUpdated",
          "LdapConnectionDeleted",
          "OldPackageVersionAdded",
          "PackageVersionDependenciesChanged",
          "OldPackageVersionDeleted",
          "ScheduleAdded",
          "ScheduleUpdated",
          "ScheduleDeleted",
          "TelecomPlanAdded",
          "TelecomPlanUpdated",
          "TelecomPlanDeleted",
          "PrincipalPermissionChanged",
          "PrincipalGroupPermissionChanged",
          "ChangePrincipalPermission",
          "ChangePrincipalGroupPermission",
          "PrincipalPasswordChanged",
          "FileExported",
          "HelpDeskServerSettingsChanged",
          "FileListCleanUp",
          "GoogleAndroidWorkEnterpriseBindingAdded",
          "GoogleAndroidWorkEnterpriseBindingAddFailed",
          "GoogleAndroidWorkEnterpriseBindingRemoved",
          "GoogleAndroidWorkEnterpriseBindingRemoveFailed",
          "GoogleAndroidWorkAcceptProductCapabilitiesFailure",
          "GoogleAndroidWorkAcceptProductCapabilitiesSuccess",
          "GoogleAndroidWorkCreateOrUpdateProductSetFailure",
          "GoogleAndroidWorkCreateOrUpdateProductSetSuccess",
          "GoogleAndroidWorkDeleteProductSetFailure",
          "GoogleAndroidWorkDeleteProductSetSuccess",
          "GoogleAndroidWorkDisableRequestSent",
          "GoogleAndroidWorkEnableRequestSent",
          "GoogleAndroidWorkEnterpriseAdded",
          "GoogleAndroidWorkEnterpriseAddFailed",
          "GoogleAndroidWorkEnterpriseRemoved",
          "GoogleAndroidWorkEnterpriseRemoveFailed",
          "MacroResolutionFailed",
          "AndroidApplicationFeedbackErrors",
          "AndroidApplicationFeedbackRequested",
          "AndroidApplicationFeedbackRequestFailed",
          "AndroidApplicationFeedbackReceived",
          "PackageVersionAdded",
          "PackageInstalled",
          "PackageDependencyMissing",
          "PackageInstallationFailure",
          "PackageUninstalled",
          "PackageDownloaded",
          "PackageHasCircularDependency",
          "PackageReinstalled",
          "PackageScheduleInstalled",
          "PackageHasAnotherVersionInstalled",
          "PackageFailedToDeploy",
          "PackageVersionMigrated",
          "PackageVersionDeleted",
          "PackageVersionRequestedToReinstall",
          "DeviceProgramWipeFailed",
          "DeviceProgramWipe",
          "SecurityPrincipalPermissionChanged",
          "ProfileCreated",
          "ProfileVersionAdded",
          "ProfileAssigned",
          "ProfileDisabled",
          "ProfileDeleted",
          "ProfileRevoked",
          "ProfileCloned",
          "ProfileAssignmentScheduled",
          "ProfileDisablementScheduled",
          "ProfileRevocationScheduled",
          "ProfileScheduledAssignmentSucceeded",
          "ProfileScheduledAssignmentFailed",
          "ProfileScheduledDisablementSucceeded",
          "ProfileScheduledDisablementFailed",
          "ProfileScheduledRevocationSucceeded",
          "ProfileScheduledRevocationFailed",
          "ProfileNameModified",
          "ProfileDescriptionModified",
          "ProfileAccessControlModified",
          "ProfileConfigurationModified",
          "ProfileCreatedDuringUpgrade",
          "ProfileCreatedDuringInstallation",
          "ReattemptFailedProfileInstallation",
          "PayloadIgnoredDueToIncompatibleData",
          "UserTriggeredReport",
          "ProxyFilterChanged",
          "ProxyFilterDeleted",
          "AppleDeviceEnrollmentConfigured",
          "AppleDeviceEnrollmentProgramProcessingFailure",
          "AppleDeviceEnrollmentDevicesAssigned",
          "AppleDeviceEnrollmentDeviceAssigned",
          "AppleDeviceEnrollmentDevicesRemoved",
          "AppleDeviceEnrollmentDeviceRemoved",
          "AppleDeviceEnrollmentProgramSyncDevicesSuccess",
          "AppleDeviceEnrollmentProgramSyncDevicesFailure",
          "AppleDeviceEnrollmentDevicesUnassigned",
          "AppleDeviceEnrollmentDeviceUnassigned",
          "AppleDeviceEnrollmentAssignmentFailure",
          "VppLicenseAssignmentFailed",
          "VppLicenseAssigned",
          "VppLicenseRevoked",
          "VppAppleIdLicenseAssigned",
          "VppAppleIdLicenseNotAssigned",
          "VppAppleIdLicenseRevoked",
          "VppDeviceLicenseAssigned",
          "VppDeviceLicenseRevoked",
          "VppDeviceLicenseRevokedServerLog",
          "VppReconcileSucceeded",
          "VppAccountLostOwnership",
          "VppCleanUpSucceeded",
          "VppReclaimedOwnership",
          "VppMaintenanceNoLicenseAvailable",
          "VppAccountNoLicenseAvailable",
          "ElasticsearchConfigurationChanged",
          "ElasticsearchIsNotReacheable",
          "ElasticsearchConnectivityRestored",
          "DeviceHealthReported",
          "DeviceHealthReportFailed",
          "DeviceHealthReportNotSupported",
          "DeviceModernApplicationManagementEvent",
          "UpdateAntivirusSignaturesAdminRequest",
          "AntivirusQuickScanAdminRequest",
          "AntivirusScanAdminRequest",
          "UpdateAntivirusSignaturesStarted",
          "UpdateAntivirusSignaturesFailed",
          "AntivirusScanStarted",
          "AntivirusScanFailed",
          "AntivirusDisabled",
          "DeviceDesktopApplicationManagementEvent",
          "RebootTriggeredEvent",
          "RebootFailedEvent",
          "WnsNotificationFailedEvent",
          "ScepInstallationEvent",
          "AppLockerInstallFailedEvent",
          "DeviceHealthAzureAccessStatusChanged",
          "DeviceHealthReportRequested",
          "DeviceHealthIdentityKeyPresent",
          "DeviceHealthAttestationEventStartRange",
          "DeviceHealthBitLockerStatusEnabled",
          "DeviceHealthBootDebuggingDisabled",
          "DeviceHealthBootManagerRevListVersion",
          "DeviceHealthCodeIntegrityEnabled",
          "DeviceHealthCodeIntegrityRevListVersion",
          "DeviceHealthDataExecutionPreventionEnabled",
          "DeviceHealthEarlyLaunchAntiMalwareDriverLoaded",
          "DeviceHealthOsKernelDebuggingDisabled",
          "DeviceHealthPlatformConfigurationRegister0",
          "DeviceHealthSafeModeDisabled",
          "DeviceHealthSecureBootEnabled",
          "DeviceHealthTestSigningEnabled",
          "DeviceHealthVirtualSecureModeEnabled",
          "DeviceHealthWindowsPreInstallationEnvironmentTurnedOff",
          "DeviceHealthAttestationEventEndRange",
          "SsoEntityAdded",
          "SsoEntityChanged",
          "SsoEntityDeleted",
          "SsoEnabled",
          "SsoDisabled",
          "SspAuthenticationChanged",
          "IosProfileCatalogChanged",
          "UserAccessToDeviceDenied",
          "UnlockUserAccount",
          "UnlockUserAccountRequestSuccess",
          "UnlockUserAccountRequestFailed",
          "DeleteUser",
          "DeleteUserRequestSuccess",
          "DeleteUserRequestFailed",
          "UserBindingResetRequest",
          "DecryptFileRequest",
          "RootCertExpiryCheckOk",
          "RootCertExpiryCheckWarning",
          "RootCertExpiryCheckRootGenerated",
          "VirtualGroupActualizationStarted",
          "VirtualGroupActualizationFailed",
          "VirtualGroupActualizationSucceeded",
          "EnrollInEFOTADelivered",
          "EnrollInEFOTAProcessing",
          "EnrollInEFOTAFailed",
          "EnrollInEFOTASucceeded",
          "UpgradeFirmwareADelivered",
          "UpgradeFirmwareProcessing",
          "UpgradeFirmwareFailed",
          "UpgradeFirmwareSucceeded",
          "EnrollInEFOTARequested",
          "UpgradeFirmwareRequested",
          "EFOTACredentialsFailed",
          "EFOTALicenseInvalid",
          "EFOTAConnectionFailed",
          "UpgradeFirmwareFetchFaild",
          "EnrollInEFOTAReadyForFirmwareUpgrade",
          "MigrateToAndroidEnterpriseProcessing",
          "MigrateToAndroidEnterpriseCertificateSent",
          "MigrateToAndroidEnterpriseCertificateInstallationCommandSent",
          "MigrateToAndroidEnterpriseCertificateInstalled",
          "MigrateToAndroidEnterpriseApkSent",
          "MigrateToAndroidEnterpriseCommandSent",
          "MigrateToAndroidEnterpriseSuccess",
          "MigrateToAndroidEnterpriseFailure",
          "MigrateToAndroidEnterpriseUploadCertificateFailed",
          "MigrateToAndroidEnterpriseGetCertificateFailed",
          "MigrateToAndroidEnterpriseCleanup",
          "EFOTAChangeLicenseGroup",
          "AndroidReenrollmentSuccess",
          "AndroidReenrollmentSuccessMismatch",
          "AndroidReenrollmentMultipleRecords",
          "AndroidReenrollmentAgentFailed",
          "DeviceRemoteSessionStarted",
          "DeviceRemoteSessionRejected",
          "DeviceRootCertificateSynchronizationDeployed",
          "DeviceRootCertificateSynchronizationFailed",
          "DeviceRootCertificateRemovedFromDevice",
          "DeviceEnrollmentSafetyNetCheck",
          "DeviceSafetyNetAttestationCheck",
          "DeviceFirmwarePasswordSetRequest",
          "DeviceFirmwarePasswordSetRequestSuccess",
          "DeviceFirmwarePasswordSetRequestFailed",
          "DeviceActionInstallPlugInRequested",
          "DeviceActionInstallPlugInFailed",
          "DeviceActionUpdatePlugInRequested",
          "DeviceActionUpdatePlugInFailed",
          "DeviceActionPluginInstalledSuccessfully",
          "DeviceActionPluginUpdatededSuccessfully",
          "DeviceErrorPluginSendNetworkMismatch",
          "DeviceRoamingRestrictionsEnforced",
          "DeviceResetAccount",
          "RefreshCellularPlansRequested",
          "RefreshCellularPlansSuccess",
          "RefreshCellularPlansFailedDeviceBusy",
          "RefreshCellularPlansFailed",
          "DeviceFirmwarePasswordSetRequestFailedWithError105",
          "DeviceFirmwarePasswordSetRequestFailedWithError107",
          "DeviceFirmwarePasswordSetRequestFailedWithError110",
          "DeleteUserRequestFailedWithError12071",
          "DeleteUserRequestFailedWithError12072",
          "DeleteUserRequestFailedWithError12073",
          "DeleteUserRequestFailedWithError12074",
          "SnapServerSettingsChanged",
          "ConnectServerSettingsChanged",
          "ConnectServerSettingsRemoved",
          "SnapServerSettingsRemoved",
          "HelpDeskServerSettingsRemoved",
          "UpdateLocateTimeout",
          "UpgradeFirmwareZebraRequested",
          "DisableAdminModeRequested",
          "DisableKioskModeRequested",
          "EnableAdminModeRequested",
          "EnableKioskModeRequested",
          "MailServerCreated",
          "MailServerUpdated",
          "MailServerRemoved",
          "MailServerConnectionSettingConfigured",
          "MailServerConnectionSuccess",
          "MailServerConnectionFailed",
          "CompliancePolicyCreated",
          "CompliancePolicyUpdated",
          "CompliancePolicyDeleted",
          "CompliancePolicyAssigned",
          "CompliancePolicyAssignmentDeleted",
          "CompliancePolicyEnabled",
          "CompliancePolicyDisabled",
          "CompliancePolicyActionsUpdated",
          "CompliancePolicyRunCompleted",
          "CompliancePolicyRunFailed",
          "CompliancePolicyRunStarted",
          "CompliancePolicyRunRequested",
          "EmailNotificationNoRecipients",
          "EmailNotificationSent",
          "EmailNotificationFailed",
          "ComplianceExecutableActionFailed",
          "BlockExchangeAccessComplianceActionRequested",
          "AllowExchangeAccessComplianceActionRequested",
          "ResetExchangeAccessComplianceActionRequested",
          "BlockExchangeAccessComplianceActionCompleted",
          "AllowExchangeAccessComplianceActionCompleted",
          "ResetExchangeAccessComplianceActionCompleted",
          "BlockExchangeAccessComplianceActionFailed",
          "AllowExchangeAccessComplianceActionFailed",
          "ResetExchangeAccessComplianceActionFailed",
          "EmailNotificationRecipientAddressNotResolved",
          "AdministrationCommandStarting",
          "AdministrationCommandFinished",
          "AdministrationCommandFailed",
          "AdministrationCommandCancelled",
          "AppCatalogRuleCreated",
          "AppCatalogRuleEnabled",
          "AppCatalogRuleDisabled",
          "AppCatalogRuleRenamed",
          "AppCatalogRuleChanged",
          "AppCatalogRuleDeleted",
          "AppCatalogRuleDeactivated",
          "EFOTASyncLicense"
        ],
        "enum": [
          "None",
          "DeploymentServerStart",
          "DeploymentServerStop",
          "DeploymentServerDisabled",
          "DeploymentServerEnabled",
          "DeploymentServerNotLicensed",
          "DeploymentServerDeleted",
          "ManagementServiceStart",
          "ManagementServiceStop",
          "ManagementServiceDeleted",
          "DeploymentServerErrorNoProfile",
          "DeploymentServerErrorName",
          "DeploymentServerErrorNoIpAddress",
          "DeploymentServerErrorCreateDevId",
          "ServerError",
          "DatabaseMaintenance",
          "LogTruncated",
          "DeleteOfflineDevices",
          "ServerUnused",
          "UnregisteredDeviceExchange",
          "CheckCertificate",
          "CheckCertificateFailure",
          "AcceptedDeviceExchange",
          "AcceptedEnterpriseResourceGateway",
          "UnregisteredDeviceEnterpriseResourceGateway",
          "DeleteExpiredIdpUsers",
          "MoveDevicePersonLoginToArchiveDb",
          "ManagerConnected",
          "ManagerDisconnected",
          "ManagerDifferentTime",
          "LogTruncatedManually",
          "DatabaseShrunk",
          "UserAdded",
          "UserUpdated",
          "UserDeleted",
          "UserGroupAdded",
          "DirectoryUserAdded",
          "DirectoryUserGroupAdded",
          "UserGroupDeleted",
          "DirectoryUserDeleted",
          "DirectoryUserGroupDeleted",
          "UserGroupUpdated",
          "DirectoryUserUpdated",
          "DirectoryUserGroupUpdated",
          "DirectoryUserAccountLocked",
          "DirectoryUserAccountUnlocked",
          "SsoUserGroupAdded",
          "SsoUserGroupDeleted",
          "SsoUserGroupUpdated",
          "SetLdapGroupSync",
          "IdpUserAdded",
          "IdpUserUpdatedEvent",
          "IdpUserGroupAdded",
          "DeviceMalwareFileQuarantineReset",
          "DeviceSupportInfoPushed",
          "DeviceNotRoaming",
          "NotMissingMandatoryApplication",
          "DeviceSecurityNotViolated",
          "CertificateRevoked",
          "CertificateRenewRequested",
          "CertificateRevokedFailed",
          "CertificateRenewFailed",
          "CertificateRenewed",
          "CertificatePushedToDevice",
          "DeviceSimInserted",
          "DeviceSimChanged",
          "DeviceSimRemoved",
          "DeviceContentFileSync",
          "DeviceConfigPending",
          "DeviceRenamed",
          "DeviceLocated",
          "DeviceLocateFailure",
          "DeviceEncryptionLevel",
          "DeviceCheckedInNotMdm",
          "DeviceProcessTerminated",
          "DeviceItunesStoreLoggedIn",
          "DeviceItunesStoreLoggedOut",
          "DeviceSupervisionEnabled",
          "DeviceSupervisionDisabled",
          "DeviceFindMyIphoneEnabled",
          "DeviceFindMyIphoneDisabled",
          "DeviceDoNotDistrurbEnabled",
          "DeviceDoNotDisturbDisabled",
          "DevicePersonalHotspotEnabled",
          "DevicePersonalHotspotDisabled",
          "DeviceLicenseError",
          "DeviceUnenrolled",
          "DeviceElmLicenseActivationFailure",
          "ScriptCommandNotSupported",
          "AppleITunesHashChanged",
          "DeviceFileSyncAttemptExhausted",
          "DeviceFileSyncActivity",
          "DeviceConnected",
          "DeviceDisconnected",
          "DeviceAdded",
          "DeviceFileSync",
          "DeviceLockdown",
          "DeviceLockdownRemoved",
          "DeviceCustomLog",
          "DeviceTimeSynchronization",
          "DeviceCustomData",
          "DeviceAdvancedSettings",
          "DeviceRemoteControl",
          "DeviceRelocated",
          "DeviceDataCollectionConfig",
          "DataCollected",
          "DeviceInaccurateTime",
          "DeviceGeofencingConfigured",
          "DeviceAlertConfigured",
          "DeviceEnteredGeofence",
          "DeviceExitedGeofence",
          "DeviceAgentUpgradeFailed",
          "DeviceBlockedOutgoing",
          "DeviceBlockedIncoming",
          "DeviceStoppedIllegalProcess",
          "ProcessLearned",
          "ManuallyRelocated",
          "DeviceCheckedIn",
          "DeviceConfigurationSuccess",
          "DeviceConfigurationRemoved",
          "DeviceSecurityViolated",
          "MissingMandatoryApplication",
          "DeviceRoaming",
          "DeviceManagementProfileRemoved",
          "DeviceDeleted",
          "DeviceHasBlacklistedApplication",
          "DeviceAdministrativeAccessDisabled",
          "DeviceAdministrativeAccessEnabled",
          "DeviceActionSentInternal",
          "DeviceTermsConditionsAccepted",
          "DeviceTermsConditionsRejected",
          "DeviceLabelsConfigured",
          "DeviceTermsConditionsPushed",
          "DeviceHasNoBlacklistedApplication",
          "DeviceMalwareApplicationDetected",
          "DeviceMalwareFileDetected",
          "DeviceMalwareApplicationQuarantined",
          "DeviceMalwareFileQuarantined",
          "DevicemalwareUrlBlocked",
          "DeviceMalwareApplicationQuarantineReset",
          "DeviceErrorInvalidMessage",
          "DeviceErrorInvalidVersion",
          "DeviceErrorUnknownClass",
          "DeviceErrorConnected",
          "DeviceErrorAckError",
          "DeviceErrorNoPackageId",
          "DeviceErrorNotUsed",
          "DeviceLicensesExceeded",
          "DeviceFileSyncError",
          "DeviceWrongSiteName",
          "DeviceFileSyncAborted",
          "DeviceEnabled",
          "DeviceDisabled",
          "DeviceRuleFilterFailure",
          "DeviceConfigurationFailure",
          "DeviceConfigurationRemoveFailure",
          "DeviceFeatureNotSupported",
          "DeviceContentFileNoPushNetworkMismatch",
          "DeviceRelocatedDueToReenrollment",
          "DeviceProfileRevokedByAdmin",
          "DeviceProfileInstalled",
          "DeviceProfileRemoved",
          "DeviceProfileFailedToInstall",
          "DeviceProfileFailedToRemove",
          "DeviceProfileInstalledByAdmin",
          "DeviceUserRequestedProfileInstallation",
          "DeviceUserRequestedProfileRemoval",
          "DeviceUserChangedByAdmin",
          "DeviceVppInvitationSent",
          "DeviceVppInvitationAccepted",
          "DeviceActivationLockEnabled",
          "DeviceActivationLockDisabled",
          "DeviceActivationLockBypassCodeRetrieved",
          "DeviceActivationLockBypassRequestHasBeenSent",
          "DeviceFailedToRequestActivationLockBypass",
          "DeviceActivationLockBypassCodeCannotBeRetrieved",
          "ApplicationStatusSetAsManaged",
          "ClearRestrictionsCommandReceived",
          "RenameDeviceSuccessful",
          "SetWallpaperSuccessful",
          "SetDeviceNameActionSent",
          "DeviceErrorAgentUpgradeNetworkMismatch",
          "RequestDeviceCheckIn",
          "ResetPasscodeActionSent",
          "BlockSotiSurfCommandRequested",
          "AllowSotiSurfCommandRequested",
          "DeviceSoftResetSent",
          "DeviceTurnOffSuspendSent",
          "DeviceDisablePasscodeLock",
          "UnenrollUserRequested",
          "UnenrollAdminRequested",
          "DeviceUnenrolledByUser",
          "DeviceUnenrolledByAdmin",
          "DeviceSclStatusChanged",
          "MdmLostModeEnabled",
          "MdmLostModeEnableFailed",
          "MdmLostModeEnableRequested",
          "MdmLostModeDisabled",
          "MdmLostModeDisableFailed",
          "MdmLostModeDisableRequested",
          "MdmLostModeLocateRequested",
          "OsUpdateScanSucceeded",
          "OsUpdateScanFailed",
          "OsUpdateScanRequested",
          "OsUpdateStatusRefreshRequested",
          "OsUpdateRequested",
          "OsUpdateStarted",
          "OsUpdateFailedToStart",
          "OsUpdateFailedToStartDeviceBusy",
          "OsUpdateRefreshStatusRequested",
          "OsUpdateStatusRefreshed",
          "OsUpdateStatusRefreshFailed",
          "AvailableOSUpdatesFailedDeviceBusy",
          "OsUpdateStatusRefreshFailedDeviceBusy",
          "ClearRestrictionsCommandSuccess",
          "ClearRestrictionsCommandFailed",
          "SuccessfullySotiSurfBlocked",
          "FailedToBlockSotiSurf",
          "AllowSotiSurfCommandSuccess",
          "AllowSotiSurfCommandFailed",
          "AllowSotiSurfCommandFailedDeviceBusy",
          "BlockSotiSurfCommandFailedDeviceBusy",
          "ClearRestrictionsCommandFailedDeviceBusy",
          "BypassActivationLockFailedNotFoundError",
          "BypassActivationLockFailed",
          "BypassActivationLockSuccess",
          "BypassActivationLockFailedRequestedAlreadyError",
          "ClearSotiSurfCacheRequested",
          "ClearSotiSurfCacheSucceeded",
          "ClearSotiSurfCacheFailed",
          "ClearSotiSurfCacheFailedDeviceBusy",
          "BlockSotiHubCommandRequested",
          "SuccessfullyBlockedSotiHub",
          "FailedToBlockSotiHub",
          "BlockSotiHubCommandFailedDeviceBusy",
          "ScanForVirusesRequested",
          "UpdateVirusDefinitionsRequested",
          "CommunicationErrorInitialization",
          "CommunicationErrorSendmesage",
          "CommunicationErrorSendFile",
          "CommunicationErrorReceiveFile",
          "AllowSotiHubCommandSuccess",
          "AllowSotiHubCommandFailed",
          "AllowSotiHubCommandFailedDeviceBusy",
          "AllowSotiHubCommandRequested",
          "ClearSotiHubCacheRequested",
          "ClearSotiHubCacheSucceeded",
          "ClearSotiHubCacheFailed",
          "ClearSotiHubCacheFailedDeviceBusy",
          "PrintTestPageSent",
          "FactoryReset",
          "DisablePasscodeLockCommandSuccess",
          "DisablePasscodeLockCommandFailed",
          "DisablePasscodeLockCommandFailedDeviceBusy",
          "SetWallpaperHomeScreenCommandSuccess",
          "SetWallpaperLockScreenCommandSuccess",
          "SetWallpaperCommandFailed",
          "SetWallpaperCommandFailedDeviceBusy",
          "GenerateUnlockCode",
          "EnableLostModeFailedDeviceBusy",
          "DisableLostModeFailedDeviceBusy",
          "AllowExchangeAccessRequested",
          "BlockExchangeAccessRequested",
          "TurnOffSuspendSuccess",
          "TurnOffSuspendFailed",
          "TurnOffSuspendFailedDeviceBusy",
          "UpdateManagementProfileRequested",
          "UpdateManagementProfileSuccess",
          "UpdateManagementProfileFailed",
          "UpdateManagementProfileFailedDeviceBusy",
          "ApplicationUpdateRequestedOnDevice",
          "ApplicationUpdateSuccess",
          "ApplicationUpdateFailedDeviceBusy",
          "ApplicationUpdateFailed",
          "ApplicationConfigurationSaved",
          "ApplicationConfigurationValidationFailed",
          "ApplicationUpdateRequestFailedOsVersionIncompatible",
          "ApplicationUpdateRequestFailedDuplicateRequest",
          "ProfilePayloadNotInstalledUnSupervisedDevice",
          "ProfilePayloadNotInstalledLowerOsVersionDevice",
          "ApplicationUpdateRequestedByServer",
          "ApplicationUpdateRequestFailedDeviceOsVersionLessThanMinimum",
          "DeviceCheckInCompleted",
          "DeviceEmptyCheckInCompleted",
          "ApplicationUpdateFailedReachedAttemptsLimit",
          "DatabaseCreated",
          "DatabaseDeleted",
          "DatabaseUpgradeAttempt",
          "DatabaseUpgradeComplete",
          "DeviceSoftResetSuccess",
          "DeviceSoftResetFailed",
          "DeviceSoftResetFailedDeviceBusy",
          "ApplicationUpdateFailedAppIsUptodate",
          "BluetoothDisableRequested",
          "BluetoothDisableFailed",
          "BluetoothDisableSuccess",
          "BluetoothEnableRequested",
          "BluetoothEnableFailed",
          "BluetoothEnableSuccess",
          "BluetoothEnableFailedDeviceBusy",
          "BluetoothDisableFailedDeviceBusy",
          "UpdateManagementProfileCommandAlreadyRequested",
          "PlaySoundRequested",
          "PlaySoundSuccess",
          "PlaySoundFailedDeviceBusy",
          "PlaySoundFailed",
          "WipeSuccess",
          "WipeFailed",
          "WipeAlreadyRequested",
          "UpdateMDMProfileRequestedByServer",
          "MaintenanceofiOSMdmProfilesStart",
          "MaintenanceofiOSMdmProfilesEnd",
          "UpgradeofVPPApplicationDataStart",
          "UpgradeofVPPApplicationDataSuccess",
          "UpgradeofVPPApplicationDataFailure",
          "NoCommandGeneratedUnxpectedError",
          "NoCommandGeneratedDuplicateCommand",
          "IosAppIsB2bButFoundInItuneStore",
          "IosAppNotFoundInItuneStore",
          "IosAppNotAvailableForPurchase",
          "AppUsedInB2BAndRegularRule",
          "DuplicateRegularAppRemoved",
          "DuplicateB2BAppRemoved",
          "UpgradeofB2BApplicationDataStart",
          "UpgradeofB2BApplicationDataSuccess",
          "UpgradeofB2BApplicationDataFailure",
          "B2BAppUsedInRegularRule",
          "RegularAppUsedInB2BRule",
          "MaintenanceofiOsMdmProfilesEndWithMoreInfo",
          "DatabaseErrorRuleNotFound",
          "DatabaseErrorAddingDevice",
          "IosDeviceUnenrolledDueToOffline7Days",
          "IosDeviceTokenUpdateWithEmptyBody",
          "AppStoreAppNotAvailableAndUsedAsB2B",
          "ClientCertificateValidationFailedNotValidYet",
          "ClientCertificateValidationFailedExpired",
          "ClientCertificateValidationFailedUnknownIssuer",
          "ClientCertificateValidationFailedNotInternalScep",
          "ClientCertificateValidationFailedToBeRenewed",
          "SotiMobiControlSharedDeviceProfileSingleAppModeRemovalSuccess",
          "SotiMobiControlSharedDeviceProfileSingleAppModeRemovalFailed",
          "SotiMobiControlSharedDeviceProfileSotiLoginAppUninstallSuccess",
          "SotiMobiControlSharedDeviceProfileSotiLoginAppUninstallFailed",
          "SotiMobiControlSharedDeviceProfileRemovedSuccess",
          "CheckInFailedUnexpectedError",
          "SharedDeviceSecurityTokenWasGenerated",
          "SharedDeviceSecurityTokenWasDeleted",
          "RemoveApplicationCommandSuccess",
          "RemoveApplicationCommandError",
          "RemoveApplicationCommandNotNow",
          "MultiUserSignedOut",
          "MultiUserSignedIn",
          "MultiUserSignedOutByAdmin",
          "DeviceUserAuthenticationSuccess",
          "DeviceUserAuthorizationFailure",
          "DeviceHasLatestAppInstalled",
          "DeviceApplicationAlreadyPresent",
          "DeviceApplicationWontBeRequestWithoutUserBasedVPPAssignment",
          "InstallApplicationFailedDueToDeviceNotBelongToVppOrg",
          "UserEnrollmentDeviceRequiresUserBasedVppApplication",
          "DeviceApplicationRetryRequested",
          "DeviceUserRequestedApplicationInstallation",
          "ResetExchangeAccessRequested",
          "AppFeedbackUpdateRequested",
          "JobSucceeded",
          "JobPushStarted",
          "JobScheduleStarted",
          "JobUninstalled",
          "JobError",
          "JobErrorCommunication",
          "JobErrorFileNotFound",
          "JobErrorCreateFile",
          "JobErrorWriteFile",
          "JobErrorNoSpace",
          "JobErrorIncompatible",
          "JobErrorCorruptedFile",
          "JobErrorAborted",
          "JobErrorDependentFailed",
          "JobErrorAbortedByScript",
          "JobErrorDeviceNotAuthenticated",
          "JobErrorGeneric",
          "JobErrorNotSupported",
          "RuleCreated",
          "RuleEnabled",
          "RuleDisabled",
          "RuleRenamed",
          "RuleChanged",
          "RuleDeleted",
          "RuleBarcodeGenerated",
          "RuleDeactivated",
          "RequestSharedDeviceLogoutByAdministrator",
          "MultiUserLoginClearAppFailed",
          "MultiUserLogoutClearAppFailed",
          "MultiUserLoginRemoveProfileFailed",
          "MultiUserLogoutRemoveProfileFailed",
          "MultiUserLoginRemovingApps",
          "MultiUserLogoutRemovingApps",
          "MultiUserLoginRemovingProfiles",
          "MultiUserLogoutRemovingProfiles",
          "MultiUserLogoutDisablingPasscode",
          "MultiUserLoginRemovingAppsFailed",
          "MultiUserLogoutRemovingAppsFailed",
          "MultiUserLoginFailed",
          "MultiUserLogoutFailed",
          "MultiUserLogoutDisablingPasscodeFailed",
          "MultiUserCheckinRequested",
          "MultiUserLoginRelocateFailed",
          "MultiUserLogoutRelocateFailed",
          "MultiUserLoginRelocating",
          "MultiUserLogoutRelocating",
          "MultiUserLoginRemovingAppsFailedUnknownError",
          "MultiUserLogoutRemovingAppsFailedUnknownError",
          "MultiUserLoginRemoveProfileFailedUnknownError",
          "MultiUserLogoutRemoveProfileFailedUnknownError",
          "MultiUserLogoutDisablingPasscodeFailedUnknownError",
          "MultiUserLogoutClearAppFailedUnknownError",
          "MultiUserLoginClearAppFailedUnknownError",
          "MultiUserLoginRemovingAppsDeviceBusy",
          "MultiUserLogoutRemovingAppsDeviceBusy",
          "MultiUserLoginRemovingProfilesDeviceBusy",
          "MultiUserLogoutRemovingProfilesDeviceBusy",
          "MultiUserTroubleshootActionRequestByAdministrator",
          "MultiUserLoginBypassRemovingAppsErrorSuccess",
          "MultiUserLogoutBypassRemovingAppsErrorSuccess",
          "MultiUserLoginBypassRemovingAppsErrorFailure",
          "MultiUserLogoutBypassRemovingAppsErrorFailure",
          "MultiUserLoginBypassRemovingAppsUnexpectedErrorSuccess",
          "MultiUserLogoutBypassRemovingAppsUnexpectedErrorSuccess",
          "MultiUserLoginBypassRemovingAppsUnexpectedErrorFailure",
          "MultiUserLogoutBypassRemovingAppsUnexpectedErrorFailure",
          "MultiUserLoginBypassRelocateErrorSuccess",
          "MultiUserLogoutBypassRelocateErrorSuccess",
          "MultiUserLoginBypassRelocateErrorFailure",
          "MultiUserLogoutBypassRelocateErrorFailure",
          "MultiUserLoginBypassRemovingProfilesErrorSuccess",
          "MultiUserLogoutBypassRemovingProfilesErrorSuccess",
          "MultiUserLoginBypassRemovingProfilesErrorFailure",
          "MultiUserLogoutBypassRemovingProfilesErrorFailure",
          "MultiUserLoginBypassRemovingProfilesUnexpectedErrorSuccess",
          "MultiUserLogoutBypassRemovingProfilesUnexpectedErrorSuccess",
          "MultiUserLoginBypassRemovingProfilesUnexpectedErrorFailure",
          "MultiUserLogoutBypassRemovingProfilesUnexpectedErrorFailure",
          "MultiUserLogoutBypassDisablePasscodeErrorSuccess",
          "MultiUserLogoutBypassDisablePasscodeErrorFailure",
          "MultiUserLogoutBypassDisablePasscodeUnexpectedErrorSuccess",
          "MultiUserLogoutBypassDisablePasscodeUnexpectedErrorFailure",
          "MultiUserLoginBypassLoginErrorSuccess",
          "MultiUserLogoutBypassLogoutErrorSuccess",
          "MultiUserLoginBypassLoginFailure",
          "MultiUserLogoutBypassLogoutErrorFailure",
          "MultiUserLoginDeviceProgramWiped",
          "MultiUserLogoutDeviceProgramWiped",
          "MultiUserLoginBypassRemovingAppsDataErrorSuccess",
          "MultiUserLoginBypassRemovingAppsDataErrorFailure",
          "MultiUserLogoutBypassRemovingAppsDataErrorSuccess",
          "MultiUserLogoutBypassRemovingAppsDataErrorFailure",
          "MultiUserLoginBypassRemovingAppsDataUnexpectedErrorSuccess",
          "MultiUserLoginBypassRemovingAppsDataUnexpectedErrorFailure",
          "MultiUserLogoutBypassRemovingAppsDataUnexpectedErrorSuccess",
          "MultiUserLogoutBypassRemovingAppsDataUnexpectedErrorFailure",
          "DeviceUserTermsConditionsAccepted",
          "DeviceUserTermsConditionsRejected",
          "AutoUpdateAppVersionSearchStarted",
          "AutoUpdateAppVersionApplicationNotFound",
          "AutoUpdateAppVersionNewerVersionNotFound",
          "AutoUpdateAppVersionNewerVersionFound",
          "AutoUpdateAppVersionRuleUpdatedWithNewerAppVersion",
          "AutoUpdateAppVersionSearchCompleted",
          "AutoUpdateAppVersionRuleChanged",
          "HotspotDisableRequested",
          "HotspotDisableFailed",
          "HotspotDisableSuccess",
          "HotspotDisableFailedDeviceBusy",
          "HotspotEnableRequested",
          "HotspotEnableFailed",
          "HotspotEnableSuccess",
          "HotspotEnableFailedDeviceBusy",
          "ActiveDirectoryLogonSuccess",
          "ActiveDirectoryLogonFailure",
          "ActiveDirectoryPasswordChangeSuccess",
          "MobiControlPasswordChangeFailed",
          "LogOnSuccess",
          "LogOnFailure",
          "LogOff",
          "MaxNumberOfPasswordAttempts",
          "MobiControlPasswordChanged",
          "WebContentLibraryFileAdded",
          "WebContentLibraryFileDeleted",
          "WebContentLibraryFileRenamed",
          "WebContentLibraryFileMoved",
          "WebContentLibraryFileUpdated",
          "WebContentLibraryFolderAdded",
          "WebContentLibraryFolderDeleted",
          "WebContentLibraryFolderRenamed",
          "WebContentLibraryFolderMoved",
          "WebContentLibraryModified",
          "WebContentLibraryCategoryAdded",
          "WebContentLibraryCategoryUpdated",
          "WebContentLibraryCategoryDeleted",
          "WebContentLibraryFileVersionAdded",
          "WebContentLibraryFileVersionRestored",
          "MobiControlWebSessionTimeout",
          "MobiControlForgetPasswordAttempt",
          "ActiveDirectoryServiceErrorMessage",
          "LogOnFailureUserNotInDb",
          "LogOnFailureUserNotInLDAP",
          "LogOnFailureIncorrectGroup",
          "LogOnFailurePasswordIncorrect",
          "LogOnFailureAccountLocked",
          "LogOnFailureAccessDenied",
          "LogOnFailureWebConsoleAccessBlockedByUser",
          "SamlErrorInvalid",
          "SamlErrorMissingElement",
          "SamlErrorInvalidElement",
          "SamlErrorMultipleAssertions",
          "SamlErrorMissingReferenceUri",
          "SamlErrorInvalidReferenceUri",
          "SamlErrorSignatureValidationFailed",
          "SamlErrorInvalidSecurityToken",
          "SamlErrorIdpLogonNotSupported",
          "SamlErrorNoRequestParams",
          "AssertionNeedsToBeSigned",
          "ResponseNeedsToBeSigned",
          "MobiControlTerminateConcurrentSessions",
          "FederationMetadataAutomaticallyUpdated",
          "AutomaticFederationMetadataUpdateFailed",
          "MaxWebEvent",
          "BlockedExchangeAccess",
          "FailedToUpdateMetadataFile",
          "AndroidPluginInstalled",
          "AndroidPluginInstallFailed",
          "AndroidPluginInstallFailedDevice",
          "AndroidPluginInstallNotAvailable",
          "AndroidPlugInOnlyLocalPlugInAvailableRequested",
          "AndroidPlugInServerOutDatedInstallation",
          "AndroidPlugInAdsRetrievalFailed",
          "PermissionOnEnrollRequested",
          "AdsSyncFailure",
          "UpdateAllowedAndroidType",
          "UpdateSamsungElmConfiguration",
          "UploadLoginPortalBrandingImage",
          "UploadEnrollmentPortalBrandingImage",
          "UploadAdminConsolePortalBrandingImage",
          "UploadSsPortalBrandingImage",
          "RemoveLoginPortalBrandingImage",
          "RemoveEnrollmentPortalBrandingImage",
          "RemoveAdminConsolePortalBrandingImage",
          "RemoveSsPortalBrandingImage",
          "UpdateDeviceMatchCriteria",
          "UpdateUserUnenrollActionSettings",
          "AccessPointDiscoveryStart",
          "AccessPointCollectionStart",
          "AccessPointConfigUpdateStart",
          "AccessPointNewDeviceFound",
          "AccessPointConfigUpdated",
          "AccessPointGeneralError",
          "AccessPointDeviceNotSupported",
          "AccessPointInvalidProfile",
          "AccessPointInvalidConfig",
          "AccessPointDeviceDeleted",
          "AccessPointDeviceDown",
          "AccessPointSnmpError",
          "AccessPointSnmpAuthFailure",
          "AccessPointFtpError",
          "AccessPointFtpErrorConnect",
          "AccessPointFtpAuthFailure",
          "AccessPointFtpNotFound",
          "AccessPointCliError",
          "AccessPointCliErrorConnect",
          "AccessPointCliAuthFailure",
          "AccessPointExportFailure",
          "AccessPointImportFailure",
          "AccessPointHttpError",
          "AccessPointHttpAuthFailure",
          "AccessPointHttpBadResponse",
          "HoneywellMessage",
          "HoneywellConfigurationFailed",
          "HoneywellRpaError",
          "InsufficientPrinterLicenses",
          "BatteryLowSet",
          "BatteryLowClear",
          "CleanPrintHead",
          "CutterJammedSet",
          "CutterJammedClear",
          "HeadColdSet",
          "HeadColdClear",
          "HeadElementBad",
          "HeadOpenSet",
          "HeadOpenClear",
          "HeadTooHotSet",
          "HeadTooHotClear",
          "LabelReadySet",
          "LabelReadyClear",
          "MediaLowSet",
          "MediaLowClear",
          "PaperOutSet",
          "PaperOutClear",
          "PowerSupplyOverTempSet",
          "PowerSupplyOverTempClear",
          "PqJobCompleted",
          "PrinterPausedSet",
          "PrinterPausedClear",
          "ReplaceHead",
          "RewindFullSet",
          "RewindFullClear",
          "RfidErrorSet",
          "RfidErrorClear",
          "RibbonInWarningSet",
          "RibbonInWarningClear",
          "RibbonLowSet",
          "RibbonLowClear",
          "RibbonOutSet",
          "RibbonOutClear",
          "ZbiBasicForcedError",
          "ZbiBasicRuntimeError",
          "PasCreated",
          "PasEdited",
          "PasConnected",
          "PasDisconnected",
          "PasDeleted",
          "ForceDeviceScanSent",
          "DeviceClearCacheRequest",
          "DeviceAllowContentRequest",
          "DeviceBlockContentRequest",
          "AlertQueueLength",
          "AlertWorkerThread",
          "DeviceOutOfContact",
          "CustomAlert",
          "DeviceInContact",
          "DeviceHasNotCheckedIn",
          "ProdActivationSuccess",
          "ProdActivationFailure",
          "ProdActivationCheck4UpdateSucceed",
          "ProdActivationCheck4UpdateFailed",
          "CloudLinkCreated",
          "CloudLinkModified",
          "CloudLinkDeleted",
          "CloudLinkNotReachable",
          "NonElmEnrollmentBlocked",
          "MessagingServiceError",
          "AppleMessagingServiceError",
          "ReportScheduleCreated",
          "ReportScheduleCloned",
          "ReportScheduleModified",
          "ReportScheduleDeleted",
          "ReportScheduleDisabled",
          "ReportScheduleResent",
          "ReportScheduleFailed",
          "ReportTruncated",
          "DeviceLicenseRemaining",
          "DeviceLicenseRemainingPrecentage",
          "ReportScheduleEnabled",
          "UserScanVirus",
          "UserUpdateVirusDefinition",
          "UserScanIntegrityServerBaseline",
          "UserScanIntegrityServer",
          "UserLockContainer",
          "UserUnlockContainter",
          "DeviceResetPasscodeRequest",
          "DeviceConfigurationChanged",
          "DeviceRename",
          "DeviceLocateRequest",
          "DeviceLocateFailureRequest",
          "DeviceStopLocateRequest",
          "DeviceMoved",
          "DeviceConfigurationDeleted",
          "DeviceDeletionRequestedByUser",
          "DeviceActionSent",
          "DeviceCustomAttribute",
          "DeviceEnableRequest",
          "DeviceDisableRequest",
          "DeviceUnenrolled2",
          "DeviceTraceRequest",
          "DevicePushPackageRequest",
          "DeviceSyncFileRequest",
          "DeviceRemoteControlRequest",
          "DeviceUnlockCodeRequest",
          "DeviceAgentUpgradeEnabled",
          "DeviceAgentUpgradeDisabled",
          "DevicePublishWakeupMessage",
          "DeviceLockRequest",
          "DeviceRefreshStatusRequest",
          "DeviceRestartRequest",
          "DeviceWipeRequest",
          "DeviceUnlockRequest",
          "DevicePropertyChanged",
          "DeviceExchangeFilterSetBlock",
          "DeviceExchangeFilterSetUnblock",
          "DeviceExchangeFilterRemoved",
          "DeviceNoteAdded",
          "DeviceNoteUpdated",
          "DeviceNoteDeleted",
          "DeviceProgramRemoved",
          "DeviceProgramWiped",
          "DeviceElmUpgradeEnabled",
          "DeviceElmUpgradeDisabled",
          "DeviceGroupAgentElmUpgradeEnabled",
          "DeviceGroupAgentElmUpgradeDisabled",
          "DeviceRemoteLockAndResetPassword",
          "DeviceRemotePing",
          "DeviceResetContainerPasscodeRequest",
          "DeviceRemoteSessionEnded",
          "SendScriptRequest",
          "SendMessageRequest",
          "DeviceLocationHistory",
          "SendScriptViaSmsRequest",
          "SendSmsRequest",
          "SetWallpaperRequest",
          "DeviceAgentUpgradeRequested",
          "DeviceProgramUpdated",
          "SendScriptViaPnsRequest",
          "DeviceUpgradeAgent",
          "DeviceUpdateLicenseRequest",
          "DeviceUpdateLicenseFailed",
          "DeviceUpdateLicenseSuccess",
          "WindowsModernWipeExecuted",
          "IosDeviceApnsTokenIsInvalid",
          "DeviceGroupResetPasscodeRequest",
          "DeviceGroupConfigurationChanged",
          "DeviceGroupRenamed",
          "DeviceGroupLocateRequest",
          "DeviceGroupLocateFailureRequest",
          "DeviceGroupStopLocateRequest",
          "DeviceGroupMoved",
          "DeviceGroupConfigurationDeleted",
          "DeviceGroupDeleted",
          "DeviceGroupActionSent",
          "DeviceGroupCustomAttribute",
          "DeviceGroupEnabled",
          "DeviceGroupDisabled",
          "DeviceGroupAdded",
          "DeviceGroupTraceRequest",
          "DeviceGroupPushPackageRequest",
          "DeviceGroupSyncFileRequest",
          "DeviceGroupAgentUpgradeEnabled",
          "DeviceGroupAgentUpgradeDisabled",
          "DeviceGroupPublishWakeupMessage",
          "DeviceGroupLockRequest",
          "DeviceGroupRefreshStatusRequest",
          "DeviceGroupRestartRequest",
          "DeviceGroupUnlockRequest",
          "DeviceGroupWipeRequest",
          "DeviceGroupExchangeFilterSetBlock",
          "DeviceGroupExchangeFilterSetUnblock",
          "DeviceGroupNoteAdded",
          "DeviceGroupNoteUpdated",
          "DeviceGroupNoteDeleted",
          "DeviceGroupProgramRemoved",
          "DeviceGroupProgramWiped",
          "DeviceGroupProgramUpdated",
          "DeviceGroupUpgradeAgent",
          "ManagementServiceStarted",
          "ManagementServiceRequestStop",
          "ManagementServiceDeploymentServerDisabled",
          "ManagementServiceDeploymentServerEnabled",
          "AdminContactInfoChanged",
          "BESLinkChanged",
          "ConsoleSecuritySettingChanged",
          "LogTruncateManuallyRequest",
          "DatabaseShrinkRequest",
          "AlertTruncateManuallyRequest",
          "ManagementServiceUserAdded",
          "ManagementServiceUserUpdated",
          "ManagementServiceUserDeleted",
          "UserAttemptingToUpgradeDatabase",
          "UserProductActivationSuccess",
          "UserProductActivationFailed",
          "EnrollmentPublishRequest",
          "EnrollmentRemoved",
          "EnrollmentUpdated",
          "ManagementServiceDetectedStop",
          "ManagementServiceStartRequest",
          "ManagementServiceStopRequest",
          "DatabaseConfigurationChanged",
          "ManagementServiceAddressChanged",
          "LogLevelChanged",
          "LogMaintenanceConfigurationChanged",
          "ApplicationUpdateRequested",
          "DeviceEnrollmentFailed",
          "GeofencingAdded",
          "GeofencingDeleted",
          "GeofencingRenamed",
          "EmailProfileAdded",
          "EmailProfileDeleted",
          "EmailProfileChanged",
          "EmailProfileTextSent",
          "ExchangeFilterChanged",
          "ExchangeFilterDeleted",
          "BinaryFileAdded",
          "TextFileAdded",
          "CertificationFileAdded",
          "ScriptFileAdded",
          "SkinFileAdded",
          "OtherFileAdded",
          "LockdownTemplateFileAdded",
          "FileDeleted",
          "FileRenamed",
          "TextFileChanged",
          "ScriptFileChanged",
          "LockdownTemplateFileChanged",
          "ActivateRegistrationSuccess",
          "ActivateRegistrationFailure",
          "AgentBuildRequest",
          "AgentBuildSuccess",
          "AgentCreated",
          "AgentDeleted",
          "AgentExported",
          "AgentBarcodeGenerated",
          "AlertStateChanged",
          "ArubaSettingChanged",
          "BingMapTokenRequest",
          "CertificationAuthorityChanged",
          "CertificationAuthorityDeleted",
          "CertificationAuthorityTestRequest",
          "CertificationTemplateChanged",
          "CertificationTemplateDeleted",
          "ContainerAdded",
          "ContainerUpdated",
          "ContainerDeleted",
          "CustomDataTypeAdded",
          "CustomDataTypeUpdated",
          "CustomDataTypeDeleted",
          "DeviceFilterAdded",
          "DeviceFilterUpdated",
          "DeviceFilterDeleted",
          "DeviceFilterCloned",
          "UpdateLabel",
          "UpdateLabelType",
          "LdapConnectionAdded",
          "LdapConnectionUpdated",
          "LdapConnectionDeleted",
          "OldPackageVersionAdded",
          "PackageVersionDependenciesChanged",
          "OldPackageVersionDeleted",
          "ScheduleAdded",
          "ScheduleUpdated",
          "ScheduleDeleted",
          "TelecomPlanAdded",
          "TelecomPlanUpdated",
          "TelecomPlanDeleted",
          "PrincipalPermissionChanged",
          "PrincipalGroupPermissionChanged",
          "ChangePrincipalPermission",
          "ChangePrincipalGroupPermission",
          "PrincipalPasswordChanged",
          "FileExported",
          "HelpDeskServerSettingsChanged",
          "FileListCleanUp",
          "GoogleAndroidWorkEnterpriseBindingAdded",
          "GoogleAndroidWorkEnterpriseBindingAddFailed",
          "GoogleAndroidWorkEnterpriseBindingRemoved",
          "GoogleAndroidWorkEnterpriseBindingRemoveFailed",
          "GoogleAndroidWorkAcceptProductCapabilitiesFailure",
          "GoogleAndroidWorkAcceptProductCapabilitiesSuccess",
          "GoogleAndroidWorkCreateOrUpdateProductSetFailure",
          "GoogleAndroidWorkCreateOrUpdateProductSetSuccess",
          "GoogleAndroidWorkDeleteProductSetFailure",
          "GoogleAndroidWorkDeleteProductSetSuccess",
          "GoogleAndroidWorkDisableRequestSent",
          "GoogleAndroidWorkEnableRequestSent",
          "GoogleAndroidWorkEnterpriseAdded",
          "GoogleAndroidWorkEnterpriseAddFailed",
          "GoogleAndroidWorkEnterpriseRemoved",
          "GoogleAndroidWorkEnterpriseRemoveFailed",
          "MacroResolutionFailed",
          "AndroidApplicationFeedbackErrors",
          "AndroidApplicationFeedbackRequested",
          "AndroidApplicationFeedbackRequestFailed",
          "AndroidApplicationFeedbackReceived",
          "PackageVersionAdded",
          "PackageInstalled",
          "PackageDependencyMissing",
          "PackageInstallationFailure",
          "PackageUninstalled",
          "PackageDownloaded",
          "PackageHasCircularDependency",
          "PackageReinstalled",
          "PackageScheduleInstalled",
          "PackageHasAnotherVersionInstalled",
          "PackageFailedToDeploy",
          "PackageVersionMigrated",
          "PackageVersionDeleted",
          "PackageVersionRequestedToReinstall",
          "DeviceProgramWipeFailed",
          "DeviceProgramWipe",
          "SecurityPrincipalPermissionChanged",
          "ProfileCreated",
          "ProfileVersionAdded",
          "ProfileAssigned",
          "ProfileDisabled",
          "ProfileDeleted",
          "ProfileRevoked",
          "ProfileCloned",
          "ProfileAssignmentScheduled",
          "ProfileDisablementScheduled",
          "ProfileRevocationScheduled",
          "ProfileScheduledAssignmentSucceeded",
          "ProfileScheduledAssignmentFailed",
          "ProfileScheduledDisablementSucceeded",
          "ProfileScheduledDisablementFailed",
          "ProfileScheduledRevocationSucceeded",
          "ProfileScheduledRevocationFailed",
          "ProfileNameModified",
          "ProfileDescriptionModified",
          "ProfileAccessControlModified",
          "ProfileConfigurationModified",
          "ProfileCreatedDuringUpgrade",
          "ProfileCreatedDuringInstallation",
          "ReattemptFailedProfileInstallation",
          "PayloadIgnoredDueToIncompatibleData",
          "UserTriggeredReport",
          "ProxyFilterChanged",
          "ProxyFilterDeleted",
          "AppleDeviceEnrollmentConfigured",
          "AppleDeviceEnrollmentProgramProcessingFailure",
          "AppleDeviceEnrollmentDevicesAssigned",
          "AppleDeviceEnrollmentDeviceAssigned",
          "AppleDeviceEnrollmentDevicesRemoved",
          "AppleDeviceEnrollmentDeviceRemoved",
          "AppleDeviceEnrollmentProgramSyncDevicesSuccess",
          "AppleDeviceEnrollmentProgramSyncDevicesFailure",
          "AppleDeviceEnrollmentDevicesUnassigned",
          "AppleDeviceEnrollmentDeviceUnassigned",
          "AppleDeviceEnrollmentAssignmentFailure",
          "VppLicenseAssignmentFailed",
          "VppLicenseAssigned",
          "VppLicenseRevoked",
          "VppAppleIdLicenseAssigned",
          "VppAppleIdLicenseNotAssigned",
          "VppAppleIdLicenseRevoked",
          "VppDeviceLicenseAssigned",
          "VppDeviceLicenseRevoked",
          "VppDeviceLicenseRevokedServerLog",
          "VppReconcileSucceeded",
          "VppAccountLostOwnership",
          "VppCleanUpSucceeded",
          "VppReclaimedOwnership",
          "VppMaintenanceNoLicenseAvailable",
          "VppAccountNoLicenseAvailable",
          "ElasticsearchConfigurationChanged",
          "ElasticsearchIsNotReacheable",
          "ElasticsearchConnectivityRestored",
          "DeviceHealthReported",
          "DeviceHealthReportFailed",
          "DeviceHealthReportNotSupported",
          "DeviceModernApplicationManagementEvent",
          "UpdateAntivirusSignaturesAdminRequest",
          "AntivirusQuickScanAdminRequest",
          "AntivirusScanAdminRequest",
          "UpdateAntivirusSignaturesStarted",
          "UpdateAntivirusSignaturesFailed",
          "AntivirusScanStarted",
          "AntivirusScanFailed",
          "AntivirusDisabled",
          "DeviceDesktopApplicationManagementEvent",
          "RebootTriggeredEvent",
          "RebootFailedEvent",
          "WnsNotificationFailedEvent",
          "ScepInstallationEvent",
          "AppLockerInstallFailedEvent",
          "DeviceHealthAzureAccessStatusChanged",
          "DeviceHealthReportRequested",
          "DeviceHealthIdentityKeyPresent",
          "DeviceHealthAttestationEventStartRange",
          "DeviceHealthBitLockerStatusEnabled",
          "DeviceHealthBootDebuggingDisabled",
          "DeviceHealthBootManagerRevListVersion",
          "DeviceHealthCodeIntegrityEnabled",
          "DeviceHealthCodeIntegrityRevListVersion",
          "DeviceHealthDataExecutionPreventionEnabled",
          "DeviceHealthEarlyLaunchAntiMalwareDriverLoaded",
          "DeviceHealthOsKernelDebuggingDisabled",
          "DeviceHealthPlatformConfigurationRegister0",
          "DeviceHealthSafeModeDisabled",
          "DeviceHealthSecureBootEnabled",
          "DeviceHealthTestSigningEnabled",
          "DeviceHealthVirtualSecureModeEnabled",
          "DeviceHealthWindowsPreInstallationEnvironmentTurnedOff",
          "DeviceHealthAttestationEventEndRange",
          "SsoEntityAdded",
          "SsoEntityChanged",
          "SsoEntityDeleted",
          "SsoEnabled",
          "SsoDisabled",
          "SspAuthenticationChanged",
          "IosProfileCatalogChanged",
          "UserAccessToDeviceDenied",
          "UnlockUserAccount",
          "UnlockUserAccountRequestSuccess",
          "UnlockUserAccountRequestFailed",
          "DeleteUser",
          "DeleteUserRequestSuccess",
          "DeleteUserRequestFailed",
          "UserBindingResetRequest",
          "DecryptFileRequest",
          "RootCertExpiryCheckOk",
          "RootCertExpiryCheckWarning",
          "RootCertExpiryCheckRootGenerated",
          "VirtualGroupActualizationStarted",
          "VirtualGroupActualizationFailed",
          "VirtualGroupActualizationSucceeded",
          "EnrollInEFOTADelivered",
          "EnrollInEFOTAProcessing",
          "EnrollInEFOTAFailed",
          "EnrollInEFOTASucceeded",
          "UpgradeFirmwareADelivered",
          "UpgradeFirmwareProcessing",
          "UpgradeFirmwareFailed",
          "UpgradeFirmwareSucceeded",
          "EnrollInEFOTARequested",
          "UpgradeFirmwareRequested",
          "EFOTACredentialsFailed",
          "EFOTALicenseInvalid",
          "EFOTAConnectionFailed",
          "UpgradeFirmwareFetchFaild",
          "EnrollInEFOTAReadyForFirmwareUpgrade",
          "MigrateToAndroidEnterpriseProcessing",
          "MigrateToAndroidEnterpriseCertificateSent",
          "MigrateToAndroidEnterpriseCertificateInstallationCommandSent",
          "MigrateToAndroidEnterpriseCertificateInstalled",
          "MigrateToAndroidEnterpriseApkSent",
          "MigrateToAndroidEnterpriseCommandSent",
          "MigrateToAndroidEnterpriseSuccess",
          "MigrateToAndroidEnterpriseFailure",
          "MigrateToAndroidEnterpriseUploadCertificateFailed",
          "MigrateToAndroidEnterpriseGetCertificateFailed",
          "MigrateToAndroidEnterpriseCleanup",
          "EFOTAChangeLicenseGroup",
          "AndroidReenrollmentSuccess",
          "AndroidReenrollmentSuccessMismatch",
          "AndroidReenrollmentMultipleRecords",
          "AndroidReenrollmentAgentFailed",
          "DeviceRemoteSessionStarted",
          "DeviceRemoteSessionRejected",
          "DeviceRootCertificateSynchronizationDeployed",
          "DeviceRootCertificateSynchronizationFailed",
          "DeviceRootCertificateRemovedFromDevice",
          "DeviceEnrollmentSafetyNetCheck",
          "DeviceSafetyNetAttestationCheck",
          "DeviceFirmwarePasswordSetRequest",
          "DeviceFirmwarePasswordSetRequestSuccess",
          "DeviceFirmwarePasswordSetRequestFailed",
          "DeviceActionInstallPlugInRequested",
          "DeviceActionInstallPlugInFailed",
          "DeviceActionUpdatePlugInRequested",
          "DeviceActionUpdatePlugInFailed",
          "DeviceActionPluginInstalledSuccessfully",
          "DeviceActionPluginUpdatededSuccessfully",
          "DeviceErrorPluginSendNetworkMismatch",
          "DeviceRoamingRestrictionsEnforced",
          "DeviceResetAccount",
          "RefreshCellularPlansRequested",
          "RefreshCellularPlansSuccess",
          "RefreshCellularPlansFailedDeviceBusy",
          "RefreshCellularPlansFailed",
          "DeviceFirmwarePasswordSetRequestFailedWithError105",
          "DeviceFirmwarePasswordSetRequestFailedWithError107",
          "DeviceFirmwarePasswordSetRequestFailedWithError110",
          "DeleteUserRequestFailedWithError12071",
          "DeleteUserRequestFailedWithError12072",
          "DeleteUserRequestFailedWithError12073",
          "DeleteUserRequestFailedWithError12074",
          "SnapServerSettingsChanged",
          "ConnectServerSettingsChanged",
          "ConnectServerSettingsRemoved",
          "SnapServerSettingsRemoved",
          "HelpDeskServerSettingsRemoved",
          "UpdateLocateTimeout",
          "UpgradeFirmwareZebraRequested",
          "DisableAdminModeRequested",
          "DisableKioskModeRequested",
          "EnableAdminModeRequested",
          "EnableKioskModeRequested",
          "MailServerCreated",
          "MailServerUpdated",
          "MailServerRemoved",
          "MailServerConnectionSettingConfigured",
          "MailServerConnectionSuccess",
          "MailServerConnectionFailed",
          "CompliancePolicyCreated",
          "CompliancePolicyUpdated",
          "CompliancePolicyDeleted",
          "CompliancePolicyAssigned",
          "CompliancePolicyAssignmentDeleted",
          "CompliancePolicyEnabled",
          "CompliancePolicyDisabled",
          "CompliancePolicyActionsUpdated",
          "CompliancePolicyRunCompleted",
          "CompliancePolicyRunFailed",
          "CompliancePolicyRunStarted",
          "CompliancePolicyRunRequested",
          "EmailNotificationNoRecipients",
          "EmailNotificationSent",
          "EmailNotificationFailed",
          "ComplianceExecutableActionFailed",
          "BlockExchangeAccessComplianceActionRequested",
          "AllowExchangeAccessComplianceActionRequested",
          "ResetExchangeAccessComplianceActionRequested",
          "BlockExchangeAccessComplianceActionCompleted",
          "AllowExchangeAccessComplianceActionCompleted",
          "ResetExchangeAccessComplianceActionCompleted",
          "BlockExchangeAccessComplianceActionFailed",
          "AllowExchangeAccessComplianceActionFailed",
          "ResetExchangeAccessComplianceActionFailed",
          "EmailNotificationRecipientAddressNotResolved",
          "AdministrationCommandStarting",
          "AdministrationCommandFinished",
          "AdministrationCommandFailed",
          "AdministrationCommandCancelled",
          "AppCatalogRuleCreated",
          "AppCatalogRuleEnabled",
          "AppCatalogRuleDisabled",
          "AppCatalogRuleRenamed",
          "AppCatalogRuleChanged",
          "AppCatalogRuleDeleted",
          "AppCatalogRuleDeactivated",
          "EFOTASyncLicense"
        ],
        "x-enumType": "Event"
      },
      "EventOriginator3": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "User",
          "Device",
          "Server",
          "System"
        ],
        "enum": [
          "Unknown",
          "User",
          "Device",
          "Server",
          "System"
        ],
        "x-enumType": "EventOriginator"
      },
      "SecurityUserGroupLogEntry": {
        "allOf": [
          {
            "$ref": "#/definitions/SecurityLogEntry"
          },
          {
            "type": "object"
          }
        ]
      },
      "SecurityUserLogEntry": {
        "allOf": [
          {
            "$ref": "#/definitions/SecurityLogEntry"
          },
          {
            "type": "object"
          }
        ]
      },
      "SecurityLdapUserGroup": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "maxLength": 245,
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Sid": {
            "type": "string"
          },
          "LdapConnectionId": {
            "type": "string"
          },
          "LdapDistinguishedName": {
            "type": "string"
          },
          "DomainName": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          }
        }
      },
      "SecuritySsoUserGroup": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "maxLength": 245,
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "SsoConnectionId": {
            "type": "string"
          },
          "DomainName": {
            "type": "string"
          },
          "ExternalId": {
            "type": "string"
          }
        }
      },
      "SecurityAccountLockStatus": {
        "type": "object",
        "required": [
          "AccountLocked"
        ],
        "properties": {
          "AccountLocked": {
            "type": "boolean"
          },
          "Reason": {
            "type": "string",
            "maxLength": 500
          }
        }
      },
      "SecurityUserLogFilter": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AllUser",
          "DeletedUser"
        ],
        "enum": [
          "AllUser",
          "DeletedUser"
        ],
        "x-enumType": "SecurityUserLogFilter"
      },
      "SmtpConnectionSummary": {
        "allOf": [
          {
            "$ref": "#/definitions/SmtpConnection"
          },
          {
            "type": "object",
            "properties": {
              "ReferenceId": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SmtpConnection": {
        "type": "object",
        "required": [
          "Authentication",
          "Host",
          "Name",
          "Port",
          "Tls"
        ],
        "properties": {
          "Authentication": {
            "$ref": "#/definitions/AuthenticationMode",
            "x-enumType": "AuthenticationMode"
          },
          "Host": {
            "type": "string",
            "maxLength": 80,
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Name": {
            "type": "string",
            "maxLength": 80,
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Password": {
            "type": "string",
            "maxLength": 80
          },
          "Port": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535.0,
            "minimum": 1.0,
            "x-validators": [
              {
                "type": "rangeValidator",
                "min": 1,
                "max": 65535,
                "errorMessage": null
              }
            ]
          },
          "SenderEmail": {
            "type": "string",
            "maxLength": 80
          },
          "SenderName": {
            "type": "string",
            "maxLength": 80
          },
          "Tls": {
            "type": "boolean"
          },
          "UserId": {
            "type": "string",
            "maxLength": 80
          },
          "FileSizeLimit": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AuthenticationMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Anonymous",
          "Basic",
          "Ntlm",
          "Digest",
          "Kerberos",
          "Negotiate"
        ],
        "enum": [
          "Anonymous",
          "Basic",
          "Ntlm",
          "Digest",
          "Kerberos",
          "Negotiate"
        ],
        "x-enumType": "AuthenticationMode"
      },
      "TestSmtpConnection": {
        "type": "object",
        "required": [
          "Type",
          "Connection",
          "Message"
        ],
        "properties": {
          "Type": {
            "$ref": "#/definitions/SmtpActionTypes",
            "x-enumType": "SmtpActionTypes",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "ReferenceId": {
            "type": "string"
          },
          "Connection": {
            "$ref": "#/definitions/SmtpConnection",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Message": {
            "$ref": "#/definitions/EmailMessage",
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          }
        }
      },
      "SmtpActionTypes": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "TestConnection"
        ],
        "enum": [
          "TestConnection"
        ],
        "x-enumType": "SmtpActionTypes"
      },
      "EmailMessage": {
        "type": "object",
        "required": [
          "Priority",
          "Recipients"
        ],
        "properties": {
          "Priority": {
            "$ref": "#/definitions/EmailPriority",
            "x-enumType": "EmailPriority"
          },
          "Recipients": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EmailTarget"
            },
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          },
          "Subject": {
            "type": "string"
          },
          "TextBody": {
            "type": "string"
          }
        }
      },
      "EmailPriority": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Low",
          "Normal",
          "High"
        ],
        "enum": [
          "Low",
          "Normal",
          "High"
        ],
        "x-enumType": "EmailPriority"
      },
      "EmailTarget": {
        "type": "object",
        "required": [
          "AddresseeType",
          "Email"
        ],
        "properties": {
          "AddresseeType": {
            "$ref": "#/definitions/EmailAddresseeType2",
            "x-enumType": "EmailAddresseeType"
          },
          "Email": {
            "type": "string",
            "minLength": 1,
            "x-validators": [
              {
                "type": "requiredValidator",
                "errorMessage": null
              }
            ]
          }
        }
      },
      "EmailAddresseeType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "To",
          "CarbonCopy",
          "BlindCarbonCopy"
        ],
        "enum": [
          "To",
          "CarbonCopy",
          "BlindCarbonCopy"
        ],
        "x-enumType": "EmailAddresseeType"
      },
      "DefaultEmailTarget": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailTarget"
          },
          {
            "type": "object",
            "required": [
              "Enabled",
              "Name"
            ],
            "properties": {
              "Enabled": {
                "type": "boolean"
              },
              "Name": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ModelType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Iphone",
          "Ipad"
        ],
        "enum": [
          "Iphone",
          "Ipad"
        ],
        "x-enumType": "ModelType"
      },
      "ScreenType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "HomeScreen",
          "LockScreen"
        ],
        "enum": [
          "HomeScreen",
          "LockScreen"
        ],
        "x-enumType": "ScreenType"
      },
      "IosEnrollmentPolicySummary": {
        "type": "object",
        "required": [
          "CreatedDate",
          "LastModifiedDate",
          "Status",
          "ActivationDate",
          "EnrolledDeviceCount",
          "IsPublished",
          "IsDefault",
          "IsAutomatedEnrollmentEnabled",
          "IsDeviceRelocationPreserved",
          "IsDeviceNamePreserved",
          "IsCustomizedEnrollmentDisabled",
          "IsDeviceNameSetDuringEnrollment",
          "EnrollmentType",
          "AwaitDeviceConfigured",
          "ShowOptions",
          "IsStaticEnrollmentProfileAllowed",
          "IsSharedIpad"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "EnrollmentUrl": {
            "type": "string"
          },
          "CreatedBy": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "type": "string"
          },
          "LastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "Status": {
            "$ref": "#/definitions/EnrollmentPolicyStatus2",
            "x-enumType": "EnrollmentPolicyStatus"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "EnrolledDeviceCount": {
            "type": "integer",
            "format": "int32"
          },
          "EnrollmentPolicyTag": {
            "type": "string"
          },
          "IsPublished": {
            "type": "boolean"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "EnrollmentCode": {
            "type": "string"
          },
          "AuthorizationPolicyReferenceId": {
            "type": "string"
          },
          "CertificateTemplateReferenceId": {
            "type": "string"
          },
          "AgentCertificateTemplateName": {
            "type": "string"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "IsAutomatedEnrollmentEnabled": {
            "type": "boolean"
          },
          "IsDeviceRelocationPreserved": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "IsCustomizedEnrollmentDisabled": {
            "type": "boolean"
          },
          "AbmReferenceId": {
            "type": "string"
          },
          "IsDeviceNameSetDuringEnrollment": {
            "type": "boolean"
          },
          "EnrollmentType": {
            "$ref": "#/definitions/EnrollmentType2",
            "x-enumType": "EnrollmentType"
          },
          "ManagedAppleIdAuth": {
            "$ref": "#/definitions/ManagedAppleIdAuth",
            "x-enumType": "ManagedAppleIdAuth"
          },
          "AzureADReferenceId": {
            "type": "string"
          },
          "ManagedAppleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AwaitDeviceConfigured": {
            "type": "boolean"
          },
          "ShowOptions": {
            "$ref": "#/definitions/IosShowOptions",
            "x-enumType": "IosShowOptions"
          },
          "IsStaticEnrollmentProfileAllowed": {
            "type": "boolean"
          },
          "IsSharedIpad": {
            "type": "boolean"
          }
        }
      },
      "EnrollmentPolicyStatus2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Disable",
          "Enable"
        ],
        "enum": [
          "Disable",
          "Enable"
        ],
        "x-enumType": "EnrollmentPolicyStatus"
      },
      "EnrollmentType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Device",
          "User"
        ],
        "enum": [
          "Device",
          "User"
        ],
        "x-enumType": "EnrollmentType"
      },
      "ManagedAppleIdAuth": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "FederatedAzureAD",
          "LocalManaged"
        ],
        "enum": [
          "FederatedAzureAD",
          "LocalManaged"
        ],
        "x-enumType": "ManagedAppleIdAuth"
      },
      "IosShowOptions": {
        "type": "string",
        "description": "",
        "x-enumFlags": true,
        "x-enumNames": [
          "None",
          "EnableZoom",
          "EnableLocation",
          "EnableRestore",
          "EnableAppleId",
          "ShowTermConditions",
          "EnableSiri",
          "WatchMigration",
          "EnableApplePay",
          "EnableTouchId",
          "EnableAndroidMigration",
          "RequireEnrollment",
          "SuperviseDevice",
          "PreventUnenrollment",
          "OnBoarding",
          "HomeButtonSensitivity",
          "SIMSetup",
          "DisplayTone",
          "Appearance",
          "SoftwareUpdate",
          "ScreenTime",
          "ImessageAndFaceTime",
          "Privacy",
          "ShowPasscode",
          "Welcome",
          "PreferredLanguage",
          "ExpressLanguage",
          "DeviceToDeviceMigration",
          "EnableDiagnostics",
          "TermsOfAddress"
        ],
        "enum": [
          "None",
          "EnableZoom",
          "EnableLocation",
          "EnableRestore",
          "EnableAppleId",
          "ShowTermConditions",
          "EnableSiri",
          "WatchMigration",
          "EnableApplePay",
          "EnableTouchId",
          "EnableAndroidMigration",
          "RequireEnrollment",
          "SuperviseDevice",
          "PreventUnenrollment",
          "OnBoarding",
          "HomeButtonSensitivity",
          "SIMSetup",
          "DisplayTone",
          "Appearance",
          "SoftwareUpdate",
          "ScreenTime",
          "ImessageAndFaceTime",
          "Privacy",
          "ShowPasscode",
          "Welcome",
          "PreferredLanguage",
          "ExpressLanguage",
          "DeviceToDeviceMigration",
          "EnableDiagnostics",
          "TermsOfAddress"
        ],
        "x-enumType": "IosShowOptions"
      },
      "IosEnrollmentPolicy": {
        "type": "object",
        "required": [
          "IsDeviceLocationPreserved",
          "IsDeviceNamePreserved",
          "IsAutomatedEnrollmentEnabled",
          "IsCustomizedEnrollmentDisabled",
          "EnrollmentType",
          "AwaitDeviceConfigured",
          "ShowOptions",
          "IsDeviceNameSetDuringEnrollment",
          "IsStaticEnrollmentProfileAllowed",
          "IsSharedIpad"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "EnrollmentPolicyTag": {
            "type": "string"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "AuthorizationPolicyReferenceId": {
            "type": "string"
          },
          "AgentCertificateTemplateReferenceId": {
            "type": "string"
          },
          "IsDeviceLocationPreserved": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "IsAutomatedEnrollmentEnabled": {
            "type": "boolean"
          },
          "IsCustomizedEnrollmentDisabled": {
            "type": "boolean"
          },
          "AbmReferenceId": {
            "type": "string"
          },
          "EnrollmentType": {
            "$ref": "#/definitions/EnrollmentType2",
            "x-enumType": "EnrollmentType"
          },
          "ManagedAppleIdAuth": {
            "$ref": "#/definitions/ManagedAppleIdAuth",
            "x-enumType": "ManagedAppleIdAuth"
          },
          "AzureADReferenceId": {
            "type": "string"
          },
          "ManagedAppleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AwaitDeviceConfigured": {
            "type": "boolean"
          },
          "ShowOptions": {
            "$ref": "#/definitions/IosShowOptions",
            "x-enumType": "IosShowOptions"
          },
          "IsDeviceNameSetDuringEnrollment": {
            "type": "boolean"
          },
          "IsStaticEnrollmentProfileAllowed": {
            "type": "boolean"
          },
          "IsSharedIpad": {
            "type": "boolean"
          }
        }
      },
      "AppleEnrollmentPolicyEmailInfo": {
        "type": "object",
        "required": [
          "AppendAddresses"
        ],
        "properties": {
          "EmailProfileName": {
            "type": "string"
          },
          "ToAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AppendAddresses": {
            "type": "boolean"
          }
        }
      },
      "UpdateIosEnrollmentPolicy": {
        "type": "object",
        "required": [
          "IsDeviceLocationPreserved",
          "IsDeviceNamePreserved",
          "IsAutomatedEnrollmentEnabled",
          "IsCustomizedEnrollmentDisabled",
          "ShowOptions",
          "IsDeviceNameSetDuringEnrollment",
          "AwaitDeviceConfigured",
          "IsStaticEnrollmentProfileAllowed",
          "IsSharedIpad"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "AuthorizationPolicyReferenceId": {
            "type": "string"
          },
          "AgentCertificateTemplateReferenceId": {
            "type": "string"
          },
          "IsDeviceLocationPreserved": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "IsAutomatedEnrollmentEnabled": {
            "type": "boolean"
          },
          "IsCustomizedEnrollmentDisabled": {
            "type": "boolean"
          },
          "AbmReferenceId": {
            "type": "string"
          },
          "ShowOptions": {
            "$ref": "#/definitions/IosShowOptions",
            "x-enumType": "IosShowOptions"
          },
          "IsDeviceNameSetDuringEnrollment": {
            "type": "boolean"
          },
          "ManagedAppleIdAuth": {
            "$ref": "#/definitions/ManagedAppleIdAuth",
            "x-enumType": "ManagedAppleIdAuth"
          },
          "AzureADReferenceId": {
            "type": "string"
          },
          "ManagedAppleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AwaitDeviceConfigured": {
            "type": "boolean"
          },
          "IsStaticEnrollmentProfileAllowed": {
            "type": "boolean"
          },
          "IsSharedIpad": {
            "type": "boolean"
          }
        }
      },
      "MacEnrollmentPolicySummary": {
        "type": "object",
        "required": [
          "CreatedDate",
          "LastModifiedDate",
          "Status",
          "ActivationDate",
          "EnrolledDeviceCount",
          "IsPublished",
          "IsDefault",
          "IsAutomatedEnrollmentEnabled",
          "ConsiderLdapAsEnrolledUser",
          "IsDeviceRelocationPreserved",
          "IsDeviceNamePreserved",
          "IsCustomizedEnrollmentDisabled",
          "ShowOptions"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "EnrollmentUrl": {
            "type": "string"
          },
          "CreatedBy": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "type": "string"
          },
          "LastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "Status": {
            "$ref": "#/definitions/EnrollmentPolicyStatus2",
            "x-enumType": "EnrollmentPolicyStatus"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "EnrolledDeviceCount": {
            "type": "integer",
            "format": "int32"
          },
          "EnrollmentPolicyTag": {
            "type": "string"
          },
          "IsPublished": {
            "type": "boolean"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "EnrollmentCode": {
            "type": "string"
          },
          "AuthorizationPolicyReferenceId": {
            "type": "string"
          },
          "CertificateTemplateReferenceId": {
            "type": "string"
          },
          "AgentCertificateTemplateName": {
            "type": "string"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "IsAutomatedEnrollmentEnabled": {
            "type": "boolean"
          },
          "ConsiderLdapAsEnrolledUser": {
            "type": "boolean"
          },
          "IsDeviceRelocationPreserved": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "IsCustomizedEnrollmentDisabled": {
            "type": "boolean"
          },
          "AbmReferenceId": {
            "type": "string"
          },
          "ShowOptions": {
            "$ref": "#/definitions/MacShowOptions",
            "x-enumType": "MacShowOptions"
          }
        }
      },
      "MacShowOptions": {
        "type": "string",
        "description": "",
        "x-enumFlags": true,
        "x-enumNames": [
          "None",
          "EnableRegistration",
          "EnableLocation",
          "EnableRestore",
          "EnableAppleId",
          "ShowTermConditions",
          "EnableSiri",
          "EnableDiagnostics",
          "EnableApplePay",
          "EnableTouchId",
          "EnableFileVault",
          "EnableICloudDiagnostics",
          "RequireEnrollment",
          "SuperviseDevice",
          "PreventUnenrollment",
          "Accessibility",
          "AppStore",
          "ICloudStorage",
          "Appearance",
          "Privacy",
          "ScreenTime",
          "TermsOfAddress"
        ],
        "enum": [
          "None",
          "EnableRegistration",
          "EnableLocation",
          "EnableRestore",
          "EnableAppleId",
          "ShowTermConditions",
          "EnableSiri",
          "EnableDiagnostics",
          "EnableApplePay",
          "EnableTouchId",
          "EnableFileVault",
          "EnableICloudDiagnostics",
          "RequireEnrollment",
          "SuperviseDevice",
          "PreventUnenrollment",
          "Accessibility",
          "AppStore",
          "ICloudStorage",
          "Appearance",
          "Privacy",
          "ScreenTime",
          "TermsOfAddress"
        ],
        "x-enumType": "MacShowOptions"
      },
      "MacEnrollmentPolicy": {
        "type": "object",
        "required": [
          "ConsiderLdapAsEnrolledUser",
          "IsDeviceLocationPreserved",
          "IsDeviceNamePreserved",
          "IsAutomatedEnrollmentEnabled",
          "IsCustomizedEnrollmentDisabled",
          "ShowOptions"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "EnrollmentPolicyTag": {
            "type": "string"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "ConsiderLdapAsEnrolledUser": {
            "type": "boolean"
          },
          "AuthorizationPolicyReferenceId": {
            "type": "string"
          },
          "AgentCertificateTemplateReferenceId": {
            "type": "string"
          },
          "IsDeviceLocationPreserved": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "IsAutomatedEnrollmentEnabled": {
            "type": "boolean"
          },
          "IsCustomizedEnrollmentDisabled": {
            "type": "boolean"
          },
          "AbmReferenceId": {
            "type": "string"
          },
          "ShowOptions": {
            "$ref": "#/definitions/MacShowOptions",
            "x-enumType": "MacShowOptions"
          }
        }
      },
      "UpdateMacEnrollmentPolicy": {
        "type": "object",
        "required": [
          "ConsiderLdapAsEnrolledUser",
          "IsDeviceLocationPreserved",
          "IsDeviceNamePreserved",
          "IsAutomatedEnrollmentEnabled",
          "IsCustomizedEnrollmentDisabled",
          "ShowOptions"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "ConsiderLdapAsEnrolledUser": {
            "type": "boolean"
          },
          "AuthorizationPolicyReferenceId": {
            "type": "string"
          },
          "AgentCertificateTemplateReferenceId": {
            "type": "string"
          },
          "IsDeviceLocationPreserved": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "IsAutomatedEnrollmentEnabled": {
            "type": "boolean"
          },
          "IsCustomizedEnrollmentDisabled": {
            "type": "boolean"
          },
          "AbmReferenceId": {
            "type": "string"
          },
          "ShowOptions": {
            "$ref": "#/definitions/MacShowOptions",
            "x-enumType": "MacShowOptions"
          }
        }
      },
      "RuleSummary": {
        "type": "object",
        "required": [
          "Status",
          "Family",
          "Kind",
          "Apps"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "ReferenceId": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/definitions/RuleStatus",
            "x-enumType": "RuleStatus"
          },
          "Family": {
            "$ref": "#/definitions/RuleFamily",
            "x-enumType": "RuleFamily"
          },
          "Kind": {
            "$ref": "#/definitions/RuleSummaryPlatformKind",
            "x-enumType": "RuleSummaryPlatformKind"
          },
          "Description": {
            "type": "string"
          },
          "DisabledDate": {
            "type": "string",
            "format": "date-time"
          },
          "Apps": {
            "type": "integer",
            "format": "int32"
          },
          "AssignedBy": {
            "type": "string"
          },
          "AutoAssignDate": {
            "type": "string",
            "format": "date-time"
          },
          "AssignedDate": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "type": "string"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          },
          "CatalogueItemReferenceId": {
            "type": "string"
          }
        }
      },
      "RuleFamily": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Android",
          "Apple",
          "Windows",
          "All"
        ],
        "enum": [
          "Android",
          "Apple",
          "Windows",
          "All"
        ],
        "x-enumType": "RuleFamily"
      },
      "RuleSummaryPlatformKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Undefined",
          "AndroidEnterprise",
          "AndroidClassic",
          "AppleIOS",
          "AppleMac",
          "WindowsModern"
        ],
        "enum": [
          "Undefined",
          "AndroidEnterprise",
          "AndroidClassic",
          "AppleIOS",
          "AppleMac",
          "WindowsModern"
        ],
        "x-enumType": "RuleSummaryPlatformKind"
      },
      "RuleAction": {
        "type": "object",
        "required": [
          "Action"
        ],
        "properties": {
          "Action": {
            "$ref": "#/definitions/RuleActionType2",
            "x-enumType": "RuleActionType"
          }
        }
      },
      "RuleActionType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Enable",
          "Disable"
        ],
        "enum": [
          "Enable",
          "Disable"
        ],
        "x-enumType": "RuleActionType"
      },
      "AssignmentSummary": {
        "allOf": [
          {
            "$ref": "#/definitions/Assignment2"
          },
          {
            "type": "object",
            "properties": {
              "LastModifiedBy": {
                "type": "string"
              },
              "LastModifiedDate": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "Assignment2": {
        "type": "object",
        "properties": {
          "TargetDeviceGroups": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TargetDeviceGroup2"
            }
          },
          "TargetDevices": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TargetDeviceInfo2"
            }
          },
          "DeviceFilterExpression": {
            "type": "string"
          },
          "UserGroupsFilterExpression": {
            "type": "string"
          },
          "AssignmentOptions": {
            "$ref": "#/definitions/AssignmentOptions"
          }
        }
      },
      "TargetDeviceGroup2": {
        "type": "object",
        "required": [
          "Excluded"
        ],
        "properties": {
          "DeviceGroupPath": {
            "type": "string"
          },
          "Excluded": {
            "type": "boolean"
          }
        }
      },
      "TargetDeviceInfo2": {
        "allOf": [
          {
            "$ref": "#/definitions/TargetDevice2"
          },
          {
            "type": "object",
            "properties": {
              "ParentPath": {
                "type": "string"
              },
              "DeviceName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "TargetDevice2": {
        "type": "object",
        "required": [
          "Excluded"
        ],
        "properties": {
          "DeviceId": {
            "type": "string"
          },
          "Excluded": {
            "type": "boolean"
          }
        }
      },
      "AssignmentOptions": {
        "type": "object",
        "properties": {
          "AssignDate": {
            "type": "string",
            "format": "date-time"
          },
          "DisableDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AppCatalogRuleLog": {
        "type": "object",
        "required": [
          "TimeStamp",
          "EventSeverity",
          "EventId",
          "EventOriginator"
        ],
        "properties": {
          "TimeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "EventSeverity": {
            "$ref": "#/definitions/EventSeverity4",
            "x-enumType": "EventSeverity"
          },
          "Message": {
            "type": "string"
          },
          "EventId": {
            "type": "integer",
            "format": "int32"
          },
          "EventCode": {
            "type": "string"
          },
          "SourceName": {
            "type": "string"
          },
          "EventOriginator": {
            "$ref": "#/definitions/EventOriginator4",
            "x-enumType": "EventOriginator"
          }
        }
      },
      "EventSeverity4": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Information",
          "Warning",
          "Error"
        ],
        "enum": [
          "Information",
          "Warning",
          "Error"
        ],
        "x-enumType": "EventSeverity"
      },
      "EventOriginator4": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "User",
          "Device",
          "Server",
          "System"
        ],
        "enum": [
          "Unknown",
          "User",
          "Device",
          "Server",
          "System"
        ],
        "x-enumType": "EventOriginator"
      },
      "RuleLogEntryCount": {
        "type": "object",
        "required": [
          "EventSeverity",
          "EventOriginator",
          "EventId",
          "Count"
        ],
        "properties": {
          "EventSeverity": {
            "$ref": "#/definitions/EventSeverity4",
            "x-enumType": "EventSeverity"
          },
          "EventOriginator": {
            "$ref": "#/definitions/EventOriginator4",
            "x-enumType": "EventOriginator"
          },
          "EventId": {
            "type": "integer",
            "format": "int32"
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RuleDigest": {
        "type": "object",
        "required": [
          "Family",
          "Kind",
          "Apps"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "ReferenceId": {
            "type": "string"
          },
          "Family": {
            "$ref": "#/definitions/RuleFamily",
            "x-enumType": "RuleFamily"
          },
          "Kind": {
            "$ref": "#/definitions/RuleSummaryPlatformKind",
            "x-enumType": "RuleSummaryPlatformKind"
          },
          "ScheduledDisabledDate": {
            "type": "string",
            "format": "date-time"
          },
          "Apps": {
            "type": "integer",
            "format": "int32"
          },
          "AssignedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EnterpriseApplicationDetails": {
        "type": "object",
        "required": [
          "AppOriginType"
        ],
        "properties": {
          "AppPackageId": {
            "type": "string"
          },
          "AppName": {
            "type": "string"
          },
          "AppVersion": {
            "type": "string"
          },
          "AppAuthor": {
            "type": "string"
          },
          "AppDescription": {
            "type": "string"
          },
          "ReferenceId": {
            "type": "string"
          },
          "AppOriginType": {
            "$ref": "#/definitions/CustomerApplicationOriginType",
            "x-enumType": "CustomerApplicationOriginType"
          },
          "AppUrl": {
            "type": "string"
          },
          "AppIconUrl": {
            "type": "string"
          },
          "AppConfigurationSchema": {
            "type": "string"
          },
          "Permissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ApplicationPermission"
            }
          }
        }
      },
      "CustomerApplicationOriginType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "InternalApplication",
          "ExternalApplication"
        ],
        "enum": [
          "InternalApplication",
          "ExternalApplication"
        ],
        "x-enumType": "CustomerApplicationOriginType"
      },
      "ApplicationPermission": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ExternalPermissionId": {
            "type": "string"
          }
        }
      },
      "AddExternalApplicationRequest": {
        "type": "object",
        "properties": {
          "AppUrl": {
            "type": "string"
          }
        }
      },
      "UpdateApplicationRequest": {
        "type": "object",
        "properties": {
          "AppAuthor": {
            "type": "string"
          },
          "AppDescription": {
            "type": "string"
          }
        }
      },
      "GooglePlayStoreApplication": {
        "type": "object",
        "required": [
          "AppPrice"
        ],
        "properties": {
          "AppPackageId": {
            "type": "string"
          },
          "AppName": {
            "type": "string"
          },
          "AppVersion": {
            "type": "string"
          },
          "AppAuthor": {
            "type": "string"
          },
          "AppDescription": {
            "type": "string"
          },
          "AppIconUrl": {
            "type": "string"
          },
          "AppDetailsUrl": {
            "type": "string"
          },
          "Screenshots": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AppPrice": {
            "type": "number",
            "format": "decimal"
          },
          "AppPriceCurrency": {
            "type": "string"
          },
          "AppTracks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GooglePlayStoreAppTrack"
            }
          }
        }
      },
      "GooglePlayStoreAppTrack": {
        "type": "object",
        "required": [
          "AndroidAppTrackId"
        ],
        "properties": {
          "AndroidAppTrackId": {
            "type": "integer",
            "format": "int32"
          },
          "TrackId": {
            "type": "string"
          },
          "TrackAlias": {
            "type": "string"
          }
        }
      },
      "ApplicationFeedbackSeverityCount": {
        "type": "object",
        "required": [
          "Severity",
          "Count"
        ],
        "properties": {
          "Severity": {
            "$ref": "#/definitions/Severity",
            "x-enumType": "Severity"
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Severity": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "Info",
          "Error"
        ],
        "enum": [
          "Unspecified",
          "Info",
          "Error"
        ],
        "x-enumType": "Severity"
      },
      "ApplicationFeedback": {
        "type": "object",
        "required": [
          "Timestamp",
          "Severity"
        ],
        "properties": {
          "DeviceName": {
            "type": "string"
          },
          "Key": {
            "type": "string"
          },
          "KeyPath": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "Data": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "Severity": {
            "$ref": "#/definitions/Severity",
            "x-enumType": "Severity"
          }
        }
      },
      "ApplicationFeedbackGroup": {
        "type": "object",
        "required": [
          "TimestampStart",
          "TimestampEnd",
          "DeviceCount",
          "Severity"
        ],
        "properties": {
          "TimestampStart": {
            "type": "string",
            "format": "date-time"
          },
          "TimestampEnd": {
            "type": "string",
            "format": "date-time"
          },
          "DeviceCount": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string"
          },
          "KeyPath": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "Severity": {
            "$ref": "#/definitions/Severity",
            "x-enumType": "Severity"
          }
        }
      },
      "TimeRange": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Every30Minutes",
          "Every1Hour",
          "Every3Hours",
          "Every6Hours",
          "Every12Hours",
          "Every1Day",
          "Every1Week",
          "Every2Weeks",
          "Every1Month",
          "Every3Months"
        ],
        "enum": [
          "Every30Minutes",
          "Every1Hour",
          "Every3Hours",
          "Every6Hours",
          "Every12Hours",
          "Every1Day",
          "Every1Week",
          "Every2Weeks",
          "Every1Month",
          "Every3Months"
        ],
        "x-enumType": "TimeRange"
      },
      "AndroidAppCatalogRuleSummary": {
        "type": "object",
        "required": [
          "RuleStatus",
          "RuleKind"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "RuleStatus": {
            "$ref": "#/definitions/RuleStatus",
            "x-enumType": "RuleStatus"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "RuleKind": {
            "$ref": "#/definitions/AndroidAppCatalogRuleKind",
            "x-enumType": "AndroidAppCatalogRuleKind"
          },
          "Enterprise": {
            "$ref": "#/definitions/EnterpriseBinding"
          },
          "AuditInfo": {
            "$ref": "#/definitions/AuditInfo"
          },
          "AssignmentInfo": {
            "$ref": "#/definitions/AssignmentInfo"
          },
          "CatalogueItemReferenceId": {
            "type": "string"
          }
        }
      },
      "AndroidAppCatalogRuleKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Undefined",
          "ManagedGooglePlay",
          "Classic"
        ],
        "enum": [
          "Undefined",
          "ManagedGooglePlay",
          "Classic"
        ],
        "x-enumType": "AndroidAppCatalogRuleKind"
      },
      "EnterpriseBinding": {
        "type": "object",
        "required": [
          "Type"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/definitions/EnterpriseType",
            "x-enumType": "EnterpriseType"
          }
        }
      },
      "EnterpriseType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "GoogleDomain",
          "ManagedGooglePlay"
        ],
        "enum": [
          "GoogleDomain",
          "ManagedGooglePlay"
        ],
        "x-enumType": "EnterpriseType"
      },
      "CreateAndroidAppCatalogRuleRequest": {
        "type": "object",
        "required": [
          "RuleKind"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "EnterpriseReferenceId": {
            "type": "string"
          },
          "RuleKind": {
            "$ref": "#/definitions/AndroidAppCatalogRuleKind",
            "x-enumType": "AndroidAppCatalogRuleKind"
          }
        }
      },
      "UpdateAndroidAppCatalogRuleRequest": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "UpdateAndroidAppCatalogRuleEnterpriseRequest": {
        "type": "object",
        "properties": {
          "EnterpriseReferenceId": {
            "type": "string"
          }
        }
      },
      "CustomerAppCatalogRuleItemAppInventory": {
        "type": "object",
        "required": [
          "ReferenceId",
          "IsMandatory",
          "AppPriority",
          "AppOriginType",
          "DefaultAppPermissionState",
          "LaunchOnInstall"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "IsMandatory": {
            "type": "boolean"
          },
          "AppPriority": {
            "type": "integer",
            "format": "int32"
          },
          "AppPackageId": {
            "type": "string"
          },
          "AppName": {
            "type": "string"
          },
          "AppVersion": {
            "type": "string"
          },
          "AppAuthor": {
            "type": "string"
          },
          "AppDescription": {
            "type": "string"
          },
          "AppOriginType": {
            "$ref": "#/definitions/CustomerApplicationOriginType",
            "x-enumType": "CustomerApplicationOriginType"
          },
          "AppUrl": {
            "type": "string"
          },
          "AppIconUrl": {
            "type": "string"
          },
          "AppConfigurationSchema": {
            "type": "string"
          },
          "AppConfiguration": {
            "type": "string"
          },
          "AvailableAppPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ApplicationPermission"
            }
          },
          "AppPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppCatalogRuleItemAppPermission"
            }
          },
          "DefaultAppPermissionState": {
            "$ref": "#/definitions/AppPermissionState",
            "x-enumType": "AppPermissionState"
          },
          "LaunchOnInstall": {
            "type": "boolean"
          }
        }
      },
      "AppCatalogRuleItemAppPermission": {
        "type": "object",
        "required": [
          "AppPermissionState"
        ],
        "properties": {
          "AppPermissionState": {
            "$ref": "#/definitions/AppPermissionState",
            "x-enumType": "AppPermissionState"
          },
          "PermissionId": {
            "type": "string"
          }
        }
      },
      "AppPermissionState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Allow",
          "Deny",
          "Prompt"
        ],
        "enum": [
          "Allow",
          "Deny",
          "Prompt"
        ],
        "x-enumType": "AppPermissionState"
      },
      "CustomerAppCatalogRuleItem": {
        "type": "object",
        "required": [
          "ReferenceId",
          "IsMandatory",
          "AppPriority",
          "LastModifiedDate",
          "DefaultAppPermissionState",
          "LaunchOnInstall"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "IsMandatory": {
            "type": "boolean"
          },
          "AppPriority": {
            "type": "integer",
            "format": "int32"
          },
          "AppConfiguration": {
            "type": "string"
          },
          "LastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "AppPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppCatalogRuleItemAppPermission"
            }
          },
          "DefaultAppPermissionState": {
            "$ref": "#/definitions/AppPermissionState",
            "x-enumType": "AppPermissionState"
          },
          "LaunchOnInstall": {
            "type": "boolean"
          }
        }
      },
      "GooglePlayStoreAppCatalogRuleItemAppInventory": {
        "type": "object",
        "required": [
          "IsMandatory",
          "IsApproved",
          "AppPriority",
          "AutoUpdateMode",
          "AppPrice",
          "DefaultAppPermissionState",
          "LaunchOnInstall"
        ],
        "properties": {
          "IsMandatory": {
            "type": "boolean"
          },
          "IsApproved": {
            "type": "boolean"
          },
          "AppPriority": {
            "type": "integer",
            "format": "int32"
          },
          "AutoUpdateMode": {
            "$ref": "#/definitions/AutoUpdateMode",
            "x-enumType": "AutoUpdateMode"
          },
          "AppConfiguration": {
            "type": "string"
          },
          "AppConfigurationSchema": {
            "type": "string"
          },
          "AppIconUrl": {
            "type": "string",
            "format": "uri"
          },
          "Screenshots": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AppPackageId": {
            "type": "string"
          },
          "AppName": {
            "type": "string"
          },
          "AppVersion": {
            "type": "string"
          },
          "AppAuthor": {
            "type": "string"
          },
          "AppDescription": {
            "type": "string"
          },
          "AppPrice": {
            "type": "number",
            "format": "decimal"
          },
          "AppPriceCurrency": {
            "type": "string"
          },
          "AndroidAppTrackId": {
            "type": "integer",
            "format": "int32"
          },
          "AppTracks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GooglePlayStoreAppTrack"
            }
          },
          "AvailableAppPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ApplicationPermission"
            }
          },
          "AppPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppCatalogRuleItemAppPermission"
            }
          },
          "DefaultAppPermissionState": {
            "$ref": "#/definitions/AppPermissionState",
            "x-enumType": "AppPermissionState"
          },
          "LaunchOnInstall": {
            "type": "boolean"
          }
        }
      },
      "AutoUpdateMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Default",
          "Postpone",
          "HighPriority"
        ],
        "enum": [
          "Default",
          "Postpone",
          "HighPriority"
        ],
        "x-enumType": "AutoUpdateMode"
      },
      "GooglePlayStoreAppCatalogRuleItem": {
        "type": "object",
        "required": [
          "IsMandatory",
          "AppPriority",
          "AutoUpdateMode",
          "DefaultAppPermissionState",
          "LaunchOnInstall"
        ],
        "properties": {
          "AppPackageId": {
            "type": "string"
          },
          "IsMandatory": {
            "type": "boolean"
          },
          "AppConfiguration": {
            "type": "string"
          },
          "AppPriority": {
            "type": "integer",
            "format": "int32"
          },
          "AndroidAppTrackId": {
            "type": "integer",
            "format": "int32"
          },
          "AutoUpdateMode": {
            "$ref": "#/definitions/AutoUpdateMode",
            "x-enumType": "AutoUpdateMode"
          },
          "AppPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppCatalogRuleItemAppPermission"
            }
          },
          "DefaultAppPermissionState": {
            "$ref": "#/definitions/AppPermissionState",
            "x-enumType": "AppPermissionState"
          },
          "LaunchOnInstall": {
            "type": "boolean"
          }
        }
      },
      "IosEnterpriseApplicationMetadata": {
        "type": "object",
        "required": [
          "ApplicationOrigin"
        ],
        "properties": {
          "ApplicationIdOrUrl": {
            "type": "string"
          },
          "EnterpriseAppBuildVersion": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ReferenceId": {
            "type": "string"
          },
          "StrongId": {
            "type": "string"
          },
          "SupportedDevices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Version": {
            "type": "string"
          },
          "ApplicationOrigin": {
            "$ref": "#/definitions/AppleEnterpriseApplicationOriginType",
            "x-enumType": "AppleEnterpriseApplicationOriginType"
          },
          "IconReferenceId": {
            "type": "string"
          },
          "IconUrl": {
            "type": "string"
          }
        }
      },
      "AppleEnterpriseApplicationOriginType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "InternalApplication",
          "ExternalApplication"
        ],
        "enum": [
          "InternalApplication",
          "ExternalApplication"
        ],
        "x-enumType": "AppleEnterpriseApplicationOriginType"
      },
      "IosEnterpriseApplicationMetadataUpdateRequest": {
        "type": "object",
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "SupportedDevices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddExternalFileRequest": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string"
          }
        }
      },
      "AppleStoreApplicationMetadata": {
        "type": "object",
        "required": [
          "AppStoreId"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "AppStoreId": {
            "type": "integer",
            "format": "int64"
          },
          "Version": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Seller": {
            "type": "string"
          },
          "StrongId": {
            "type": "string"
          },
          "SupportedDevices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ScreenshotUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "CountryCode": {
            "type": "string"
          },
          "MinimumOsVersion": {
            "type": "string"
          },
          "CurrentVersionReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "ApplicationViewUrl": {
            "type": "string"
          },
          "Price": {
            "type": "number",
            "format": "decimal"
          },
          "Currency": {
            "type": "string"
          },
          "IconReferenceId": {
            "type": "string"
          },
          "IconUrl": {
            "type": "string"
          },
          "VersionIdentifier": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MacEnterpriseApplicationMetadata": {
        "type": "object",
        "required": [
          "ApplicationOrigin"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "ApplicationIdOrUrl": {
            "type": "string"
          },
          "StrongId": {
            "type": "string"
          },
          "MD5Hash": {
            "type": "string"
          },
          "ApplicationType": {
            "type": "string"
          },
          "ApplicationOrigin": {
            "$ref": "#/definitions/AppleEnterpriseApplicationOriginType",
            "x-enumType": "AppleEnterpriseApplicationOriginType"
          },
          "IconReferenceId": {
            "type": "string"
          },
          "IconUrl": {
            "type": "string"
          }
        }
      },
      "AddExternalMacAppRequest": {
        "type": "object",
        "properties": {
          "AppUrl": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "BundleId": {
            "type": "string"
          },
          "ApplicationType": {
            "type": "string"
          }
        }
      },
      "ForceApplicationUpdateRequest": {
        "type": "object",
        "required": [
          "UpdateAll"
        ],
        "properties": {
          "AppPolicyReferenceId": {
            "type": "string"
          },
          "UpdateAll": {
            "type": "boolean"
          },
          "ApplicationStrongId": {
            "type": "string"
          }
        }
      },
      "AppleApplicationKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "AppleStore",
          "IosEnterprise",
          "MacEnterprise"
        ],
        "enum": [
          "Unknown",
          "AppleStore",
          "IosEnterprise",
          "MacEnterprise"
        ],
        "x-enumType": "AppleApplicationKind"
      },
      "RedemptionCodesRequest": {
        "type": "object",
        "required": [
          "UseCodes",
          "UseCodesExclusive"
        ],
        "properties": {
          "AppPolicyReferenceId": {
            "type": "string"
          },
          "UseCodes": {
            "type": "boolean"
          },
          "UseCodesExclusive": {
            "type": "boolean"
          }
        }
      },
      "RedemptionCodeApplicationInfo": {
        "type": "object",
        "properties": {
          "Application": {
            "$ref": "#/definitions/RedemptionCodeApplication"
          },
          "Statistics": {
            "$ref": "#/definitions/RedemptionCodeStatistics"
          }
        }
      },
      "RedemptionCodeApplication": {
        "type": "object",
        "properties": {
          "ApplicationId": {
            "type": "string"
          },
          "OrderNumber": {
            "type": "string"
          },
          "Product": {
            "type": "string"
          },
          "Purchaser": {
            "type": "string"
          },
          "AppPolicyReferenceId": {
            "type": "string"
          },
          "ReferenceId": {
            "type": "string"
          }
        }
      },
      "RedemptionCodeStatistics": {
        "type": "object",
        "required": [
          "Available",
          "RedeemPending",
          "Redeemed"
        ],
        "properties": {
          "Available": {
            "type": "integer",
            "format": "int32"
          },
          "RedeemPending": {
            "type": "integer",
            "format": "int32"
          },
          "Redeemed": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RedemptionCodeApplicationExtendedInfo": {
        "allOf": [
          {
            "$ref": "#/definitions/RedemptionCodeApplicationInfo"
          },
          {
            "type": "object",
            "required": [
              "Result"
            ],
            "properties": {
              "Result": {
                "$ref": "#/definitions/RedemptionCodeUpdateResult"
              },
              "ProductName": {
                "type": "string"
              },
              "ProductVersion": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RedemptionCodeUpdateResult": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Success",
          "CollisionByBundleId",
          "ObsoleteFile",
          "ProductNameMismatch",
          "AlreadyUsed"
        ],
        "enum": [
          "Success",
          "CollisionByBundleId",
          "ObsoleteFile",
          "ProductNameMismatch",
          "AlreadyUsed"
        ],
        "x-enumType": "RedemptionCodeUpdateResult"
      },
      "RedemptionCode": {
        "type": "object",
        "required": [
          "Status"
        ],
        "properties": {
          "Code": {
            "type": "string"
          },
          "DeviceId": {
            "type": "string"
          },
          "DeviceName": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "LastUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "Status": {
            "$ref": "#/definitions/RedemptionCodeStatus",
            "x-enumType": "RedemptionCodeStatus"
          },
          "Url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "RedemptionCodeStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Available",
          "RedeemPending",
          "Redeemed"
        ],
        "enum": [
          "Available",
          "RedeemPending",
          "Redeemed"
        ],
        "x-enumType": "RedemptionCodeStatus"
      },
      "VppReconcileAccount": {
        "type": "object",
        "required": [
          "EnableVppLicenseRemovalNotification"
        ],
        "properties": {
          "EnableVppLicenseRemovalNotification": {
            "type": "boolean"
          }
        }
      },
      "VppAccount": {
        "type": "object",
        "required": [
          "ExpiryDate",
          "Status"
        ],
        "properties": {
          "AccountId": {
            "type": "string"
          },
          "ExpiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastRefreshed": {
            "type": "string",
            "format": "date-time"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationName": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/definitions/VppAccountStatuses",
            "x-enumType": "VppAccountStatuses"
          },
          "LocationName": {
            "type": "string"
          },
          "LocationId": {
            "type": "string"
          },
          "VppProducts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VppProduct"
            }
          },
          "CountryCode": {
            "type": "string"
          },
          "TokenHash": {
            "type": "string"
          }
        }
      },
      "VppAccountStatuses": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Normal",
          "PendingDeletion",
          "Deleted",
          "NotOwned",
          "Invalid",
          "Expired"
        ],
        "enum": [
          "Normal",
          "PendingDeletion",
          "Deleted",
          "NotOwned",
          "Invalid",
          "Expired"
        ],
        "x-enumType": "VppAccountStatuses"
      },
      "VppProduct": {
        "type": "object",
        "required": [
          "DeviceAssignable",
          "LicensesAvailable",
          "ProductId",
          "TotalLicenses"
        ],
        "properties": {
          "BundleId": {
            "type": "string"
          },
          "DeviceAssignable": {
            "type": "boolean"
          },
          "LicensesAvailable": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "ProductId": {
            "type": "integer",
            "format": "int64"
          },
          "ProductType": {
            "type": "string"
          },
          "TotalLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "Seller": {
            "type": "string"
          }
        }
      },
      "VppUpdateAccountName": {
        "type": "object",
        "properties": {
          "AccountName": {
            "type": "string"
          }
        }
      },
      "VppSettings": {
        "type": "object",
        "required": [
          "EnableVppLicenseRemovalNotification"
        ],
        "properties": {
          "EnableVppLicenseRemovalNotification": {
            "type": "boolean"
          }
        }
      },
      "AppleAppCatalogRuleSummary": {
        "type": "object",
        "required": [
          "RuleKind",
          "RuleStatus"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "RuleKind": {
            "$ref": "#/definitions/AppleAppCatalogRuleKind",
            "x-enumType": "AppleAppCatalogRuleKind"
          },
          "RuleStatus": {
            "$ref": "#/definitions/RuleStatus",
            "x-enumType": "RuleStatus"
          },
          "AuditInfo": {
            "$ref": "#/definitions/AuditInfo"
          },
          "AssignmentInfo": {
            "$ref": "#/definitions/AssignmentInfo"
          },
          "CatalogueItemReferenceId": {
            "type": "string"
          }
        }
      },
      "AppleAppCatalogRuleKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Undefined",
          "Ios",
          "Mac"
        ],
        "enum": [
          "Undefined",
          "Ios",
          "Mac"
        ],
        "x-enumType": "AppleAppCatalogRuleKind"
      },
      "AppleAppCatalogRule": {
        "type": "object",
        "required": [
          "RuleKind"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "RuleKind": {
            "$ref": "#/definitions/AppleAppCatalogRuleKind",
            "x-enumType": "AppleAppCatalogRuleKind"
          }
        }
      },
      "AppleAppCatalogRuleUpdateRequest": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "AssociateMacAppsWithAppCatalogRuleRequest": {
        "type": "object",
        "properties": {
          "MacEnterpriseApps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MacEnterpriseAppConfiguration"
            }
          },
          "AppleStoreApps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppleStoreAppConfiguration"
            }
          }
        }
      },
      "MacEnterpriseAppConfiguration": {
        "type": "object",
        "required": [
          "IsMandatory"
        ],
        "properties": {
          "AppVersionReferenceId": {
            "type": "string"
          },
          "AppCatalogRuleReferenceId": {
            "type": "string"
          },
          "IsMandatory": {
            "type": "boolean"
          },
          "Seller": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "AppleStoreAppConfiguration": {
        "type": "object",
        "required": [
          "UpdateConfiguredDevices",
          "IsUpdateEnforced",
          "IsAutoUpdateVersionEnabled",
          "IsMandatory",
          "PromptToInstall",
          "IsVppUsed",
          "IsVppUsedExclusively",
          "IsB2B",
          "IsAppRemovedOnUnenroll",
          "IsBackupPrevented",
          "IsFeedbackRequired",
          "IsRemovalPrevented"
        ],
        "properties": {
          "AppVersionReferenceId": {
            "type": "string"
          },
          "AppCatalogRuleReferenceId": {
            "type": "string"
          },
          "ConfigurationUri": {
            "type": "string"
          },
          "AppConfiguration": {
            "type": "string"
          },
          "ManagedAssociatedDomains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UpdateConfiguredDevices": {
            "type": "boolean"
          },
          "IsUpdateEnforced": {
            "type": "boolean"
          },
          "IsAutoUpdateVersionEnabled": {
            "type": "boolean"
          },
          "LastVersionSearchTime": {
            "type": "string",
            "format": "date-time"
          },
          "IsMandatory": {
            "type": "boolean"
          },
          "PromptToInstall": {
            "type": "boolean"
          },
          "TimesPromptToInstall": {
            "type": "integer",
            "format": "int32"
          },
          "AssignmentType": {
            "$ref": "#/definitions/AssignmentType",
            "x-enumType": "AssignmentType"
          },
          "VppAccountGuid": {
            "type": "string"
          },
          "VppApplicationReferenceId": {
            "type": "string"
          },
          "IsVppUsed": {
            "type": "boolean"
          },
          "IsVppUsedExclusively": {
            "type": "boolean"
          },
          "IsB2B": {
            "type": "boolean"
          },
          "IsAppRemovedOnUnenroll": {
            "type": "boolean"
          },
          "IsBackupPrevented": {
            "type": "boolean"
          },
          "IsFeedbackRequired": {
            "type": "boolean"
          },
          "IsRemovalPrevented": {
            "type": "boolean"
          }
        }
      },
      "AssignmentType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AppleIdBased",
          "DeviceBased"
        ],
        "enum": [
          "AppleIdBased",
          "DeviceBased"
        ],
        "x-enumType": "AssignmentType"
      },
      "AssociateIosAppsWithAppCatalogRuleRequest": {
        "type": "object",
        "properties": {
          "IosEnterpriseApps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IosEnterpriseAppConfiguration"
            }
          },
          "AppleStoreApps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppleStoreAppConfiguration"
            }
          }
        }
      },
      "IosEnterpriseAppConfiguration": {
        "type": "object",
        "required": [
          "IsMandatory",
          "PromptToInstall",
          "IsAppRemovedOnUnenroll",
          "IsBackupPrevented",
          "UpdateConfiguredDevices",
          "IsUpdateEnforced",
          "IsFeedbackRequired",
          "IsRemovalPrevented"
        ],
        "properties": {
          "AppVersionReferenceId": {
            "type": "string"
          },
          "AppCatalogRuleReferenceId": {
            "type": "string"
          },
          "ProvisioningProfileReferenceId": {
            "type": "string"
          },
          "Seller": {
            "type": "string"
          },
          "ConfigurationUri": {
            "type": "string"
          },
          "AppConfiguration": {
            "type": "string"
          },
          "ManagedAssociatedDomains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Description": {
            "type": "string"
          },
          "IsMandatory": {
            "type": "boolean"
          },
          "PromptToInstall": {
            "type": "boolean"
          },
          "TimesPromptToInstall": {
            "type": "integer",
            "format": "int32"
          },
          "IsAppRemovedOnUnenroll": {
            "type": "boolean"
          },
          "IsBackupPrevented": {
            "type": "boolean"
          },
          "UpdateConfiguredDevices": {
            "type": "boolean"
          },
          "IsUpdateEnforced": {
            "type": "boolean"
          },
          "IsFeedbackRequired": {
            "type": "boolean"
          },
          "ProvisioningProfileFileName": {
            "type": "string"
          },
          "IsRemovalPrevented": {
            "type": "boolean"
          }
        }
      },
      "AppCatalogRuleIosApps": {
        "type": "object",
        "properties": {
          "AppleStoreApplications": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppleStoreApplication"
            }
          },
          "EnterpriseApplications": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IosEnterpriseApplication"
            }
          }
        }
      },
      "AppleStoreApplication": {
        "type": "object",
        "properties": {
          "ApplicationConfiguration": {
            "$ref": "#/definitions/AppleStoreAppConfiguration"
          },
          "ApplicationMetadata": {
            "$ref": "#/definitions/AppleStoreApplicationMetadata"
          }
        }
      },
      "IosEnterpriseApplication": {
        "type": "object",
        "properties": {
          "ApplicationConfiguration": {
            "$ref": "#/definitions/IosEnterpriseAppConfiguration"
          },
          "ApplicationMetadata": {
            "$ref": "#/definitions/IosEnterpriseApplicationMetadata"
          }
        }
      },
      "AppCatalogRuleMacApps": {
        "type": "object",
        "properties": {
          "AppleStoreApplications": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppleStoreApplication"
            }
          },
          "EnterpriseApplications": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MacEnterpriseApplication"
            }
          }
        }
      },
      "MacEnterpriseApplication": {
        "type": "object",
        "properties": {
          "ApplicationConfiguration": {
            "$ref": "#/definitions/MacEnterpriseAppConfiguration"
          },
          "ApplicationMetadata": {
            "$ref": "#/definitions/MacEnterpriseApplicationMetadata"
          }
        }
      },
      "LinuxEnrollmentPolicySummary": {
        "type": "object",
        "required": [
          "EnrolledDeviceCount",
          "ActivationDate",
          "IsDeviceNamePreserved",
          "Status",
          "IsDefault",
          "IsDeviceRelocationPreserved",
          "CreatedDate",
          "LastModifiedDate",
          "IsEnrolledAsXTremeHub"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "EnrollmentUrl": {
            "type": "string"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "EnrolledDeviceCount": {
            "type": "integer",
            "format": "int32"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "EnrollmentPolicyTag": {
            "type": "string"
          },
          "AuthorizationPolicyReferenceId": {
            "type": "string"
          },
          "CertificateTemplateReferenceId": {
            "type": "string"
          },
          "CertificateTemplateName": {
            "type": "string"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "Status": {
            "$ref": "#/definitions/EnrollmentPolicyStatus3",
            "x-enumType": "EnrollmentPolicyStatus"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "IsDeviceRelocationPreserved": {
            "type": "boolean"
          },
          "CreatedBy": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "type": "string"
          },
          "IsEnrolledAsXTremeHub": {
            "type": "boolean"
          }
        }
      },
      "EnrollmentPolicyStatus3": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Disable",
          "Enable"
        ],
        "enum": [
          "Disable",
          "Enable"
        ],
        "x-enumType": "EnrollmentPolicyStatus"
      },
      "LinuxEnrollmentPolicy": {
        "type": "object",
        "required": [
          "IsDeviceRelocationPreserved",
          "IsDeviceNamePreserved",
          "IsEnrolledAsXTremeHub"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "IsDeviceRelocationPreserved": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "CertificateTemplateReferenceId": {
            "type": "string"
          },
          "EnrollmentPolicyTag": {
            "type": "string"
          },
          "AuthorizationReferenceId": {
            "type": "string"
          },
          "IsEnrolledAsXTremeHub": {
            "type": "boolean"
          }
        }
      },
      "UpdateLinuxEnrollmentPolicy": {
        "type": "object",
        "required": [
          "IsDeviceRelocationPreserved",
          "IsDeviceNamePreserved",
          "IsEnrolledAsXTremeHub"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "IsDeviceRelocationPreserved": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "CertificateTemplateReferenceId": {
            "type": "string"
          },
          "AuthorizationReferenceId": {
            "type": "string"
          },
          "IsEnrolledAsXTremeHub": {
            "type": "boolean"
          }
        }
      },
      "LinuxEnrollmentPolicyEmailInfo": {
        "type": "object",
        "required": [
          "AppendAddresses"
        ],
        "properties": {
          "EmailProfileName": {
            "type": "string"
          },
          "ToAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AppendAddresses": {
            "type": "boolean"
          }
        }
      },
      "WindowsModernEnrollmentPolicySummary": {
        "type": "object",
        "required": [
          "ActivationDate",
          "AuthorizationPolicyReferenceId",
          "IsDeviceNamePreserved",
          "Status",
          "IsDefault",
          "IsDeviceRelocationPreserved",
          "CreatedDate",
          "LastModifiedDate",
          "WindowsModernEnrollmentType"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string"
          },
          "DiscoveryUrl": {
            "type": "string"
          },
          "TermsOfUserUrl": {
            "type": "string"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "AuthorizationPolicyReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "CertificateTemplateReferenceId": {
            "type": "string"
          },
          "CertificateTemplateName": {
            "type": "string"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "Status": {
            "$ref": "#/definitions/EnrollmentPolicyStatus4",
            "x-enumType": "EnrollmentPolicyStatus"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "IsDeviceRelocationPreserved": {
            "type": "boolean"
          },
          "CreatedBy": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "type": "string"
          },
          "WindowsModernEnrollmentType": {
            "$ref": "#/definitions/WindowsModernEnrollmentType",
            "x-enumType": "WindowsModernEnrollmentType"
          },
          "DeviceManagementAddress": {
            "type": "string"
          },
          "EnrollmentPolicyPin": {
            "type": "string"
          }
        }
      },
      "EnrollmentPolicyStatus4": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Disable",
          "Enable"
        ],
        "enum": [
          "Disable",
          "Enable"
        ],
        "x-enumType": "EnrollmentPolicyStatus"
      },
      "WindowsModernEnrollmentType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Directory",
          "AzureAdJoinCloud",
          "AzureAdJoinOnPremise",
          "ProvisioningPackage"
        ],
        "enum": [
          "Directory",
          "AzureAdJoinCloud",
          "AzureAdJoinOnPremise",
          "ProvisioningPackage"
        ],
        "x-enumType": "WindowsModernEnrollmentType"
      },
      "WindowsModernEnrollmentPolicy": {
        "type": "object",
        "required": [
          "IsDeviceRelocationPreserved",
          "IsDeviceNamePreserved",
          "WindowsModernEnrollmentType"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "IsDeviceRelocationPreserved": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "CertificateTemplateReferenceId": {
            "type": "string"
          },
          "AuthorizationReferenceId": {
            "type": "string"
          },
          "WindowsModernEnrollmentType": {
            "$ref": "#/definitions/WindowsModernEnrollmentType",
            "x-enumType": "WindowsModernEnrollmentType"
          }
        }
      },
      "UpdateWindowsModernEnrollmentPolicy": {
        "type": "object",
        "required": [
          "IsDeviceRelocationPreserved",
          "IsDeviceNamePreserved"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "IsDeviceRelocationPreserved": {
            "type": "boolean"
          },
          "IsDeviceNamePreserved": {
            "type": "boolean"
          },
          "DevicePreservedName": {
            "type": "string"
          },
          "CertificateTemplateReferenceId": {
            "type": "string"
          },
          "AuthorizationReferenceId": {
            "type": "string"
          },
          "EnrollmentLimit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Microsoft365AppProtectionPolicySettings": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "TenantId": {
            "type": "string"
          }
        }
      },
      "AppProtectionPolicySummary": {
        "type": "object",
        "required": [
          "Deployed",
          "Family",
          "DeployedApps"
        ],
        "properties": {
          "PolicyId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Deployed": {
            "type": "boolean"
          },
          "Family": {
            "$ref": "#/definitions/AppFamily",
            "x-enumType": "AppFamily"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "UpdatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "DeployedApps": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AppFamily": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Android",
          "Ios"
        ],
        "enum": [
          "Android",
          "Ios"
        ],
        "x-enumType": "AppFamily"
      },
      "AndroidAppProtectionPolicyRequest": {
        "allOf": [
          {
            "$ref": "#/definitions/AppProtectionPolicyBase"
          },
          {
            "type": "object",
            "properties": {
              "DisableScreenCapture": {
                "type": "boolean"
              },
              "UnmanagedWebBrowser": {
                "$ref": "#/definitions/WebBrowserIdentity"
              },
              "DisplayWebInBrowserSetting": {
                "$ref": "#/definitions/AndroidDisplayWebContentInBrowserSettings"
              },
              "PinAccessSettings": {
                "$ref": "#/definitions/AndroidPinAccessSettings"
              },
              "TargetGroups": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TargetAzureGroup"
                }
              }
            }
          }
        ]
      },
      "WebBrowserIdentity": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "PackageId": {
            "type": "string"
          }
        }
      },
      "AndroidDisplayWebContentInBrowserSettings": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AnyApp",
          "SotiSurf",
          "GoogleChrome",
          "MozillaFirefox",
          "MicrosoftEdge",
          "UnmanagedBrowser"
        ],
        "enum": [
          "AnyApp",
          "SotiSurf",
          "GoogleChrome",
          "MozillaFirefox",
          "MicrosoftEdge",
          "UnmanagedBrowser"
        ],
        "x-enumType": "AndroidDisplayWebContentInBrowserSettings"
      },
      "AndroidPinAccessSettings": {
        "allOf": [
          {
            "$ref": "#/definitions/PinAccessSettings"
          },
          {
            "type": "object",
            "properties": {
              "AllowFingerprint": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "PinAccessSettings": {
        "type": "object",
        "properties": {
          "PinRequired": {
            "type": "boolean"
          },
          "AllowSimplePin": {
            "type": "boolean"
          },
          "MinPinLength": {
            "$ref": "#/definitions/MinPinLengthOptions",
            "x-enumType": "MinPinLengthOptions"
          },
          "PinType": {
            "$ref": "#/definitions/PinType",
            "x-enumType": "PinType"
          },
          "AllowResetPinAfterDays": {
            "type": "boolean"
          },
          "DaysBeforePinReset": {
            "type": "integer",
            "format": "int32"
          },
          "RequireAppPinWhenDevicePinSet": {
            "type": "boolean"
          }
        }
      },
      "MinPinLengthOptions": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Four",
          "Six",
          "Eight",
          "Ten",
          "Twelve",
          "Fourteen",
          "Sixteen"
        ],
        "enum": [
          "Four",
          "Six",
          "Eight",
          "Ten",
          "Twelve",
          "Fourteen",
          "Sixteen"
        ],
        "x-enumType": "MinPinLengthOptions"
      },
      "PinType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Numeric",
          "Passcode"
        ],
        "enum": [
          "Numeric",
          "Passcode"
        ],
        "x-enumType": "PinType"
      },
      "IosPinAccessSettings": {
        "allOf": [
          {
            "$ref": "#/definitions/PinAccessSettings"
          },
          {
            "type": "object",
            "properties": {
              "AllowTouchId": {
                "type": "boolean"
              },
              "AllowFaceId": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "TargetAzureGroup": {
        "type": "object",
        "required": [
          "IsExcluded"
        ],
        "properties": {
          "IsExcluded": {
            "type": "boolean"
          },
          "GroupId": {
            "type": "string"
          }
        }
      },
      "AppProtectionPolicyBase": {
        "type": "object",
        "x-abstract": true,
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ManagedApps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ManagedMobileApp"
            }
          },
          "DisableBackup": {
            "type": "boolean"
          },
          "AllowedOutboundDestinations": {
            "$ref": "#/definitions/ManagedAppOutboundDataTransferLevel",
            "x-enumType": "ManagedAppOutboundDataTransferLevel"
          },
          "DisableSaveAs": {
            "type": "boolean"
          },
          "DataStorageLocations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DataStorageLocation"
            },
            "x-enumType": "DataStorageLocation"
          },
          "AllowedInboundDataSources": {
            "$ref": "#/definitions/ManagedAppInboundDataTransferLevel",
            "x-enumType": "ManagedAppInboundDataTransferLevel"
          },
          "ClipboardSharingLevel": {
            "$ref": "#/definitions/ManagedAppClipboardSharingLevel",
            "x-enumType": "ManagedAppClipboardSharingLevel"
          },
          "RequireDataEncryption": {
            "type": "boolean"
          },
          "DisableContactSync": {
            "type": "boolean"
          },
          "DisablePrinting": {
            "type": "boolean"
          },
          "WorkOrSchoolAccountRequired": {
            "type": "boolean"
          },
          "AccessRequirementsTimeout": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ManagedMobileApp": {
        "type": "object",
        "required": [
          "IsCustomApp"
        ],
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "ApplicationId": {
            "type": "string"
          },
          "IsCustomApp": {
            "type": "boolean"
          }
        }
      },
      "ManagedAppOutboundDataTransferLevel": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AllApps",
          "None",
          "PolicyManagedApps"
        ],
        "enum": [
          "AllApps",
          "None",
          "PolicyManagedApps"
        ],
        "x-enumType": "ManagedAppOutboundDataTransferLevel"
      },
      "DataStorageLocation": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "OneDriveForBusiness",
          "SharePoint",
          "LocalStorage"
        ],
        "enum": [
          "OneDriveForBusiness",
          "SharePoint",
          "LocalStorage"
        ],
        "x-enumType": "DataStorageLocation"
      },
      "ManagedAppInboundDataTransferLevel": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AllApps",
          "None",
          "PolicyManagedApps"
        ],
        "enum": [
          "AllApps",
          "None",
          "PolicyManagedApps"
        ],
        "x-enumType": "ManagedAppInboundDataTransferLevel"
      },
      "ManagedAppClipboardSharingLevel": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AllApps",
          "ManagedAppsWithPasteIn",
          "ManagedApps",
          "Blocked"
        ],
        "enum": [
          "AllApps",
          "ManagedAppsWithPasteIn",
          "ManagedApps",
          "Blocked"
        ],
        "x-enumType": "ManagedAppClipboardSharingLevel"
      },
      "AndroidAppProtectionPolicy": {
        "allOf": [
          {
            "$ref": "#/definitions/AppProtectionPolicy"
          },
          {
            "type": "object",
            "required": [
              "TargetFamily"
            ],
            "properties": {
              "TargetFamily": {
                "$ref": "#/definitions/AppFamily"
              },
              "DisableScreenCapture": {
                "type": "boolean"
              },
              "UnmanagedWebBrowser": {
                "$ref": "#/definitions/WebBrowserIdentity"
              },
              "DisplayWebInBrowserSetting": {
                "$ref": "#/definitions/AndroidDisplayWebContentInBrowserSettings"
              },
              "PinAccessSettings": {
                "$ref": "#/definitions/AndroidPinAccessSettings"
              }
            }
          }
        ]
      },
      "AppProtectionPolicy": {
        "allOf": [
          {
            "$ref": "#/definitions/AppProtectionPolicyBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "properties": {
              "PolicyId": {
                "type": "string"
              },
              "CreatedTime": {
                "type": "string",
                "format": "date-time"
              },
              "ModifiedTime": {
                "type": "string",
                "format": "date-time"
              },
              "Deployed": {
                "type": "boolean"
              },
              "DeployedAppCount": {
                "type": "integer",
                "format": "int32"
              },
              "AssignedGroups": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AzureAssignedGroup"
                }
              }
            }
          }
        ]
      },
      "AzureAssignedGroup": {
        "allOf": [
          {
            "$ref": "#/definitions/AzureActiveDirectoryGroup"
          },
          {
            "type": "object",
            "required": [
              "IsDeleted",
              "IsExcluded"
            ],
            "properties": {
              "IsDeleted": {
                "type": "boolean"
              },
              "IsExcluded": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AzureActiveDirectoryGroup": {
        "type": "object",
        "properties": {
          "GroupId": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "IosAppProtectionPolicy": {
        "allOf": [
          {
            "$ref": "#/definitions/AppProtectionPolicy"
          },
          {
            "type": "object",
            "required": [
              "TargetFamily"
            ],
            "properties": {
              "TargetFamily": {
                "$ref": "#/definitions/AppFamily"
              },
              "UnmanagedWebBrowserProtocol": {
                "type": "string"
              },
              "DisplayWebInBrowserSetting": {
                "$ref": "#/definitions/IosDisplayWebContentInBrowserSettings"
              },
              "PinAccessSettings": {
                "$ref": "#/definitions/IosPinAccessSettings"
              }
            }
          }
        ]
      },
      "IosDisplayWebContentInBrowserSettings": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AnyApp",
          "MicrosoftEdge",
          "UnmanagedBrowser"
        ],
        "enum": [
          "AnyApp",
          "MicrosoftEdge",
          "UnmanagedBrowser"
        ],
        "x-enumType": "IosDisplayWebContentInBrowserSettings"
      },
      "IosAppProtectionPolicyRequest": {
        "allOf": [
          {
            "$ref": "#/definitions/AppProtectionPolicyBase"
          },
          {
            "type": "object",
            "properties": {
              "UnmanagedWebBrowserProtocol": {
                "type": "string"
              },
              "DisplayWebInBrowserSetting": {
                "$ref": "#/definitions/IosDisplayWebContentInBrowserSettings"
              },
              "PinAccessSettings": {
                "$ref": "#/definitions/IosPinAccessSettings"
              },
              "TargetGroups": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TargetAzureGroup"
                }
              }
            }
          }
        ]
      },
      "Microsoft365ConditionalAccessSummary": {
        "type": "object",
        "required": [
          "Status",
          "SsoConsentGranted"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "TenantId": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/definitions/Microsoft365ConditionalAccessStatus",
            "x-enumType": "Microsoft365ConditionalAccessStatus"
          },
          "LastSync": {
            "type": "string",
            "format": "date-time"
          },
          "ApplicationId": {
            "type": "string"
          },
          "SsoConsentGranted": {
            "type": "boolean"
          }
        }
      },
      "Microsoft365ConditionalAccessStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Pending",
          "Active",
          "Error"
        ],
        "enum": [
          "Pending",
          "Active",
          "Error"
        ],
        "x-enumType": "Microsoft365ConditionalAccessStatus"
      },
      "Microsoft365ConditionalAccessSettings": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "TenantId": {
            "type": "string"
          }
        }
      },
      "TermsAndConditionsSummary": {
        "type": "object",
        "required": [
          "NeedReApplyTermsAndConditions",
          "LatestVersion",
          "CreatedDate",
          "LastModified",
          "CreatedBy",
          "LastModifiedBy"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          },
          "NeedReApplyTermsAndConditions": {
            "type": "boolean"
          },
          "LatestVersion": {
            "type": "integer"
          },
          "FileName": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "integer",
            "format": "int32"
          },
          "LastModifiedBy": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TermsAndConditionsVersionSummary": {
        "type": "object",
        "required": [
          "Version",
          "CreatedDate",
          "CreatedBy"
        ],
        "properties": {
          "Version": {
            "type": "integer"
          },
          "FileName": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServerSummary": {
        "type": "object",
        "required": [
          "ServerLocation"
        ],
        "properties": {
          "ServerAddress": {
            "type": "string"
          },
          "ServerLocation": {
            "$ref": "#/definitions/ServerLocation",
            "x-enumType": "ServerLocation"
          }
        }
      },
      "ServerLocation": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Default",
          "Custom"
        ],
        "enum": [
          "Default",
          "Custom"
        ],
        "x-enumType": "ServerLocation"
      },
      "ServerConfiguration": {
        "type": "object",
        "properties": {
          "ServerAddress": {
            "type": "string"
          }
        }
      },
      "FileVaultCertificateMetadata": {
        "type": "object",
        "required": [
          "UploadDate",
          "ExpiryDate",
          "IsExpired"
        ],
        "properties": {
          "Issuer": {
            "type": "string"
          },
          "UploadDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "IsExpired": {
            "type": "boolean"
          }
        }
      },
      "MailServer": {
        "type": "object",
        "required": [
          "Type",
          "ReferenceId"
        ],
        "properties": {
          "Type": {
            "$ref": "#/definitions/MailServerType",
            "x-enumType": "MailServerType"
          },
          "ReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "MailServerType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Exchange",
          "Other"
        ],
        "enum": [
          "Unknown",
          "Exchange",
          "Other"
        ],
        "x-enumType": "MailServerType"
      },
      "ExchangeSigningCertificateInfo": {
        "type": "object",
        "required": [
          "ReferenceId",
          "ExpireTime"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "ExpireTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ExchangeServerConnectionSettings": {
        "allOf": [
          {
            "$ref": "#/definitions/ConnectionSettings"
          },
          {
            "type": "object",
            "properties": {
              "PowerShellUrl": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ConnectionSettings": {
        "type": "object",
        "required": [
          "Mode"
        ],
        "properties": {
          "Mode": {
            "$ref": "#/definitions/MailServerAuthenticationMode",
            "x-enumType": "MailServerAuthenticationMode"
          },
          "Authentication": {
            "$ref": "#/definitions/ServerAuthentication"
          },
          "CertificateAuthentication": {
            "$ref": "#/definitions/ServerCertificateAuthentication"
          }
        }
      },
      "MailServerAuthenticationMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Basic",
          "Kerberos",
          "Certificate"
        ],
        "enum": [
          "Unknown",
          "Basic",
          "Kerberos",
          "Certificate"
        ],
        "x-enumType": "MailServerAuthenticationMode"
      },
      "ServerAuthentication": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          }
        }
      },
      "ServerCertificateAuthentication": {
        "type": "object",
        "required": [
          "AzureAppId",
          "CertificateRefId",
          "PublicKeyExpiry"
        ],
        "properties": {
          "AzureDomainName": {
            "type": "string"
          },
          "AzureAppId": {
            "type": "string",
            "format": "guid"
          },
          "AzureAuthEndpoint": {
            "type": "string"
          },
          "CertificateRefId": {
            "type": "string",
            "format": "guid"
          },
          "PublicKeyExpiry": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Region": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "PowerShellUri": {
            "type": "string"
          },
          "AzureAuthEndpoint": {
            "type": "string"
          }
        }
      },
      "MailServerLog": {
        "type": "object",
        "required": [
          "TimeStamp",
          "EventSeverity",
          "EventOriginator"
        ],
        "properties": {
          "TimeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "EventSeverity": {
            "$ref": "#/definitions/EventSeverity2",
            "x-enumType": "EventSeverity"
          },
          "Message": {
            "type": "string"
          },
          "EventCode": {
            "type": "string"
          },
          "SourceName": {
            "type": "string"
          },
          "EventOriginator": {
            "$ref": "#/definitions/EventOriginator2",
            "x-enumType": "EventOriginator"
          }
        }
      },
      "MailServerLogCount": {
        "type": "object",
        "properties": {
          "Information": {
            "type": "integer",
            "format": "int32"
          },
          "Warning": {
            "type": "integer",
            "format": "int32"
          },
          "Error": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CertificationAuthoritySummary": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificationAuthority"
          },
          {
            "type": "object",
            "required": [
              "NumberOfCertificateTemplates"
            ],
            "properties": {
              "NumberOfCertificateTemplates": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "CertificationAuthority": {
        "type": "object",
        "x-abstract": true,
        "required": [
          "CertificationAuthorityType"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "CertificationAuthorityType": {
            "$ref": "#/definitions/CertificationAuthorityType",
            "x-enumType": "CertificationAuthorityType"
          }
        }
      },
      "CertificationAuthorityType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "AdcsPkiDcom",
          "AdcsPkiHttps",
          "AdcsScep",
          "Entrust",
          "GenericScep",
          "SymantecPki",
          "EjbcaEst"
        ],
        "enum": [
          "None",
          "AdcsPkiDcom",
          "AdcsPkiHttps",
          "AdcsScep",
          "Entrust",
          "GenericScep",
          "SymantecPki",
          "EjbcaEst"
        ],
        "x-enumType": "CertificationAuthorityType"
      },
      "AdcsPkiDcomCertificationAuthority": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificationAuthority"
          },
          {
            "type": "object",
            "properties": {
              "EnrollmentCertificateFileInfo": {
                "type": "string"
              },
              "RootCertificateFileInfo": {
                "type": "string"
              },
              "ServerHostName": {
                "type": "string"
              },
              "CloudLinkAgentName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AdcsPkiHttpsCertificationAuthority": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificationAuthority"
          },
          {
            "type": "object",
            "required": [
              "AuthenticationType"
            ],
            "properties": {
              "PolicyServiceUrl": {
                "type": "string"
              },
              "EnrolmentServiceUrl": {
                "type": "string"
              },
              "RootCertificateInfo": {
                "type": "string"
              },
              "EnrolmentCertificateInfo": {
                "type": "string"
              },
              "AuthenticationType": {
                "$ref": "#/definitions/AdcsAuthenticationType"
              },
              "CertificateInfo": {
                "type": "string"
              },
              "UserName": {
                "type": "string"
              },
              "Password": {
                "type": "string"
              },
              "CloudLinkAgentName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AdcsAuthenticationType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Certificate",
          "UserNamePassword",
          "Kerberos"
        ],
        "enum": [
          "None",
          "Certificate",
          "UserNamePassword",
          "Kerberos"
        ],
        "x-enumType": "AdcsAuthenticationType"
      },
      "AdcsScepCertificationAuthority": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificationAuthority"
          },
          {
            "type": "object",
            "required": [
              "UseClient",
              "MaxRetries",
              "RetryTimeout",
              "UseStaticChallenge"
            ],
            "properties": {
              "UserName": {
                "type": "string"
              },
              "Password": {
                "type": "string"
              },
              "UseClient": {
                "type": "boolean"
              },
              "MaxRetries": {
                "type": "integer",
                "format": "int32"
              },
              "RetryTimeout": {
                "type": "integer",
                "format": "int32"
              },
              "ServiceUrl": {
                "type": "string"
              },
              "ChallengeUrl": {
                "type": "string"
              },
              "UseStaticChallenge": {
                "type": "boolean"
              },
              "StaticChallenge": {
                "type": "string"
              },
              "Thumbprint": {
                "type": "string"
              },
              "CloudLinkAgentName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "EjbcaEstCertificationAuthority": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificationAuthority"
          },
          {
            "type": "object",
            "required": [
              "AuthenticationType"
            ],
            "properties": {
              "AuthenticationType": {
                "$ref": "#/definitions/EjbcaRaAuthenticationType"
              },
              "ServiceUrl": {
                "type": "string"
              },
              "Alias": {
                "type": "string"
              },
              "CertificateInfo": {
                "type": "string"
              },
              "UserName": {
                "type": "string"
              },
              "Password": {
                "type": "string"
              },
              "CloudLinkAgentName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "EjbcaRaAuthenticationType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Certificate",
          "Basic",
          "CertificateAndBasic"
        ],
        "enum": [
          "Certificate",
          "Basic",
          "CertificateAndBasic"
        ],
        "x-enumType": "EjbcaRaAuthenticationType"
      },
      "EntrustCertificationAuthority": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificationAuthority"
          },
          {
            "type": "object",
            "properties": {
              "UserName": {
                "type": "string"
              },
              "Password": {
                "type": "string"
              },
              "ServiceUrl": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GenericScepCertificationAuthority": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificationAuthority"
          },
          {
            "type": "object",
            "required": [
              "UseClient",
              "UseStaticChallenge",
              "MaxRetries",
              "RetryTimeout"
            ],
            "properties": {
              "UseClient": {
                "type": "boolean"
              },
              "ServiceUrl": {
                "type": "string"
              },
              "UseStaticChallenge": {
                "type": "boolean"
              },
              "StaticChallenge": {
                "type": "string"
              },
              "MaxRetries": {
                "type": "integer",
                "format": "int32"
              },
              "RetryTimeout": {
                "type": "integer",
                "format": "int32"
              },
              "Fingerprint": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SymantecCertificationAuthority": {
        "allOf": [
          {
            "$ref": "#/definitions/CertificationAuthority"
          },
          {
            "type": "object",
            "properties": {
              "ServiceUrl": {
                "type": "string"
              },
              "FileInfo": {
                "type": "string"
              },
              "CertificateFileName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CertificateTemplate": {
        "type": "object",
        "required": [
          "CertificateTarget",
          "CertificateUsage",
          "KeySize",
          "ShouldRemoveAfterRenewal",
          "UseAutoRenewal",
          "PreservePrivateKey",
          "Disabled",
          "PublishToLdap",
          "KeyProtection",
          "HashAlgorithm",
          "ValuePeriod",
          "RequireUserAuthentication",
          "CertificateKeyUsage"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "CertificationAuthorityReferenceId": {
            "type": "string"
          },
          "CertificationAuthorityTemplateName": {
            "type": "string"
          },
          "CertificateTarget": {
            "$ref": "#/definitions/CertificateTarget",
            "x-enumType": "CertificateTarget"
          },
          "SubjectTemplate": {
            "type": "string"
          },
          "AlternativeSubjectTemplate": {
            "type": "string"
          },
          "CertificateUsage": {
            "$ref": "#/definitions/CertificateUsage2",
            "x-enumType": "CertificateUsage"
          },
          "KeySize": {
            "type": "integer",
            "format": "int32"
          },
          "ShouldRemoveAfterRenewal": {
            "type": "boolean"
          },
          "UseAutoRenewal": {
            "type": "boolean"
          },
          "NumberOfDaysForAutoRenewal": {
            "type": "integer",
            "format": "int32"
          },
          "PreservePrivateKey": {
            "type": "boolean"
          },
          "Disabled": {
            "type": "boolean"
          },
          "PublishToLdap": {
            "type": "boolean"
          },
          "KeyProtection": {
            "$ref": "#/definitions/KeyProtection",
            "x-enumType": "KeyProtection"
          },
          "HashAlgorithm": {
            "$ref": "#/definitions/HashAlgorithm",
            "x-enumType": "HashAlgorithm"
          },
          "ValuePeriod": {
            "$ref": "#/definitions/ValuePeriod",
            "x-enumType": "ValuePeriod"
          },
          "ValuePeriodUnits": {
            "type": "integer",
            "format": "int32"
          },
          "CertificateTemplateGuid": {
            "type": "string"
          },
          "Ekus": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EkuEntry"
            }
          },
          "RequireUserAuthentication": {
            "type": "boolean"
          },
          "CertificateKeyUsage": {
            "$ref": "#/definitions/X509KeyUsageFlags",
            "x-enumType": "X509KeyUsageFlags"
          }
        }
      },
      "CertificateTarget": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Device",
          "User"
        ],
        "enum": [
          "Device",
          "User"
        ],
        "x-enumType": "CertificateTarget"
      },
      "CertificateUsage2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Signing",
          "Encryption",
          "SigningAndEncryption"
        ],
        "enum": [
          "None",
          "Signing",
          "Encryption",
          "SigningAndEncryption"
        ],
        "x-enumType": "CertificateUsage"
      },
      "KeyProtection": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Protected",
          "ProtectedIfSupported",
          "NotProtected"
        ],
        "enum": [
          "Protected",
          "ProtectedIfSupported",
          "NotProtected"
        ],
        "x-enumType": "KeyProtection"
      },
      "HashAlgorithm": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Sha1",
          "Sha2",
          "Sha3"
        ],
        "enum": [
          "Sha1",
          "Sha2",
          "Sha3"
        ],
        "x-enumType": "HashAlgorithm"
      },
      "ValuePeriod": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Days",
          "Months",
          "Years"
        ],
        "enum": [
          "Days",
          "Months",
          "Years"
        ],
        "x-enumType": "ValuePeriod"
      },
      "EkuEntry": {
        "type": "object",
        "required": [
          "IsCustom"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Oid": {
            "type": "string"
          },
          "IsCustom": {
            "type": "boolean"
          },
          "ReferenceId": {
            "type": "string"
          }
        }
      },
      "CertificateInformation": {
        "type": "object",
        "required": [
          "HasPrivateKey",
          "NotBeforeDate",
          "NotAfterDate",
          "IsRevoked",
          "WasRenewed"
        ],
        "properties": {
          "SerialNumber": {
            "type": "string"
          },
          "SubjectName": {
            "type": "string"
          },
          "Issuer": {
            "type": "string"
          },
          "HasPrivateKey": {
            "type": "boolean"
          },
          "NotBeforeDate": {
            "type": "string",
            "format": "date-time"
          },
          "NotAfterDate": {
            "type": "string",
            "format": "date-time"
          },
          "IsRevoked": {
            "type": "boolean"
          },
          "WasRenewed": {
            "type": "boolean"
          },
          "WasStoredWithPrivateKey": {
            "type": "boolean"
          },
          "Hash": {
            "type": "string"
          }
        }
      },
      "CertificateRetrievalMethod2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "FileUpload",
          "PkiRequest",
          "ScepRequest",
          "WindowsScepRequest"
        ],
        "enum": [
          "FileUpload",
          "PkiRequest",
          "ScepRequest",
          "WindowsScepRequest"
        ],
        "x-enumType": "CertificateRetrievalMethod"
      },
      "WnsConfiguration": {
        "type": "object",
        "required": [
          "Enabled"
        ],
        "properties": {
          "AppId": {
            "type": "string"
          },
          "PFN": {
            "type": "string"
          },
          "ClientSecret": {
            "type": "string"
          },
          "Enabled": {
            "type": "boolean"
          }
        }
      },
      "LicenseInfo": {
        "type": "object",
        "required": [
          "PurchasedLicenses",
          "UsedDeploymentServers",
          "PurchasedServers",
          "LicenseType",
          "LicenseState"
        ],
        "properties": {
          "RegistrationCode": {
            "type": "string"
          },
          "ExpiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "PurchasedLicenses": {
            "type": "integer",
            "format": "int32"
          },
          "UsedLicenses": {
            "$ref": "#/definitions/FamilyLicenseCount"
          },
          "UsedDeploymentServers": {
            "type": "integer",
            "format": "int32"
          },
          "PurchasedServers": {
            "type": "integer",
            "format": "int32"
          },
          "LastActivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "ProductVersion": {
            "type": "string"
          },
          "LicenseType": {
            "$ref": "#/definitions/LicenseType",
            "x-enumType": "LicenseType"
          },
          "LicenseState": {
            "$ref": "#/definitions/LicenseState",
            "x-enumType": "LicenseState"
          }
        }
      },
      "FamilyLicenseCount": {
        "type": "object",
        "required": [
          "Android",
          "Apple",
          "WindowsCE",
          "WindowsDesktop",
          "WindowsModern",
          "Linux",
          "ZebraPrinter"
        ],
        "properties": {
          "Android": {
            "type": "integer",
            "format": "int32"
          },
          "Apple": {
            "type": "integer",
            "format": "int32"
          },
          "WindowsCE": {
            "type": "integer",
            "format": "int32"
          },
          "WindowsDesktop": {
            "type": "integer",
            "format": "int32"
          },
          "WindowsModern": {
            "type": "integer",
            "format": "int32"
          },
          "Linux": {
            "type": "integer",
            "format": "int32"
          },
          "ZebraPrinter": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LicenseType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Standard",
          "Premium",
          "Enterprise"
        ],
        "enum": [
          "Standard",
          "Premium",
          "Enterprise"
        ],
        "x-enumType": "LicenseType"
      },
      "LicenseState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Perpetual",
          "Subscription",
          "Trial"
        ],
        "enum": [
          "Perpetual",
          "Subscription",
          "Trial"
        ],
        "x-enumType": "LicenseState"
      },
      "RegistrationInfo": {
        "type": "object",
        "properties": {
          "RegistrationCode": {
            "type": "string"
          }
        }
      },
      "SignalServerMetric": {
        "type": "object",
        "required": [
          "IsPrimary",
          "MemoryUsage",
          "Uptime"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "HostName": {
            "type": "string"
          },
          "IsPrimary": {
            "type": "boolean"
          },
          "MemoryUsage": {
            "type": "integer",
            "format": "int32"
          },
          "Uptime": {
            "type": "string",
            "format": "time-span"
          }
        }
      },
      "SignalPolicy": {
        "type": "object",
        "required": [
          "IsEnabled",
          "TriggeredConditionsFlag",
          "DateCreated"
        ],
        "properties": {
          "PolicyId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ConditionExpression": {
            "type": "string"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "EffectiveStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "EffectiveEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "ScheduleStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "ScheduleEndTime": {
            "type": "string",
            "format": "date-time"
          },
          "ScheduleDaysOfWeek": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceCollectionPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "ThrottleActionsPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "TriggeredConditionsFlag": {
            "type": "boolean"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string"
          },
          "DateLastModified": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "type": "string"
          },
          "Actions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SignalPolicyAction"
            }
          }
        }
      },
      "SignalPolicyAction": {
        "type": "object",
        "properties": {
          "PolicyActionId": {
            "type": "string"
          },
          "PolicyId": {
            "type": "string"
          },
          "ParameterInfo": {
            "type": "string"
          },
          "Domain": {
            "type": "string"
          },
          "ActionIdentifier": {
            "type": "string"
          }
        }
      },
      "SignalPolicySummary": {
        "type": "object",
        "required": [
          "IsEnabled",
          "DateCreated",
          "ActionCount"
        ],
        "properties": {
          "PolicyId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ConditionExpression": {
            "type": "string"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "EffectiveStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "EffectiveEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "ScheduleStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "ScheduleEndTime": {
            "type": "string",
            "format": "date-time"
          },
          "ScheduleDaysOfWeek": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceCollectionPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "ThrottleActionsPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string"
          },
          "DateLastModified": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "type": "string"
          },
          "ActionCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MobiControlActionTypes": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "SendEmail",
          "SendScript",
          "SendMessageToDevice",
          "RelocateDevice",
          "TriggerAlert",
          "TriggerWebhook"
        ],
        "enum": [
          "SendEmail",
          "SendScript",
          "SendMessageToDevice",
          "RelocateDevice",
          "TriggerAlert",
          "TriggerWebhook"
        ],
        "x-enumType": "MobiControlActionTypes"
      },
      "SignalPolicyActivity": {
        "type": "object",
        "required": [
          "PolicyActivityId",
          "PolicyId",
          "ActivityDate"
        ],
        "properties": {
          "PolicyActivityId": {
            "type": "integer",
            "format": "int64"
          },
          "PolicyId": {
            "type": "string",
            "format": "guid"
          },
          "ActivityDate": {
            "type": "string",
            "format": "date-time"
          },
          "ActionActivities": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SignalPolicyActionActivity"
            }
          },
          "DomainObjects": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SignalDomainObject"
            }
          }
        }
      },
      "SignalPolicyActionActivity": {
        "type": "object",
        "required": [
          "PolicyActivityId",
          "LastStateChangeDate",
          "ActionStateId"
        ],
        "properties": {
          "PolicyActionActivityId": {
            "type": "string"
          },
          "PolicyActivityId": {
            "type": "integer",
            "format": "int64"
          },
          "PolicyActionId": {
            "type": "string"
          },
          "ActionIdentifier": {
            "type": "string"
          },
          "LastStateChangeDate": {
            "type": "string",
            "format": "date-time"
          },
          "Result": {
            "type": "string"
          },
          "ActionStateId": {
            "$ref": "#/definitions/SignalActionStateEnum",
            "x-enumType": "SignalActionStateEnum"
          }
        }
      },
      "SignalActionStateEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Queued",
          "Sent",
          "ExecutedSuccessfully",
          "FailedToExecute",
          "Unsupported"
        ],
        "enum": [
          "Unknown",
          "Queued",
          "Sent",
          "ExecutedSuccessfully",
          "FailedToExecute",
          "Unsupported"
        ],
        "x-enumType": "SignalActionStateEnum"
      },
      "SignalDomainObject": {
        "type": "object",
        "required": [
          "DomainObjectId"
        ],
        "properties": {
          "DomainObjectId": {
            "type": "integer",
            "format": "int32"
          },
          "ReferenceId": {
            "type": "string"
          },
          "Domain": {
            "type": "string"
          },
          "ObjectType": {
            "type": "string"
          },
          "ObjectId": {
            "type": "string"
          },
          "ObjectName": {
            "type": "string"
          }
        }
      },
      "SignalPolicyChangeLog": {
        "type": "object",
        "required": [
          "ChangeLogId",
          "ChangeDateTime",
          "ChangeEventId"
        ],
        "properties": {
          "ChangeLogId": {
            "type": "integer",
            "format": "int32"
          },
          "PolicyId": {
            "type": "string"
          },
          "ChangeDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ChangeEventId": {
            "$ref": "#/definitions/SignalChangeEventEnum",
            "x-enumType": "SignalChangeEventEnum"
          },
          "Result": {
            "type": "string"
          },
          "ChangedBy": {
            "type": "string"
          }
        }
      },
      "SignalChangeEventEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Created",
          "Modified",
          "Enabled",
          "Disabled"
        ],
        "enum": [
          "Unknown",
          "Created",
          "Modified",
          "Enabled",
          "Disabled"
        ],
        "x-enumType": "SignalChangeEventEnum"
      },
      "DomainSchema": {
        "type": "object",
        "required": [
          "FeatureLevel"
        ],
        "properties": {
          "Domain": {
            "type": "string"
          },
          "FeatureLevel": {
            "type": "integer",
            "format": "int32"
          },
          "Objects": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DomainObjectSchema"
            }
          },
          "ConditionAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ConditionAttributeSchema"
            }
          },
          "DomainEvents": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DomainEventSchema"
            }
          },
          "Actions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DomainActionSchema"
            }
          },
          "ValueLists": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ValueList"
            }
          },
          "LocalizedDomainStrings": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LocalizationPair"
            }
          }
        }
      },
      "DomainObjectSchema": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "BaseObjectKey": {
            "type": "string"
          },
          "AliasAttributeKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PluralName": {
            "type": "string"
          },
          "FeatureLevelOverride": {
            "type": "integer",
            "format": "int32"
          },
          "ValueListId": {
            "type": "string"
          }
        }
      },
      "ConditionAttributeSchema": {
        "type": "object",
        "required": [
          "ValueType",
          "Targeting",
          "IsDynamic"
        ],
        "properties": {
          "Key": {
            "type": "string"
          },
          "Domain": {
            "type": "string"
          },
          "ObjectTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ValueType": {
            "$ref": "#/definitions/ValueTypes",
            "x-enumType": "ValueTypes"
          },
          "Targeting": {
            "type": "boolean"
          },
          "ValuesListId": {
            "type": "string"
          },
          "DefaultUIUnit": {
            "$ref": "#/definitions/UnitOfMeasureTypes",
            "x-enumType": "UnitOfMeasureTypes"
          },
          "DisplayUnits": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UnitOfMeasureTypes"
            }
          },
          "StoredUnit": {
            "$ref": "#/definitions/UnitOfMeasureTypes",
            "x-enumType": "UnitOfMeasureTypes"
          },
          "FilteringAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FilteringAttribute"
            }
          },
          "SortPrefix": {
            "type": "string"
          },
          "OperatorsOverride": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UiControl": {
            "type": "string"
          },
          "Placeholder": {
            "type": "string"
          },
          "PluralName": {
            "type": "string"
          },
          "DecimalPlaces": {
            "type": "integer",
            "format": "int32"
          },
          "IsDynamic": {
            "type": "boolean"
          },
          "ValueValidation": {
            "$ref": "#/definitions/ValueValidationSchema"
          }
        }
      },
      "ValueTypes": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Numeric",
          "String",
          "ArrayString",
          "Version"
        ],
        "enum": [
          "Numeric",
          "String",
          "ArrayString",
          "Version"
        ],
        "x-enumType": "ValueTypes"
      },
      "UnitOfMeasureTypes": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Percent",
          "Bytes",
          "KiloBytes",
          "MegaBytes",
          "GigaBytes",
          "DBm"
        ],
        "enum": [
          "None",
          "Percent",
          "Bytes",
          "KiloBytes",
          "MegaBytes",
          "GigaBytes",
          "DBm"
        ],
        "x-enumType": "UnitOfMeasureTypes"
      },
      "FilteringAttribute": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "ObjectName": {
            "type": "string"
          },
          "AttributeId": {
            "type": "string"
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "InfoHeader": {
            "type": "string"
          }
        }
      },
      "ValueValidationSchema": {
        "type": "object",
        "properties": {
          "MinLength": {
            "type": "integer",
            "format": "int32"
          },
          "MaxLength": {
            "type": "integer",
            "format": "int32"
          },
          "MinValue": {
            "type": "integer",
            "format": "int32"
          },
          "MaxValue": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DomainEventSchema": {
        "type": "object",
        "required": [
          "AllowAnySelector"
        ],
        "properties": {
          "Key": {
            "type": "string"
          },
          "Domain": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "AllowAnySelector": {
            "type": "boolean"
          },
          "DomainObjectSelectorRef": {
            "type": "string"
          },
          "ObjectTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "FilteringAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FilteringAttribute"
            }
          },
          "OperatorsOverride": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DomainActionSchema": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "ActionId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Parameters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DomainActionParameterSchema"
            }
          },
          "UiControl": {
            "type": "string"
          },
          "FilteringAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FilteringAttribute"
            }
          },
          "UiParameters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/KeyValueProperty"
            }
          }
        }
      },
      "DomainActionParameterSchema": {
        "type": "object",
        "required": [
          "ValueType"
        ],
        "properties": {
          "Key": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ValueType": {
            "$ref": "#/definitions/ValueTypes",
            "x-enumType": "ValueTypes"
          },
          "ValuesListId": {
            "type": "string"
          },
          "UiControl": {
            "type": "string"
          },
          "MacrosListId": {
            "type": "string"
          },
          "Placeholder": {
            "type": "string"
          },
          "FilteringParameter": {
            "type": "string"
          },
          "DefaultValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "KeyValueProperty": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "ValueList": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ValueListItem"
            }
          }
        }
      },
      "ValueListItem": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Ordering": {
            "type": "string"
          },
          "LongName": {
            "type": "string"
          },
          "FilterValue": {
            "type": "string"
          },
          "Hierarchy": {
            "type": "string"
          }
        }
      },
      "LocalizationPair": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "ManagedGooglePlayEnterprise": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "PrimaryDomain": {
            "type": "string"
          },
          "SecondaryDomains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "DateTime": {
            "type": "string",
            "format": "date-time"
          },
          "Id": {
            "type": "string"
          },
          "ReferenceId": {
            "type": "string"
          }
        }
      },
      "ManagedGooglePlayProduct": {
        "type": "object",
        "required": [
          "IsPrivate",
          "Price",
          "IsApproved"
        ],
        "properties": {
          "Id": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          },
          "IsPrivate": {
            "type": "boolean"
          },
          "Version": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IconUrl": {
            "type": "string",
            "format": "uri"
          },
          "DetailsUrl": {
            "type": "string",
            "format": "uri"
          },
          "AppConfigurationSchema": {
            "type": "string"
          },
          "WorkDetailsUrl": {
            "type": "string",
            "format": "uri"
          },
          "Screenshots": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Price": {
            "type": "number",
            "format": "decimal"
          },
          "IsApproved": {
            "type": "boolean"
          },
          "Seller": {
            "type": "string"
          },
          "AppTracks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ManagedGooglePlayAppTrack"
            }
          },
          "Permissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ManagedGooglePlayProductPermission"
            }
          }
        }
      },
      "ManagedGooglePlayAppTrack": {
        "type": "object",
        "required": [
          "AndroidAppTrackId"
        ],
        "properties": {
          "AndroidAppTrackId": {
            "type": "integer",
            "format": "int32"
          },
          "TrackId": {
            "type": "string"
          },
          "TrackAlias": {
            "type": "string"
          }
        }
      },
      "ManagedGooglePlayProductPermission": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ExternalPermissionId": {
            "type": "string"
          }
        }
      },
      "SearchServerInfo": {
        "type": "object",
        "required": [
          "Servers"
        ],
        "properties": {
          "Servers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SearchServer"
            }
          }
        }
      },
      "SearchServer": {
        "type": "object",
        "required": [
          "Name",
          "Status",
          "ReferenceId"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/definitions/SearchServerStatus",
            "x-enumType": "SearchServerStatus"
          },
          "ReferenceId": {
            "type": "string"
          }
        }
      },
      "SearchServerStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Offline",
          "Online",
          "Deleted"
        ],
        "enum": [
          "Offline",
          "Online",
          "Deleted"
        ],
        "x-enumType": "SearchServerStatus"
      },
      "ScheduleSummary": {
        "type": "object",
        "required": [
          "FrequencyType",
          "StartDate"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "FrequencyType": {
            "$ref": "#/definitions/FrequencyType",
            "x-enumType": "FrequencyType"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "RepeatInterval": {
            "type": "string",
            "format": "time-span"
          }
        }
      },
      "FrequencyType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Once",
          "Weekly",
          "Periodically"
        ],
        "enum": [
          "Once",
          "Weekly",
          "Periodically"
        ],
        "x-enumType": "FrequencyType"
      },
      "ScheduleInfo": {
        "type": "object",
        "required": [
          "FrequencyType",
          "StartDate"
        ],
        "properties": {
          "FrequencyType": {
            "$ref": "#/definitions/FrequencyType",
            "x-enumType": "FrequencyType"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "RepeatInterval": {
            "type": "string",
            "format": "time-span"
          }
        }
      },
      "DeviceScriptsExecutionStatusInfo": {
        "type": "object",
        "required": [
          "FailureCount",
          "SuccessCount"
        ],
        "properties": {
          "FailureCount": {
            "type": "integer",
            "format": "int32"
          },
          "SuccessCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DeviceScriptStatus": {
        "type": "object",
        "required": [
          "CreatedDate",
          "ExecutionStatus",
          "ScriptOrigin",
          "ExecutionTime",
          "DeviceScriptExecutionReferenceId"
        ],
        "properties": {
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExecutionStatus": {
            "$ref": "#/definitions/DeviceScriptExecutionStatus",
            "x-enumType": "DeviceScriptExecutionStatus"
          },
          "ScriptOrigin": {
            "$ref": "#/definitions/ScriptOrigin",
            "x-enumType": "ScriptOrigin"
          },
          "ScriptContent": {
            "type": "string"
          },
          "ExecutionTime": {
            "type": "string",
            "format": "date-time"
          },
          "DeviceScriptExecutionReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "ExtraInfo": {
            "type": "string"
          }
        }
      },
      "DeviceScriptExecutionStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Failed",
          "Success"
        ],
        "enum": [
          "Failed",
          "Success"
        ],
        "x-enumType": "DeviceScriptExecutionStatus"
      },
      "ScriptOrigin": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "TaskScheduler",
          "OutOfContact",
          "SendScript"
        ],
        "enum": [
          "TaskScheduler",
          "OutOfContact",
          "SendScript"
        ],
        "x-enumType": "ScriptOrigin"
      },
      "ScriptExecutionStatusOrderBy": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "CreatedDate",
          "ExecutionStatus"
        ],
        "enum": [
          "CreatedDate",
          "ExecutionStatus"
        ],
        "x-enumType": "ScriptExecutionStatusOrderBy"
      },
      "DeviceScript": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "string"
          }
        }
      },
      "DeviceScriptExecutionOutput": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "string"
          }
        }
      },
      "SqlServerHealth": {
        "type": "object",
        "required": [
          "HasViewServerState"
        ],
        "properties": {
          "ProductVersion": {
            "type": "string"
          },
          "ProductLevel": {
            "type": "string"
          },
          "ProductEdition": {
            "type": "string"
          },
          "ServerName": {
            "type": "string"
          },
          "HasViewServerState": {
            "type": "boolean"
          },
          "Databases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DbHealth"
            }
          }
        }
      },
      "DbHealth": {
        "type": "object",
        "required": [
          "DatabaseFileSizeBytes"
        ],
        "properties": {
          "DatabaseName": {
            "type": "string"
          },
          "DatabaseFileSizeBytes": {
            "type": "integer",
            "format": "int64"
          },
          "AvailableSpaceBytes": {
            "type": "integer",
            "format": "int64"
          },
          "DriveName": {
            "type": "string"
          }
        }
      },
      "DeploymentServerHealth": {
        "type": "object",
        "required": [
          "Status",
          "ConnectedDeviceCount",
          "QueueLength"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "ReferenceId": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/definitions/ServerStatus2",
            "x-enumType": "ServerStatus"
          },
          "ConnectedDeviceCount": {
            "type": "integer",
            "format": "int32"
          },
          "QueueLength": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServerStatus2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Stopped",
          "Started",
          "Disabled",
          "Unlicensed",
          "Deleted",
          "StartedButNotRegistered",
          "Offline",
          "Unknown"
        ],
        "enum": [
          "Stopped",
          "Started",
          "Disabled",
          "Unlicensed",
          "Deleted",
          "StartedButNotRegistered",
          "Offline",
          "Unknown"
        ],
        "x-enumType": "ServerStatus"
      },
      "DeploymentServerHealthDetails": {
        "type": "object",
        "required": [
          "Status",
          "DeviceCount",
          "QueueLength",
          "UpTime",
          "TestMessageFrequency",
          "TestMessageWaitForReply",
          "LogServerActivity",
          "ThreadCount",
          "MinThreads",
          "MaxThreads",
          "MaxBurstThreads",
          "RuleReload",
          "DeviceScheduleChanges",
          "DbPingLast",
          "DbPingMin",
          "DbPingMax"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/definitions/ServerStatus2",
            "x-enumType": "ServerStatus"
          },
          "PrimaryDeviceAgentAddress": {
            "type": "string"
          },
          "SecondaryDeviceAgentAddress": {
            "type": "string"
          },
          "PrimaryManagementAddress": {
            "type": "string"
          },
          "SecondaryManagementAddress": {
            "type": "string"
          },
          "DeviceCount": {
            "type": "integer",
            "format": "int32"
          },
          "QueueLength": {
            "type": "integer",
            "format": "int32"
          },
          "UpTime": {
            "type": "string",
            "format": "time-span"
          },
          "TestMessageFrequency": {
            "type": "string",
            "format": "time-span"
          },
          "TestMessageWaitForReply": {
            "type": "string",
            "format": "time-span"
          },
          "LogServerActivity": {
            "type": "boolean"
          },
          "ThreadCount": {
            "type": "integer",
            "format": "int32"
          },
          "MinThreads": {
            "type": "integer",
            "format": "int32"
          },
          "MaxThreads": {
            "type": "integer",
            "format": "int32"
          },
          "MaxBurstThreads": {
            "type": "integer",
            "format": "int32"
          },
          "RuleReload": {
            "type": "string",
            "format": "time-span"
          },
          "DeviceScheduleChanges": {
            "type": "string",
            "format": "time-span"
          },
          "DbPingLast": {
            "type": "string",
            "format": "time-span"
          },
          "DbPingMin": {
            "type": "string",
            "format": "time-span"
          },
          "DbPingMax": {
            "type": "string",
            "format": "time-span"
          }
        }
      },
      "ManagementServerHealth": {
        "type": "object",
        "required": [
          "Status",
          "ConsoleUserCount"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "ReferenceId": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/definitions/ServerStatus2",
            "x-enumType": "ServerStatus"
          },
          "ConsoleUserCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ManagementServerHealthDetails": {
        "type": "object",
        "required": [
          "Status",
          "ConnectedUserCount"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/definitions/ServerStatus2",
            "x-enumType": "ServerStatus"
          },
          "Address": {
            "type": "string"
          },
          "ConnectedUserCount": {
            "type": "integer",
            "format": "int32"
          },
          "StatusTime": {
            "type": "string",
            "format": "date-time"
          },
          "ConnectedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ConnectedUser"
            }
          }
        }
      },
      "ConnectedUser": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Address": {
            "type": "string"
          }
        }
      },
      "SystemHealthSettingsResponse": {
        "type": "object",
        "required": [
          "CollectSystemData",
          "DataCollectionRate",
          "Reservoir",
          "InitialLoadMechanismModel",
          "Monitor"
        ],
        "properties": {
          "CollectSystemData": {
            "type": "boolean"
          },
          "DataCollectionRate": {
            "type": "string",
            "format": "time-span"
          },
          "Reservoir": {
            "type": "string",
            "format": "time-span"
          },
          "InitialLoadMechanismModel": {
            "$ref": "#/definitions/InitialLoadMechanism",
            "x-enumType": "InitialLoadMechanism"
          },
          "Monitor": {
            "type": "boolean"
          }
        }
      },
      "InitialLoadMechanism": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "FullLoad",
          "OptimizedStaged",
          "OptimizedMultiStaged",
          "OptimizedTwoStaged"
        ],
        "enum": [
          "FullLoad",
          "OptimizedStaged",
          "OptimizedMultiStaged",
          "OptimizedTwoStaged"
        ],
        "x-enumType": "InitialLoadMechanism"
      },
      "SystemHealthSettingsRequest": {
        "type": "object",
        "required": [
          "CollectSystemData"
        ],
        "properties": {
          "CollectSystemData": {
            "type": "boolean"
          },
          "DataCollectionRate": {
            "type": "string",
            "format": "time-span"
          }
        }
      },
      "DeviceScriptMetadata": {
        "type": "object",
        "required": [
          "ScriptType",
          "LastWriteTime",
          "FileSize"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ScriptType": {
            "$ref": "#/definitions/DeviceScriptType",
            "x-enumType": "DeviceScriptType"
          },
          "LastWriteTime": {
            "type": "string",
            "format": "date-time"
          },
          "FileSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DeviceScriptType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Legacy",
          "JavaScript",
          "Powershell32",
          "Powershell",
          "CustomFileSyncPolicyScript"
        ],
        "enum": [
          "Legacy",
          "JavaScript",
          "Powershell32",
          "Powershell",
          "CustomFileSyncPolicyScript"
        ],
        "x-enumType": "DeviceScriptType"
      },
      "DeviceScriptSummary": {
        "allOf": [
          {
            "$ref": "#/definitions/DeviceScriptMetadata"
          },
          {
            "type": "object",
            "properties": {
              "Content": {
                "type": "string"
              }
            }
          }
        ]
      },
      "DeviceScriptRequest": {
        "type": "object",
        "required": [
          "ScriptType"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "Content": {
            "type": "string"
          },
          "ScriptType": {
            "$ref": "#/definitions/DeviceScriptType",
            "x-enumType": "DeviceScriptType"
          }
        }
      },
      "AndroidFirmwareUpgradeClientType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Samsung",
          "Zebra"
        ],
        "enum": [
          "None",
          "Samsung",
          "Zebra"
        ],
        "x-enumType": "AndroidFirmwareUpgradeClientType"
      },
      "AndroidFirmwareUpgradeClientSyncStatus": {
        "type": "object",
        "required": [
          "ClientSyncStatusType"
        ],
        "properties": {
          "ClientSyncStatusType": {
            "$ref": "#/definitions/AndroidFirmwareUpgradeClientSyncStatusType",
            "x-enumType": "AndroidFirmwareUpgradeClientSyncStatusType"
          }
        }
      },
      "AndroidFirmwareUpgradeClientSyncStatusType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "InProgress",
          "Successful",
          "Failure"
        ],
        "enum": [
          "InProgress",
          "Successful",
          "Failure"
        ],
        "x-enumType": "AndroidFirmwareUpgradeClientSyncStatusType"
      },
      "AndroidFirmwareUpgradeAuthorizationGrant": {
        "type": "object",
        "required": [
          "GeneratedOn",
          "ExpiresIn",
          "Interval"
        ],
        "properties": {
          "AuthorizationGrantUrl": {
            "type": "string"
          },
          "GeneratedOn": {
            "type": "string",
            "format": "date-time"
          },
          "ExpiresIn": {
            "type": "integer",
            "format": "int32"
          },
          "Interval": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AndroidFirmwareUpgradeClientStatus": {
        "type": "object",
        "required": [
          "ClientState"
        ],
        "properties": {
          "ClientState": {
            "$ref": "#/definitions/AndroidFirmwareUpgradeClientState",
            "x-enumType": "AndroidFirmwareUpgradeClientState"
          }
        }
      },
      "AndroidFirmwareUpgradeClientState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unregistered",
          "InProgress",
          "Registered"
        ],
        "enum": [
          "Unregistered",
          "InProgress",
          "Registered"
        ],
        "x-enumType": "AndroidFirmwareUpgradeClientState"
      },
      "AndroidFirmwareVersionContract": {
        "type": "object",
        "required": [
          "ReleaseDate"
        ],
        "properties": {
          "FirmwareVersion": {
            "type": "string"
          },
          "OsVersion": {
            "type": "string"
          },
          "FirmwareType": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "ReferenceId": {
            "type": "string"
          }
        }
      },
      "AndroidFirmwareUpgradeClientSummary": {
        "type": "object",
        "required": [
          "TotalDevices",
          "TotalDevicesAppFeedbackEnabled",
          "TotalDevicesEnrolled",
          "TotalDevicesFotaReady"
        ],
        "properties": {
          "TotalDevices": {
            "type": "integer",
            "format": "int32"
          },
          "TotalDevicesAppFeedbackEnabled": {
            "type": "integer",
            "format": "int32"
          },
          "TotalDevicesEnrolled": {
            "type": "integer",
            "format": "int32"
          },
          "TotalDevicesFotaReady": {
            "type": "integer",
            "format": "int32"
          },
          "UserId": {
            "type": "string"
          }
        }
      },
      "AndroidFirmwareUpgradeClientType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Samsung",
          "Zebra"
        ],
        "enum": [
          "None",
          "Samsung",
          "Zebra"
        ],
        "x-enumType": "AndroidFirmwareUpgradeClientType"
      },
      "AndroidEnrollmentQrCodeConfigurationSummary": {
        "type": "object",
        "required": [
          "CreatedDate",
          "LastModifiedDate"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string"
          },
          "ConfigName": {
            "type": "string"
          },
          "ConfigDescription": {
            "type": "string"
          },
          "EnrollmentCode": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "type": "string"
          },
          "CreatedBy": {
            "type": "string"
          }
        }
      },
      "AndroidEnrollmentQrCodeConfiguration": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidEnterpriseProperties"
          },
          {
            "type": "object",
            "required": [
              "HasWifiPassword"
            ],
            "properties": {
              "ConfigName": {
                "type": "string"
              },
              "ReferenceId": {
                "type": "string"
              },
              "ConfigDescription": {
                "type": "string"
              },
              "EnrollmentCode": {
                "type": "string"
              },
              "AdminComponent": {
                "type": "string"
              },
              "DownloadLocation": {
                "type": "string"
              },
              "ApkChecksum": {
                "type": "string"
              },
              "CreatedDate": {
                "type": "string",
                "format": "date-time"
              },
              "LastModifiedDate": {
                "type": "string",
                "format": "date-time"
              },
              "LastModifiedBy": {
                "type": "string"
              },
              "CreatedBy": {
                "type": "string"
              },
              "HasWifiPassword": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AndroidEnterpriseProperties": {
        "type": "object",
        "properties": {
          "Ssid": {
            "type": "string"
          },
          "IsWifiHidden": {
            "type": "boolean"
          },
          "ProxyAutoConfigurationUrl": {
            "type": "string",
            "format": "uri"
          },
          "SecurityType": {
            "$ref": "#/definitions/WiFiSecurityType",
            "x-enumType": "WiFiSecurityType"
          },
          "Host": {
            "type": "string"
          },
          "Port": {
            "type": "integer",
            "format": "int32"
          },
          "ProxyByPass": {
            "type": "string"
          },
          "SkipEncryption": {
            "type": "boolean"
          },
          "EnableSystemApps": {
            "type": "boolean"
          },
          "Cookie": {
            "type": "string"
          },
          "Language": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "TimeZone": {
            "type": "string"
          },
          "LocalTime": {
            "type": "string",
            "format": "date-time"
          },
          "AdminExtrasBundle": {
            "type": "string"
          }
        }
      },
      "WiFiSecurityType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "WEP",
          "WPA"
        ],
        "enum": [
          "None",
          "WEP",
          "WPA"
        ],
        "x-enumType": "WiFiSecurityType"
      },
      "AndroidEnrollmentQrCodeGenerator": {
        "allOf": [
          {
            "$ref": "#/definitions/AndroidEnterpriseProperties"
          },
          {
            "type": "object",
            "properties": {
              "Name": {
                "type": "string"
              },
              "Description": {
                "type": "string"
              },
              "EnrollmentCode": {
                "type": "string"
              },
              "DownloadLocation": {
                "type": "string"
              },
              "WifiPassword": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AndroidEnrollmentQrCodeConfigLogsCountSummary": {
        "type": "object",
        "properties": {
          "Information": {
            "type": "integer",
            "format": "int32"
          },
          "Warning": {
            "type": "integer",
            "format": "int32"
          },
          "Error": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EventSeverity5": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Information",
          "Warning",
          "Error"
        ],
        "enum": [
          "Information",
          "Warning",
          "Error"
        ],
        "x-enumType": "EventSeverity"
      },
      "AndroidEnrollmentQrCodeConfigLogSummary": {
        "type": "object",
        "required": [
          "TimeStamp",
          "EventSeverity"
        ],
        "properties": {
          "TimeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "EventSeverity": {
            "$ref": "#/definitions/EventSeverity5",
            "x-enumType": "EventSeverity"
          },
          "Message": {
            "type": "string"
          },
          "SourceName": {
            "type": "string"
          }
        }
      },
      "WindowsBitLockerKey": {
        "type": "object",
        "required": [
          "RecoveryKeyId"
        ],
        "properties": {
          "DriveName": {
            "type": "string"
          },
          "RecoveryKeyId": {
            "type": "string",
            "format": "guid"
          },
          "RecoveryKey": {
            "type": "string"
          }
        }
      },
      "BasicCredentialSummary": {
        "allOf": [
          {
            "$ref": "#/definitions/WebhookCredentialSummary"
          },
          {
            "type": "object",
            "required": [
              "UserName"
            ],
            "properties": {
              "UserName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "WebhookCredentialSummary": {
        "type": "object",
        "x-abstract": true,
        "required": [
          "ReferenceId",
          "Name",
          "CredentialSummaryKind"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "Name": {
            "type": "string"
          },
          "CredentialSummaryKind": {
            "$ref": "#/definitions/CredentialSummaryKind",
            "x-enumType": "CredentialSummaryKind"
          }
        }
      },
      "CredentialSummaryKind": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NoneCredentialSummary",
          "BasicCredentialSummary",
          "ApiKeyCredentialSummary",
          "OAuthCredentialSummary"
        ],
        "enum": [
          "NoneCredentialSummary",
          "BasicCredentialSummary",
          "ApiKeyCredentialSummary",
          "OAuthCredentialSummary"
        ],
        "x-enumType": "CredentialSummaryKind"
      },
      "ApiKeyCredentialSummary": {
        "allOf": [
          {
            "$ref": "#/definitions/WebhookCredentialSummary"
          },
          {
            "type": "object",
            "required": [
              "Key",
              "AddTo"
            ],
            "properties": {
              "Key": {
                "type": "string"
              },
              "AddTo": {
                "$ref": "#/definitions/ApiKeyLocation"
              }
            }
          }
        ]
      },
      "ApiKeyLocation": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Header",
          "QueryParams"
        ],
        "enum": [
          "Header",
          "QueryParams"
        ],
        "x-enumType": "ApiKeyLocation"
      },
      "NoneCredentialSummary": {
        "allOf": [
          {
            "$ref": "#/definitions/WebhookCredentialSummary"
          },
          {
            "type": "object"
          }
        ]
      },
      "BasicCredential": {
        "allOf": [
          {
            "$ref": "#/definitions/WebhookCredential"
          },
          {
            "type": "object",
            "required": [
              "UserName",
              "Password"
            ],
            "properties": {
              "UserName": {
                "type": "string"
              },
              "Password": {
                "type": "string"
              }
            }
          }
        ]
      },
      "WebhookCredential": {
        "type": "object",
        "x-abstract": true,
        "required": [
          "AuthenticationKind",
          "Name"
        ],
        "properties": {
          "AuthenticationKind": {
            "$ref": "#/definitions/AuthenticationType2",
            "x-enumType": "AuthenticationType"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "AuthenticationType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Basic",
          "ApiKey",
          "OAuth"
        ],
        "enum": [
          "None",
          "Basic",
          "ApiKey",
          "OAuth"
        ],
        "x-enumType": "AuthenticationType"
      },
      "ApiKeyCredential": {
        "allOf": [
          {
            "$ref": "#/definitions/WebhookCredential"
          },
          {
            "type": "object",
            "required": [
              "Key",
              "Value",
              "AddTo"
            ],
            "properties": {
              "Key": {
                "type": "string"
              },
              "Value": {
                "type": "string"
              },
              "AddTo": {
                "$ref": "#/definitions/ApiKeyLocation"
              }
            }
          }
        ]
      },
      "NoneCredential": {
        "allOf": [
          {
            "$ref": "#/definitions/WebhookCredential"
          },
          {
            "type": "object"
          }
        ]
      },
      "WebhookSummary": {
        "type": "object",
        "required": [
          "ReferenceId",
          "Name",
          "TargetUrl",
          "AuthenticationType",
          "MessageFormat",
          "CredentialReferenceId",
          "CreationDate",
          "CreatedBy",
          "LastModifiedDate",
          "LastModifiedBy",
          "Status"
        ],
        "properties": {
          "ReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "Name": {
            "type": "string"
          },
          "TargetUrl": {
            "type": "string"
          },
          "AuthenticationType": {
            "$ref": "#/definitions/AuthenticationType2",
            "x-enumType": "AuthenticationType"
          },
          "MessageFormat": {
            "$ref": "#/definitions/MessageFormat2",
            "x-enumType": "MessageFormat"
          },
          "CredentialReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "CreationDate": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string"
          },
          "LastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/definitions/WebhookStatus",
            "x-enumType": "WebhookStatus"
          }
        }
      },
      "MessageFormat2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "JSON",
          "XML"
        ],
        "enum": [
          "JSON",
          "XML"
        ],
        "x-enumType": "MessageFormat"
      },
      "WebhookStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Enabled",
          "Disabled",
          "Deleted"
        ],
        "enum": [
          "Enabled",
          "Disabled",
          "Deleted"
        ],
        "x-enumType": "WebhookStatus"
      },
      "Webhook": {
        "type": "object",
        "required": [
          "Name",
          "TargetUrl",
          "MessageFormat",
          "CredentialReferenceId",
          "Category"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "TargetUrl": {
            "type": "string"
          },
          "MessageFormat": {
            "$ref": "#/definitions/MessageFormat2",
            "x-enumType": "MessageFormat"
          },
          "CredentialReferenceId": {
            "type": "string",
            "format": "guid"
          },
          "Category": {
            "$ref": "#/definitions/WebhookCategory",
            "x-enumType": "WebhookCategory"
          }
        }
      },
      "WebhookCategory": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "UserManaged",
          "ServerManaged"
        ],
        "enum": [
          "UserManaged",
          "ServerManaged"
        ],
        "x-enumType": "WebhookCategory"
      }
    },
    "securityDefinitions": {
      "oauth2": {
        "type": "oauth2",
        "in": "header",
        "flow": "password",
        "tokenUrl": "https://s095155.mobicontrolcloud.com/mobicontrol/api/token"
      }
    }
  }